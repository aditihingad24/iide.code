-- MySQL dump 10.16  Distrib 10.1.43-MariaDB, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: qxmzjctqja
-- ------------------------------------------------------
-- Server version	10.1.43-MariaDB-1~stretch

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `class_user`
--

DROP TABLE IF EXISTS `class_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `class_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user` int(11) NOT NULL,
  `class` int(11) NOT NULL,
  `type` int(2) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=35 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `class_user`
--

LOCK TABLES `class_user` WRITE;
/*!40000 ALTER TABLE `class_user` DISABLE KEYS */;
INSERT INTO `class_user` VALUES (1,5,1,2),(2,6,1,3),(3,8,1,2),(4,9,1,2),(5,10,1,2),(6,11,1,3),(7,12,2,3),(8,13,2,2),(9,14,3,2),(10,15,3,2),(11,16,3,2),(12,17,3,2),(13,18,3,2),(14,19,3,2),(15,20,3,2),(16,21,3,2),(17,22,3,2),(18,23,3,2),(19,24,3,2),(20,25,3,2),(21,26,3,2),(22,27,3,2),(23,28,6,2),(24,29,6,2),(25,30,6,2),(26,31,6,2),(27,32,6,2),(28,33,6,2),(29,34,6,2),(30,35,6,2),(31,36,6,2),(32,37,6,2),(33,38,6,2),(34,39,6,1);
/*!40000 ALTER TABLE `class_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `classes`
--

DROP TABLE IF EXISTS `classes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `classes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(250) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `classes`
--

LOCK TABLES `classes` WRITE;
/*!40000 ALTER TABLE `classes` DISABLE KEYS */;
INSERT INTO `classes` VALUES (1,'Batch 2018-19'),(2,'Batch 2017-18'),(3,'Sept 2018'),(4,'SOC Feb\'19'),(5,'SOC Feb\'19'),(6,'Feb 2019');
/*!40000 ALTER TABLE `classes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `courses`
--

DROP TABLE IF EXISTS `courses`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `courses` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(150) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `courses`
--

LOCK TABLES `courses` WRITE;
/*!40000 ALTER TABLE `courses` DISABLE KEYS */;
INSERT INTO `courses` VALUES (1,'HTML5'),(2,'CSS3'),(3,'DESIGN'),(4,'BOOTSTRAP'),(5,'Javascript');
/*!40000 ALTER TABLE `courses` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `exercise_time`
--

DROP TABLE IF EXISTS `exercise_time`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `exercise_time` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user` int(11) NOT NULL,
  `exercise` int(11) NOT NULL,
  `time` time NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=52 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `exercise_time`
--

LOCK TABLES `exercise_time` WRITE;
/*!40000 ALTER TABLE `exercise_time` DISABLE KEYS */;
INSERT INTO `exercise_time` VALUES (33,5,1,'00:01:00'),(34,5,1,'00:00:07'),(35,5,1,'00:00:01'),(36,5,1,'00:00:10'),(37,1,1,'00:00:08'),(38,1,1,'00:00:01'),(39,1,1,'00:00:03'),(40,1,1,'00:00:11'),(41,1,1,'00:01:26'),(42,1,1,'00:02:04'),(43,1,1,'00:00:02'),(44,1,1,'00:00:01'),(45,1,1,'00:00:03'),(46,1,1,'00:00:02'),(47,1,1,'00:00:01'),(48,1,1,'00:00:02'),(49,1,1,'00:00:02'),(50,1,1,'00:00:15'),(51,1,1,'00:00:02');
/*!40000 ALTER TABLE `exercise_time` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `exercise_user`
--

DROP TABLE IF EXISTS `exercise_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `exercise_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `exercise` int(11) NOT NULL,
  `student` int(11) NOT NULL,
  `time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `correct` int(2) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2190 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `exercise_user`
--

LOCK TABLES `exercise_user` WRITE;
/*!40000 ALTER TABLE `exercise_user` DISABLE KEYS */;
INSERT INTO `exercise_user` VALUES (1,1,5,'2018-08-30 17:04:04',1),(2,2,5,'2018-08-30 17:06:59',1),(3,3,5,'2018-08-30 17:06:59',1),(4,4,5,'2018-08-30 17:07:08',0),(5,4,5,'2018-08-30 17:07:08',0),(6,4,5,'2018-08-31 23:45:54',1),(7,333,5,'2018-09-05 17:44:25',1),(12,13,5,'2018-09-19 17:14:21',1),(13,8,5,'2018-09-19 21:34:02',0),(14,8,5,'2018-09-20 15:41:40',0),(15,1,5,'2018-09-20 17:12:24',0),(40,1,5,'2018-09-24 00:56:41',1),(41,1,5,'2018-09-24 00:56:57',1),(42,1,5,'2018-09-24 01:07:21',1),(43,1,5,'2018-09-24 01:07:58',1),(44,1,5,'2018-09-24 01:10:05',1),(45,1,5,'2018-09-24 01:20:31',0),(46,1,5,'2018-09-24 01:21:53',1),(47,1,5,'2018-09-24 01:23:39',1),(48,1,5,'2018-09-24 01:31:40',0),(49,1,5,'2018-09-24 01:32:31',0),(50,1,5,'2018-09-24 01:32:48',0),(51,1,5,'2018-09-24 01:33:21',0),(52,1,5,'2018-09-24 01:40:05',0),(53,1,5,'2018-09-24 01:41:31',1),(54,1,5,'2018-09-24 01:41:41',0),(55,1,9,'2018-09-24 12:09:40',1),(56,1,9,'2018-09-24 12:51:52',1),(57,9,9,'2018-09-24 13:18:38',1),(58,54,9,'2018-09-24 13:19:26',0),(59,54,9,'2018-09-24 13:19:40',0),(60,54,9,'2018-09-24 13:19:56',1),(61,184,9,'2018-09-24 13:23:44',1),(62,1,5,'2018-09-24 13:25:11',1),(63,9,5,'2018-09-24 13:52:35',0),(64,1,13,'2018-09-24 14:33:00',1),(65,390,5,'2018-09-24 14:43:15',0),(66,390,5,'2018-09-24 14:43:36',0),(67,390,5,'2018-09-24 14:45:28',0),(68,390,5,'2018-09-24 14:45:57',0),(69,390,5,'2018-09-24 14:46:01',0),(70,390,5,'2018-09-24 14:47:57',1),(71,390,5,'2018-09-24 14:48:04',1),(72,1,5,'2018-09-24 16:56:21',0),(73,8,5,'2018-09-24 21:35:32',0),(74,220,5,'2018-09-25 00:49:36',0),(75,220,5,'2018-09-25 00:49:45',0),(76,220,5,'2018-09-25 00:50:09',0),(77,214,5,'2018-09-25 00:52:05',1),(78,219,5,'2018-09-25 00:52:28',0),(79,219,5,'2018-09-25 00:53:05',0),(80,219,5,'2018-09-25 00:53:15',0),(81,219,5,'2018-09-25 00:53:41',0),(82,219,5,'2018-09-25 00:55:45',0),(83,219,5,'2018-09-25 01:00:54',0),(84,219,5,'2018-09-25 01:07:36',0),(85,219,5,'2018-09-25 01:07:55',0),(86,219,5,'2018-09-25 01:10:42',0),(87,219,5,'2018-09-25 01:10:53',0),(88,219,5,'2018-09-25 01:11:09',0),(89,219,5,'2018-09-25 01:12:21',0),(90,219,5,'2018-09-25 01:13:38',0),(91,219,5,'2018-09-25 01:13:58',0),(92,6,5,'2018-09-25 14:38:06',0),(93,6,5,'2018-09-25 14:38:22',1),(94,6,5,'2018-09-25 14:39:04',0),(95,6,5,'2018-09-25 14:40:18',0),(96,6,5,'2018-09-25 14:40:28',0),(97,6,5,'2018-09-25 14:40:33',0),(98,6,5,'2018-09-25 14:41:08',0),(99,6,5,'2018-09-25 14:41:17',1),(100,7,5,'2018-09-25 14:41:54',0),(101,7,5,'2018-09-25 14:42:11',1),(102,7,5,'2018-09-25 14:42:41',1),(103,99,5,'2018-09-25 14:53:03',0),(104,99,5,'2018-09-25 14:53:18',0),(105,383,5,'2018-09-25 15:02:25',0),(106,383,5,'2018-09-25 15:02:35',0),(107,383,5,'2018-09-25 15:02:51',1),(108,384,5,'2018-09-25 15:06:27',0),(109,384,5,'2018-09-25 15:22:31',0),(110,384,5,'2018-09-25 16:21:49',0),(111,7,5,'2018-09-25 22:35:28',0),(112,7,5,'2018-09-25 22:35:52',1),(113,6,5,'2018-09-25 23:34:21',1),(114,7,5,'2018-09-25 23:34:28',0),(115,8,5,'2018-09-25 23:35:14',1),(116,9,5,'2018-09-25 23:36:24',1),(117,10,5,'2018-09-25 23:37:01',0),(118,10,5,'2018-09-25 23:37:28',1),(119,11,5,'2018-09-25 23:38:29',0),(120,11,5,'2018-09-25 23:39:20',0),(121,11,5,'2018-09-25 23:39:32',0),(122,11,5,'2018-09-25 23:39:38',0),(123,11,5,'2018-09-25 23:39:46',1),(124,12,5,'2018-09-25 23:40:20',1),(125,13,5,'2018-09-25 23:41:20',1),(126,14,5,'2018-09-25 23:42:37',1),(127,15,5,'2018-09-25 23:43:25',1),(128,1,5,'2018-09-26 06:31:45',0),(129,1,5,'2018-09-26 10:42:37',0),(130,1,9,'2018-09-26 12:01:45',0),(131,1,9,'2018-09-26 12:02:05',1),(132,1,22,'2018-09-26 14:27:03',1),(133,1,16,'2018-09-26 14:28:15',0),(134,2,22,'2018-09-26 14:29:14',1),(135,1,14,'2018-09-26 14:49:20',0),(136,1,14,'2018-09-26 14:49:37',0),(137,1,14,'2018-09-26 15:05:09',1),(138,1,9,'2018-09-26 15:05:33',0),(139,1,9,'2018-09-26 15:05:43',0),(140,1,16,'2018-09-26 15:05:48',1),(141,1,15,'2018-09-26 15:05:52',0),(142,1,15,'2018-09-26 15:06:04',1),(143,2,14,'2018-09-26 15:06:10',0),(144,1,27,'2018-09-26 15:06:21',1),(145,2,14,'2018-09-26 15:06:23',1),(146,2,16,'2018-09-26 15:06:47',1),(147,1,25,'2018-09-26 15:06:49',0),(148,1,23,'2018-09-26 15:07:08',1),(149,2,27,'2018-09-26 15:07:22',1),(150,2,15,'2018-09-26 15:07:28',1),(151,1,9,'2018-09-26 15:07:45',1),(152,1,25,'2018-09-26 15:08:19',0),(153,3,14,'2018-09-26 15:08:33',1),(154,2,23,'2018-09-26 15:08:46',1),(155,3,15,'2018-09-26 15:08:49',1),(156,1,25,'2018-09-26 15:08:50',1),(157,2,25,'2018-09-26 15:10:02',0),(158,1,24,'2018-09-26 15:10:08',1),(159,4,14,'2018-09-26 15:11:06',1),(160,3,27,'2018-09-26 15:11:09',1),(161,3,22,'2018-09-26 15:11:12',1),(162,2,24,'2018-09-26 15:11:45',1),(163,2,25,'2018-09-26 15:11:52',0),(164,2,24,'2018-09-26 15:11:57',1),(165,2,25,'2018-09-26 15:12:10',0),(166,4,22,'2018-09-26 15:12:10',1),(167,4,27,'2018-09-26 15:12:22',1),(168,2,25,'2018-09-26 15:12:27',1),(169,5,14,'2018-09-26 15:12:29',0),(170,5,22,'2018-09-26 15:12:33',0),(171,5,14,'2018-09-26 15:12:38',0),(172,5,14,'2018-09-26 15:12:47',0),(173,5,14,'2018-09-26 15:12:58',0),(174,5,14,'2018-09-26 15:13:11',0),(175,3,16,'2018-09-26 15:13:48',1),(176,5,27,'2018-09-26 15:13:48',1),(177,5,22,'2018-09-26 15:13:56',1),(178,5,14,'2018-09-26 15:14:14',1),(179,6,27,'2018-09-26 15:14:14',1),(180,3,24,'2018-09-26 15:14:17',1),(181,6,22,'2018-09-26 15:14:26',1),(182,6,14,'2018-09-26 15:14:33',1),(183,3,25,'2018-09-26 15:14:42',1),(184,4,16,'2018-09-26 15:14:53',1),(185,5,16,'2018-09-26 15:15:43',0),(186,5,16,'2018-09-26 15:16:16',1),(187,6,16,'2018-09-26 15:16:44',1),(188,3,23,'2018-09-26 15:16:52',1),(189,7,27,'2018-09-26 15:17:12',0),(190,7,14,'2018-09-26 15:17:12',0),(191,4,24,'2018-09-26 15:17:15',0),(192,7,27,'2018-09-26 15:17:36',1),(193,4,25,'2018-09-26 15:17:36',1),(194,4,24,'2018-09-26 15:17:38',0),(195,7,22,'2018-09-26 15:17:47',1),(196,7,14,'2018-09-26 15:17:48',0),(197,7,16,'2018-09-26 15:17:50',0),(198,7,14,'2018-09-26 15:18:07',0),(199,7,14,'2018-09-26 15:18:11',0),(200,7,16,'2018-09-26 15:18:41',0),(201,4,24,'2018-09-26 15:18:45',1),(202,7,14,'2018-09-26 15:19:12',1),(203,7,16,'2018-09-26 15:19:18',0),(204,7,16,'2018-09-26 15:19:44',1),(205,5,25,'2018-09-26 15:20:07',1),(206,6,25,'2018-09-26 15:20:37',1),(207,5,24,'2018-09-26 15:20:42',0),(208,8,27,'2018-09-26 15:20:55',1),(209,4,23,'2018-09-26 15:20:59',0),(210,8,16,'2018-09-26 15:21:01',0),(211,8,22,'2018-09-26 15:21:04',1),(212,5,24,'2018-09-26 15:21:13',0),(213,4,23,'2018-09-26 15:21:50',0),(214,5,24,'2018-09-26 15:21:56',0),(215,4,23,'2018-09-26 15:22:11',0),(216,8,16,'2018-09-26 15:22:28',0),(217,4,23,'2018-09-26 15:22:33',1),(218,5,24,'2018-09-26 15:22:44',0),(219,4,15,'2018-09-26 15:22:45',0),(220,4,15,'2018-09-26 15:23:02',0),(221,9,22,'2018-09-26 15:23:12',0),(222,4,15,'2018-09-26 15:23:25',0),(223,9,22,'2018-09-26 15:23:26',0),(224,5,24,'2018-09-26 15:23:28',0),(225,9,27,'2018-09-26 15:23:31',1),(226,5,24,'2018-09-26 15:23:37',0),(227,8,16,'2018-09-26 15:23:41',1),(228,4,15,'2018-09-26 15:23:50',0),(229,9,22,'2018-09-26 15:23:59',1),(230,5,23,'2018-09-26 15:24:04',0),(231,4,15,'2018-09-26 15:24:36',0),(232,7,25,'2018-09-26 15:24:48',1),(233,1,20,'2018-09-26 15:24:49',1),(234,4,15,'2018-09-26 15:24:56',0),(235,9,16,'2018-09-26 15:25:04',0),(236,4,15,'2018-09-26 15:25:12',0),(237,5,24,'2018-09-26 15:25:20',0),(238,5,23,'2018-09-26 15:25:26',0),(239,5,24,'2018-09-26 15:25:29',0),(240,4,15,'2018-09-26 15:25:38',0),(241,5,24,'2018-09-26 15:25:58',0),(242,5,23,'2018-09-26 15:25:58',0),(243,5,24,'2018-09-26 15:26:05',0),(244,5,23,'2018-09-26 15:26:08',0),(245,4,15,'2018-09-26 15:26:17',1),(246,9,16,'2018-09-26 15:26:53',0),(247,8,14,'2018-09-26 15:28:05',1),(248,9,16,'2018-09-26 15:28:20',0),(249,4,23,'2018-09-26 15:28:24',1),(250,5,24,'2018-09-26 15:28:49',1),(251,5,15,'2018-09-26 15:31:08',0),(252,9,16,'2018-09-26 15:31:23',0),(253,5,23,'2018-09-26 15:31:26',0),(254,5,23,'2018-09-26 15:31:41',0),(255,9,16,'2018-09-26 15:31:45',1),(256,2,20,'2018-09-26 15:31:45',1),(257,5,15,'2018-09-26 15:31:55',0),(258,5,23,'2018-09-26 15:31:57',0),(259,6,24,'2018-09-26 15:32:05',1),(260,1,18,'2018-09-26 15:32:15',1),(261,5,23,'2018-09-26 15:32:18',0),(262,5,15,'2018-09-26 15:32:27',1),(263,5,23,'2018-09-26 15:32:41',0),(264,2,18,'2018-09-26 15:32:59',1),(265,10,22,'2018-09-26 15:33:08',1),(266,9,14,'2018-09-26 15:33:11',0),(267,6,15,'2018-09-26 15:33:16',0),(268,8,25,'2018-09-26 15:33:23',1),(269,5,23,'2018-09-26 15:33:25',0),(270,10,27,'2018-09-26 15:33:26',1),(271,6,15,'2018-09-26 15:33:33',0),(272,5,23,'2018-09-26 15:33:38',0),(273,6,15,'2018-09-26 15:33:45',1),(274,3,18,'2018-09-26 15:34:25',1),(275,5,23,'2018-09-26 15:34:29',0),(276,8,25,'2018-09-26 15:35:00',1),(277,9,14,'2018-09-26 15:35:04',0),(278,7,15,'2018-09-26 15:35:13',0),(279,9,14,'2018-09-26 15:35:17',0),(280,4,18,'2018-09-26 15:35:28',1),(281,5,23,'2018-09-26 15:35:36',1),(282,9,14,'2018-09-26 15:35:53',0),(283,5,18,'2018-09-26 15:35:55',0),(284,9,14,'2018-09-26 15:36:05',1),(285,3,20,'2018-09-26 15:36:05',1),(286,6,23,'2018-09-26 15:36:07',1),(287,7,15,'2018-09-26 15:36:07',0),(288,7,24,'2018-09-26 15:36:18',0),(289,7,15,'2018-09-26 15:36:27',0),(290,7,15,'2018-09-26 15:36:39',0),(291,5,18,'2018-09-26 15:36:40',0),(292,7,24,'2018-09-26 15:36:44',0),(293,7,15,'2018-09-26 15:36:53',0),(294,7,15,'2018-09-26 15:36:58',1),(295,5,18,'2018-09-26 15:37:39',0),(296,5,18,'2018-09-26 15:37:46',1),(297,10,16,'2018-09-26 15:37:59',0),(298,8,15,'2018-09-26 15:38:27',0),(299,7,24,'2018-09-26 15:38:42',0),(300,6,18,'2018-09-26 15:38:43',1),(301,7,24,'2018-09-26 15:39:10',0),(302,10,16,'2018-09-26 15:39:18',0),(303,10,16,'2018-09-26 15:39:32',0),(304,7,23,'2018-09-26 15:39:34',1),(305,8,15,'2018-09-26 15:39:39',1),(306,7,24,'2018-09-26 15:39:50',0),(307,4,20,'2018-09-26 15:39:55',1),(308,10,16,'2018-09-26 15:40:16',0),(309,7,18,'2018-09-26 15:40:24',1),(310,7,24,'2018-09-26 15:40:38',1),(311,10,16,'2018-09-26 15:40:38',0),(312,9,25,'2018-09-26 15:41:02',0),(313,11,27,'2018-09-26 15:41:06',0),(314,11,27,'2018-09-26 15:41:24',0),(315,9,25,'2018-09-26 15:41:41',0),(316,9,15,'2018-09-26 15:41:49',0),(317,11,27,'2018-09-26 15:42:00',0),(318,8,18,'2018-09-26 15:42:21',1),(319,10,16,'2018-09-26 15:42:49',0),(320,5,20,'2018-09-26 15:42:56',0),(321,10,16,'2018-09-26 15:43:15',0),(322,9,15,'2018-09-26 15:43:17',0),(323,9,25,'2018-09-26 15:43:21',0),(324,10,16,'2018-09-26 15:43:27',1),(325,5,20,'2018-09-26 15:43:43',0),(326,10,16,'2018-09-26 15:44:07',1),(327,9,15,'2018-09-26 15:44:17',0),(328,9,25,'2018-09-26 15:44:24',1),(329,9,15,'2018-09-26 15:44:33',1),(330,9,25,'2018-09-26 15:44:45',1),(331,5,20,'2018-09-26 15:44:48',0),(332,9,18,'2018-09-26 15:44:54',0),(333,11,22,'2018-09-26 15:44:56',1),(334,5,20,'2018-09-26 15:45:06',0),(335,5,20,'2018-09-26 15:45:15',0),(336,11,27,'2018-09-26 15:45:38',0),(337,11,27,'2018-09-26 15:45:49',0),(338,11,27,'2018-09-26 15:46:16',0),(339,9,18,'2018-09-26 15:46:23',0),(340,9,18,'2018-09-26 15:46:27',0),(341,5,20,'2018-09-26 15:46:41',0),(342,9,18,'2018-09-26 15:46:56',0),(343,8,23,'2018-09-26 15:47:01',1),(344,9,18,'2018-09-26 15:47:07',0),(345,5,20,'2018-09-26 15:47:33',0),(346,12,22,'2018-09-26 15:47:41',1),(347,9,18,'2018-09-26 15:48:10',0),(348,5,20,'2018-09-26 15:48:11',1),(349,8,23,'2018-09-26 15:48:53',1),(350,13,22,'2018-09-26 15:49:31',1),(351,11,16,'2018-09-26 15:49:46',0),(352,6,20,'2018-09-26 15:50:00',1),(353,11,16,'2018-09-26 15:50:23',0),(354,11,16,'2018-09-26 15:50:49',0),(355,11,16,'2018-09-26 15:51:28',0),(356,11,16,'2018-09-26 15:51:45',0),(357,12,27,'2018-09-26 15:52:00',0),(358,10,9,'2018-09-26 15:52:00',0),(359,10,9,'2018-09-26 15:52:12',0),(360,11,27,'2018-09-26 15:52:15',0),(361,11,16,'2018-09-26 15:52:18',0),(362,10,9,'2018-09-26 15:52:24',0),(363,10,9,'2018-09-26 15:52:31',0),(364,9,23,'2018-09-26 15:52:36',1),(365,11,16,'2018-09-26 15:52:36',0),(366,10,9,'2018-09-26 15:52:38',0),(367,11,16,'2018-09-26 15:52:52',0),(368,14,22,'2018-09-26 15:53:11',1),(369,11,27,'2018-09-26 15:53:12',1),(370,9,18,'2018-09-26 15:53:38',0),(371,8,24,'2018-09-26 15:54:13',0),(372,12,27,'2018-09-26 15:54:22',1),(373,9,18,'2018-09-26 15:54:37',0),(374,8,24,'2018-09-26 15:54:44',0),(375,8,24,'2018-09-26 15:55:19',0),(376,9,18,'2018-09-26 15:55:21',0),(377,11,16,'2018-09-26 15:55:34',0),(378,15,22,'2018-09-26 15:55:35',1),(379,9,18,'2018-09-26 15:55:36',1),(380,10,25,'2018-09-26 15:55:41',1),(381,11,16,'2018-09-26 15:56:13',0),(382,8,24,'2018-09-26 15:56:53',1),(383,7,20,'2018-09-26 15:57:07',0),(384,11,16,'2018-09-26 15:57:25',0),(385,16,22,'2018-09-26 15:57:38',1),(386,7,20,'2018-09-26 15:57:42',1),(387,11,16,'2018-09-26 15:57:46',0),(388,13,27,'2018-09-26 15:58:08',1),(389,11,16,'2018-09-26 15:58:10',1),(390,12,16,'2018-09-26 15:58:57',0),(391,17,22,'2018-09-26 15:59:07',0),(392,17,22,'2018-09-26 15:59:40',1),(393,12,16,'2018-09-26 15:59:49',0),(394,10,15,'2018-09-26 16:00:00',0),(395,12,16,'2018-09-26 16:00:07',1),(396,10,15,'2018-09-26 16:00:38',0),(397,10,15,'2018-09-26 16:00:52',0),(398,11,25,'2018-09-26 16:00:56',1),(399,10,18,'2018-09-26 16:00:59',0),(400,13,27,'2018-09-26 16:01:13',1),(401,10,18,'2018-09-26 16:01:21',0),(402,10,15,'2018-09-26 16:01:21',0),(403,9,24,'2018-09-26 16:01:38',1),(404,10,18,'2018-09-26 16:01:57',0),(405,10,15,'2018-09-26 16:02:12',0),(406,13,16,'2018-09-26 16:02:21',1),(407,10,18,'2018-09-26 16:02:51',0),(408,12,25,'2018-09-26 16:03:17',1),(409,14,27,'2018-09-26 16:03:48',1),(410,10,15,'2018-09-26 16:03:55',0),(411,10,15,'2018-09-26 16:04:10',1),(412,14,16,'2018-09-26 16:04:28',0),(413,10,18,'2018-09-26 16:04:36',0),(414,8,20,'2018-09-26 16:04:41',1),(415,14,16,'2018-09-26 16:04:58',1),(416,10,18,'2018-09-26 16:05:11',1),(417,15,27,'2018-09-26 16:05:41',0),(418,15,16,'2018-09-26 16:06:58',0),(419,15,27,'2018-09-26 16:07:09',1),(420,9,20,'2018-09-26 16:07:12',0),(421,13,25,'2018-09-26 16:07:14',1),(422,15,16,'2018-09-26 16:07:37',0),(423,11,18,'2018-09-26 16:08:18',1),(424,16,27,'2018-09-26 16:08:20',1),(425,12,18,'2018-09-26 16:09:01',1),(426,9,20,'2018-09-26 16:09:25',0),(427,9,20,'2018-09-26 16:09:36',0),(428,14,25,'2018-09-26 16:09:40',0),(429,13,18,'2018-09-26 16:09:50',0),(430,11,15,'2018-09-26 16:09:51',0),(431,14,25,'2018-09-26 16:09:51',1),(432,11,15,'2018-09-26 16:10:01',0),(433,9,20,'2018-09-26 16:10:03',1),(434,15,16,'2018-09-26 16:10:17',0),(435,11,15,'2018-09-26 16:10:21',0),(436,15,25,'2018-09-26 16:10:33',0),(437,11,15,'2018-09-26 16:10:37',1),(438,15,25,'2018-09-26 16:11:17',0),(439,12,15,'2018-09-26 16:11:30',1),(440,13,18,'2018-09-26 16:11:32',1),(441,15,25,'2018-09-26 16:11:47',0),(442,15,25,'2018-09-26 16:12:19',0),(443,10,24,'2018-09-26 16:12:34',0),(444,10,24,'2018-09-26 16:12:50',0),(445,15,25,'2018-09-26 16:13:33',0),(446,14,18,'2018-09-26 16:13:34',0),(447,10,23,'2018-09-26 16:13:46',0),(448,15,25,'2018-09-26 16:13:46',0),(449,14,18,'2018-09-26 16:13:51',1),(450,10,23,'2018-09-26 16:14:25',1),(451,13,15,'2018-09-26 16:14:26',1),(452,15,16,'2018-09-26 16:15:22',0),(453,15,18,'2018-09-26 16:15:30',0),(454,15,25,'2018-09-26 16:15:38',0),(455,14,15,'2018-09-26 16:15:43',0),(456,15,18,'2018-09-26 16:15:43',1),(457,15,16,'2018-09-26 16:15:50',0),(458,15,25,'2018-09-26 16:15:50',1),(459,14,15,'2018-09-26 16:16:09',1),(460,15,16,'2018-09-26 16:16:24',0),(461,16,18,'2018-09-26 16:16:39',1),(462,15,16,'2018-09-26 16:16:47',0),(463,15,15,'2018-09-26 16:16:59',1),(464,10,20,'2018-09-26 16:17:10',0),(465,17,18,'2018-09-26 16:17:25',1),(466,16,25,'2018-09-26 16:17:40',1),(467,10,24,'2018-09-26 16:17:50',1),(468,15,16,'2018-09-26 16:18:57',0),(469,15,16,'2018-09-26 16:19:16',1),(470,16,15,'2018-09-26 16:19:45',1),(471,17,25,'2018-09-26 16:19:53',0),(472,10,20,'2018-09-26 16:20:20',0),(473,17,25,'2018-09-26 16:20:32',0),(474,17,15,'2018-09-26 16:20:54',0),(475,17,18,'2018-09-26 16:21:01',0),(476,17,15,'2018-09-26 16:21:03',0),(477,17,25,'2018-09-26 16:21:12',0),(478,17,18,'2018-09-26 16:21:29',1),(479,17,15,'2018-09-26 16:21:45',0),(480,17,15,'2018-09-26 16:22:01',1),(481,11,23,'2018-09-26 16:22:07',1),(482,10,20,'2018-09-26 16:23:02',0),(483,12,23,'2018-09-26 16:23:19',1),(484,11,24,'2018-09-26 16:24:53',1),(485,13,23,'2018-09-26 16:27:44',1),(486,10,20,'2018-09-26 16:29:32',1),(487,14,23,'2018-09-26 16:29:39',1),(488,15,23,'2018-09-26 16:31:06',1),(489,16,23,'2018-09-26 16:32:49',1),(490,10,14,'2018-09-28 05:05:39',0),(491,10,14,'2018-09-28 05:05:44',0),(492,11,20,'2018-09-28 12:21:56',0),(493,11,20,'2018-09-28 12:23:19',0),(494,11,20,'2018-09-28 12:23:43',1),(495,12,20,'2018-09-28 12:26:17',1),(496,13,20,'2018-09-28 12:27:51',1),(497,13,20,'2018-09-28 12:28:29',1),(498,14,20,'2018-09-28 12:31:05',1),(499,15,20,'2018-09-28 12:34:34',1),(500,12,24,'2018-09-28 13:40:07',1),(501,13,24,'2018-09-28 13:44:52',0),(502,13,24,'2018-09-28 13:46:28',1),(503,14,24,'2018-09-28 14:03:29',0),(504,14,24,'2018-09-28 14:04:19',1),(505,15,24,'2018-09-28 14:05:44',0),(506,15,24,'2018-09-28 14:07:36',0),(507,15,24,'2018-09-28 14:10:30',0),(508,15,24,'2018-09-28 14:10:42',0),(509,15,24,'2018-09-28 14:11:42',0),(510,15,24,'2018-09-28 14:11:51',0),(511,15,24,'2018-09-28 14:12:40',0),(512,15,24,'2018-09-28 14:13:29',1),(513,17,27,'2018-09-28 14:14:55',1),(514,18,27,'2018-09-28 15:28:20',1),(515,19,27,'2018-09-28 15:29:42',1),(516,20,27,'2018-09-28 15:30:55',1),(517,1,21,'2018-09-28 16:29:30',0),(518,1,21,'2018-09-28 16:29:55',0),(519,1,21,'2018-09-28 16:30:34',1),(520,2,21,'2018-09-28 16:31:01',1),(521,3,21,'2018-09-28 16:32:39',1),(522,4,21,'2018-09-28 16:33:39',1),(523,16,20,'2018-09-28 16:33:39',1),(524,5,21,'2018-09-28 16:34:25',0),(525,5,21,'2018-09-28 16:35:04',0),(526,17,20,'2018-09-28 16:35:20',1),(527,5,21,'2018-09-28 16:35:35',0),(528,5,21,'2018-09-28 16:35:57',1),(529,6,21,'2018-09-28 16:36:40',1),(530,18,20,'2018-09-28 16:41:10',1),(531,10,14,'2018-09-29 05:07:45',0),(532,10,14,'2018-09-29 05:08:47',0),(533,10,14,'2018-09-29 05:08:50',0),(534,10,14,'2018-09-29 05:10:09',0),(535,10,14,'2018-09-29 05:10:09',0),(536,12,14,'2018-09-29 05:17:54',1),(537,13,14,'2018-09-29 05:22:05',1),(538,14,14,'2018-09-29 05:24:42',0),(539,14,14,'2018-09-29 05:25:40',1),(540,15,14,'2018-09-29 05:27:03',0),(541,15,14,'2018-09-29 05:27:20',1),(542,16,14,'2018-09-29 05:28:26',1),(543,17,14,'2018-09-29 05:29:58',1),(544,18,14,'2018-09-29 05:34:46',0),(545,18,14,'2018-09-29 05:35:10',1),(546,19,14,'2018-09-29 05:36:57',1),(547,20,14,'2018-09-29 05:38:27',1),(548,15,5,'2018-09-30 19:34:01',0),(549,15,5,'2018-09-30 19:34:24',0),(550,15,5,'2018-09-30 19:34:39',0),(551,15,5,'2018-09-30 19:34:52',0),(552,16,16,'2018-10-01 07:39:50',1),(553,16,16,'2018-10-01 07:39:55',1),(554,17,16,'2018-10-01 07:41:12',0),(555,17,16,'2018-10-01 07:41:47',1),(556,2,23,'2018-10-01 10:23:10',0),(557,2,23,'2018-10-01 10:23:48',1),(558,2,23,'2018-10-01 10:23:52',1),(559,3,23,'2018-10-01 10:24:50',1),(560,4,23,'2018-10-01 10:33:58',0),(561,4,23,'2018-10-01 10:35:28',1),(562,5,23,'2018-10-01 10:37:36',0),(563,5,23,'2018-10-01 10:37:59',0),(564,5,23,'2018-10-01 10:38:29',0),(565,5,23,'2018-10-01 10:39:54',0),(566,5,23,'2018-10-01 10:40:34',0),(567,5,23,'2018-10-01 10:40:59',1),(568,6,23,'2018-10-01 10:41:33',1),(569,19,20,'2018-10-01 10:44:11',0),(570,19,20,'2018-10-01 10:44:33',1),(571,7,23,'2018-10-01 10:46:40',0),(572,20,20,'2018-10-01 10:46:55',1),(573,7,23,'2018-10-01 10:47:14',1),(574,21,20,'2018-10-01 10:53:00',0),(575,21,20,'2018-10-01 10:53:31',1),(576,22,20,'2018-10-01 10:57:58',1),(577,8,23,'2018-10-01 11:01:19',1),(578,9,23,'2018-10-01 11:07:36',1),(579,10,23,'2018-10-01 11:12:03',1),(580,11,23,'2018-10-01 11:28:56',0),(581,11,23,'2018-10-01 11:29:28',0),(582,11,23,'2018-10-01 11:29:47',0),(583,11,23,'2018-10-01 11:30:30',0),(584,11,23,'2018-10-01 11:32:19',0),(585,11,23,'2018-10-01 11:34:08',0),(586,11,23,'2018-10-01 11:34:25',1),(587,12,23,'2018-10-01 11:35:03',1),(588,13,23,'2018-10-01 11:36:31',1),(589,14,23,'2018-10-01 11:37:54',1),(590,15,23,'2018-10-01 11:40:15',0),(591,16,23,'2018-10-01 11:41:53',1),(592,17,23,'2018-10-01 11:43:42',1),(593,18,23,'2018-10-01 11:45:22',0),(594,18,23,'2018-10-01 11:46:24',1),(595,19,23,'2018-10-01 11:48:12',1),(596,20,23,'2018-10-01 11:49:25',1),(597,21,23,'2018-10-01 11:55:27',0),(598,21,23,'2018-10-01 11:56:04',0),(599,21,23,'2018-10-01 11:56:53',1),(600,22,23,'2018-10-01 12:04:03',1),(601,23,23,'2018-10-01 12:05:38',1),(602,24,23,'2018-10-01 12:10:51',1),(603,25,23,'2018-10-01 12:12:52',0),(604,25,23,'2018-10-01 12:13:48',0),(605,25,23,'2018-10-01 12:14:28',0),(606,25,23,'2018-10-01 12:14:53',0),(607,25,23,'2018-10-01 12:16:08',0),(608,25,23,'2018-10-01 12:16:28',1),(609,26,23,'2018-10-01 12:18:21',1),(610,7,5,'2018-10-01 12:45:22',0),(611,7,21,'2018-10-01 14:14:20',1),(612,8,21,'2018-10-01 14:15:47',1),(613,9,21,'2018-10-01 14:21:40',1),(614,10,21,'2018-10-01 14:22:30',0),(615,10,21,'2018-10-01 14:22:46',0),(616,10,21,'2018-10-01 14:23:24',1),(617,10,21,'2018-10-01 14:24:10',1),(618,11,21,'2018-10-01 14:31:00',1),(619,12,21,'2018-10-01 14:31:39',1),(620,13,21,'2018-10-01 14:34:23',1),(621,18,22,'2018-10-01 14:49:58',1),(622,19,22,'2018-10-01 14:52:58',0),(623,19,22,'2018-10-01 14:53:19',1),(624,18,16,'2018-10-01 14:54:43',0),(625,18,16,'2018-10-01 14:54:47',0),(626,18,16,'2018-10-01 14:55:14',0),(627,20,22,'2018-10-01 14:55:27',1),(628,18,16,'2018-10-01 14:55:46',1),(629,19,16,'2018-10-01 14:56:27',0),(630,19,16,'2018-10-01 14:56:45',1),(631,14,21,'2018-10-01 14:57:11',1),(632,20,16,'2018-10-01 14:58:41',1),(633,21,22,'2018-10-01 15:00:40',1),(634,15,21,'2018-10-01 15:01:15',0),(635,15,21,'2018-10-01 15:01:35',1),(636,21,16,'2018-10-01 15:02:00',0),(637,21,16,'2018-10-01 15:04:50',0),(638,21,16,'2018-10-01 15:06:10',1),(639,16,21,'2018-10-01 15:07:29',1),(640,22,22,'2018-10-01 15:07:51',1),(641,17,21,'2018-10-01 15:08:37',1),(642,23,22,'2018-10-01 15:10:02',1),(643,18,21,'2018-10-01 15:10:46',1),(644,19,21,'2018-10-01 15:11:33',1),(645,20,21,'2018-10-01 15:12:34',0),(646,20,21,'2018-10-01 15:13:25',1),(647,24,22,'2018-10-01 15:15:18',1),(648,22,16,'2018-10-01 15:18:09',1),(649,25,22,'2018-10-01 15:18:22',0),(650,25,22,'2018-10-01 15:19:02',0),(651,25,22,'2018-10-01 15:19:42',0),(652,25,22,'2018-10-01 15:20:23',0),(653,23,16,'2018-10-01 15:20:36',1),(654,21,21,'2018-10-01 15:21:34',0),(655,21,21,'2018-10-01 15:21:53',1),(656,22,21,'2018-10-01 15:24:59',1),(657,23,21,'2018-10-01 15:27:59',0),(658,23,21,'2018-10-01 15:28:30',1),(659,24,21,'2018-10-01 15:29:29',1),(660,25,21,'2018-10-01 15:35:27',0),(661,25,21,'2018-10-01 15:36:32',1),(662,26,21,'2018-10-01 15:37:42',0),(663,26,21,'2018-10-01 15:38:11',1),(664,27,21,'2018-10-01 15:38:54',0),(665,27,21,'2018-10-01 15:39:13',0),(666,25,22,'2018-10-01 15:39:31',0),(667,25,22,'2018-10-01 15:39:59',1),(668,25,22,'2018-10-01 15:40:07',1),(669,27,21,'2018-10-01 15:40:48',0),(670,26,22,'2018-10-01 15:42:25',1),(671,10,23,'2018-10-01 15:42:28',0),(672,27,21,'2018-10-01 15:42:28',0),(673,24,16,'2018-10-01 15:43:05',1),(674,25,16,'2018-10-01 15:43:29',0),(675,27,21,'2018-10-01 15:44:00',0),(676,25,16,'2018-10-01 15:44:43',0),(677,25,16,'2018-10-01 15:46:12',1),(678,26,16,'2018-10-01 15:47:17',1),(679,26,16,'2018-10-01 15:47:20',1),(680,27,16,'2018-10-01 15:48:06',0),(681,27,21,'2018-10-01 15:48:16',0),(682,27,16,'2018-10-01 15:48:29',0),(683,27,16,'2018-10-01 15:49:25',0),(684,27,21,'2018-10-01 15:49:57',0),(685,16,24,'2018-10-01 15:50:05',1),(686,27,22,'2018-10-01 15:50:31',0),(687,27,21,'2018-10-01 15:51:16',0),(688,27,21,'2018-10-01 15:51:45',0),(689,17,24,'2018-10-01 15:51:55',0),(690,17,24,'2018-10-01 15:52:27',0),(691,27,21,'2018-10-01 15:53:12',0),(692,17,24,'2018-10-01 15:55:19',0),(693,27,21,'2018-10-01 15:55:58',0),(694,27,21,'2018-10-01 15:56:06',0),(695,27,21,'2018-10-01 15:56:17',0),(696,17,24,'2018-10-01 15:56:36',0),(697,27,21,'2018-10-01 15:56:41',0),(698,17,24,'2018-10-01 15:57:09',0),(699,17,24,'2018-10-01 15:57:36',0),(700,27,21,'2018-10-01 15:57:55',1),(701,28,21,'2018-10-01 15:59:09',0),(702,28,21,'2018-10-01 16:00:47',0),(703,28,21,'2018-10-01 16:01:18',0),(704,28,21,'2018-10-01 16:02:19',0),(705,28,21,'2018-10-01 16:09:50',0),(706,28,21,'2018-10-01 16:10:17',0),(707,28,21,'2018-10-01 16:10:47',0),(708,28,21,'2018-10-01 16:10:52',0),(709,28,21,'2018-10-01 16:11:07',0),(710,28,21,'2018-10-01 16:11:19',0),(711,28,21,'2018-10-01 16:11:49',0),(712,28,21,'2018-10-01 16:12:24',0),(713,28,21,'2018-10-01 16:12:49',0),(714,28,21,'2018-10-01 16:13:19',0),(715,28,21,'2018-10-01 16:13:35',0),(716,17,24,'2018-10-01 16:13:52',0),(717,23,20,'2018-10-01 16:14:26',1),(718,17,24,'2018-10-01 16:14:43',0),(719,24,20,'2018-10-01 16:17:29',1),(720,25,20,'2018-10-01 16:19:54',0),(721,25,20,'2018-10-01 16:20:54',1),(722,28,21,'2018-10-01 16:21:59',0),(723,28,21,'2018-10-01 16:22:12',0),(724,28,21,'2018-10-01 16:23:36',0),(725,26,20,'2018-10-01 16:24:06',0),(726,28,21,'2018-10-01 16:24:07',0),(727,26,20,'2018-10-01 16:24:17',0),(728,28,21,'2018-10-01 16:24:53',0),(729,26,20,'2018-10-01 16:25:04',1),(730,28,21,'2018-10-01 16:25:26',0),(731,28,21,'2018-10-01 16:25:35',0),(732,28,21,'2018-10-01 16:26:06',0),(733,28,21,'2018-10-01 16:26:20',0),(734,28,21,'2018-10-01 16:27:31',0),(735,28,21,'2018-10-01 16:27:45',0),(736,27,16,'2018-10-01 16:34:32',0),(737,29,21,'2018-10-01 16:34:48',0),(738,29,21,'2018-10-01 16:34:58',0),(739,17,24,'2018-10-01 16:35:33',0),(740,17,24,'2018-10-01 16:36:02',0),(741,17,24,'2018-10-01 16:36:15',0),(742,17,24,'2018-10-01 16:36:56',0),(743,29,21,'2018-10-01 16:37:33',0),(744,17,24,'2018-10-01 16:37:42',0),(745,29,21,'2018-10-01 16:38:24',0),(746,17,24,'2018-10-01 16:38:47',0),(747,27,16,'2018-10-03 14:39:34',0),(748,27,16,'2018-10-03 14:58:43',0),(749,27,16,'2018-10-03 15:06:50',0),(750,28,21,'2018-10-03 15:14:43',0),(751,30,21,'2018-10-03 15:17:07',0),(752,30,21,'2018-10-03 15:17:42',0),(753,30,21,'2018-10-03 15:18:14',0),(754,30,21,'2018-10-03 15:19:03',0),(755,27,23,'2018-10-10 11:36:07',0),(756,27,23,'2018-10-10 11:36:22',0),(757,27,23,'2018-10-10 11:36:31',0),(758,27,23,'2018-10-10 11:36:58',0),(759,27,23,'2018-10-10 11:37:09',0),(760,28,23,'2018-10-10 11:46:59',0),(761,28,23,'2018-10-10 11:47:27',0),(762,28,23,'2018-10-10 11:47:39',0),(763,27,22,'2018-10-10 14:10:11',0),(764,27,22,'2018-10-10 14:10:33',0),(765,28,22,'2018-10-10 14:12:47',0),(766,28,22,'2018-10-10 14:14:20',0),(767,28,22,'2018-10-10 14:14:37',0),(768,28,22,'2018-10-10 14:14:38',0),(769,27,5,'2018-10-12 11:32:25',0),(770,27,5,'2018-10-12 11:32:36',1),(771,28,5,'2018-10-12 11:33:28',0),(772,28,5,'2018-10-12 11:33:41',0),(773,28,5,'2018-10-12 11:34:10',0),(774,28,5,'2018-10-12 11:36:14',0),(775,29,5,'2018-10-12 11:37:03',0),(776,29,5,'2018-10-12 11:37:15',0),(777,29,5,'2018-10-12 11:37:35',0),(778,29,5,'2018-10-12 11:37:37',0),(779,28,5,'2018-10-15 12:18:27',0),(780,28,5,'2018-10-15 12:18:38',0),(781,28,5,'2018-10-15 12:19:11',0),(782,28,5,'2018-10-15 12:19:20',1),(783,29,5,'2018-10-15 12:20:04',0),(784,29,5,'2018-10-15 12:20:12',0),(785,29,5,'2018-10-15 12:20:21',0),(786,29,5,'2018-10-15 12:20:30',0),(787,29,5,'2018-10-15 12:21:30',0),(788,29,5,'2018-10-15 12:22:29',0),(789,29,5,'2018-10-15 12:24:05',0),(790,29,5,'2018-10-15 12:24:11',0),(791,30,5,'2018-10-15 12:24:38',0),(792,30,5,'2018-10-15 12:24:40',0),(793,30,5,'2018-10-15 12:28:29',0),(794,30,5,'2018-10-15 12:28:51',0),(795,29,5,'2018-10-15 12:29:55',0),(796,29,5,'2018-10-15 12:30:22',0),(797,29,5,'2018-10-15 12:31:47',1),(798,30,5,'2018-10-15 12:32:26',1),(799,31,5,'2018-10-15 12:32:55',1),(800,32,5,'2018-10-15 12:33:28',1),(801,33,5,'2018-10-15 12:34:08',1),(802,34,5,'2018-10-15 12:49:39',0),(803,34,5,'2018-10-15 12:50:10',1),(804,34,5,'2018-10-15 12:50:11',1),(805,35,5,'2018-10-15 12:51:56',1),(806,36,5,'2018-10-15 12:53:06',0),(807,36,5,'2018-10-15 12:53:19',0),(808,36,5,'2018-10-15 12:53:57',0),(809,36,5,'2018-10-15 12:54:13',0),(810,36,5,'2018-10-15 12:57:34',0),(811,36,5,'2018-10-15 12:58:27',0),(812,36,5,'2018-10-15 12:59:07',0),(813,36,5,'2018-10-15 13:01:31',0),(814,36,5,'2018-10-15 13:01:54',0),(815,36,5,'2018-10-15 13:02:05',0),(816,37,5,'2018-10-15 13:03:37',0),(817,37,5,'2018-10-15 13:03:49',0),(818,37,5,'2018-10-15 13:04:32',1),(819,37,5,'2018-10-15 13:04:54',0),(820,38,5,'2018-10-15 13:07:17',0),(821,38,5,'2018-10-15 13:07:52',1),(822,39,5,'2018-10-15 13:09:04',1),(823,40,5,'2018-10-15 13:09:33',1),(824,41,5,'2018-10-15 13:10:23',1),(825,28,5,'2018-10-15 13:16:49',0),(826,28,5,'2018-10-15 13:17:09',0),(827,28,5,'2018-10-15 13:19:16',0),(828,28,5,'2018-10-15 13:19:19',0),(829,28,5,'2018-10-15 13:20:01',1),(830,29,5,'2018-10-15 13:22:12',0),(831,29,5,'2018-10-15 13:24:59',0),(832,29,5,'2018-10-15 13:25:03',0),(833,29,5,'2018-10-15 13:27:20',0),(834,29,5,'2018-10-15 13:28:20',1),(835,30,5,'2018-10-15 13:28:45',0),(836,30,5,'2018-10-15 13:29:15',1),(837,31,5,'2018-10-15 13:31:10',0),(838,31,5,'2018-10-15 13:31:10',0),(839,31,5,'2018-10-15 13:31:38',1),(840,31,5,'2018-10-15 13:31:46',1),(841,27,20,'2018-10-15 16:17:55',0),(842,27,20,'2018-10-15 16:18:39',0),(843,27,27,'2018-10-15 16:18:41',0),(844,27,27,'2018-10-15 16:18:57',0),(845,27,27,'2018-10-15 16:19:03',0),(846,27,27,'2018-10-15 16:19:07',0),(847,27,23,'2018-10-15 16:19:55',0),(848,27,23,'2018-10-15 16:20:09',1),(849,27,27,'2018-10-15 16:20:15',1),(850,27,24,'2018-10-15 16:22:02',0),(851,27,22,'2018-10-15 16:22:09',1),(852,27,16,'2018-10-15 16:22:21',1),(853,28,23,'2018-10-15 16:22:40',0),(854,28,23,'2018-10-15 16:23:03',0),(855,28,16,'2018-10-15 16:23:20',0),(856,27,20,'2018-10-15 16:23:28',0),(857,28,16,'2018-10-15 16:23:35',0),(858,27,20,'2018-10-15 16:23:39',0),(859,28,16,'2018-10-15 16:23:48',0),(860,28,23,'2018-10-15 16:23:54',1),(861,27,20,'2018-10-15 16:24:00',0),(862,28,16,'2018-10-15 16:24:07',0),(863,28,22,'2018-10-15 16:24:28',1),(864,28,16,'2018-10-15 16:24:30',1),(865,27,20,'2018-10-15 16:24:45',0),(866,27,20,'2018-10-15 16:25:10',1),(867,27,24,'2018-10-15 16:25:20',0),(868,29,22,'2018-10-15 16:26:35',1),(869,27,24,'2018-10-15 16:26:42',1),(870,30,22,'2018-10-15 16:27:28',0),(871,28,20,'2018-10-15 16:27:31',0),(872,30,22,'2018-10-15 16:27:38',0),(873,28,24,'2018-10-15 16:28:09',0),(874,28,20,'2018-10-15 16:28:13',0),(875,30,22,'2018-10-15 16:28:22',0),(876,28,20,'2018-10-15 16:28:37',1),(877,30,22,'2018-10-15 16:28:59',0),(878,30,22,'2018-10-15 16:29:29',0),(879,30,22,'2018-10-15 16:30:07',1),(880,28,24,'2018-10-15 16:31:29',0),(881,31,22,'2018-10-15 16:32:31',1),(882,29,16,'2018-10-15 16:35:20',0),(883,29,16,'2018-10-15 16:35:36',0),(884,29,16,'2018-10-15 16:35:47',0),(885,29,16,'2018-10-15 16:36:44',0),(886,29,16,'2018-10-15 16:38:15',0),(887,28,24,'2018-10-15 16:39:55',1),(888,29,16,'2018-10-15 16:40:16',1),(889,30,16,'2018-10-15 16:40:57',0),(890,30,16,'2018-10-15 16:41:14',0),(891,30,16,'2018-10-15 16:41:41',0),(892,30,16,'2018-10-15 16:42:30',0),(893,30,16,'2018-10-15 16:42:52',0),(894,29,20,'2018-10-15 16:43:03',1),(895,30,16,'2018-10-15 16:43:41',0),(896,30,16,'2018-10-15 16:43:53',0),(897,30,20,'2018-10-15 16:44:06',0),(898,30,20,'2018-10-15 16:44:36',0),(899,30,16,'2018-10-15 16:44:38',0),(900,30,16,'2018-10-15 16:44:56',0),(901,30,16,'2018-10-15 16:45:16',0),(902,30,20,'2018-10-15 16:45:19',1),(903,30,16,'2018-10-15 16:45:29',0),(904,30,16,'2018-10-15 16:45:53',0),(905,30,16,'2018-10-15 16:46:25',0),(906,30,16,'2018-10-15 16:46:54',1),(907,29,23,'2018-10-17 12:54:49',1),(908,42,5,'2018-10-17 12:54:51',1),(909,43,5,'2018-10-17 12:55:10',1),(910,30,23,'2018-10-17 12:55:27',0),(911,30,23,'2018-10-17 12:55:51',1),(912,31,23,'2018-10-17 12:58:52',0),(913,31,23,'2018-10-17 13:01:02',0),(914,44,5,'2018-10-17 13:02:00',1),(915,31,23,'2018-10-17 13:02:12',0),(916,31,23,'2018-10-17 13:02:58',0),(917,45,5,'2018-10-17 13:03:06',1),(918,45,5,'2018-10-17 13:03:35',1),(919,46,5,'2018-10-17 13:05:36',1),(920,31,23,'2018-10-17 13:06:29',0),(921,47,5,'2018-10-17 13:06:56',0),(922,31,23,'2018-10-17 13:07:25',0),(923,47,5,'2018-10-17 13:08:05',1),(924,31,23,'2018-10-17 13:09:34',0),(925,31,23,'2018-10-17 13:10:36',1),(926,32,23,'2018-10-17 13:11:55',1),(927,33,23,'2018-10-17 13:15:56',1),(928,34,23,'2018-10-17 13:20:22',0),(929,34,23,'2018-10-17 13:21:26',1),(930,35,23,'2018-10-17 13:24:04',0),(931,35,23,'2018-10-17 13:25:02',0),(932,34,23,'2018-10-17 13:26:57',0),(933,35,23,'2018-10-17 13:29:03',1),(934,36,23,'2018-10-17 13:33:19',0),(935,36,23,'2018-10-17 13:34:47',0),(936,36,23,'2018-10-17 13:34:59',0),(937,36,23,'2018-10-17 13:35:09',0),(938,36,23,'2018-10-17 13:37:01',0),(939,36,23,'2018-10-17 13:37:44',0),(940,36,23,'2018-10-17 13:38:36',0),(941,37,23,'2018-10-17 13:42:02',0),(942,37,23,'2018-10-17 13:42:39',0),(943,37,23,'2018-10-17 13:43:19',1),(944,38,23,'2018-10-17 13:43:55',0),(945,38,23,'2018-10-17 13:44:15',1),(946,31,16,'2018-10-17 16:08:36',1),(947,32,16,'2018-10-17 16:10:04',1),(948,31,20,'2018-10-17 16:10:55',0),(949,33,16,'2018-10-17 16:11:31',0),(950,39,23,'2018-10-17 16:11:47',1),(951,33,16,'2018-10-17 16:11:48',0),(952,33,16,'2018-10-17 16:12:57',0),(953,33,16,'2018-10-17 16:13:15',0),(954,32,22,'2018-10-17 16:13:35',1),(955,31,20,'2018-10-17 16:13:40',0),(956,31,20,'2018-10-17 16:13:44',0),(957,33,16,'2018-10-17 16:13:47',0),(958,29,24,'2018-10-17 16:14:55',0),(959,31,20,'2018-10-17 16:14:57',1),(960,29,24,'2018-10-17 16:15:12',1),(961,41,23,'2018-10-17 16:15:34',1),(962,33,22,'2018-10-17 16:15:48',1),(963,30,24,'2018-10-17 16:16:04',0),(964,30,24,'2018-10-17 16:16:20',0),(965,30,24,'2018-10-17 16:16:42',0),(966,33,16,'2018-10-17 16:17:20',0),(967,30,24,'2018-10-17 16:17:44',0),(968,32,20,'2018-10-17 16:18:01',1),(969,33,16,'2018-10-17 16:18:32',1),(970,30,24,'2018-10-17 16:19:01',0),(971,42,23,'2018-10-17 16:19:14',1),(972,34,16,'2018-10-17 16:19:29',0),(973,30,24,'2018-10-17 16:19:31',0),(974,30,24,'2018-10-17 16:19:58',0),(975,33,20,'2018-10-17 16:20:28',0),(976,43,23,'2018-10-17 16:20:37',1),(977,34,16,'2018-10-17 16:20:49',0),(978,33,20,'2018-10-17 16:20:53',0),(979,33,20,'2018-10-17 16:21:10',0),(980,34,22,'2018-10-17 16:21:17',1),(981,33,20,'2018-10-17 16:21:23',0),(982,33,20,'2018-10-17 16:21:55',0),(983,33,20,'2018-10-17 16:22:22',0),(984,31,24,'2018-10-17 16:22:28',0),(985,34,16,'2018-10-17 16:22:46',1),(986,33,20,'2018-10-17 16:22:49',0),(987,30,24,'2018-10-17 16:23:13',0),(988,35,16,'2018-10-17 16:23:32',0),(989,33,20,'2018-10-17 16:23:33',0),(990,33,20,'2018-10-17 16:24:00',0),(991,30,24,'2018-10-17 16:24:05',0),(992,35,16,'2018-10-17 16:24:23',0),(993,30,24,'2018-10-17 16:24:32',0),(994,35,22,'2018-10-17 16:24:38',0),(995,33,20,'2018-10-17 16:24:40',0),(996,33,20,'2018-10-17 16:25:00',1),(997,40,23,'2018-10-17 16:25:10',0),(998,30,24,'2018-10-17 16:25:23',0),(999,35,22,'2018-10-17 16:25:32',1),(1000,30,24,'2018-10-17 16:25:43',1),(1001,35,16,'2018-10-17 16:25:47',1),(1002,34,20,'2018-10-17 16:26:26',0),(1003,34,20,'2018-10-17 16:27:16',0),(1004,30,24,'2018-10-17 16:27:23',1),(1005,36,16,'2018-10-17 16:27:41',0),(1006,36,16,'2018-10-17 16:27:55',0),(1007,36,16,'2018-10-17 16:28:14',0),(1008,36,16,'2018-10-17 16:28:33',0),(1009,36,23,'2018-10-17 16:28:51',0),(1010,36,16,'2018-10-17 16:28:56',0),(1011,34,20,'2018-10-17 16:29:12',0),(1012,36,22,'2018-10-17 16:29:26',0),(1013,36,22,'2018-10-17 16:29:26',0),(1014,34,20,'2018-10-17 16:29:33',0),(1015,40,23,'2018-10-17 16:29:57',1),(1016,36,22,'2018-10-17 16:30:14',0),(1017,37,16,'2018-10-17 16:30:27',0),(1018,31,24,'2018-10-17 16:30:50',0),(1019,34,20,'2018-10-17 16:30:51',0),(1020,37,16,'2018-10-17 16:30:55',0),(1021,36,22,'2018-10-17 16:31:09',0),(1022,36,22,'2018-10-17 16:31:23',0),(1023,44,23,'2018-10-17 16:31:29',0),(1024,36,22,'2018-10-17 16:31:43',0),(1025,36,22,'2018-10-17 16:31:55',0),(1026,36,22,'2018-10-17 16:32:03',0),(1027,44,23,'2018-10-17 16:32:07',1),(1028,34,20,'2018-10-17 16:32:25',0),(1029,37,16,'2018-10-17 16:32:28',1),(1030,31,24,'2018-10-17 16:32:46',0),(1031,38,16,'2018-10-17 16:32:53',0),(1032,34,20,'2018-10-17 16:33:12',0),(1033,31,24,'2018-10-17 16:33:25',0),(1034,34,20,'2018-10-17 16:33:30',0),(1035,38,16,'2018-10-17 16:33:34',1),(1036,31,24,'2018-10-17 16:33:44',0),(1037,37,22,'2018-10-17 16:33:59',0),(1038,37,22,'2018-10-17 16:34:00',0),(1039,31,24,'2018-10-17 16:34:11',0),(1040,37,22,'2018-10-17 16:34:28',0),(1041,37,22,'2018-10-17 16:34:34',0),(1042,31,24,'2018-10-17 16:34:43',1),(1043,45,23,'2018-10-17 16:35:08',1),(1044,37,22,'2018-10-17 16:35:15',1),(1045,34,20,'2018-10-17 16:35:43',0),(1046,38,22,'2018-10-17 16:35:58',0),(1047,38,22,'2018-10-17 16:36:45',1),(1048,34,20,'2018-10-17 16:36:48',0),(1049,32,24,'2018-10-17 16:37:38',1),(1050,34,20,'2018-10-17 16:37:58',0),(1051,34,20,'2018-10-17 16:38:45',0),(1052,39,22,'2018-10-17 16:39:27',0),(1053,34,20,'2018-10-17 16:39:33',0),(1054,39,22,'2018-10-17 16:39:47',1),(1055,40,22,'2018-10-17 16:41:01',1),(1056,41,22,'2018-10-17 16:42:03',0),(1057,41,22,'2018-10-17 16:42:48',0),(1058,41,22,'2018-10-17 16:43:03',1),(1059,39,16,'2018-10-17 16:43:16',0),(1060,39,16,'2018-10-17 16:44:14',1),(1061,46,23,'2018-10-17 16:44:29',1),(1062,34,20,'2018-10-17 16:45:02',1),(1063,42,22,'2018-10-17 16:45:10',1),(1064,43,22,'2018-10-17 16:45:28',1),(1065,40,16,'2018-10-17 16:45:29',1),(1066,41,16,'2018-10-17 16:46:06',0),(1067,41,16,'2018-10-17 16:46:25',0),(1068,44,22,'2018-10-17 16:46:37',1),(1069,47,23,'2018-10-17 16:46:48',0),(1070,35,20,'2018-10-17 16:46:57',1),(1071,41,16,'2018-10-17 16:47:03',0),(1072,45,22,'2018-10-17 16:48:19',0),(1073,41,16,'2018-10-17 16:48:32',0),(1074,45,22,'2018-10-17 16:48:51',0),(1075,41,16,'2018-10-17 16:48:52',0),(1076,41,16,'2018-10-17 16:49:16',0),(1077,45,22,'2018-10-17 16:49:26',1),(1078,41,16,'2018-10-17 16:49:31',0),(1079,33,24,'2018-10-17 16:50:14',0),(1080,41,16,'2018-10-17 16:50:37',0),(1081,33,24,'2018-10-17 16:51:14',0),(1082,47,23,'2018-10-17 16:51:31',1),(1083,36,20,'2018-10-17 16:51:51',0),(1084,36,20,'2018-10-17 16:52:36',0),(1085,36,20,'2018-10-17 16:52:50',0),(1086,36,20,'2018-10-17 16:53:01',0),(1087,41,16,'2018-10-17 16:53:01',0),(1088,33,24,'2018-10-17 16:53:57',0),(1089,36,20,'2018-10-17 16:54:02',0),(1090,36,20,'2018-10-17 16:54:07',0),(1091,41,16,'2018-10-17 16:54:17',0),(1092,41,16,'2018-10-17 16:54:46',0),(1093,48,23,'2018-10-17 16:54:46',1),(1094,41,16,'2018-10-17 16:55:03',0),(1095,36,20,'2018-10-17 16:55:30',0),(1096,33,24,'2018-10-17 16:56:02',0),(1097,36,20,'2018-10-17 16:56:07',0),(1098,41,16,'2018-10-17 16:56:39',0),(1099,41,16,'2018-10-17 16:56:48',0),(1100,36,20,'2018-10-17 16:57:54',0),(1101,33,24,'2018-10-17 16:58:08',1),(1102,41,16,'2018-10-17 16:58:17',0),(1103,41,16,'2018-10-17 16:58:59',0),(1104,41,16,'2018-10-17 16:59:01',0),(1105,41,16,'2018-10-17 17:00:23',0),(1106,37,20,'2018-10-17 17:01:51',0),(1107,46,22,'2018-10-17 17:02:09',1),(1108,37,20,'2018-10-17 17:02:12',0),(1109,37,20,'2018-10-17 17:02:34',0),(1110,41,16,'2018-10-17 17:03:35',0),(1111,37,20,'2018-10-17 17:03:55',0),(1112,41,16,'2018-10-17 17:04:11',0),(1113,47,22,'2018-10-17 17:04:28',1),(1114,41,16,'2018-10-17 17:04:34',0),(1115,37,20,'2018-10-17 17:04:44',1),(1116,41,16,'2018-10-17 17:04:54',0),(1117,41,16,'2018-10-17 17:05:17',0),(1118,41,16,'2018-10-17 17:06:04',0),(1119,38,20,'2018-10-17 17:06:16',0),(1120,38,20,'2018-10-17 17:06:42',0),(1121,48,22,'2018-10-17 17:06:45',1),(1122,38,20,'2018-10-17 17:07:04',1),(1123,49,23,'2018-10-17 17:07:19',0),(1124,41,16,'2018-10-17 17:09:05',1),(1125,28,27,'2018-10-18 16:33:51',0),(1126,28,27,'2018-10-18 16:34:51',0),(1127,28,27,'2018-10-18 16:35:27',0),(1128,28,27,'2018-10-18 16:44:14',0),(1129,17,18,'2018-10-18 20:22:00',1),(1130,18,18,'2018-10-18 20:23:34',0),(1131,18,18,'2018-10-18 20:23:49',1),(1132,19,18,'2018-10-18 20:24:47',1),(1133,20,18,'2018-10-18 20:53:34',1),(1134,21,18,'2018-10-18 21:09:39',0),(1135,21,18,'2018-10-18 21:09:58',1),(1136,28,21,'2018-10-19 05:29:20',0),(1137,28,21,'2018-10-19 05:31:04',1),(1138,29,21,'2018-10-19 05:32:45',1),(1139,30,21,'2018-10-19 05:33:44',0),(1140,30,21,'2018-10-19 05:34:33',0),(1141,30,21,'2018-10-19 05:34:50',0),(1142,30,21,'2018-10-19 05:35:13',0),(1143,30,21,'2018-10-19 05:35:17',0),(1144,30,21,'2018-10-19 05:35:58',0),(1145,30,21,'2018-10-19 05:36:13',0),(1146,30,21,'2018-10-19 05:36:45',1),(1147,31,21,'2018-10-19 05:37:37',1),(1148,32,21,'2018-10-19 05:38:16',1),(1149,33,21,'2018-10-19 05:40:09',0),(1150,33,21,'2018-10-19 06:07:09',0),(1151,33,21,'2018-10-19 06:07:49',0),(1152,33,21,'2018-10-19 06:09:09',0),(1153,33,21,'2018-10-19 06:09:50',1),(1154,34,21,'2018-10-19 06:11:52',0),(1155,34,21,'2018-10-19 06:12:14',1),(1156,35,21,'2018-10-19 06:14:35',1),(1157,36,21,'2018-10-19 06:16:49',0),(1158,36,21,'2018-10-19 06:17:16',0),(1159,36,21,'2018-10-19 06:18:16',0),(1160,36,21,'2018-10-19 06:18:37',0),(1161,36,21,'2018-10-19 06:19:44',0),(1162,36,21,'2018-10-19 06:19:52',0),(1163,36,21,'2018-10-19 06:20:17',0),(1164,36,21,'2018-10-19 06:20:54',0),(1165,36,21,'2018-10-19 06:22:08',0),(1166,36,21,'2018-10-19 06:22:32',0),(1167,36,21,'2018-10-19 06:22:58',0),(1168,36,21,'2018-10-19 06:23:10',0),(1169,36,21,'2018-10-19 06:23:34',0),(1170,36,21,'2018-10-19 06:24:06',0),(1171,36,21,'2018-10-19 06:24:31',0),(1172,36,21,'2018-10-19 06:24:48',0),(1173,36,21,'2018-10-19 06:25:00',0),(1174,36,21,'2018-10-19 06:25:08',0),(1175,36,21,'2018-10-19 06:25:51',0),(1176,36,21,'2018-10-19 06:26:10',0),(1177,36,21,'2018-10-19 06:28:42',0),(1178,36,21,'2018-10-19 06:29:00',0),(1179,36,21,'2018-10-19 06:29:09',0),(1180,36,21,'2018-10-19 06:29:16',0),(1181,36,21,'2018-10-19 06:29:34',0),(1182,36,21,'2018-10-19 06:29:37',0),(1183,36,21,'2018-10-19 06:29:37',0),(1184,36,21,'2018-10-19 06:29:38',0),(1185,36,21,'2018-10-19 06:30:12',0),(1186,36,21,'2018-10-19 06:30:38',0),(1187,36,21,'2018-10-19 06:31:25',0),(1188,36,21,'2018-10-19 06:31:42',0),(1189,36,21,'2018-10-19 06:32:04',0),(1190,36,21,'2018-10-19 06:32:11',0),(1191,37,21,'2018-10-19 06:35:22',1),(1192,38,21,'2018-10-19 06:35:50',0),(1193,38,21,'2018-10-19 06:36:37',1),(1194,38,21,'2018-10-19 06:36:46',0),(1195,38,21,'2018-10-19 06:37:42',0),(1196,38,21,'2018-10-19 06:38:31',0),(1197,38,21,'2018-10-19 06:39:14',0),(1198,36,21,'2018-10-19 06:40:14',0),(1199,39,21,'2018-10-19 06:41:38',0),(1200,39,21,'2018-10-19 06:42:40',1),(1201,40,21,'2018-10-19 06:43:17',0),(1202,40,21,'2018-10-19 06:45:24',1),(1203,41,21,'2018-10-19 06:46:21',0),(1204,41,21,'2018-10-19 06:46:43',1),(1205,36,21,'2018-10-19 06:48:22',0),(1206,42,21,'2018-10-19 06:49:46',1),(1207,43,21,'2018-10-19 06:50:11',1),(1208,44,21,'2018-10-19 06:50:43',1),(1209,45,21,'2018-10-19 06:53:09',1),(1210,46,21,'2018-10-19 06:54:27',0),(1211,46,21,'2018-10-19 06:54:45',1),(1212,47,21,'2018-10-19 06:55:56',1),(1213,39,20,'2018-10-19 07:21:57',0),(1214,39,20,'2018-10-19 07:22:20',1),(1215,40,20,'2018-10-19 07:23:03',0),(1216,40,20,'2018-10-19 07:23:07',0),(1217,40,20,'2018-10-19 07:23:19',1),(1218,41,20,'2018-10-19 07:25:37',0),(1219,41,20,'2018-10-19 07:26:35',1),(1220,42,20,'2018-10-19 07:27:47',1),(1221,43,20,'2018-10-19 07:29:33',0),(1222,43,20,'2018-10-19 07:29:33',0),(1223,43,20,'2018-10-19 07:29:57',1),(1224,43,20,'2018-10-19 07:29:58',1),(1225,43,20,'2018-10-19 07:30:00',1),(1226,43,20,'2018-10-19 07:30:02',1),(1227,43,20,'2018-10-19 07:30:10',1),(1228,43,20,'2018-10-19 07:30:12',1),(1229,43,20,'2018-10-19 07:30:25',1),(1230,44,20,'2018-10-19 07:31:08',1),(1231,45,20,'2018-10-19 07:32:53',0),(1232,45,20,'2018-10-19 07:35:08',0),(1233,45,20,'2018-10-19 07:38:13',1),(1234,46,20,'2018-10-19 07:40:02',1),(1235,47,20,'2018-10-19 07:42:04',0),(1236,47,20,'2018-10-19 07:43:15',0),(1237,47,20,'2018-10-19 07:43:42',1),(1238,48,20,'2018-10-19 07:44:43',1),(1239,49,20,'2018-10-19 07:48:05',0),(1240,49,20,'2018-10-19 07:48:28',1),(1241,50,20,'2018-10-19 07:51:20',1),(1242,51,20,'2018-10-19 07:53:36',1),(1243,52,20,'2018-10-19 07:56:11',0),(1244,52,20,'2018-10-19 07:56:34',0),(1245,52,20,'2018-10-19 07:56:52',0),(1246,52,20,'2018-10-19 07:57:20',0),(1247,52,20,'2018-10-19 07:57:56',0),(1248,52,20,'2018-10-19 07:58:32',0),(1249,52,20,'2018-10-19 07:59:13',0),(1250,52,20,'2018-10-19 07:59:43',0),(1251,52,20,'2018-10-19 08:00:34',0),(1252,52,20,'2018-10-19 08:03:44',0),(1253,53,20,'2018-10-19 08:06:40',0),(1254,53,20,'2018-10-19 08:07:05',1),(1255,28,27,'2018-10-19 12:10:28',0),(1256,28,27,'2018-10-19 12:10:45',1),(1257,29,27,'2018-10-19 12:15:50',1),(1258,30,27,'2018-10-19 12:16:33',0),(1259,30,27,'2018-10-19 12:17:10',1),(1260,31,27,'2018-10-19 12:18:44',1),(1261,32,27,'2018-10-19 12:19:52',0),(1262,32,27,'2018-10-19 12:20:21',0),(1263,32,27,'2018-10-19 12:42:35',0),(1264,32,27,'2018-10-19 12:42:54',0),(1265,32,27,'2018-10-19 12:43:09',1),(1266,33,27,'2018-10-19 12:47:19',1),(1267,34,27,'2018-10-19 12:49:09',0),(1268,34,27,'2018-10-19 12:49:26',0),(1269,34,27,'2018-10-19 12:49:34',0),(1270,34,27,'2018-10-19 12:49:46',0),(1271,34,27,'2018-10-19 12:50:18',1),(1272,79,5,'2018-10-19 13:00:09',1),(1273,80,5,'2018-10-19 13:00:46',0),(1274,80,5,'2018-10-19 13:01:08',1),(1275,81,5,'2018-10-19 13:01:30',1),(1276,82,5,'2018-10-19 13:01:54',0),(1277,82,5,'2018-10-19 13:02:15',0),(1278,82,5,'2018-10-19 13:02:27',1),(1279,83,5,'2018-10-19 13:02:51',1),(1280,84,5,'2018-10-19 13:03:11',0),(1281,84,5,'2018-10-19 13:03:41',1),(1282,85,5,'2018-10-19 13:05:57',0),(1283,85,5,'2018-10-19 13:06:25',0),(1284,85,5,'2018-10-19 13:06:58',1),(1285,35,27,'2018-10-19 13:10:32',0),(1286,35,27,'2018-10-19 13:12:30',0),(1287,35,27,'2018-10-19 13:12:53',0),(1288,35,27,'2018-10-19 13:13:33',0),(1289,35,27,'2018-10-19 13:14:15',0),(1290,35,27,'2018-10-19 13:14:53',1),(1291,36,27,'2018-10-19 13:18:17',0),(1292,36,21,'2018-10-19 16:19:10',0),(1293,36,21,'2018-10-19 16:19:18',0),(1294,18,5,'2018-10-30 18:33:52',0),(1295,18,5,'2018-10-30 18:34:00',0),(1296,191,5,'2018-11-08 15:08:25',0),(1297,156,5,'2018-11-11 07:27:59',1),(1298,157,5,'2018-11-11 07:28:47',1),(1299,185,22,'2018-12-27 18:35:11',0),(1300,185,22,'2018-12-27 18:35:47',1),(1301,186,22,'2018-12-27 18:37:23',1),(1302,187,22,'2018-12-27 18:38:17',0),(1303,187,22,'2018-12-27 18:39:05',0),(1304,187,22,'2018-12-27 18:39:09',0),(1305,187,22,'2018-12-27 18:39:45',0),(1306,187,22,'2018-12-27 18:40:00',0),(1307,187,22,'2018-12-27 18:40:10',0),(1308,187,22,'2018-12-27 18:41:16',0),(1309,187,22,'2018-12-27 18:41:43',0),(1310,187,22,'2018-12-27 18:42:06',0),(1311,188,22,'2018-12-27 18:43:40',1),(1312,189,22,'2018-12-27 18:45:29',0),(1313,189,22,'2018-12-27 18:47:56',0),(1314,189,22,'2018-12-27 18:48:29',0),(1315,189,22,'2018-12-27 18:48:49',0),(1316,189,22,'2018-12-27 18:49:08',0),(1317,49,22,'2018-12-27 18:53:30',1),(1318,69,22,'2018-12-27 18:58:33',0),(1319,69,22,'2018-12-27 18:59:20',0),(1320,69,22,'2018-12-27 19:52:35',0),(1321,69,22,'2018-12-27 19:55:34',0),(1322,1,5,'2019-03-04 19:08:39',0),(1323,1,5,'2019-03-04 19:08:45',1),(1324,8,5,'2019-03-07 10:08:12',0),(1325,8,5,'2019-03-07 10:08:19',1),(1326,1,32,'2019-03-10 09:17:41',1),(1327,2,32,'2019-03-10 09:18:13',0),(1328,2,32,'2019-03-10 09:18:36',1),(1329,3,32,'2019-03-10 09:19:17',1),(1330,4,32,'2019-03-10 09:19:36',0),(1331,4,32,'2019-03-10 09:20:26',0),(1332,4,32,'2019-03-10 09:20:42',1),(1333,4,32,'2019-03-10 09:21:42',0),(1334,4,32,'2019-03-10 09:21:58',1),(1335,5,32,'2019-03-10 09:22:28',0),(1336,5,32,'2019-03-10 09:22:51',1),(1337,6,32,'2019-03-10 09:23:30',1),(1338,7,32,'2019-03-10 09:59:33',0),(1339,1,28,'2019-03-11 06:27:07',1),(1340,2,28,'2019-03-11 06:27:28',0),(1341,2,28,'2019-03-11 06:27:35',0),(1342,2,28,'2019-03-11 06:27:58',1),(1343,3,28,'2019-03-11 06:29:14',1),(1344,4,28,'2019-03-11 07:05:36',1),(1345,5,28,'2019-03-11 07:06:08',0),(1346,5,28,'2019-03-11 07:06:58',1),(1347,5,28,'2019-03-11 07:52:11',1),(1348,6,28,'2019-03-11 07:54:34',1),(1349,6,28,'2019-03-11 07:55:59',1),(1350,7,28,'2019-03-11 07:58:16',0),(1351,7,28,'2019-03-11 07:58:38',0),(1352,7,28,'2019-03-11 07:58:55',1),(1353,8,28,'2019-03-11 08:04:32',0),(1354,8,28,'2019-03-11 08:04:54',1),(1355,9,28,'2019-03-11 08:11:04',0),(1356,9,28,'2019-03-11 08:11:47',1),(1357,10,28,'2019-03-11 08:15:59',0),(1358,10,28,'2019-03-11 08:16:42',0),(1359,10,28,'2019-03-11 08:17:04',0),(1360,10,28,'2019-03-11 08:17:26',0),(1361,10,28,'2019-03-11 08:18:23',0),(1362,10,28,'2019-03-11 08:18:38',0),(1363,10,28,'2019-03-11 08:19:02',0),(1364,10,28,'2019-03-11 08:19:15',0),(1365,10,28,'2019-03-11 08:19:27',0),(1366,10,28,'2019-03-11 08:20:20',0),(1367,10,28,'2019-03-11 08:21:26',0),(1368,10,28,'2019-03-11 08:21:43',0),(1369,10,28,'2019-03-11 08:22:38',0),(1370,10,28,'2019-03-11 08:22:54',0),(1371,7,32,'2019-03-11 08:49:49',0),(1372,7,32,'2019-03-11 08:50:16',0),(1373,7,32,'2019-03-11 08:50:49',0),(1374,7,32,'2019-03-11 08:51:24',0),(1375,7,32,'2019-03-11 08:51:38',0),(1376,7,32,'2019-03-11 08:53:10',0),(1377,8,32,'2019-03-11 08:55:54',0),(1378,8,32,'2019-03-11 08:56:27',1),(1379,8,32,'2019-03-11 08:58:00',1),(1380,9,32,'2019-03-11 08:59:00',0),(1381,9,32,'2019-03-11 08:59:34',0),(1382,9,32,'2019-03-11 09:00:36',0),(1383,9,32,'2019-03-11 09:00:50',0),(1384,9,32,'2019-03-11 09:01:40',0),(1385,9,32,'2019-03-11 09:02:53',0),(1386,7,32,'2019-03-11 09:08:01',0),(1387,7,32,'2019-03-11 09:09:35',0),(1388,7,32,'2019-03-11 09:09:50',1),(1389,7,32,'2019-03-11 09:10:06',0),(1390,7,32,'2019-03-11 09:11:16',0),(1391,7,32,'2019-03-11 09:11:34',0),(1392,7,32,'2019-03-11 09:11:40',0),(1393,7,32,'2019-03-11 09:11:55',0),(1394,7,32,'2019-03-11 09:12:02',0),(1395,7,32,'2019-03-11 09:12:20',1),(1396,8,32,'2019-03-11 09:13:19',1),(1397,9,32,'2019-03-11 09:14:31',1),(1398,10,32,'2019-03-11 09:16:14',0),(1399,10,32,'2019-03-11 09:17:03',0),(1400,10,32,'2019-03-11 09:17:59',0),(1401,10,32,'2019-03-11 09:20:31',0),(1402,10,32,'2019-03-11 09:20:35',0),(1403,10,32,'2019-03-11 09:21:36',0),(1404,10,32,'2019-03-11 09:21:56',0),(1405,10,32,'2019-03-11 09:22:02',0),(1406,10,32,'2019-03-11 09:22:15',0),(1407,10,32,'2019-03-11 09:22:31',0),(1408,10,32,'2019-03-11 09:22:49',0),(1409,10,32,'2019-03-11 09:22:56',0),(1410,10,32,'2019-03-11 09:23:48',0),(1411,10,32,'2019-03-11 09:23:57',0),(1412,10,32,'2019-03-11 09:25:48',0),(1413,10,32,'2019-03-11 09:27:35',0),(1414,10,32,'2019-03-11 09:28:07',0),(1415,10,32,'2019-03-11 09:28:16',0),(1416,10,32,'2019-03-11 09:28:20',0),(1417,10,32,'2019-03-11 09:32:25',0),(1418,10,32,'2019-03-11 09:32:48',0),(1419,10,32,'2019-03-11 09:33:06',0),(1420,10,32,'2019-03-11 09:33:29',0),(1421,10,32,'2019-03-11 09:33:39',0),(1422,10,32,'2019-03-11 09:33:39',0),(1423,11,32,'2019-03-11 09:35:48',0),(1424,11,32,'2019-03-11 09:36:03',0),(1425,11,32,'2019-03-11 09:36:05',0),(1426,11,32,'2019-03-11 09:36:18',0),(1427,11,32,'2019-03-11 09:37:44',0),(1428,11,32,'2019-03-11 09:37:55',0),(1429,11,32,'2019-03-11 09:38:13',0),(1430,11,32,'2019-03-11 09:38:50',1),(1431,11,32,'2019-03-11 09:39:44',0),(1432,11,32,'2019-03-11 09:39:52',0),(1433,11,32,'2019-03-11 09:40:58',0),(1434,11,32,'2019-03-11 09:41:00',0),(1435,11,32,'2019-03-11 09:41:17',0),(1436,11,32,'2019-03-11 09:42:13',0),(1437,11,32,'2019-03-11 09:42:18',0),(1438,12,32,'2019-03-11 09:43:17',0),(1439,12,32,'2019-03-11 09:43:40',1),(1440,12,32,'2019-03-11 09:44:00',1),(1441,13,32,'2019-03-11 09:45:08',0),(1442,13,32,'2019-03-11 09:45:51',0),(1443,13,32,'2019-03-11 09:46:10',0),(1444,13,32,'2019-03-11 09:46:45',0),(1445,13,32,'2019-03-11 09:47:33',0),(1446,13,32,'2019-03-11 09:47:42',0),(1447,13,32,'2019-03-11 09:49:28',0),(1448,13,32,'2019-03-11 09:50:16',0),(1449,13,32,'2019-03-11 09:50:18',0),(1450,13,32,'2019-03-11 09:50:27',0),(1451,13,32,'2019-03-11 09:54:02',1),(1452,13,32,'2019-03-11 09:54:20',1),(1453,14,32,'2019-03-11 09:57:04',0),(1454,14,32,'2019-03-11 09:57:45',1),(1455,14,32,'2019-03-11 09:58:58',0),(1456,14,32,'2019-03-11 09:59:05',1),(1457,15,32,'2019-03-11 10:01:46',0),(1458,15,32,'2019-03-11 10:02:01',0),(1459,15,32,'2019-03-11 10:02:59',0),(1460,15,32,'2019-03-11 10:03:07',1),(1461,16,32,'2019-03-11 10:04:05',1),(1462,17,32,'2019-03-11 10:05:37',0),(1463,17,32,'2019-03-11 10:06:29',1),(1464,18,32,'2019-03-11 10:08:39',0),(1465,18,32,'2019-03-11 10:09:27',0),(1466,18,32,'2019-03-11 10:09:57',0),(1467,17,32,'2019-03-11 10:11:39',0),(1468,18,32,'2019-03-11 10:13:17',0),(1469,18,32,'2019-03-11 10:14:10',0),(1470,18,32,'2019-03-11 10:14:32',0),(1471,18,32,'2019-03-11 10:15:04',0),(1472,18,32,'2019-03-11 10:16:08',0),(1473,18,32,'2019-03-11 10:17:56',0),(1474,18,32,'2019-03-11 10:18:59',0),(1475,18,32,'2019-03-11 10:19:12',0),(1476,18,32,'2019-03-11 10:23:31',1),(1477,19,32,'2019-03-11 10:24:08',0),(1478,19,32,'2019-03-11 10:24:41',0),(1479,19,32,'2019-03-11 10:24:45',0),(1480,19,32,'2019-03-11 10:26:04',1),(1481,19,32,'2019-03-11 10:26:11',1),(1482,20,32,'2019-03-11 10:27:04',0),(1483,20,32,'2019-03-11 10:28:31',0),(1484,20,32,'2019-03-11 10:29:01',1),(1485,20,32,'2019-03-11 10:29:04',1),(1486,21,32,'2019-03-11 10:33:49',0),(1487,21,32,'2019-03-11 10:37:52',0),(1488,21,32,'2019-03-11 10:38:05',0),(1489,21,32,'2019-03-11 10:40:19',0),(1490,21,32,'2019-03-11 10:41:01',0),(1491,21,32,'2019-03-11 10:41:04',0),(1492,21,32,'2019-03-11 10:41:43',0),(1493,21,32,'2019-03-11 10:42:10',0),(1494,21,32,'2019-03-11 10:43:48',1),(1495,21,32,'2019-03-11 10:43:51',1),(1496,21,32,'2019-03-11 10:43:52',1),(1497,22,32,'2019-03-11 10:45:19',1),(1498,22,32,'2019-03-11 10:45:31',1),(1499,23,32,'2019-03-11 10:47:54',1),(1500,24,32,'2019-03-11 10:48:25',1),(1501,25,32,'2019-03-11 10:49:21',1),(1502,26,32,'2019-03-11 10:50:09',1),(1503,27,32,'2019-03-11 10:57:24',0),(1504,27,32,'2019-03-11 10:57:33',0),(1505,27,32,'2019-03-11 10:57:53',0),(1506,27,32,'2019-03-11 10:58:13',0),(1507,27,32,'2019-03-11 10:58:38',0),(1508,27,32,'2019-03-11 10:58:41',0),(1509,27,32,'2019-03-11 10:58:55',0),(1510,27,32,'2019-03-11 10:59:04',0),(1511,27,32,'2019-03-11 10:59:23',0),(1512,27,32,'2019-03-11 10:59:50',0),(1513,27,32,'2019-03-11 11:00:54',0),(1514,28,32,'2019-03-11 11:02:33',0),(1515,28,32,'2019-03-11 11:02:43',0),(1516,28,32,'2019-03-11 11:02:47',0),(1517,28,32,'2019-03-11 11:02:53',0),(1518,28,32,'2019-03-11 11:02:57',0),(1519,28,32,'2019-03-11 11:03:25',0),(1520,28,32,'2019-03-11 11:03:46',0),(1521,27,32,'2019-03-11 11:04:34',0),(1522,27,32,'2019-03-11 11:05:06',0),(1523,27,32,'2019-03-11 11:05:10',0),(1524,27,32,'2019-03-11 11:05:17',0),(1525,27,32,'2019-03-11 11:05:43',0),(1526,27,32,'2019-03-11 11:05:43',0),(1527,10,32,'2019-03-11 11:06:08',0),(1528,10,32,'2019-03-11 11:08:44',0),(1529,10,32,'2019-03-11 11:09:07',1),(1530,27,32,'2019-03-11 11:11:38',0),(1531,27,32,'2019-03-11 11:11:41',0),(1532,27,32,'2019-03-11 11:11:46',0),(1533,27,32,'2019-03-11 11:12:00',0),(1534,27,32,'2019-03-11 11:12:00',0),(1535,27,32,'2019-03-11 11:12:01',0),(1536,27,32,'2019-03-11 11:12:06',0),(1537,27,32,'2019-03-11 11:12:07',0),(1538,27,32,'2019-03-11 11:12:09',0),(1539,27,32,'2019-03-11 11:13:06',0),(1540,27,32,'2019-03-11 11:13:11',0),(1541,27,32,'2019-03-11 11:13:42',0),(1542,27,32,'2019-03-11 11:14:23',0),(1543,79,32,'2019-03-11 11:15:47',0),(1544,79,32,'2019-03-11 11:16:05',0),(1545,79,32,'2019-03-11 11:20:07',0),(1546,79,32,'2019-03-11 11:20:36',1),(1547,80,32,'2019-03-11 11:20:58',0),(1548,80,32,'2019-03-11 11:21:19',0),(1549,80,32,'2019-03-11 11:21:23',0),(1550,80,32,'2019-03-11 11:21:47',0),(1551,80,32,'2019-03-11 11:23:11',0),(1552,80,32,'2019-03-11 11:23:15',0),(1553,80,32,'2019-03-11 11:26:20',0),(1554,80,32,'2019-03-11 11:26:24',0),(1555,80,32,'2019-03-11 11:26:24',0),(1556,27,32,'2019-03-11 11:35:23',0),(1557,27,32,'2019-03-11 11:36:27',0),(1558,27,32,'2019-03-11 11:37:08',0),(1559,28,32,'2019-03-11 11:38:14',0),(1560,28,32,'2019-03-11 11:39:21',0),(1561,28,32,'2019-03-11 11:39:26',0),(1562,28,32,'2019-03-11 11:39:36',0),(1563,29,32,'2019-03-11 11:40:59',1),(1564,30,32,'2019-03-11 11:41:38',0),(1565,30,32,'2019-03-11 11:42:14',0),(1566,30,32,'2019-03-11 11:42:17',0),(1567,30,32,'2019-03-11 11:44:18',0),(1568,30,32,'2019-03-11 11:44:19',0),(1569,30,32,'2019-03-11 11:44:19',0),(1570,30,32,'2019-03-11 11:44:20',0),(1571,30,32,'2019-03-11 11:44:24',0),(1572,30,32,'2019-03-11 11:44:34',0),(1573,31,32,'2019-03-11 11:45:58',0),(1574,31,32,'2019-03-11 11:46:20',0),(1575,31,32,'2019-03-11 11:46:41',0),(1576,31,32,'2019-03-11 11:46:51',0),(1577,32,32,'2019-03-11 11:48:26',1),(1578,33,32,'2019-03-11 11:49:24',0),(1579,33,32,'2019-03-11 11:49:54',0),(1580,33,32,'2019-03-11 11:51:25',0),(1581,33,32,'2019-03-11 11:54:24',0),(1582,33,32,'2019-03-11 11:54:27',0),(1583,33,32,'2019-03-11 11:54:28',0),(1584,33,32,'2019-03-11 12:01:29',1),(1585,34,32,'2019-03-11 12:02:11',0),(1586,34,32,'2019-03-11 12:02:52',0),(1587,34,32,'2019-03-11 12:03:11',0),(1588,34,32,'2019-03-11 12:05:53',1),(1589,35,32,'2019-03-11 12:08:09',0),(1590,35,32,'2019-03-11 12:08:37',1),(1591,36,32,'2019-03-11 12:11:19',0),(1592,36,32,'2019-03-11 12:12:24',0),(1593,36,32,'2019-03-11 12:13:02',0),(1594,36,32,'2019-03-11 12:14:48',0),(1595,36,32,'2019-03-11 12:15:31',0),(1596,36,32,'2019-03-11 12:15:50',0),(1597,36,32,'2019-03-11 12:16:12',0),(1598,36,32,'2019-03-11 12:16:15',0),(1599,36,32,'2019-03-11 12:16:16',0),(1600,36,32,'2019-03-11 12:16:17',0),(1601,37,32,'2019-03-11 12:16:59',0),(1602,37,32,'2019-03-11 12:17:14',0),(1603,37,32,'2019-03-11 12:18:00',1),(1604,38,32,'2019-03-11 12:18:31',0),(1605,38,32,'2019-03-11 12:19:13',1),(1606,39,32,'2019-03-11 12:20:39',0),(1607,39,32,'2019-03-11 12:21:28',0),(1608,39,32,'2019-03-11 12:21:58',0),(1609,39,32,'2019-03-11 12:23:31',0),(1610,39,32,'2019-03-11 12:23:33',0),(1611,39,32,'2019-03-11 12:23:34',0),(1612,40,32,'2019-03-11 12:24:46',1),(1613,41,32,'2019-03-11 12:25:41',0),(1614,41,32,'2019-03-11 12:25:46',0),(1615,42,32,'2019-03-11 12:26:09',1),(1616,43,32,'2019-03-11 12:26:21',0),(1617,43,32,'2019-03-11 12:26:40',1),(1618,44,32,'2019-03-11 12:27:02',1),(1619,45,32,'2019-03-11 12:28:11',0),(1620,45,32,'2019-03-11 12:29:25',1),(1621,46,32,'2019-03-11 12:30:05',1),(1622,47,32,'2019-03-11 12:30:38',0),(1623,47,32,'2019-03-11 12:31:41',1),(1624,48,32,'2019-03-11 12:32:49',1),(1625,49,32,'2019-03-11 12:34:29',0),(1626,49,32,'2019-03-11 12:38:05',1),(1627,50,32,'2019-03-11 12:38:54',1),(1628,51,32,'2019-03-11 12:40:22',0),(1629,51,32,'2019-03-11 12:41:21',0),(1630,51,32,'2019-03-11 12:42:27',0),(1631,51,32,'2019-03-11 12:43:34',0),(1632,51,32,'2019-03-11 12:43:36',0),(1633,51,32,'2019-03-11 12:43:36',0),(1634,51,32,'2019-03-11 12:43:39',0),(1635,51,32,'2019-03-11 12:44:37',0),(1636,51,32,'2019-03-11 12:44:53',0),(1637,51,32,'2019-03-11 12:44:55',0),(1638,51,32,'2019-03-11 12:44:56',0),(1639,51,32,'2019-03-11 12:44:57',0),(1640,51,32,'2019-03-11 12:44:58',0),(1641,52,32,'2019-03-11 12:46:54',0),(1642,52,32,'2019-03-11 12:47:24',0),(1643,52,32,'2019-03-11 12:48:57',0),(1644,52,32,'2019-03-11 12:49:01',0),(1645,52,32,'2019-03-11 12:49:01',0),(1646,52,32,'2019-03-11 12:50:57',0),(1647,52,32,'2019-03-11 12:50:59',0),(1648,52,32,'2019-03-11 12:51:00',0),(1649,52,32,'2019-03-11 12:51:00',0),(1650,53,32,'2019-03-11 12:53:21',0),(1651,53,32,'2019-03-11 12:53:37',0),(1652,53,32,'2019-03-11 12:53:43',0),(1653,53,32,'2019-03-11 12:53:45',0),(1654,54,32,'2019-03-11 12:55:46',0),(1655,54,32,'2019-03-11 12:56:12',0),(1656,54,32,'2019-03-11 12:56:13',0),(1657,55,32,'2019-03-11 12:57:23',0),(1658,55,32,'2019-03-11 12:57:36',0),(1659,55,32,'2019-03-11 12:57:40',0),(1660,55,32,'2019-03-11 12:57:41',0),(1661,56,32,'2019-03-11 13:15:01',0),(1662,56,32,'2019-03-11 13:15:54',0),(1663,56,32,'2019-03-11 13:16:12',0),(1664,57,32,'2019-03-11 13:16:58',0),(1665,57,32,'2019-03-11 13:18:22',0),(1666,57,32,'2019-03-11 13:18:40',0),(1667,58,32,'2019-03-11 13:19:27',1),(1668,59,32,'2019-03-11 13:20:17',1),(1669,60,32,'2019-03-11 13:22:12',1),(1670,61,32,'2019-03-11 13:22:30',0),(1671,61,32,'2019-03-11 13:22:46',1),(1672,62,32,'2019-03-11 13:24:08',1),(1673,63,32,'2019-03-11 13:25:28',1),(1674,64,32,'2019-03-11 13:26:20',0),(1675,64,32,'2019-03-11 13:28:34',1),(1676,65,32,'2019-03-11 13:31:10',1),(1677,66,32,'2019-03-11 13:32:00',0),(1678,66,32,'2019-03-11 13:33:05',1),(1679,67,32,'2019-03-11 13:35:12',1),(1680,68,32,'2019-03-11 13:35:31',0),(1681,68,32,'2019-03-11 13:35:50',0),(1682,68,32,'2019-03-11 13:37:53',1),(1683,69,32,'2019-03-11 13:39:43',1),(1684,67,32,'2019-03-11 13:41:49',0),(1685,79,35,'2019-03-13 07:14:52',1),(1686,80,35,'2019-03-13 07:16:26',0),(1687,80,35,'2019-03-13 07:16:59',0),(1688,80,35,'2019-03-13 07:17:51',0),(1689,80,35,'2019-03-13 07:18:28',0),(1690,80,35,'2019-03-13 07:18:38',0),(1691,80,35,'2019-03-13 07:19:48',0),(1692,80,35,'2019-03-13 07:20:51',0),(1693,80,35,'2019-03-13 07:24:34',0),(1694,80,35,'2019-03-13 07:25:20',0),(1695,80,35,'2019-03-13 07:26:31',0),(1696,80,35,'2019-03-13 07:26:44',0),(1697,80,35,'2019-03-13 07:27:20',0),(1698,81,35,'2019-03-13 07:28:29',0),(1699,81,35,'2019-03-13 07:28:31',0),(1700,81,35,'2019-03-13 07:28:41',1),(1701,81,35,'2019-03-13 07:28:44',1),(1702,82,35,'2019-03-13 07:29:49',0),(1703,82,35,'2019-03-13 07:30:24',1),(1704,83,35,'2019-03-13 07:31:17',1),(1705,84,35,'2019-03-13 07:31:58',1),(1706,154,35,'2019-03-13 14:33:12',0),(1707,154,35,'2019-03-13 14:34:56',1),(1708,154,35,'2019-03-13 14:35:13',1),(1709,155,35,'2019-03-13 14:37:39',0),(1710,155,35,'2019-03-13 14:38:49',0),(1711,155,35,'2019-03-13 14:38:57',0),(1712,155,35,'2019-03-13 14:42:59',1),(1713,155,35,'2019-03-13 14:43:40',0),(1714,155,35,'2019-03-13 14:44:08',1),(1715,156,35,'2019-03-13 14:45:20',1),(1716,156,35,'2019-03-13 14:45:21',1),(1717,156,35,'2019-03-13 14:45:25',1),(1718,157,35,'2019-03-13 14:47:45',1),(1719,157,35,'2019-03-13 14:47:55',1),(1720,158,35,'2019-03-13 14:49:18',1),(1721,159,35,'2019-03-13 14:50:21',1),(1722,160,35,'2019-03-13 14:52:12',1),(1723,161,35,'2019-03-13 14:53:18',0),(1724,161,35,'2019-03-13 14:53:34',0),(1725,161,35,'2019-03-13 14:53:53',0),(1726,161,35,'2019-03-13 14:54:28',1),(1727,162,35,'2019-03-13 15:00:00',1),(1728,162,35,'2019-03-13 15:00:21',0),(1729,162,35,'2019-03-13 15:00:35',0),(1730,162,35,'2019-03-13 15:00:46',1),(1731,163,35,'2019-03-13 15:11:08',1),(1732,164,35,'2019-03-13 15:26:35',1),(1733,165,35,'2019-03-13 15:29:48',1),(1734,165,35,'2019-03-13 15:30:16',1),(1735,166,35,'2019-03-13 15:34:13',0),(1736,176,35,'2019-03-13 15:47:07',1),(1737,177,35,'2019-03-13 15:47:15',0),(1738,177,35,'2019-03-13 15:49:00',0),(1739,177,35,'2019-03-13 15:49:31',0),(1740,177,35,'2019-03-13 15:50:11',0),(1741,177,35,'2019-03-13 15:51:01',0),(1742,177,35,'2019-03-13 15:52:14',0),(1743,177,35,'2019-03-13 15:53:27',1),(1744,79,32,'2019-03-14 10:09:13',0),(1745,79,32,'2019-03-14 10:09:49',1),(1746,80,32,'2019-03-14 10:10:50',0),(1747,80,32,'2019-03-14 10:12:00',0),(1748,80,32,'2019-03-14 10:12:49',0),(1749,81,32,'2019-03-14 10:13:24',1),(1750,82,32,'2019-03-14 10:14:01',1),(1751,83,32,'2019-03-14 10:15:21',1),(1752,84,32,'2019-03-14 10:16:22',1),(1753,85,32,'2019-03-14 10:16:59',0),(1754,85,32,'2019-03-14 10:17:33',0),(1755,85,32,'2019-03-14 10:18:25',0),(1756,85,32,'2019-03-14 10:18:43',0),(1757,85,32,'2019-03-14 10:20:18',0),(1758,85,32,'2019-03-14 10:20:31',0),(1759,85,32,'2019-03-14 10:25:45',0),(1760,85,32,'2019-03-14 10:28:27',0),(1761,85,32,'2019-03-14 10:28:54',1),(1762,86,32,'2019-03-14 10:30:06',0),(1763,86,32,'2019-03-14 10:34:22',0),(1764,86,32,'2019-03-14 10:35:01',0),(1765,86,32,'2019-03-14 10:35:32',0),(1766,86,32,'2019-03-14 10:35:47',0),(1767,86,32,'2019-03-14 10:36:45',0),(1768,86,32,'2019-03-14 10:37:50',0),(1769,87,32,'2019-03-14 10:38:55',1),(1770,88,32,'2019-03-14 10:39:28',1),(1771,89,32,'2019-03-14 10:41:25',1),(1772,90,32,'2019-03-14 10:42:12',1),(1773,90,32,'2019-03-14 10:42:18',1),(1774,90,32,'2019-03-14 10:42:39',1),(1775,91,32,'2019-03-14 10:43:40',0),(1776,91,32,'2019-03-14 10:44:23',1),(1777,92,32,'2019-03-14 10:46:49',0),(1778,92,32,'2019-03-14 10:47:09',0),(1779,92,32,'2019-03-14 10:51:05',0),(1780,92,32,'2019-03-14 10:53:00',0),(1781,92,32,'2019-03-14 10:53:14',1),(1782,93,32,'2019-03-14 10:54:44',1),(1783,94,32,'2019-03-14 10:55:04',1),(1784,95,32,'2019-03-14 10:58:39',1),(1785,96,32,'2019-03-14 10:59:30',0),(1786,96,32,'2019-03-14 10:59:44',1),(1787,97,32,'2019-03-14 11:01:57',1),(1788,98,32,'2019-03-14 11:02:46',0),(1789,98,32,'2019-03-14 11:03:20',0),(1790,98,32,'2019-03-14 11:04:03',0),(1791,98,32,'2019-03-14 11:04:33',0),(1792,98,32,'2019-03-14 11:04:47',1),(1793,98,32,'2019-03-14 11:05:50',1),(1794,99,32,'2019-03-14 11:07:00',1),(1795,100,32,'2019-03-14 11:09:22',0),(1796,100,32,'2019-03-14 11:09:43',1),(1797,101,32,'2019-03-14 11:10:44',0),(1798,101,32,'2019-03-14 11:11:05',0),(1799,101,32,'2019-03-14 11:12:31',0),(1800,101,32,'2019-03-14 11:12:49',0),(1801,101,32,'2019-03-14 11:12:50',0),(1802,101,32,'2019-03-14 11:13:56',0),(1803,101,32,'2019-03-14 11:14:57',0),(1804,101,32,'2019-03-14 11:15:00',0),(1805,101,32,'2019-03-14 11:15:01',0),(1806,102,32,'2019-03-14 11:15:45',1),(1807,103,32,'2019-03-14 11:16:38',0),(1808,103,32,'2019-03-14 11:17:01',0),(1809,103,32,'2019-03-14 11:18:30',0),(1810,103,32,'2019-03-14 11:18:44',0),(1811,103,32,'2019-03-14 11:19:06',0),(1812,103,32,'2019-03-14 11:19:06',0),(1813,104,32,'2019-03-14 11:20:44',0),(1814,103,32,'2019-03-14 11:21:21',1),(1815,104,32,'2019-03-14 11:21:53',0),(1816,104,32,'2019-03-14 11:22:46',0),(1817,104,32,'2019-03-14 11:23:34',0),(1818,104,32,'2019-03-14 11:24:42',0),(1819,104,32,'2019-03-14 11:25:04',0),(1820,104,32,'2019-03-14 11:25:05',0),(1821,105,32,'2019-03-14 11:26:08',1),(1822,106,32,'2019-03-14 11:28:04',0),(1823,106,32,'2019-03-14 11:28:33',1),(1824,107,32,'2019-03-14 11:29:57',0),(1825,107,32,'2019-03-14 11:32:28',0),(1826,107,32,'2019-03-14 11:33:16',0),(1827,107,32,'2019-03-14 11:33:31',0),(1828,107,32,'2019-03-14 11:33:36',0),(1829,107,32,'2019-03-14 11:33:37',0),(1830,107,32,'2019-03-14 11:34:10',0),(1831,107,32,'2019-03-14 11:34:18',0),(1832,107,32,'2019-03-14 11:34:37',0),(1833,108,32,'2019-03-14 11:35:46',0),(1834,108,32,'2019-03-14 11:36:58',0),(1835,108,32,'2019-03-14 11:37:17',0),(1836,108,32,'2019-03-14 11:37:35',0),(1837,108,32,'2019-03-14 11:38:47',1),(1838,109,32,'2019-03-14 11:41:49',0),(1839,109,32,'2019-03-14 11:42:18',0),(1840,109,32,'2019-03-14 11:42:56',0),(1841,109,32,'2019-03-14 11:44:26',0),(1842,109,32,'2019-03-14 11:44:30',0),(1843,109,32,'2019-03-14 11:44:31',0),(1844,109,32,'2019-03-14 11:45:07',0),(1845,109,32,'2019-03-14 11:45:29',0),(1846,110,32,'2019-03-14 11:47:27',0),(1847,110,32,'2019-03-14 11:49:43',0),(1848,110,32,'2019-03-14 11:50:58',1),(1849,111,32,'2019-03-14 11:52:46',0),(1850,111,32,'2019-03-14 11:55:09',1),(1851,112,32,'2019-03-14 11:55:45',0),(1852,112,32,'2019-03-14 11:56:14',0),(1853,112,32,'2019-03-14 11:56:27',1),(1854,113,32,'2019-03-14 11:57:44',1),(1855,114,32,'2019-03-14 11:59:08',1),(1856,115,32,'2019-03-14 11:59:41',0),(1857,115,32,'2019-03-14 12:00:01',1),(1858,116,32,'2019-03-14 12:05:24',0),(1859,116,32,'2019-03-14 12:06:03',1),(1860,116,32,'2019-03-14 12:06:05',1),(1861,117,32,'2019-03-14 12:07:42',0),(1862,117,32,'2019-03-14 12:08:15',0),(1863,117,32,'2019-03-14 12:08:30',1),(1864,118,32,'2019-03-14 12:12:09',0),(1865,118,32,'2019-03-14 12:13:29',0),(1866,118,32,'2019-03-14 12:14:05',0),(1867,118,32,'2019-03-14 12:14:33',0),(1868,118,32,'2019-03-14 12:15:40',0),(1869,118,32,'2019-03-14 12:16:12',0),(1870,119,32,'2019-03-14 12:19:10',0),(1871,119,32,'2019-03-14 12:19:42',0),(1872,119,32,'2019-03-14 12:20:28',0),(1873,119,32,'2019-03-14 12:21:21',0),(1874,119,32,'2019-03-14 12:21:22',0),(1875,119,32,'2019-03-14 12:21:59',1),(1876,120,32,'2019-03-14 12:26:13',1),(1877,121,32,'2019-03-14 12:28:56',1),(1878,122,32,'2019-03-14 12:32:24',1),(1879,123,32,'2019-03-14 12:33:53',0),(1880,123,32,'2019-03-14 12:34:37',0),(1881,123,32,'2019-03-14 12:35:10',0),(1882,123,32,'2019-03-14 12:35:24',0),(1883,123,32,'2019-03-14 12:35:39',0),(1884,123,32,'2019-03-14 12:35:49',0),(1885,123,32,'2019-03-14 12:36:26',0),(1886,123,32,'2019-03-14 12:36:47',0),(1887,123,32,'2019-03-14 12:36:50',0),(1888,123,32,'2019-03-14 12:37:46',0),(1889,124,32,'2019-03-14 12:39:28',0),(1890,124,32,'2019-03-14 12:39:50',0),(1891,124,32,'2019-03-14 12:39:52',0),(1892,125,32,'2019-03-14 12:42:14',1),(1893,126,32,'2019-03-14 12:42:53',0),(1894,126,32,'2019-03-14 12:43:17',0),(1895,126,32,'2019-03-14 12:43:28',0),(1896,126,32,'2019-03-14 12:43:37',0),(1897,127,32,'2019-03-14 12:45:23',0),(1898,127,32,'2019-03-14 12:45:46',0),(1899,127,32,'2019-03-14 12:45:50',0),(1900,128,32,'2019-03-14 12:47:34',0),(1901,128,32,'2019-03-14 12:48:03',0),(1902,128,32,'2019-03-14 12:48:32',0),(1903,162,35,'2019-03-14 13:03:30',0),(1904,162,35,'2019-03-14 13:07:24',1),(1905,166,35,'2019-03-14 13:12:17',0),(1906,166,35,'2019-03-14 13:13:24',1),(1907,166,35,'2019-03-14 13:14:41',0),(1908,166,35,'2019-03-14 13:16:09',1),(1909,167,35,'2019-03-14 13:18:39',0),(1910,167,35,'2019-03-14 13:19:03',0),(1911,167,35,'2019-03-14 13:21:17',0),(1912,167,35,'2019-03-14 13:21:35',1),(1913,167,35,'2019-03-14 13:22:17',1),(1914,168,35,'2019-03-14 13:25:51',1),(1915,169,35,'2019-03-14 13:28:27',1),(1916,169,35,'2019-03-14 13:28:29',1),(1917,169,35,'2019-03-14 13:28:40',1),(1918,128,32,'2019-03-14 13:29:14',0),(1919,128,32,'2019-03-14 13:29:54',0),(1920,129,32,'2019-03-14 13:30:50',0),(1921,129,32,'2019-03-14 13:31:13',0),(1922,129,32,'2019-03-14 13:31:40',0),(1923,129,32,'2019-03-14 13:31:42',0),(1924,130,32,'2019-03-14 13:33:05',0),(1925,170,35,'2019-03-14 13:33:16',0),(1926,130,32,'2019-03-14 13:33:22',0),(1927,170,35,'2019-03-14 13:33:25',0),(1928,131,32,'2019-03-14 13:33:57',1),(1929,132,32,'2019-03-14 13:34:25',1),(1930,170,35,'2019-03-14 13:35:12',0),(1931,133,32,'2019-03-14 13:37:25',1),(1932,134,32,'2019-03-14 13:39:51',1),(1933,135,32,'2019-03-14 13:40:32',1),(1934,136,32,'2019-03-14 13:58:44',1),(1935,137,32,'2019-03-14 13:59:15',1),(1936,138,32,'2019-03-14 13:59:59',1),(1937,139,32,'2019-03-14 14:01:09',1),(1938,140,32,'2019-03-14 14:02:57',1),(1939,141,32,'2019-03-14 14:04:38',1),(1940,142,32,'2019-03-14 14:07:02',1),(1941,143,32,'2019-03-14 14:08:57',1),(1942,144,32,'2019-03-14 14:10:09',1),(1943,144,32,'2019-03-14 14:10:20',1),(1944,144,32,'2019-03-14 14:11:08',1),(1945,145,32,'2019-03-14 14:12:09',1),(1946,146,32,'2019-03-14 14:12:45',1),(1947,147,32,'2019-03-14 14:13:49',1),(1948,148,32,'2019-03-14 14:14:39',1),(1949,149,32,'2019-03-14 14:15:18',1),(1950,150,32,'2019-03-14 14:16:50',1),(1951,151,32,'2019-03-14 14:18:19',1),(1952,151,32,'2019-03-14 14:18:36',1),(1953,151,32,'2019-03-14 14:18:43',1),(1954,153,32,'2019-03-14 14:24:56',1),(1955,154,32,'2019-03-14 14:25:06',0),(1956,154,32,'2019-03-15 10:47:29',0),(1957,154,32,'2019-03-15 10:48:22',0),(1958,154,32,'2019-03-15 10:48:49',0),(1959,154,32,'2019-03-15 10:48:59',0),(1960,154,32,'2019-03-15 10:50:33',0),(1961,154,32,'2019-03-15 10:50:50',0),(1962,155,32,'2019-03-15 10:52:46',1),(1963,156,32,'2019-03-15 10:53:41',1),(1964,157,32,'2019-03-15 10:56:14',0),(1965,157,32,'2019-03-15 10:56:20',0),(1966,157,32,'2019-03-15 10:57:06',0),(1967,157,32,'2019-03-15 11:31:29',0),(1968,157,32,'2019-03-15 11:32:14',0),(1969,157,32,'2019-03-15 11:33:27',1),(1970,158,32,'2019-03-15 11:34:32',1),(1971,159,32,'2019-03-15 11:35:46',1),(1972,160,32,'2019-03-15 11:36:51',0),(1973,160,32,'2019-03-15 11:37:58',0),(1974,160,32,'2019-03-15 11:40:53',1),(1975,161,32,'2019-03-15 11:43:27',1),(1976,162,32,'2019-03-15 11:45:37',1),(1977,163,32,'2019-03-15 11:46:14',0),(1978,163,32,'2019-03-15 11:47:38',0),(1979,163,32,'2019-03-15 11:48:15',1),(1980,164,32,'2019-03-15 11:49:13',0),(1981,164,32,'2019-03-15 11:50:19',1),(1982,165,32,'2019-03-15 11:55:15',1),(1983,165,32,'2019-03-15 11:55:24',1),(1984,166,32,'2019-03-15 11:58:33',0),(1985,166,32,'2019-03-15 11:59:44',0),(1986,166,32,'2019-03-15 12:01:14',1),(1987,166,32,'2019-03-15 12:01:23',1),(1988,167,32,'2019-03-15 12:03:37',0),(1989,167,32,'2019-03-15 12:04:21',1),(1990,168,32,'2019-03-15 12:07:27',1),(1991,168,32,'2019-03-15 12:07:52',1),(1992,169,32,'2019-03-15 12:09:18',0),(1993,169,32,'2019-03-15 12:09:27',0),(1994,169,32,'2019-03-15 12:10:38',1),(1995,1,29,'2019-03-20 12:00:17',1),(1996,2,29,'2019-03-20 12:01:16',1),(1997,3,29,'2019-03-20 12:04:09',1),(1998,4,29,'2019-03-20 12:05:05',1),(1999,5,29,'2019-03-20 12:07:32',0),(2000,5,29,'2019-03-20 12:08:09',1),(2001,6,29,'2019-03-20 12:08:31',1),(2002,7,29,'2019-03-20 12:10:16',0),(2003,7,29,'2019-03-20 12:10:36',0),(2004,7,29,'2019-03-20 12:11:22',1),(2005,7,29,'2019-03-20 12:11:56',0),(2006,7,29,'2019-03-20 12:13:05',1),(2007,8,29,'2019-03-20 12:16:11',1),(2008,9,29,'2019-03-20 12:18:49',1),(2009,10,29,'2019-03-20 12:29:43',0),(2010,10,29,'2019-03-20 12:30:02',0),(2011,10,29,'2019-03-20 12:30:17',1),(2012,11,29,'2019-03-20 12:38:24',0),(2013,11,29,'2019-03-20 12:39:18',0),(2014,11,29,'2019-03-20 12:41:28',0),(2015,11,29,'2019-03-20 12:42:25',1),(2016,12,29,'2019-03-20 12:44:07',0),(2017,12,29,'2019-03-20 12:44:21',1),(2018,13,29,'2019-03-20 12:48:20',0),(2019,13,29,'2019-03-20 12:48:50',1),(2020,14,29,'2019-03-20 12:51:48',1),(2021,15,29,'2019-03-20 12:53:30',0),(2022,15,29,'2019-03-20 12:53:53',0),(2023,15,29,'2019-03-20 12:54:01',0),(2024,15,29,'2019-03-20 12:54:12',1),(2025,16,29,'2019-03-20 12:56:27',1),(2026,16,29,'2019-03-20 12:56:43',1),(2027,17,29,'2019-03-20 12:58:40',0),(2028,17,29,'2019-03-20 12:58:51',0),(2029,17,29,'2019-03-20 12:59:12',1),(2030,18,29,'2019-03-20 13:02:06',0),(2031,18,29,'2019-03-20 13:02:44',0),(2032,18,29,'2019-03-20 13:02:57',0),(2033,18,29,'2019-03-20 13:03:23',1),(2034,19,29,'2019-03-20 13:05:38',0),(2035,19,29,'2019-03-20 13:05:49',0),(2036,19,29,'2019-03-20 13:06:10',0),(2037,19,29,'2019-03-20 13:06:18',1),(2038,20,29,'2019-03-20 13:07:31',0),(2039,20,29,'2019-03-20 13:07:50',1),(2040,20,29,'2019-03-20 13:08:05',1),(2041,20,29,'2019-03-20 13:08:52',1),(2042,21,29,'2019-03-20 13:21:03',0),(2043,21,29,'2019-03-20 13:21:39',0),(2044,21,29,'2019-03-20 13:22:49',1),(2045,21,29,'2019-03-20 13:27:10',1),(2046,21,29,'2019-03-20 13:27:25',1),(2047,22,29,'2019-03-20 13:33:10',1),(2048,22,29,'2019-03-20 13:33:47',1),(2049,22,29,'2019-03-20 13:34:01',1),(2050,23,29,'2019-03-20 13:35:29',1),(2051,24,29,'2019-03-20 13:37:07',1),(2052,25,29,'2019-03-20 13:38:25',0),(2053,26,29,'2019-03-20 13:39:54',1),(2054,27,29,'2019-03-20 13:41:03',0),(2055,27,29,'2019-03-20 13:41:31',0),(2056,27,29,'2019-03-20 13:41:41',0),(2057,27,29,'2019-03-20 13:42:04',0),(2058,27,29,'2019-03-20 13:42:21',0),(2059,27,29,'2019-03-20 13:43:05',0),(2060,27,29,'2019-03-20 13:43:15',0),(2061,28,29,'2019-03-20 13:44:11',0),(2062,28,29,'2019-03-20 13:44:22',0),(2063,28,29,'2019-03-20 13:45:19',0),(2064,28,29,'2019-03-20 13:46:19',0),(2065,28,29,'2019-03-20 13:47:12',0),(2066,27,29,'2019-03-21 04:54:05',0),(2067,27,29,'2019-03-21 04:54:33',0),(2068,27,29,'2019-03-21 04:54:57',0),(2069,28,29,'2019-03-21 04:57:37',0),(2070,28,29,'2019-03-21 04:57:49',0),(2071,28,29,'2019-03-21 05:00:31',0),(2072,28,29,'2019-03-21 05:00:38',0),(2073,28,29,'2019-03-21 05:01:22',0),(2074,28,29,'2019-03-21 05:02:12',0),(2075,28,29,'2019-03-21 05:02:20',0),(2076,29,29,'2019-03-21 05:03:28',0),(2077,29,29,'2019-03-21 05:03:47',1),(2078,30,29,'2019-03-21 05:05:18',0),(2079,30,29,'2019-03-21 05:05:37',0),(2080,31,29,'2019-03-21 05:07:05',0),(2081,31,29,'2019-03-21 05:07:24',1),(2082,32,29,'2019-03-21 05:08:00',1),(2083,33,29,'2019-03-21 05:11:50',0),(2084,33,29,'2019-03-21 05:12:37',0),(2085,33,29,'2019-03-21 05:13:01',0),(2086,33,29,'2019-03-21 05:14:38',0),(2087,33,29,'2019-03-21 05:14:59',1),(2088,34,29,'2019-03-21 05:17:15',0),(2089,34,29,'2019-03-21 05:18:27',1),(2090,34,29,'2019-03-21 05:18:36',1),(2091,35,29,'2019-03-21 05:20:40',0),(2092,35,29,'2019-03-21 05:21:04',1),(2093,36,29,'2019-03-21 05:25:20',0),(2094,36,29,'2019-03-21 05:25:52',0),(2095,36,29,'2019-03-21 05:26:40',0),(2096,37,29,'2019-03-21 05:32:28',0),(2097,37,29,'2019-03-21 05:33:03',0),(2098,37,29,'2019-03-21 05:34:14',0),(2099,38,29,'2019-03-21 05:35:27',0),(2100,38,29,'2019-03-21 05:35:38',0),(2101,38,29,'2019-03-21 05:36:00',0),(2102,39,29,'2019-03-21 05:37:44',0),(2103,39,29,'2019-03-21 05:38:09',0),(2104,40,29,'2019-03-21 05:39:17',0),(2105,40,29,'2019-03-21 05:39:34',1),(2106,41,29,'2019-03-21 05:40:49',0),(2107,27,29,'2019-03-24 03:56:21',0),(2108,35,29,'2019-03-24 03:59:41',1),(2109,36,29,'2019-03-24 04:35:51',0),(2110,36,29,'2019-03-24 04:36:09',0),(2111,37,29,'2019-03-24 04:37:02',0),(2112,37,29,'2019-03-24 04:37:26',0),(2113,38,29,'2019-03-24 04:37:57',0),(2114,39,29,'2019-03-24 04:39:35',0),(2115,40,29,'2019-03-24 04:41:37',1),(2116,41,29,'2019-03-24 04:42:35',0),(2117,41,29,'2019-03-24 04:43:08',0),(2118,42,29,'2019-03-24 04:44:36',1),(2119,43,29,'2019-03-24 04:45:09',1),(2120,44,29,'2019-03-24 04:45:41',1),(2121,45,29,'2019-03-24 04:47:06',1),(2122,46,29,'2019-03-24 04:48:03',1),(2123,47,29,'2019-03-24 04:49:11',0),(2124,47,29,'2019-03-24 04:50:02',0),(2125,47,29,'2019-03-24 04:50:58',1),(2126,48,29,'2019-03-24 04:51:40',1),(2127,49,29,'2019-03-24 05:00:22',0),(2128,49,29,'2019-03-24 05:01:04',1),(2129,50,29,'2019-03-24 05:03:53',1),(2130,51,29,'2019-03-24 05:04:42',0),(2131,51,29,'2019-03-24 05:04:54',0),(2132,52,29,'2019-03-24 05:06:46',0),(2133,52,29,'2019-03-24 05:06:59',0),(2134,52,29,'2019-03-24 05:07:09',0),(2135,53,29,'2019-03-24 05:08:53',0),(2136,154,29,'2019-03-24 07:26:44',0),(2137,154,29,'2019-03-24 07:27:06',1),(2138,155,29,'2019-03-24 07:29:34',0),(2139,155,29,'2019-03-24 07:31:05',0),(2140,155,29,'2019-03-24 07:32:59',1),(2141,156,29,'2019-03-24 07:33:55',1),(2142,157,29,'2019-03-24 07:35:24',1),(2143,157,29,'2019-03-24 07:35:42',1),(2144,158,29,'2019-03-24 07:38:09',0),(2145,158,29,'2019-03-24 07:38:45',1),(2146,159,29,'2019-03-24 07:39:58',1),(2147,160,29,'2019-03-24 07:42:05',1),(2148,161,29,'2019-03-24 07:43:33',1),(2149,162,29,'2019-03-24 07:49:33',0),(2150,162,29,'2019-03-24 07:50:00',1),(2151,162,29,'2019-03-24 07:50:23',1),(2152,163,29,'2019-03-24 07:52:31',0),(2153,163,29,'2019-03-24 07:52:44',1),(2154,163,29,'2019-03-24 07:52:54',1),(2155,164,29,'2019-03-24 07:55:17',0),(2156,164,29,'2019-03-24 07:55:37',0),(2157,164,29,'2019-03-24 07:55:51',0),(2158,164,29,'2019-03-24 07:56:16',0),(2159,164,29,'2019-03-24 07:56:33',1),(2160,164,29,'2019-03-24 07:56:48',1),(2161,165,29,'2019-03-24 08:00:13',1),(2162,165,29,'2019-03-24 08:00:34',1),(2163,172,29,'2019-03-24 08:05:51',0),(2164,172,29,'2019-03-24 08:06:23',1),(2165,173,29,'2019-03-24 08:06:44',1),(2166,175,29,'2019-03-24 08:06:53',1),(2167,175,29,'2019-03-24 08:07:18',1),(2168,176,29,'2019-03-24 08:07:43',1),(2169,177,29,'2019-03-24 08:08:44',0),(2170,177,29,'2019-03-24 08:09:06',0),(2171,177,29,'2019-03-24 08:09:47',0),(2172,177,29,'2019-03-24 08:10:50',1),(2173,178,29,'2019-03-24 08:11:26',0),(2174,180,29,'2019-03-24 08:12:53',1),(2175,181,29,'2019-03-24 08:12:59',1),(2176,182,29,'2019-03-24 08:13:05',1),(2177,183,29,'2019-03-24 08:13:23',1),(2178,184,29,'2019-03-24 08:14:14',0),(2179,184,29,'2019-03-24 08:14:42',1),(2180,1,5,'2019-06-07 13:39:40',0),(2181,1,5,'2019-06-07 13:39:54',1),(2182,2,5,'2019-07-19 23:10:55',0),(2183,1,36,'2019-08-08 08:30:46',1),(2184,2,36,'2019-08-08 08:31:17',1),(2185,3,36,'2019-08-08 08:31:50',1),(2186,4,36,'2019-08-08 08:47:30',1),(2187,5,36,'2019-08-08 08:47:54',0),(2188,5,36,'2019-08-08 08:48:30',1),(2189,6,36,'2019-08-08 08:59:00',1);
/*!40000 ALTER TABLE `exercise_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `exercises`
--

DROP TABLE IF EXISTS `exercises`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `exercises` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `code_id` varchar(150) NOT NULL,
  `title` varchar(250) NOT NULL,
  `description` text NOT NULL,
  `code` text NOT NULL,
  `course` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=373 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `exercises`
--

LOCK TABLES `exercises` WRITE;
/*!40000 ALTER TABLE `exercises` DISABLE KEYS */;
INSERT INTO `exercises` VALUES (1,'bad87fee1348bd9aedf0887a','Headline with the h2 Element','Over the next few lessons, we\'ll build an HTML5 cat photo web app piece-by-piece.<br><br>The <code>h2</code> element you will be adding in this step will add a level two heading to the web page.<br><br>This element tells the browser about the structure of your website. <code>h1</code> elements are often used for main headings, while <code>h2</code> elements are generally used for subheadings. There are also <code>h3</code>, <code>h4</code>, <code>h5</code> and <code>h6</code> elements to indicate different levels of subheadings.<br><br> <hr>Add an <code>h2</code> tag that says \"CatPhotoApp\" to create a second HTML <code>element</code> below your \"Hello World\" <code>h1</code> element.<br><br>',' <h1>Hello World</h1>',1),(2,'bad87fee1348bd9aedf08801','Inform with the Paragraph Element','<code>p</code> elements are the preferred element for paragraph text on websites. <code>p</code> is short for \"paragraph\".<br><br>You can create a paragraph element like this:<br><br><code>&#60;p&#62;I\'m a p tag!&#60;/p&#62;</code><br><br> <hr>Create a <code>p</code> element below your <code>h2</code> element, and give it the text \"Hello Paragraph\".<br><br>',' <h1>Hello World</h1> <h2>CatPhotoApp</h2>',1),(3,'bad87fee1348bd9aedf08833','Fill in the Blank with Placeholder Text','Web developers traditionally use <code>lorem ipsum text</code> as placeholder text. The \'lorem ipsum\' text is randomly scraped from a famous passage by Cicero of Ancient Rome.<br><br>Lorem ipsum text has been used as placeholder text by typesetters since the 16th century, and this tradition continues on the web.<br><br>Well, 5 centuries is long enough. Since we\'re building a CatPhotoApp, let\'s use something called <code>kitty ipsum text</code>.<br><br> <hr>Replace the text inside your <code>p</code> element with the first few words of this kitty ipsum text: <code>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</code><br><br>',' <h1>Hello World</h1>  <h2>CatPhotoApp</h2>  <p>Hello Paragraph</p>',1),(4,'bad87fee1348bd9aedf08802','Uncomment HTML','Commenting is a way that you can leave comments for other developers within your code without affecting the resulting output that is displayed the end user.<br><br>Commenting is also a convenient way to make code inactive without having to delete it entirely.<br><br>Comments in HTML starts with <code>&#60;!--</code>, and ends with a <code>--&#62;</code><br><br> <hr>Uncomment your <code>h1</code>, <code>h2</code> and <code>p</code> elements.<br><br>',' <!-- <h1>Hello World</h1>  <h2>CatPhotoApp</h2>  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p> -->',1),(5,'bad87fee1348bd9aedf08804','Comment out HTML','Remember that in order to start a comment, you need to use <code>&#60;!--</code> and to end a comment, you need to use <code>--&#62;</code><br><br>Here you\'ll need to end the comment before your <code>h2</code> element begins.<br><br> <hr>Comment out your <code>h1</code> element and your <code>p</code> element, but not your <code>h2</code> element.<br><br>',' <!-- <h1>Hello World</h1>  <h2>CatPhotoApp</h2>  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p> -->',1),(6,'bad87fed1348bd9aedf08833','Delete HTML Elements','Our phone doesn\'t have much vertical space.<br><br>Let\'s remove the unnecessary elements so we can start building our CatPhotoApp.<br><br> <hr>Delete your <code>h1</code> element so we can simplify our view.<br><br>',' <h1>Hello World</h1>  <h2>CatPhotoApp</h2>  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>',1),(7,'bad87fee1348bd9aecf08801','Introduction to HTML5 Elements','HTML5 introduces more descriptive HTML tags. These include <code>header</code>, <code>footer</code>, <code>nav</code>, <code>video</code>, <code>article</code>, <code>section</code> and others.<br><br>These tags make your HTML easier to read, and also help with Search Engine Optimization (SEO) and accessibility.<br><br>The <code>main</code> HTML5 tag helps search engines and other developers find the main content of your page.<br><br><strong>Note</strong><br>Many of the new HTML5 tags and their benefits are covered in the Applied Accessibility section.<br><br> <hr>Create a second <code>p</code> element after the existing <code>p</code> element with the following kitty ipsum text: <code>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</code><br><br>Wrap the paragraphs with an opening and closing <code>main</code> tag.<br><br>',' <h2>CatPhotoApp</h2>  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>',1),(8,'bad87fee1348bd9aedf08812','Add Images to Your Website','You can add images to your website by using the <code>img</code> element, and point to a specific image\'s URL using the <code>src</code> attribute.<br><br>An example of this would be:<br><br><code>&#60img src=\"https://www.your-image-source.com/your-image.jpg\"&#62</code><br><br>Note that <code>img</code> elements are self-closing.<br><br>All <code>img</code> elements <strong>must</strong> have an <code>alt</code> attribute. The text inside an <code>alt</code> attribute is used for screen readers to improve accessibility and is displayed if the image fails to load.<br><br>Note: If the image is purely decorative, using an empty <code>alt</code> attribute is a best practice.<br><br>Ideally the <code>alt</code> attribute should not contain special characters unless needed.<br><br>Let\'s add an <code>alt</code> attribute to our <code>img</code> example above:<br><br><code>&#60img src=\"https://www.your-image-source.com/your-image.jpg\" alt=\"Author standing on a beach with two thumbs up.\"&#62</code><br><br> <hr>Let\'s try to add an image to our website:<br><br>Insert an <code>img</code> tag, before the <code>h2</code> element.<br><br>Now set the <code>src</code> attribute so that it points to this url:<br><br><code>https://bit.ly/fcc-relaxing-cat</code><br><br>Finally don\'t forget to give your image an <code>alt</code> text.<br><br>',' <h2>CatPhotoApp</h2> <main>         <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>   <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p> </main>',1),(9,'bad87fee1348bd9aedf08816','Link to External Pages with Anchor Elements','You can use <code>anchor</code> elements to link to content outside of your web page.<br><br><code>anchor</code> elements need a destination web address called an <code>href</code> attribute. They also need anchor text. Here\'s an example:<br><br><code>&#60;a href=\"https://freecodecamp.org\">this links to freecodecamp.org&#60;/a&#62;</code><br><br>Then your browser will display the text <strong>\"this links to freecodecamp.org\"</strong> as a link you can click. And that link will take you to the web address <strong>https://www.freecodecamp.org</strong>.<br><br> <hr>Create an <code>a</code> element that links to <code>http://freecatphotoapp.com</code> and has \"cat photos\" as its <code>anchor text</code>.<br><br>',' <h2>CatPhotoApp</h2> <main>            <img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\">      <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>   <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p> </main>',1),(10,'bad88fee1348bd9aedf08816','Link to Internal Sections of a Page with Anchor Elements','Anchor elements can also be used to create internal links to jump to different sections within a webpage.<br><br>To create an internal link, you assign a link\'s <code>href</code> attribute to a hash symbol <code>#</code> plus the value of the <code>id</code> attribute for the element that you want to internally link to, usually further down the page. You then need to add the same <code>id</code> attribute to the element you are linking to. An <code>id</code> is an attribute that uniquely describes an element.<br><br>Below is an example of an internal anchor link and its target element:<br><br><blockquote>&lt;a href=\"#contacts-header\"&gt;Contacts&lt;/a&gt;<br>...<br>&lt;h2 id=\"contacts-header\"&gt;Contacts&lt;/h2&gt;</blockquote><br><br>When users click the Contacts link, they\'ll be taken to the section of the webpage with the <b>Contacts</b> header element.<br><br> <hr>Change your external link to an internal link by changing the <code>href</code> attribute to \"#footer\" and the text from \"cat photos\" to \"Jump to Bottom\".<br><br>Remove the <code>target=\"_blank\"</code> attribute from the anchor tag since this causes the linked document to open in a new window tab.<br><br>Then add an <code>id</code> attribute with a value of \"footer\" to the <code>&lt;footer&gt;</code> element at the bottom of the page.<br><br>',' <h2>CatPhotoApp</h2> <main>      <a href=\"http://freecatphotoapp.com\" target=\"_blank\">cat photos</a>      <img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\">      <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>   <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>   <p>Meowwww loved it, hated it, loved it, hated it yet spill litter box, scratch at owner, destroy all furniture, especially couch or lay on arms while you\'re using the keyboard. Missing until dinner time toy mouse squeak roll over. With tail in the air lounge in doorway. Man running from cops stops to pet cats, goes to jail.</p>   <p>Intently stare at the same spot poop in the plant pot but kitten is playing with dead mouse. Get video posted to internet for chasing red dot leave fur on owners clothes meow to be let out and mesmerizing birds leave fur on owners clothes or favor packaging over toy so purr for no reason. Meow to be let out play time intently sniff hand run outside as soon as door open yet destroy couch.</p>    </main>    <footer>Copyright Cat Photo App</footer>',1),(11,'bad87fee1348bd9aede08817','Nest an Anchor Element within a Paragraph','You can nest links within other text elements.<br><br><blockquote>&#60;p&#62;<br> Here\'s a &#60;a target=\"_blank\" href=\"http://freecodecamp.org\"&#62; link to freecodecamp.org&#60;/a&#62; for you to follow.<br>&#60;/p&#62;</blockquote><br><br>Let\'s break down the example:<br><br>Normal text is wrapped in the <code>p</code> element:<br> <code>&#60;p&#62; Here\'s a ... for you to follow. &#60;/p&#62;</code><br><br>Next is the <code>anchor</code> element <code>&#60;a&#62;</code> (which requires a closing tag <code>&#60;/a&#62;</code>):<br>  <code>&#60;a&#62; ... &#60;/a&#62;</code><br><br><code>target</code> is an anchor tag attribute that specifies where to open the link and the value <code>\"_blank\"</code> specifies to open the link in a new tab<br><br><code>href</code> is an anchor tag attribute that contains the URL address of the link:<br>  <code>&#60;a href=\"http://freecodecamp.org\"> ... &#60;/a&#62;</code><br><br>The text, <strong>\"link to freecodecamp.org\"</strong>, within the anchor element called <code>anchor text</code>, will display a link to click:<br>  <code>&#60;a href=\" ... \"&#62;link to freecodecamp.org&#60;/a&#62;</code><br><br>The final output of the example will look like this:<br><p>Here\'s a <a target=\"_blank\" href=\"http://freecodecamp.org\"> link to freecodecamp.org</a> for you to follow.</p><br><br> <hr>Now nest your existing <code>a</code> element within a new <code>p</code> element (just after the existing <code>main</code> element). The new paragraph should have text that says \"View more cat photos\", where \"cat photos\" is a link, and the rest of the text is plain text.<br><br>',' <h2>CatPhotoApp</h2> <main>      <a href=\"http://freecatphotoapp.com\" target=\"_blank\">cat photos</a>      <img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\">      <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>   <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p> </main>',1),(12,'bad87fee1348bd9aedf08817','Make Dead Links Using the Hash Symbol','Sometimes you want to add <code>a</code> elements to your website before you know where they will link.<br><br>This is also handy when you\'re changing the behavior of a link using <code>JavaScript</code>, which we\'ll learn about later.<br><br> <hr>The current value of the <code>href</code> attribute is a link that points to \"http://freecatphotoapp.com\". Replace the <code>href</code> attribute value with a <code>#</code>, also known as a hash symbol, to create a dead link.<br><br>For example: <code>href=\"#\"</code><br><br>',' <h2>CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"http://freecatphotoapp.com\" target=\"_blank\">cat photos</a>.</p>      <img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\">      <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>   <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p> </main>',1),(13,'bad87fee1348bd9aedf08820','Turn an Image into a Link','You can make elements into links by nesting them within an <code>a</code> element.<br><br>Nest your image within an <code>a</code> element. Here\'s an example:<br><br><code>&#60;a href=\"#\"&#62;&#60;img src=\"https://bit.ly/fcc-running-cats\" alt=\"Three kittens running towards the camera.\"&#62;&#60;/a&#62;</code><br><br>Remember to use <code>#</code> as your <code>a</code> element\'s <code>href</code> property in order to turn it into a dead link.<br><br> <hr>Place the existing image element within an anchor element.<br><br>Once you\'ve done this, hover over your image with your cursor. Your cursor\'s normal pointer should become the link clicking pointer. The photo is now a link.<br><br>',' <h2>CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\">      <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>   <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p> </main>',1),(14,'bad87fee1348bd9aedf08827','Create a Bulleted Unordered List','HTML has a special element for creating <code>unordered lists</code>, or bullet point style lists.<br><br>Unordered lists start with an opening <code>&#60;ul&#62;</code> element, followed by any number of <code>&#60;li&#62;</code> elements. Finally, unordered lists close with a <code>&#60;/ul&#62;</code><br><br>For example: <br><br><blockquote>&#60;ul&#62;<br>&nbsp;&nbsp;&#60;li&#62;milk&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;cheese&#60;/li&#62;<br>&#60;/ul&#62;</blockquote><br><br>would create a bullet point style list of \"milk\" and \"cheese\".<br><br> <hr>Remove the last two <code>p</code> elements and create an unordered list of three things that cats love at the bottom of the page.<br><br>',' <h2>CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>   <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p> </main>',1),(15,'bad87fee1348bd9aedf08828','Create an Ordered List','HTML has another special element for creating <code>ordered lists</code>, or numbered lists.<br><br>Ordered lists start with an opening <code>&#60;ol&#62;</code> element, followed by any number of <code>&#60;li&#62;</code> elements. Finally, ordered lists close with a <code>&#60;/ol&#62;</code><br><br>For example:<br><br><blockquote>&#60;ol&#62;<br>&nbsp;&nbsp;&#60;li&#62;Garfield&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;Sylvester&#60;/li&#62;<br>&#60;/ol&#62;</blockquote><br><br>would create a numbered list of \"Garfield\" and \"Sylvester\".<br><br> <hr>Create an ordered list of the top 3 things cats hate the most.<br><br>',' <h2>CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>    </main>',1),(16,'bad87fee1348bd9aedf08829','Create a Text Field','Now let\'s create a web form.<br><br>Input elements are a convenient way to get input from your user.<br><br>You can create a text input like this:<br><br><code>&#60;input type=\"text\"&#62;</code><br><br>Note that <code>input</code> elements are self-closing.<br><br> <hr>Create an <code>input</code> element of type <code>text</code> below your lists.<br><br>',' <h2>CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>       </main>',1),(17,'bad87fee1348bd9aedf08830','Add Placeholder Text to a Text Field','Placeholder text is what is displayed in your <code>input</code> element before your user has inputted anything.<br><br>You can create placeholder text like so:<br><br><code>&#60;input type=\"text\" placeholder=\"this is placeholder text\"&#62;</code><br><br> <hr>Set the <code>placeholder</code> value of your text <code>input</code> to \"cat photo URL\".<br><br>',' <h2>CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <input type=\"text\"> </main>',1),(18,'bad87fee1348bd9aede08830','Create a Form Element','You can build web forms that actually submit data to a server using nothing more than pure HTML. You can do this by specifying an action on your <code>form</code> element.<br><br>For example:<br><br><code>&#60;form action=\"/url-where-you-want-to-submit-form-data\"&#62;&#60;/form&#62;</code><br><br> <hr>Nest your text field inside a <code>form</code> element, and add the <code>action=\"/submit-cat-photo\"</code> attribute to the form element.<br><br>',' <h2>CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <input type=\"text\" placeholder=\"cat photo URL\"> <main>',1),(19,'bad87fee1348bd9aedd08830','Add a Submit Button to a Form','Let\'s add a <code>submit</code> button to your form. Clicking this button will send the data from your form to the URL you specified with your form\'s <code>action</code> attribute.<br><br>Here\'s an example submit button:<br><br><code>&#60;button type=\"submit\"&#62;this button submits the form&#60;/button&#62;</code><br><br> <hr>Add a button as the last element of your <code>form</code> element with a type of <code>submit</code>, and \"Submit\" as its text.<br><br>',' <h2>CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <input type=\"text\" placeholder=\"cat photo URL\">   </form> </main>',1),(20,'bad87fee1348bd9aedc08830','Use HTML5 to Require a Field','You can require specific form fields so that your user will not be able to submit your form until he or she has filled them out.<br><br>For example, if you wanted to make a text input field required, you can just add the attribute <code>required</code> within your <code>input</code> element, like this: <code>&#60;input type=\"text\" required&#62;</code><br><br> <hr>Make your text <code>input</code> a <code>required</code> field, so that your user can\'t submit the form without completing this field.<br><br>Then try to submit the form without inputting any text. See how your HTML5 form notifies you that the field is required?<br><br>',' <h2>CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <input type=\"text\" placeholder=\"cat photo URL\">     <button type=\"submit\">Submit</button>   </form> </main>',1),(21,'bad87fee1348bd9aedf08834','Create a Set of Radio Buttons','You can use <code>radio buttons</code> for questions where you want the user to only give you one answer out of multiple options.<br><br>Radio buttons are a type of <code>input</code>.<br><br>Each of your radio buttons can be nested within its own <code>label</code> element. By wrapping an <code>input</code> element inside of a <code>label</code> element it will automatically associate the radio button input with the label element surrounding it.<br><br>All related radio buttons should have the same <code>name</code> attribute to create a radio button group. By creating a radio group, selecting any single radio button will automatically deselect the other buttons within the same group ensuring only one answer is provided by the user.<br><br>Here\'s an example of a radio button:<br><br><blockquote>&#60;label&#62; <br>&nbsp;&nbsp;&#60;input type=\"radio\" name=\"indoor-outdoor\"&#62;Indoor <br>&#60;/label&#62;</blockquote><br><br>It is considered best practice to set a <code>for</code> attribute on the <code>label</code> element, with a value that matches the value of the <code>id</code> attribute of the <code>input</code> element. This allows assistive technologies to create a linked relationship between the label and the child <code>input</code> element. For example:<br><br><blockquote>&#60;label for=\"indoor\"&#62; <br>&nbsp;&nbsp;&#60;input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"&#62;Indoor <br>&#60;/label&#62;</blockquote><br><br> <hr>Add a pair of radio buttons to your form, each nested in its own label element. One should have the option of <code>indoor</code> and the other should have the option of <code>outdoor</code>. Both should share the <code>name</code> attribute of <code>indoor-outdoor</code> to create a radio group.<br><br>',' <h2>CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',1),(22,'bad87fee1348bd9aedf08835','Create a Set of Checkboxes','Forms commonly use <code>checkboxes</code> for questions that may have more than one answer.<br><br>Checkboxes are a type of <code>input</code><br><br>Each of your checkboxes can be nested within its own <code>label</code> element. By wrapping an <code>input</code> element inside of a <code>label</code> element it will automatically associate the checkbox input with the label element surrounding it.<br><br>All related checkbox inputs should have the same <code>name</code> attribute.<br><br>It is considered best practice to explicitly define the relationship between a checkbox <code>input</code> and its corresponding <code>label</code> by setting the <code>for</code> attribute on the <code>label</code> element to match the <code>id</code> attribute of the associated <code>input</code> element.<br><br>Here\'s an example of a checkbox:<br><br><code>&#60;label for=\"loving\"&#62;&#60;input id=\"loving\" type=\"checkbox\" name=\"personality\"&#62; Loving&#60;/label&#62;</code><br><br> <hr>Add to your form a set of three checkboxes. Each checkbox should be nested within its own <code>label</code> element. All three should share the <code>name</code> attribute of <code>personality</code>.<br><br>',' <h2>CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',1),(23,'bad87fee1348bd9aedd08835','Check Radio Buttons and Checkboxes by Default','You can set a checkbox or radio button to be checked by default using the <code>checked</code> attribute.<br><br>To do this, just add the word \"checked\" to the inside of an input element. For example:<br><br><code>&#60;input type=\"radio\" name=\"test-name\" checked&#62;</code><br><br> <hr>Set the first of your <code>radio buttons</code> and the first of your <code>checkboxes</code> to both be checked by default.<br><br>',' <h2>CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',1),(24,'bad87fee1348bd9aede08835','Nest Many Elements within a Single div Element','The <code>div</code> element, also known as a division element, is a general purpose container for other elements.<br><br>The <code>div</code> element is probably the most commonly used HTML element of all.<br><br>Just like any other non-self-closing element, you can open a <code>div</code> element with <code>&#60;div&#62;</code> and close it on another line with <code>&#60;/div&#62;</code>.<br><br> <hr>Nest your \"Things cats love\" and \"Things cats hate\" lists all within a single <code>div</code> element.<br><br>Hint: Try putting your opening <code>div</code> tag above your \"Things cats love\" <code>p</code> element and your closing <code>div</code> tag after your closing <code>ol</code> tag so that both of your lists are within one <code>div</code>.<br><br>',' <h2>CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>      <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',1),(25,'587d78aa367417b2b2512aed','Declare the Doctype of an HTML Document','The challenges so far have covered specific HTML tags and their uses. However, there are a few elements that give overall structure to your page, and should be included in every HTML document.<br><br>At the top of your document, you need to tell the browser which version of HTML your page is using. HTML is an evolving language, and is updated regularly. Most major browsers support the latest specification, which is HTML5. However, older web pages may use previous versions of the language.<br><br>You tell the browser this information by adding the <code>&lt;!DOCTYPE ...&gt;</code> tag on the first line, where the \"<code>...</code>\" part is the version of HTML. For HTML5, you use <code>&lt;!DOCTYPE html&gt;</code>.<br><br>The <code>!</code> and uppercase <code>DOCTYPE</code> is important, especially for older browsers. The <code>html</code> is not case sensitive.<br><br>Next, the rest of your HTML code needs to be wrapped in <code>html</code> tags. The opening <code>&lt;html&gt;</code> goes directly below the <code>&lt;!DOCTYPE html&gt;</code> line, and the closing <code>&lt;/html&gt;</code> goes at the end of the page.<br><br>Here\'s an example of the page structure:<br><br><blockquote>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&nbsp;&nbsp;&lt;!-- Your HTML code goes here --&gt;<br>&lt;/html&gt;</blockquote><br><br> <hr>Add a <code>DOCTYPE</code> tag for HTML5 to the top of the blank HTML document in the code editor. Under it, add opening and closing <code>html</code> tags, which wrap around an <code>h1</code> element. The heading can include any text.<br><br>',' <!DOCTYPE html> <html>   <title>The best page ever</title>      <h1>The best page ever</h1>   <p>Cat ipsum dolor sit amet, jump launch to pounce upon little yarn mouse, bare fangs at toy run hide in litter box until treats are fed. Go into a room to decide you didn\'t want to be in there anyway. I like big cats and i can not lie kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Meow i could pee on this if i had the energy for slap owner\'s face at 5am until human fills food dish yet scamper. Knock dish off table head butt cant eat out of my own dish scratch the furniture. Make meme, make cute face. Sleep in the bathroom sink chase laser but pee in the shoe. Paw at your fat belly licks your face and eat grass, throw it back up kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>    </html>  ',1),(26,'587d78aa367417b2b2512aec','Define the Head and Body of an HTML Document','You can add another level of organization in your HTML document within the <code>html</code> tags with the <code>head</code> and <code>body</code> elements. Any markup with information about your page would go into the <code>head</code> tag. Then any markup with the content of the page (what displays for a user) would go into the <code>body</code> tag.<br><br>Metadata elements, such as <code>link</code>, <code>meta</code>, <code>title</code>, and <code>style</code>, typically go inside the <code>head</code> element.<br><br>Here\'s an example of a page\'s layout:<br><br><blockquote>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&nbsp;&nbsp;&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!-- metadata elements --&gt;<br>&nbsp;&nbsp;&lt;/head&gt;<br>&nbsp;&nbsp;&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!-- page contents --&gt;<br>&nbsp;&nbsp;&lt;/body&gt;<br>&lt;/html&gt;</blockquote><br><br> <hr>Edit the markup so there\'s a <code>head</code> and a <code>body</code>. The <code>head</code> element should only include the <code>title</code>, and the <code>body</code> element should only include the <code>h1</code> and <code>p</code>.<br><br>',' <h1>Hello</h1>',1),(27,'bad87fee1348bd9aedf08803','Change the Color of Text','Now let\'s change the color of some of our text.<br><br>We can do this by changing the <code>style</code> of your <code>h2</code> element.<br><br>The property that is responsible for the color of an element\'s text is the <code>color</code> style property.<br><br>Here\'s how you would set your <code>h2</code> element\'s text color to blue:<br><br><code>&#60;h2 style=\"color: blue;\"&#62;CatPhotoApp&#60;/h2&#62;</code><br><br>Note that it is a good practice to end inline <code>style</code> declarations with a <code>;</code> .<br><br> <hr>Change your <code>h2</code> element\'s style so that its text color is red.<br><br>',' <h2>CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div>     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(28,'bad87fee1348bd9aedf08805','Use CSS Selectors to Style Elements','With CSS, there are hundreds of CSS <code>properties</code> that you can use to change the way an element looks on your page.<br><br>When you entered <code>&#60;h2 style=\"color: red\"&#62;CatPhotoApp&#60;/h2&#62;</code>, you were styling that individual <code>h2</code> element with <code>inline CSS</code>, which stands for <code>Cascading Style Sheets</code>.<br><br>That\'s one way to specify the style of an element, but there\'s a better way to apply <code>CSS</code>.<br><br>At the top of your code, create a <code>style</code> block like this:<br><br><blockquote>&#60;style&#62;<br>&#60;/style&#62;</blockquote><br><br>Inside that style block, you can create a <code>CSS selector</code> for all <code>h2</code> elements. For example, if you wanted all <code>h2</code> elements to be red, you would add a style rule that looks like this:<br><br><blockquote>&#60;style&#62;<br>&nbsp;&nbsp;h2 {color: red;}<br>&#60;/style&#62;</blockquote><br><br>Note that it\'s important to have both opening and closing curly braces (<code>{</code> and <code>}</code>) around each element\'s style rule(s). You also need to make sure that your element\'s style definition is between the opening and closing style tags. Finally, be sure to add a semicolon to the end of each of your element\'s style rules.<br><br> <hr>Delete your <code>h2</code> element\'s style attribute, and instead create a CSS <code>style</code> block. Add the necessary CSS to turn all <code>h2</code> elements blue.<br><br>',' <h2 style=\"color: red\">CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div>     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(29,'bad87fee1348bd9aecf08806','Use a CSS Class to Style an Element','Classes are reusable styles that can be added to HTML elements.<br><br>Here\'s an example CSS class declaration:<br><br><blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.blue-text {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: blue;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote><br><br>You can see that we\'ve created a CSS class called <code>blue-text</code> within the <code>&#60;style&#62;</code> tag.<br><br>You can apply a class to an HTML element like this:<br><br><code>&#60;h2 class=\"blue-text\"&#62;CatPhotoApp&#60;/h2&#62;</code><br><br>Note that in your CSS <code>style</code> element, class names start with a period. In your HTML elements\' class attribute, the class name does not include the period.<br><br> <hr>Inside your <code>style</code> element, change the <code>h2</code> selector to <code>.red-text</code> and update the color\'s value from <code>blue</code> to <code>red</code>.<br><br>Give your <code>h2</code> element the <code>class</code> attribute with a value of <code>\'red-text\'</code>.<br><br>',' <style>   h2 {     color: blue;   } </style>  <h2>CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div>     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(30,'bad87fee1348bd9aefe08806','Style Multiple Elements with a CSS Class','Classes allow you to use the same CSS styles on multiple HTML elements. You can see this by applying your <code>red-text</code> class to the first <code>p</code> element.<br><br>',' <style>   .red-text {     color: red;   } </style>  <h2 class=\"red-text\">CatPhotoApp</h2> <main>   <p>Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div>     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(31,'bad87fee1348bd9aedf08806','Change the Font Size of an Element','Font size is controlled by the <code>font-size</code> CSS property, like this:<br><br><blockquote>h1 {<br>&nbsp;&nbsp;font-size: 30px;<br>}</blockquote><br><br> <hr>Inside the same <code>&#60;style&#62;</code> tag that contains your <code>red-text</code> class, create an entry for <code>p</code> elements and set the <code>font-size</code> to 16 pixels (<code>16px</code>).<br><br>',' <style>   .red-text {     color: red;   } </style>  <h2 class=\"red-text\">CatPhotoApp</h2> <main>   <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div>     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(32,'bad87fee1348bd9aede08807','Set the Font Family of an Element','You can set which font an element should use, by using the <code>font-family</code> property.<br><br>For example, if you wanted to set your <code>h2</code> element\'s font to <code>sans-serif</code>, you would use the following CSS:<br><br><blockquote>h2 {<br>&nbsp;&nbsp;font-family: sans-serif;<br>}</blockquote><br><br> <hr>Make all of your <code>p</code> elements use the <code>monospace</code> font.<br><br>',' <style>   .red-text {     color: red;   }    p {     font-size: 16px;   } </style>  <h2 class=\"red-text\">CatPhotoApp</h2> <main>   <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div>     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(33,'bad87fee1348bd9aedf08807','Import a Google Font','In addition to specifying common fonts that are found on most operating systems, we can also specify non-standard, custom web fonts for use on our website. There are various sources for web fonts on the internet but, for this example we will focus on the Google Fonts library.<br><br><a href=\'https://fonts.google.com/\' target=\'_blank\'>Google Fonts</a> is a free library of web fonts that you can use in your CSS by referencing the font\'s URL.<br><br>So, let\'s go ahead and import and apply a Google font (note that if Google is blocked in your country, you will need to skip this challenge).<br><br>To import a Google Font, you can copy the font(s) URL from the Google Fonts library and then paste it in your HTML. For this challenge, we\'ll import the <code>Lobster</code> font. To do this, copy the following code snippet and paste it into the top of your code editor(before the opening <code>style</code> element):<br><br><code>&#60;link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"&#62;</code><br><br>Now you can use the <code>Lobster</code> font in your CSS by using <code>Lobster</code> as the FAMILY_NAME as in the following example:<br><code>font-family: FAMILY_NAME, GENERIC_NAME;</code>.<br><br>The GENERIC_NAME is optional, and is a fallback font in case the other specified font is not available. This is covered in the next challenge.<br><br>Family names are case-sensitive and need to be wrapped in quotes if there is a space in the name. For example, you need quotes to use the <code>\"Open Sans\"</code> font, but not to use the <code>Lobster</code> font.<br><br> <hr>Create a <code>font-family</code> CSS rule that uses the <code>Lobster</code> font, and ensure that it will be applied to your <code>h2</code> element.<br><br>',' <style>   .red-text {     color: red;   }    p {     font-size: 16px;     font-family: monospace;   } </style>  <h2 class=\"red-text\">CatPhotoApp</h2> <main>   <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div>     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(34,'bad87fee1348bd9aedf08808','Specify How Fonts Should Degrade','There are several default fonts that are available in all browsers. These generic font families include <code>monospace</code>, <code>serif</code> and <code>sans-serif</code><br><br>When one font isn\'t available, you can tell the browser to \"degrade\" to another font.<br><br>For example, if you wanted an element to use the <code>Helvetica</code> font, but degrade to the <code>sans-serif</code> font when <code>Helvetica</code> wasn\'t available, you will specify it as follows:<br><br><blockquote>p {<br>&nbsp;&nbsp;font-family: Helvetica, sans-serif;<br>}</blockquote><br><br>Generic font family names are not case-sensitive. Also, they do not need quotes because they are CSS keywords.<br><br> <hr>To begin with, apply the <code>monospace</code> font to the <code>h2</code> element, so that it now has two fonts - <code>Lobster</code> and <code>monospace</code>.<br><br>In the last challenge, you imported the <code>Lobster</code> font using the <code>link</code> tag. Now comment out that import of the <code>Lobster</code> font(using the HTML comments you learned before) from Google Fonts so that it isn\'t available anymore. Notice how your <code>h2</code> element degrades to the <code>monospace</code> font.<br><br><strong>Note</strong><br>If you have the Lobster font installed on your computer, you won\'t see the degradation because your browser is able to find the font.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster;   }    p {     font-size: 16px;     font-family: monospace;   } </style>  <h2 class=\"red-text\">CatPhotoApp</h2> <main>   <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div>     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(35,'bad87fee1348bd9acdf08812','Size Your Images','CSS has a property called <code>width</code> that controls an element\'s width. Just like with fonts, we\'ll use <code>px</code> (pixels) to specify the image\'s width.<br><br>For example, if we wanted to create a CSS class called <code>larger-image</code> that gave HTML elements a width of 500 pixels, we\'d use:<br><br><blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.larger-image {<br>&nbsp;&nbsp;&nbsp;&nbsp;width: 500px;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote><br><br> <hr>Create a class called <code>smaller-image</code> and use it to resize the image so that it\'s only 100 pixels wide.<br><br><strong>Note</strong><br>Due to browser implementation differences, you may need to be at 100% zoom to pass the tests on this challenge.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, monospace;   }    p {     font-size: 16px;     font-family: monospace;   } </style>  <h2 class=\"red-text\">CatPhotoApp</h2> <main>   <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div>     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(36,'bad87fee1348bd9bedf08813','Add Borders Around Your Elements','CSS borders have properties like <code>style</code>, <code>color</code> and <code>width</code><br><br>For example, if we wanted to create a red, 5 pixel border around an HTML element, we could use this class:<br><br><blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.thin-red-border {<br>&nbsp;&nbsp;&nbsp;&nbsp;border-color: red;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-width: 5px;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-style: solid;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote><br><br> <hr>Create a class called <code>thick-green-border</code>. This class should add a 10px, solid, green border around an HTML element. Apply the class to your cat photo.<br><br>Remember that you can apply multiple classes to an element using its <code>class</code> attribute, by separating each class name with a space. For example:<br><br><code>&lt;img class=\"class1 class2\"&gt;</code><br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, monospace;   }    p {     font-size: 16px;     font-family: monospace;   }    .smaller-image {     width: 100px;   } </style>  <h2 class=\"red-text\">CatPhotoApp</h2> <main>   <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img class=\"smaller-image\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div>     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(37,'bad87fee1348bd9aedf08814','Add Rounded Corners with border-radius','Your cat photo currently has sharp corners. We can round out those corners with a CSS property called <code>border-radius</code>.<br><br> <hr>You can specify a <code>border-radius</code> with pixels. Give your cat photo a <code>border-radius</code> of <code>10px</code>.<br><br>Note: this challenge allows for multiple possible solutions. For example, you may add <code>border-top-left-radius</code> to either the <code>.thick-green-border</code> class or the <code>.smaller-image</code> class.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, monospace;   }    p {     font-size: 16px;     font-family: monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;   }    .smaller-image {     width: 100px;   } </style>  <h2 class=\"red-text\">CatPhotoApp</h2> <main>   <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div>     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(38,'bad87fee1348bd9aedf08815','Make Circular Images with a border-radius','In addition to pixels, you can also specify the <code>border-top-left-radius</code> using a percentage.<br><br> <hr>Give your cat photo a <code>border-radius</code> of <code>50%</code>.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, monospace;   }    p {     font-size: 16px;     font-family: monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 10px;   }    .smaller-image {     width: 100px;   } </style>  <h2 class=\"red-text\">CatPhotoApp</h2> <main>   <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div>     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(39,'bad87fed1348bd9aede07836','Give a Background Color to a div Element','You can set an element\'s background color with the <code>background-color</code> property.<br><br>For example, if you wanted an element\'s background color to be <code>green</code>, you\'d put this within your <code>style</code> element:<br><br><blockquote>.green-background {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote><br><br> <hr>Create a class called <code>silver-background</code> with the <code>background-color</code> of silver. Assign this class to your <code>div</code> element.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, monospace;   }    p {     font-size: 16px;     font-family: monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }    .smaller-image {     width: 100px;   } </style>  <h2 class=\"red-text\">CatPhotoApp</h2> <main>   <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div>     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(40,'bad87eee1348bd9aede07836','Set the id of an Element','In addition to classes, each HTML element can also have an <code>id</code> attribute.<br><br>There are several benefits to using <code>id</code> attributes: You can use an <code>id</code> to style a single element and later you\'ll learn that you can use them to select and modify specific elements with JavaScript.<br><br><code>id</code> attributes should be unique. Browsers won\'t enforce this, but it is a widely agreed upon best practice. So please don\'t give more than one element the same <code>id</code> attribute.<br><br>Here\'s an example of how you give your <code>h2</code> element the id of <code>cat-photo-app</code>:<br><br><code>&#60;h2 id=\"cat-photo-app\"></code><br><br> <hr>Give your <code>form</code> element the id <code>cat-photo-form</code>.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, monospace;   }    p {     font-size: 16px;     font-family: monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }    .smaller-image {     width: 100px;   }    .silver-background {     background-color: silver;   } </style>  <h2 class=\"red-text\">CatPhotoApp</h2> <main>   <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div class=\"silver-background\">     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(41,'bad87dee1348bd9aede07836','Use an id Attribute to Style an Element','One cool thing about <code>id</code> attributes is that, like classes, you can style them using CSS.<br><br>However, an <code>id</code> is not reusable and should only be applied to one element. An <code>id</code> also has a higher specificity (importance) than a class so if both are applied to the same element and have conflicting styles, the styles of the <code>id</code> will be applied.<br><br>Here\'s an example of how you can take your element with the <code>id</code> attribute of <code>cat-photo-element</code> and give it the background color of green. In your <code>style</code> element:<br><br><blockquote>#cat-photo-element {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote><br><br>Note that inside your <code>style</code> element, you always reference classes by putting a <code>.</code> in front of their names. You always reference ids by putting a <code>#</code> in front of their names.<br><br> <hr>Try giving your form, which now has the <code>id</code> attribute of <code>cat-photo-form</code>, a green background.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, monospace;   }    p {     font-size: 16px;     font-family: monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }    .smaller-image {     width: 100px;   }    .silver-background {     background-color: silver;   } </style>  <h2 class=\"red-text\">CatPhotoApp</h2> <main>   <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div class=\"silver-background\">     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\" id=\"cat-photo-form\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(42,'bad88fee1348bd9aedf08825','Adjust the Padding of an Element','Now let\'s put our Cat Photo App away for a little while and learn more about styling HTML.<br><br>You may have already noticed this, but all HTML elements are essentially little rectangles.<br><br>Three important properties control the space that surrounds each HTML element: <code>padding</code>, <code>margin</code>, and <code>border</code>.<br><br>An element\'s <code>padding</code> controls the amount of space between the element\'s content and its <code>border</code>.<br><br>Here, we can see that the blue box and the red box are nested within the yellow box. Note that the red box has more <code>padding</code> than the blue box.<br><br>When you increase the blue box\'s <code>padding</code>, it will increase the distance(<code>padding</code>) between the text and the border around it.<br><br> <hr>Change the <code>padding</code> of your blue box to match that of your red box.<br><br>',' <style>   .injected-text {     margin-bottom: -25px;     text-align: center;   }    .box {     border-style: solid;     border-color: black;     border-width: 5px;     text-align: center;   }    .yellow-box {     background-color: yellow;     padding: 10px;   }      .red-box {     background-color: crimson;     color: #fff;     padding: 20px;   }    .blue-box {     background-color: blue;     color: #fff;     padding: 10px;   } </style> <h5 class=\"injected-text\">margin</h5>  <div class=\"box yellow-box\">   <h5 class=\"box red-box\">padding</h5>   <h5 class=\"box blue-box\">padding</h5> </div>',2),(43,'bad87fee1348bd9aedf08822','Adjust the Margin of an Element','An element\'s <code>margin</code> controls the amount of space between an element\'s <code>border</code> and surrounding elements.<br><br>Here, we can see that the blue box and the red box are nested within the yellow box. Note that the red box has a bigger <code>margin</code> than the blue box, making it appear smaller.<br><br>When you increase the blue box\'s <code>margin</code>, it will increase the distance between its border and surrounding elements.<br><br> <hr>Change the <code>margin</code> of the blue box to match that of the red box.<br><br>',' <style>   .injected-text {     margin-bottom: -25px;     text-align: center;   }    .box {     border-style: solid;     border-color: black;     border-width: 5px;     text-align: center;   }    .yellow-box {     background-color: yellow;     padding: 10px;   }      .red-box {     background-color: crimson;     color: #fff;     padding: 20px;     margin: 20px;   }    .blue-box {     background-color: blue;     color: #fff;     padding: 20px;     margin: 10px;   } </style> <h5 class=\"injected-text\">margin</h5>  <div class=\"box yellow-box\">   <h5 class=\"box red-box\">padding</h5>   <h5 class=\"box blue-box\">padding</h5> </div>',2),(44,'bad87fee1348bd9aedf08823','Add a Negative Margin to an Element','An element\'s <code>margin</code> controls the amount of space between an element\'s <code>border</code> and surrounding elements.<br><br>If you set an element\'s <code>margin</code> to a negative value, the element will grow larger.<br><br> <hr>Try to set the <code>margin</code> to a negative value like the one for the red box.<br><br>Change the <code>margin</code> of the blue box to <code>-15px</code>, so it fills the entire horizontal width of the yellow box around it.<br><br>',' <style>   .injected-text {     margin-bottom: -25px;     text-align: center;   }    .box {     border-style: solid;     border-color: black;     border-width: 5px;     text-align: center;   }    .yellow-box {     background-color: yellow;     padding: 10px;   }      .red-box {     background-color: crimson;     color: #fff;     padding: 20px;     margin: -15px;   }    .blue-box {     background-color: blue;     color: #fff;     padding: 20px;     margin: 20px;   } </style>  <div class=\"box yellow-box\">   <h5 class=\"box red-box\">padding</h5>   <h5 class=\"box blue-box\">padding</h5> </div>',2),(45,'bad87fee1348bd9aedf08824','Add Different Padding to Each Side of an Element','Sometimes you will want to customize an element so that it has different amounts of <code>padding</code> on each of its sides.<br><br>CSS allows you to control the <code>padding</code> of all four individual sides of an element with the <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code> properties.<br><br> <hr>Give the blue box a <code>padding</code> of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side.<br><br>',' <style>   .injected-text {     margin-bottom: -25px;     text-align: center;   }    .box {     border-style: solid;     border-color: black;     border-width: 5px;     text-align: center;   }    .yellow-box {     background-color: yellow;     padding: 10px;   }      .red-box {     background-color: crimson;     color: #fff;     padding-top: 40px;     padding-right: 20px;     padding-bottom: 20px;     padding-left: 40px;   }    .blue-box {     background-color: blue;     color: #fff;   } </style> <h5 class=\"injected-text\">margin</h5>  <div class=\"box yellow-box\">   <h5 class=\"box red-box\">padding</h5>   <h5 class=\"box blue-box\">padding</h5> </div>',2),(46,'bad87fee1248bd9aedf08824','Add Different Margins to Each Side of an Element','Sometimes you will want to customize an element so that it has a different <code>margin</code> on each of its sides.<br><br>CSS allows you to control the <code>margin</code> of all four individual sides of an element with the <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, and <code>margin-left</code> properties.<br><br> <hr>Give the blue box a <code>margin</code> of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side.<br><br>',' <style>   .injected-text {     margin-bottom: -25px;     text-align: center;   }    .box {     border-style: solid;     border-color: black;     border-width: 5px;     text-align: center;   }    .yellow-box {     background-color: yellow;     padding: 10px;   }      .red-box {     background-color: crimson;     color: #fff;     margin-top: 40px;     margin-right: 20px;     margin-bottom: 20px;     margin-left: 40px;   }    .blue-box {     background-color: blue;     color: #fff;   } </style> <h5 class=\"injected-text\">margin</h5>  <div class=\"box yellow-box\">   <h5 class=\"box red-box\">padding</h5>   <h5 class=\"box blue-box\">padding</h5> </div>',2),(47,'bad87fee1348bd9aedf08826','Use Clockwise Notation to Specify the Padding of an Element','Instead of specifying an element\'s <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code> properties individually, you can specify them all in one line, like this:<br><br><code>padding: 10px 20px 10px 20px;</code><br><br>These four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific padding instructions.<br><br> <hr>Use Clockwise Notation to give the \".blue-box\" class a <code>padding</code> of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side.<br><br>',' <style>   .injected-text {     margin-bottom: -25px;     text-align: center;   }    .box {     border-style: solid;     border-color: black;     border-width: 5px;     text-align: center;   }    .yellow-box {     background-color: yellow;     padding: 20px 40px 20px 40px;   }      .red-box {     background-color: crimson;     color: #fff;     padding: 20px 40px 20px 40px;   }    .blue-box {     background-color: blue;     color: #fff;   } </style> <h5 class=\"injected-text\">margin</h5>  <div class=\"box yellow-box\">   <h5 class=\"box red-box\">padding</h5>   <h5 class=\"box blue-box\">padding</h5> </div>',2),(48,'bad87fee1348bd9afdf08726','Use Clockwise Notation to Specify the Margin of an Element','Let\'s try this again, but with <code>margin</code> this time.<br><br>Instead of specifying an element\'s <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, and <code>margin-left</code> properties individually, you can specify them all in one line, like this:<br><br><code>margin: 10px 20px 10px 20px;</code><br><br>These four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific margin instructions.<br><br> <hr>Use <code>Clockwise Notation</code> to give the element with the <code>blue-box</code> class a margin of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side.<br><br>',' <style>   .injected-text {     margin-bottom: -25px;     text-align: center;   }    .box {     border-style: solid;     border-color: black;     border-width: 5px;     text-align: center;   }    .yellow-box {     background-color: yellow;     padding: 20px 40px 20px 40px;   }      .red-box {     background-color: crimson;     color: #fff;     margin: 20px 40px 20px 40px;   }    .blue-box {     background-color: blue;     color: #fff;   } </style> <h5 class=\"injected-text\">margin</h5>  <div class=\"box yellow-box\">   <h5 class=\"box red-box\">padding</h5>   <h5 class=\"box blue-box\">padding</h5> </div>',2),(49,'58c383d33e2e3259241f3076','Use Attribute Selectors to Style Elements','You have been giving <code>id</code> or <code>class</code> attributes to elements that you wish to specifically style. These are known as ID and class selectors. There are other CSS Selectors you can use to select custom groups of elements to style.<br><br>Let\'s bring out CatPhotoApp again to practice using CSS Selectors.<br><br>For this challenge, you will use the <code>[attr=value]</code> attribute selector to style the checkboxes in CatPhotoApp. This selector matches and styles elements with a specific attribute value. For example, the below code changes the margins of all elements with the attribute <code>type</code> and a corresponding value of <code>radio</code>:<br><br><blockquote>[type=\'radio\'] {<br>&nbsp;&nbsp;margin: 20px 0px 20px 0px;<br>}</blockquote><br><br> <hr>Using the <code>type</code> attribute selector, try to give the checkboxes in CatPhotoApp a top margin of 10px and a bottom margin of 15px.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, monospace;   }    p {     font-size: 16px;     font-family: monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }    .smaller-image {     width: 100px;   }    .silver-background {     background-color: silver;   } </style>  <h2 class=\"red-text\">CatPhotoApp</h2> <main>   <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>      <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>      <div class=\"silver-background\">     <p>Things cats love:</p>     <ul>       <li>cat nip</li>       <li>laser pointers</li>       <li>lasagna</li>     </ul>     <p>Top 3 things cats hate:</p>     <ol>       <li>flea treatment</li>       <li>thunder</li>       <li>other cats</li>     </ol>   </div>      <form action=\"/submit-cat-photo\" id=\"cat-photo-form\">     <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>     <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </main>',2),(50,'bad82fee1322bd9aedf08721','Understand Absolute versus Relative Units','The last several challenges all set an element\'s margin or padding with pixels (<code>px</code>). Pixels are a type of length unit, which is what tells the browser how to size or space an item. In addition to <code>px</code>, CSS has a number of different length unit options that you can use.<br><br>The two main types of length units are absolute and relative. Absolute units tie to physical units of length. For example, <code>in</code> and <code>mm</code> refer to inches and millimeters, respectively. Absolute length units approximate the actual measurement on a screen, but there are some differences depending on a screen\'s resolution.<br><br>Relative units, such as <code>em</code> or <code>rem</code>, are relative to another length value. For example, <code>em</code> is based on the size of an element\'s font. If you use it to set the <code>font-size</code> property itself, it\'s relative to the parent\'s <code>font-size</code>.<br><br><strong>Note</strong><br>There are several relative unit options that are tied to the size of the viewport. They are covered in the Responsive Web Design Principles section.<br><br> <hr>Add a <code>padding</code> property to the element with class <code>red-box</code> and set it to <code>1.5em</code>.<br><br>',' <style>   .injected-text {     margin-bottom: -25px;     text-align: center;   }    .box {     border-style: solid;     border-color: black;     border-width: 5px;     text-align: center;   }    .yellow-box {     background-color: yellow;     padding: 20px 40px 20px 40px;   }    .red-box {     background-color: red;     margin: 20px 40px 20px 40px;        }    .green-box {     background-color: green;     margin: 40px 20px 20px 40px;   } </style> <h5 class=\"injected-text\">margin</h5>  <div class=\"box yellow-box\">   <h5 class=\"box red-box\">padding</h5>   <h5 class=\"box green-box\">padding</h5> </div>',2),(51,'bad87fee1348bd9aedf08736','Style the HTML Body Element','Now let\'s start fresh and talk about CSS inheritance.<br><br>Every HTML page has a <code>body</code> element.<br><br> <hr>We can prove that the <code>body</code> element exists here by giving it a <code>background-color</code> of black.<br><br>We can do this by adding the following to our <code>style</code> element:<br><br><blockquote>body {<br>&nbsp;&nbsp;background-color: black;<br>}</blockquote><br><br>',' <style>  </style>',2),(52,'bad87fee1348bd9aedf08746','Inherit Styles from the Body Element','Now we\'ve proven that every HTML page has a <code>body</code> element, and that its <code>body</code> element can also be styled with CSS.<br><br>Remember, you can style your <code>body</code> element just like any other HTML element, and all your other elements will inherit your <code>body</code> element\'s styles.<br><br> <hr>First, create a <code>h1</code> element with the text <code>Hello World</code><br><br>Then, let\'s give all elements on your page the color of <code>green</code> by adding <code>color: green;</code> to your <code>body</code> element\'s style declaration.<br><br>Finally, give your <code>body</code> element the font-family of <code>monospace</code> by adding <code>font-family: monospace;</code> to your <code>body</code> element\'s style declaration.<br><br>',' <style>   body {     background-color: black;   }  </style>',2),(53,'bad87fee1348bd9aedf08756','Prioritize One Style Over Another','Sometimes your HTML elements will receive multiple styles that conflict with one another.<br><br>For example, your <code>h1</code> element can\'t be both green and pink at the same time.<br><br>Let\'s see what happens when we create a class that makes text pink, then apply it to an element. Will our class <em>override</em> the <code>body</code> element\'s <code>color: green;</code> CSS property?<br><br> <hr>Create a CSS class called <code>pink-text</code> that gives an element the color pink.<br><br>Give your <code>h1</code> element the class of <code>pink-text</code>.<br><br>',' <style>   body {     background-color: black;     font-family: monospace;     color: green;   } </style> <h1>Hello World!</h1>',2),(54,'bad87fee1348bd9aedf04756','Override Styles in Subsequent CSS','Our \"pink-text\" class overrode our <code>body</code> element\'s CSS declaration!<br><br>We just proved that our classes will override the <code>body</code> element\'s CSS. So the next logical question is, what can we do to override our <code>pink-text</code> class?<br><br> <hr>Create an additional CSS class called <code>blue-text</code> that gives an element the color blue. Make sure it\'s below your <code>pink-text</code> class declaration.<br><br>Apply the <code>blue-text</code> class to your <code>h1</code> element in addition to your <code>pink-text</code> class, and let\'s see which one wins.<br><br>Applying multiple class attributes to a HTML element is done with a space between them like this:<br><br><code>class=\"class1 class2\"</code><br><br>Note: It doesn\'t matter which order the classes are listed in the HTML element.<br><br>However, the order of the <code>class</code> declarations in the <code>&#60;style&#62;</code> section are what is important. The second declaration will always take precedence over the first. Because <code>.blue-text</code> is declared second, it overrides the attributes of <code>.pink-text</code><br><br>',' <style>   body {     background-color: black;     font-family: monospace;     color: green;   }   .pink-text {     color: pink;   } </style> <h1 class=\"pink-text\">Hello World!</h1>',2),(55,'bad87fee1348bd8aedf06756','Override Class Declarations by Styling ID Attributes','We just proved that browsers read CSS from top to bottom. That means that, in the event of a conflict, the browser will use whichever CSS declaration came last.<br><br>But we\'re not done yet. There are other ways that you can override CSS. Do you remember id attributes?<br><br>Let\'s override your <code>pink-text</code> and <code>blue-text</code> classes, and make your <code>h1</code> element orange, by giving the <code>h1</code> element an id and then styling that id.<br><br> <hr>Give your <code>h1</code> element the <code>id</code> attribute of <code>orange-text</code>. Remember, id styles look like this:<br><br><code>&#60;h1 id=\"orange-text\"&#62;</code><br><br>Leave the <code>blue-text</code> and <code>pink-text</code> classes on your <code>h1</code> element.<br><br>Create a CSS declaration for your <code>orange-text</code> id in your <code>style</code> element. Here\'s an example of what this looks like:<br><br><blockquote>#brown-text {<br>&nbsp;&nbsp;color: brown;<br>}</blockquote><br><br>Note: It doesn\'t matter whether you declare this CSS above or below pink-text class, since id attribute will always take precedence.<br><br>',' <style>   body {     background-color: black;     font-family: monospace;     color: green;   }   .pink-text {     color: pink;   }   .blue-text {     color: blue;   } </style> <h1 class=\"pink-text blue-text\">Hello World!</h1>',2),(56,'bad87fee1348bd9aedf06756','Override Class Declarations with Inline Styles','So we\'ve proven that id declarations override class declarations, regardless of where they are declared in your <code>style</code> element CSS.<br><br>There are other ways that you can override CSS. Do you remember inline styles?<br><br> <hr>Use an <code>inline style</code> to try to make our <code>h1</code> element white. Remember, in line styles look like this:<br><br><code>&#60;h1 style=\"color: green\"&#62;</code><br><br>Leave the <code>blue-text</code> and <code>pink-text</code> classes on your <code>h1</code> element.<br><br>',' <style>   body {     background-color: black;     font-family: monospace;     color: green;   }   #orange-text {     color: orange;   }   .pink-text {     color: pink;   }   .blue-text {     color: blue;   } </style> <h1 id=\"orange-text\" class=\"pink-text blue-text\">Hello World!</h1>',2),(57,'bad87fee1348bd9aedf07756','Override All Other Styles by using Important','Yay! We just proved that inline styles will override all the CSS declarations in your <code>style</code> element.<br><br>But wait. There\'s one last way to override CSS. This is the most powerful method of all. But before we do it, let\'s talk about why you would ever want to override CSS.<br><br>In many situations, you will use CSS libraries. These may accidentally override your own CSS. So when you absolutely need to be sure that an element has specific CSS, you can use <code>!important</code><br><br>Let\'s go all the way back to our <code>pink-text</code> class declaration. Remember that our <code>pink-text</code> class was overridden by subsequent class declarations, id declarations, and inline styles.<br><br> <hr>Let\'s add the keyword <code>!important</code> to your pink-text element\'s color declaration to make 100% sure that your <code>h1</code> element will be pink.<br><br>An example of how to do this is:<br><br><code>color: red !important;</code><br><br>',' <style>   body {     background-color: black;     font-family: monospace;     color: green;   }   #orange-text {     color: orange;   }   .pink-text {     color: pink;   }   .blue-text {     color: blue;   } </style> <h1 id=\"orange-text\" class=\"pink-text blue-text\" style=\"color: white\">Hello World!</h1>',2),(58,'bad87fee1348bd9aedf08726','Use Hex Code for Specific Colors','Did you know there are other ways to represent colors in CSS? One of these ways is called hexadecimal code, or <code>hex code</code> for short.<br><br>We usually use <code>decimals</code>, or base 10 numbers, which use the symbols 0 to 9 for each digit. <code>Hexadecimals</code> (or <code>hex</code>) are base 16 numbers. This means it uses sixteen distinct symbols. Like decimals, the symbols 0-9 represent the values zero to nine. Then A,B,C,D,E,F represent the values ten to fifteen. Altogether, 0 to F can represent a digit in <code>hexadecimal</code>, giving us 16 total possible values. You can find more information about <a target=\'_blank\' href=\'https://en.wikipedia.org/wiki/Hexadecimal\'>hexadecimal numbers here</a>.<br><br>In CSS, we can use 6 hexadecimal digits to represent colors, two each for the red (R), green (G), and blue (B) components. For example, <code>#000000</code> is black and is also the lowest possible value. You can find more information about the <a target=\'_blank\' href=\'https://en.wikipedia.org/wiki/RGB_color_model\'>RGB color system here</a>.<br><br><blockquote>body {<br>&nbsp;&nbsp;color: #000000;<br>}</blockquote><br><br> <hr>Replace the word <code>black</code> in our <code>body</code> element\'s background-color with its <code>hex code</code> representation, <code>#000000</code>.<br><br>',' <style>   body {     background-color: black;   } </style>',2),(59,'bad87fee1348bd9aedf08721','Use Hex Code to Mix Colors','To review, hex codes use 6 hexadecimal digits to represent colors, two each for red (R), green (G), and blue (B) components.<br><br>From these three pure colors (red, green, and blue), we can vary the amounts of each to create over 16 million other colors!<br><br>For example, orange is pure red, mixed with some green, and no blue. In hex code, this translates to being <code>#FFA500</code>.<br><br>The digit <code>0</code> is the lowest number in hex code, and represents a complete absence of color.<br><br>The digit <code>F</code> is the highest number in hex code, and represents the maximum possible brightness.<br><br> <hr>Replace the color words in our <code>style</code> element with their correct hex codes.<br><br><table class=\'table table-striped\'><tr><th>Color</th><th>Hex Code</th></tr><tr><td>Dodger Blue</td><td><code>#1E90FF</code></td></tr><tr><td>Green</td><td><code>#00FF00</code></td></tr><tr><td>Orange</td><td><code>#FFA500</code></td></tr><tr><td>Red</td><td><code>#FF0000</code></td></tr></table><br><br>',' <style>   .red-text {     color: black;   }   .green-text {     color: black;   }   .dodger-blue-text {     color: black;   }   .orange-text {     color: black;   } </style>  <h1 class=\"red-text\">I am red!</h1>  <h1 class=\"green-text\">I am green!</h1>  <h1 class=\"dodger-blue-text\">I am dodger blue!</h1>  <h1 class=\"orange-text\">I am orange!</h1>',2),(60,'bad87fee1348bd9aedf08719','Use Abbreviated Hex Code','Many people feel overwhelmed by the possibilities of more than 16 million colors. And it\'s difficult to remember hex code. Fortunately, you can shorten it.<br><br>For example, red\'s hex code <code>#FF0000</code> can be shortened to <code>#F00</code>. This shortened form gives one digit for red, one digit for green, and one digit for blue.<br><br>This reduces the total number of possible colors to around 4,000. But browsers will interpret <code>#FF0000</code> and <code>#F00</code> as exactly the same color.<br><br> <hr>Go ahead, try using the abbreviated hex codes to color the correct elements.<br><br><table class=\'table table-striped\'><tr><th>Color</th><th>Short Hex Code</th></tr><tr><td>Cyan</td><td><code>#0FF</code></td></tr><tr><td>Green</td><td><code>#0F0</code></td></tr><tr><td>Red</td><td><code>#F00</code></td></tr><tr><td>Fuchsia</td><td><code>#F0F</code></td></tr></table><br><br>',' <style>   .red-text {     color: #000000;   }   .fuchsia-text {     color: #000000;   }   .cyan-text {     color: #000000;   }   .green-text {     color: #000000;   } </style>  <h1 class=\"red-text\">I am red!</h1>  <h1 class=\"fuchsia-text\">I am fuchsia!</h1>  <h1 class=\"cyan-text\">I am cyan!</h1>  <h1 class=\"green-text\">I am green!</h1>',2),(61,'bad87fee1348bd9aede08718','Use RGB values to Color Elements','Another way you can represent colors in CSS is by using <code>RGB</code> values.<br><br>The RGB value for black looks like this:<br><br><code>rgb(0, 0, 0)</code><br><br>The RGB value for white looks like this:<br><br><code>rgb(255, 255, 255)</code><br><br>Instead of using six hexadecimal digits like you do with hex code, with <code>RGB</code> you specify the brightness of each color with a number between 0 and 255.<br><br>If you do the math, the two digits for one color equal 16 times 16, which gives us 256 total values. So <code>RGB</code>, which starts counting from zero, has the exact same number of possible values as hex code.<br><br>Here\'s an example of how you\'d change the body background to orange using its RGB code.<br><br><blockquote>body {<br>&nbsp;&nbsp;background-color: rgb(255, 165, 0);<br>}</blockquote><br><br> <hr>Let\'s replace the hex code in our <code>body</code> element\'s background color with the RGB value for black: <code>rgb(0, 0, 0)</code><br><br>',' <style>   body {     background-color: #F00;   } </style>',2),(62,'bad82fee1348bd9aedf08721','Use RGB to Mix Colors','Just like with hex code, you can mix colors in RGB by using combinations of different values.<br><br> <hr>Replace the hex codes in our <code>style</code> element with their correct RGB values.<br><br><table class=\'table table-striped\'><tr><th>Color</th><th>RGB</th></tr><tr><td>Blue</td><td><code>rgb(0, 0, 255)</code></td></tr><tr><td>Red</td><td><code>rgb(255, 0, 0)</code></td></tr><tr><td>Orchid</td><td><code>rgb(218, 112, 214)</code></td></tr><tr><td>Sienna</td><td><code>rgb(160, 82, 45)</code></td></tr></table><br><br>',' <style>   .red-text {     color: #000000;   }   .orchid-text {     color: #000000;   }   .sienna-text {     color: #000000;   }   .blue-text {     color: #000000;   } </style>  <h1 class=\"red-text\">I am red!</h1>  <h1 class=\"orchid-text\">I am orchid!</h1>  <h1 class=\"sienna-text\">I am sienna!</h1>  <h1 class=\"blue-text\">I am blue!</h1>',2),(63,'5a9d725e424fe3d0e10cad10','Use CSS Variables to change several elements at once','<dfn>CSS Variables</dfn> are a powerful way to change many CSS style properties at once by changing only one value.<br><br>Follow the instructions below to see how changing just three values can change the styling of many elements.<br><br> <hr>In the <code>penguin</code> class, change the <code>black</code> value to <code>gray</code>, the <code>gray</code> value to <code>white</code>, and the <code>yellow</code> value to <code>orange</code>.<br><br>',' <style>   .penguin {          /* change code below */     --penguin-skin: black;     --penguin-belly: gray;     --penguin-beak: yellow;     /* change code above */          position: relative;     margin: auto;     display: block;     margin-top: 5%;     width: 300px;     height: 300px;   }      .penguin-top {     top: 10%;     left: 25%;     background: var(--penguin-skin, gray);     width: 50%;     height: 45%;     border-radius: 70% 70% 60% 60%;   }      .penguin-bottom {     top: 40%;     left: 23.5%;     background: var(--penguin-skin, gray);     width: 53%;     height: 45%;     border-radius: 70% 70% 100% 100%;   }      .right-hand {     top: 0%;     left: -5%;     background: var(--penguin-skin, gray);     width: 30%;     height: 60%;     border-radius: 30% 30% 120% 30%;     transform: rotate(45deg);     z-index: -1;   }      .left-hand {     top: 0%;     left: 75%;     background: var(--penguin-skin, gray);     width: 30%;     height: 60%;     border-radius: 30% 30% 30% 120%;     transform: rotate(-45deg);     z-index: -1;   }      .right-cheek {     top: 15%;     left: 35%;     background: var(--penguin-belly, white);     width: 60%;     height: 70%;     border-radius: 70% 70% 60% 60%;   }      .left-cheek {     top: 15%;     left: 5%;     background: var(--penguin-belly, white);     width: 60%;     height: 70%;     border-radius: 70% 70% 60% 60%;   }      .belly {     top: 60%;     left: 2.5%;     background: var(--penguin-belly, white);     width: 95%;     height: 100%;     border-radius: 120% 120% 100% 100%;   }      .right-feet {     top: 85%;     left: 60%;     background: var(--penguin-beak, orange);     width: 15%;     height: 30%;     border-radius: 50% 50% 50% 50%;     transform: rotate(-80deg);     z-index: -2222;     }      .left-feet {     top: 85%;     left: 25%;     background: var(--penguin-beak, orange);     width: 15%;     height: 30%;     border-radius: 50% 50% 50% 50%;     transform: rotate(80deg);     z-index: -2222;     }      .right-eye {     top: 45%;     left: 60%;     background: black;     width: 15%;     height: 17%;     border-radius: 50%;    }      .left-eye {     top: 45%;     left: 25%;     background: black;     width: 15%;     height: 17%;     border-radius: 50%;     }      .sparkle {     top: 25%;     left: 15%;     background: white;     width: 35%;     height: 35%;     border-radius: 50%;     }      .blush-right {     top: 65%;     left: 15%;     background: pink;     width: 15%;     height: 10%;     border-radius: 50%;     }      .blush-left {     top: 65%;     left: 70%;     background: pink;     width: 15%;     height: 10%;     border-radius: 50%;     }      .beak-top {     top: 60%;     left: 40%;     background: var(--penguin-beak, orange);     width: 20%;     height: 10%;     border-radius: 50%;     }      .beak-bottom {     top: 65%;     left: 42%;     background: var(--penguin-beak, orange);     width: 16%;     height: 10%;     border-radius: 50%;     }      body {     background:#c6faf1;   }      .penguin * {     position: absolute;   } </style> <div class=\"penguin\">   <div class=\"penguin-bottom\">     <div class=\"right-hand\"></div>     <div class=\"left-hand\"></div>     <div class=\"right-feet\"></div>     <div class=\"left-feet\"></div>   </div>   <div class=\"penguin-top\">     <div class=\"right-cheek\"></div>     <div class=\"left-cheek\"></div>     <div class=\"belly\"></div>     <div class=\"right-eye\">       <div class=\"sparkle\"></div>     </div>     <div class=\"left-eye\">       <div class=\"sparkle\"></div>     </div>     <div class=\"blush-right\"></div>     <div class=\"blush-left\"></div>     <div class=\"beak-top\"></div>     <div class=\"beak-bottom\"></div>   </div> </div>',2),(64,'5a9d726c424fe3d0e10cad11','Create a custom CSS Variable','To create a CSS Variable, you just need to give it a <code>name</code> with <code>two dashes</code> in front of it and assign it a <code>value</code> like this:<br><br><blockquote>--penguin-skin: gray;</blockquote><br><br>This will create a variable named <code>--penguin-skin</code> and assign it the value of <code>gray</code>.<br><br>Now you can use that variable elsewhere in your CSS to change the value of other elements to gray.<br><br> <hr>In the <code>penguin</code> class, create a variable name <code>--penguin-skin</code> and give it a value of <code>gray</code><br><br>',' <style>   .penguin {          /* add code below */          /* add code above */     position: relative;     margin: auto;     display: block;     margin-top: 5%;     width: 300px;     height: 300px;   }      .penguin-top {     top: 10%;     left: 25%;     background: black;     width: 50%;     height: 45%;     border-radius: 70% 70% 60% 60%;   }      .penguin-bottom {     top: 40%;     left: 23.5%;     background: black;     width: 53%;     height: 45%;     border-radius: 70% 70% 100% 100%;   }      .right-hand {     top: 0%;     left: -5%;     background: black;     width: 30%;     height: 60%;     border-radius: 30% 30% 120% 30%;     transform: rotate(45deg);     z-index: -1;   }      .left-hand {     top: 0%;     left: 75%;     background: black;     width: 30%;     height: 60%;     border-radius: 30% 30% 30% 120%;     transform: rotate(-45deg);     z-index: -1;   }      .right-cheek {     top: 15%;     left: 35%;     background: white;     width: 60%;     height: 70%;     border-radius: 70% 70% 60% 60%;   }      .left-cheek {     top: 15%;     left: 5%;     background: white;     width: 60%;     height: 70%;     border-radius: 70% 70% 60% 60%;   }      .belly {     top: 60%;     left: 2.5%;     background: white;     width: 95%;     height: 100%;     border-radius: 120% 120% 100% 100%;   }      .right-feet {     top: 85%;     left: 60%;     background: orange;     width: 15%;     height: 30%;     border-radius: 50% 50% 50% 50%;     transform: rotate(-80deg);     z-index: -2222;     }      .left-feet {     top: 85%;     left: 25%;     background: orange;     width: 15%;     height: 30%;     border-radius: 50% 50% 50% 50%;     transform: rotate(80deg);     z-index: -2222;     }      .right-eye {     top: 45%;     left: 60%;     background: black;     width: 15%;     height: 17%;     border-radius: 50%;    }      .left-eye {     top: 45%;     left: 25%;     background: black;     width: 15%;     height: 17%;     border-radius: 50%;     }      .sparkle {     top: 25%;     left: 15%;     background: white;     width: 35%;     height: 35%;     border-radius: 50%;     }      .blush-right {     top: 65%;     left: 15%;     background: pink;     width: 15%;     height: 10%;     border-radius: 50%;     }      .blush-left {     top: 65%;     left: 70%;     background: pink;     width: 15%;     height: 10%;     border-radius: 50%;     }      .beak-top {     top: 60%;     left: 40%;     background: orange;     width: 20%;     height: 10%;     border-radius: 50%;     }      .beak-bottom {     top: 65%;     left: 42%;     background: orange;     width: 16%;     height: 10%;     border-radius: 50%;     }      body {     background:#c6faf1;   }      .penguin * {     position: absolute;   } </style> <div class=\"penguin\">   <div class=\"penguin-bottom\">     <div class=\"right-hand\"></div>     <div class=\"left-hand\"></div>     <div class=\"right-feet\"></div>     <div class=\"left-feet\"></div>   </div>   <div class=\"penguin-top\">     <div class=\"right-cheek\"></div>     <div class=\"left-cheek\"></div>     <div class=\"belly\"></div>     <div class=\"right-eye\">       <div class=\"sparkle\"></div>     </div>     <div class=\"left-eye\">       <div class=\"sparkle\"></div>     </div>     <div class=\"blush-right\"></div>     <div class=\"blush-left\"></div>     <div class=\"beak-top\"></div>     <div class=\"beak-bottom\"></div>   </div> </div>',2),(65,'5a9d727a424fe3d0e10cad12','Use a custom CSS Variable','After you create your variable, you can assign its value to other CSS properties by referencing the name you gave it.<br><br><blockquote>background: var(--penguin-skin);</blockquote><br><br>This will change the background of whatever element you are targeting to gray because that is the value of the <code>--penguin-skin</code> variable.<br><br>Note that styles will not be applied unless the variable names are an exact match.<br><br> <hr>Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>penguin-top</code>, <code>penguin-bottom</code>, <code>right-hand</code> and <code>left-hand</code> classes.<br><br>',' <style>   .penguin {     --penguin-skin: gray;     position: relative;     margin: auto;     display: block;     margin-top: 5%;     width: 300px;     height: 300px;   }      .penguin-top {     top: 10%;     left: 25%;          /* change code below */     background: black;     /* change code above */          width: 50%;     height: 45%;     border-radius: 70% 70% 60% 60%;   }      .penguin-bottom {     top: 40%;     left: 23.5%;          /* change code below */     background: black;     /* change code above */          width: 53%;     height: 45%;     border-radius: 70% 70% 100% 100%;   }      .right-hand {     top: 0%;     left: -5%;          /* change code below */     background: black;     /* change code above */          width: 30%;     height: 60%;     border-radius: 30% 30% 120% 30%;     transform: rotate(45deg);     z-index: -1;   }      .left-hand {     top: 0%;     left: 75%;          /* change code below */     background: black;     /* change code above */          width: 30%;     height: 60%;     border-radius: 30% 30% 30% 120%;     transform: rotate(-45deg);     z-index: -1;   }      .right-cheek {     top: 15%;     left: 35%;     background: white;     width: 60%;     height: 70%;     border-radius: 70% 70% 60% 60%;   }      .left-cheek {     top: 15%;     left: 5%;     background: white;     width: 60%;     height: 70%;     border-radius: 70% 70% 60% 60%;   }      .belly {     top: 60%;     left: 2.5%;     background: white;     width: 95%;     height: 100%;     border-radius: 120% 120% 100% 100%;   }      .right-feet {     top: 85%;     left: 60%;     background: orange;     width: 15%;     height: 30%;     border-radius: 50% 50% 50% 50%;     transform: rotate(-80deg);     z-index: -2222;     }      .left-feet {     top: 85%;     left: 25%;     background: orange;     width: 15%;     height: 30%;     border-radius: 50% 50% 50% 50%;     transform: rotate(80deg);     z-index: -2222;     }      .right-eye {     top: 45%;     left: 60%;     background: black;     width: 15%;     height: 17%;     border-radius: 50%;    }      .left-eye {     top: 45%;     left: 25%;     background: black;     width: 15%;     height: 17%;     border-radius: 50%;   }      .sparkle {     top: 25%;     left: 15%;     background: white;     width: 35%;     height: 35%;     border-radius: 50%;   }      .blush-right {     top: 65%;     left: 15%;     background: pink;     width: 15%;     height: 10%;     border-radius: 50%;   }      .blush-left {     top: 65%;     left: 70%;     background: pink;     width: 15%;     height: 10%;     border-radius: 50%;   }      .beak-top {     top: 60%;     left: 40%;     background: orange;     width: 20%;     height: 10%;     border-radius: 50%;   }      .beak-bottom {     top: 65%;     left: 42%;     background: orange;     width: 16%;     height: 10%;     border-radius: 50%;   }      body {     background:#c6faf1;   }      .penguin * {     position: absolute;   } </style> <div class=\"penguin\">   <div class=\"penguin-bottom\">     <div class=\"right-hand\"></div>     <div class=\"left-hand\"></div>     <div class=\"right-feet\"></div>     <div class=\"left-feet\"></div>   </div>   <div class=\"penguin-top\">     <div class=\"right-cheek\"></div>     <div class=\"left-cheek\"></div>     <div class=\"belly\"></div>     <div class=\"right-eye\">       <div class=\"sparkle\"></div>     </div>     <div class=\"left-eye\">       <div class=\"sparkle\"></div>     </div>     <div class=\"blush-right\"></div>     <div class=\"blush-left\"></div>     <div class=\"beak-top\"></div>     <div class=\"beak-bottom\"></div>   </div> </div>',2),(66,'5a9d7286424fe3d0e10cad13','Attach a Fallback value to a CSS Variable','When using your variable as a CSS property value, you can attach a fallback value that your page will revert to if for some reason it can\'t get your variable to work.<br><br>It could be that someone is using an older browser that hasn\'t yet adopted CSS Variables, or perhaps their device doesn\'t support the value you gave the variable. Here\'s how you do it:<br><br><blockquote>background: var(--penguin-skin, black);</blockquote><br><br>This will set background to black if there is a problem with your variable.<br><br>Note that this can be useful for debugging.<br><br> <hr>Add a fallback value of <code>black</code> to the <code>background</code> property of <code>penguin-top</code> and <code>penguin-bottom</code> classes.<br><br><strong>Note</strong>: The above style will be applied because of a typo in the CSS variable name.<br><br>',' <style>   .penguin {     --penguin-skin: black;     --penguin-belly: gray;     --penguin-beak: yellow;     position: relative;     margin: auto;     display: block;     margin-top: 5%;     width: 300px;     height: 300px;   }      .penguin-top {     top: 10%;     left: 25%;        /* change code below */     background: var(--pengiun-skin);     /* change code above */        width: 50%;     height: 45%;     border-radius: 70% 70% 60% 60%;   }      .penguin-bottom {     top: 40%;     left: 23.5%;        /* change code below */     background: var(--pengiun-skin);     /* change code above */        width: 53%;     height: 45%;     border-radius: 70% 70% 100% 100%;   }      .right-hand {     top: 0%;     left: -5%;     background: var(--penguin-skin, black);     width: 30%;     height: 60%;     border-radius: 30% 30% 120% 30%;     transform: rotate(45deg);     z-index: -1;   }      .left-hand {     top: 0%;     left: 75%;     background: var(--penguin-skin, black);     width: 30%;     height: 60%;     border-radius: 30% 30% 30% 120%;     transform: rotate(-45deg);     z-index: -1;   }      .right-cheek {     top: 15%;     left: 35%;     background: var(--penguin-belly, white);     width: 60%;     height: 70%;     border-radius: 70% 70% 60% 60%;   }      .left-cheek {     top: 15%;     left: 5%;     background: var(--penguin-belly, white);     width: 60%;     height: 70%;     border-radius: 70% 70% 60% 60%;   }      .belly {     top: 60%;     left: 2.5%;     background: var(--penguin-belly, white);     width: 95%;     height: 100%;     border-radius: 120% 120% 100% 100%;   }      .right-feet {     top: 85%;     left: 60%;     background: var(--penguin-beak, orange);     width: 15%;     height: 30%;     border-radius: 50% 50% 50% 50%;     transform: rotate(-80deg);     z-index: -2222;   }      .left-feet {     top: 85%;     left: 25%;     background: var(--penguin-beak, orange);     width: 15%;     height: 30%;     border-radius: 50% 50% 50% 50%;     transform: rotate(80deg);     z-index: -2222;   }      .right-eye {     top: 45%;     left: 60%;     background: black;     width: 15%;     height: 17%;     border-radius: 50%;   }      .left-eye {     top: 45%;     left: 25%;     background: black;     width: 15%;     height: 17%;     border-radius: 50%;   }      .sparkle {     top: 25%;     left: 15%;     background: white;     width: 35%;     height: 35%;     border-radius: 50%;   }      .blush-right {     top: 65%;     left: 15%;     background: pink;     width: 15%;     height: 10%;     border-radius: 50%;   }      .blush-left {     top: 65%;     left: 70%;     background: pink;     width: 15%;     height: 10%;     border-radius: 50%;   }      .beak-top {     top: 60%;     left: 40%;     background: var(--penguin-beak, orange);     width: 20%;     height: 10%;     border-radius: 50%;   }      .beak-bottom {     top: 65%;     left: 42%;     background: var(--penguin-beak, orange);     width: 16%;     height: 10%;     border-radius: 50%;   }      body {     background:#c6faf1;   }      .penguin * {     position: absolute;   } </style> <div class=\"penguin\">   <div class=\"penguin-bottom\">     <div class=\"right-hand\"></div>     <div class=\"left-hand\"></div>     <div class=\"right-feet\"></div>     <div class=\"left-feet\"></div>   </div>   <div class=\"penguin-top\">     <div class=\"right-cheek\"></div>     <div class=\"left-cheek\"></div>     <div class=\"belly\"></div>     <div class=\"right-eye\">       <div class=\"sparkle\"></div>     </div>     <div class=\"left-eye\">       <div class=\"sparkle\"></div>     </div>     <div class=\"blush-right\"></div>     <div class=\"blush-left\"></div>     <div class=\"beak-top\"></div>     <div class=\"beak-bottom\"></div>   </div> </div>',2),(67,'5a9d7295424fe3d0e10cad14','Cascading CSS variables','When you create a variable, it becomes available for you to use inside the element in which you create it. It also becomes available within any elements nested within it. This effect is known as <dfn>cascading</dfn>.<br><br>Because of cascading, CSS variables are often defined in the <dfn>:root</dfn> element.<br><br>You can think of the <code>:root</code> element as a container for your entire HTML document, in the same way that an <code>html</code> element is a container for the <code>body</code> element.<br><br>By creating your variables in <code>:root</code>, they will be available throughout the whole web page.<br><br> <hr>Define a variable named <code>--penguin-belly</code> in the <code>:root</code> selector and give it the value of <code>pink</code>. You can then see how the value will cascade down to change the value to pink, anywhere that variable is used.<br><br>',' <style>   :root {          /* add code below */          /* add code above */   }      body {     background: var(--penguin-belly, #c6faf1);   }      .penguin {     --penguin-skin: gray;     --penguin-beak: orange;     position: relative;     margin: auto;     display: block;     margin-top: 5%;     width: 300px;     height: 300px;   }      .right-cheek {     top: 15%;     left: 35%;     background: var(--penguin-belly, white);     width: 60%;     height: 70%;     border-radius: 70% 70% 60% 60%;   }      .left-cheek {     top: 15%;     left: 5%;     background: var(--penguin-belly, white);     width: 60%;     height: 70%;     border-radius: 70% 70% 60% 60%;   }      .belly {     top: 60%;     left: 2.5%;     background: var(--penguin-belly, white);     width: 95%;     height: 100%;     border-radius: 120% 120% 100% 100%;   }      .penguin-top {     top: 10%;     left: 25%;     background: var(--penguin-skin, gray);     width: 50%;     height: 45%;     border-radius: 70% 70% 60% 60%;   }      .penguin-bottom {     top: 40%;     left: 23.5%;     background: var(--penguin-skin, gray);     width: 53%;     height: 45%;     border-radius: 70% 70% 100% 100%;   }      .right-hand {     top: 0%;     left: -5%;     background: var(--penguin-skin, gray);     width: 30%;     height: 60%;     border-radius: 30% 30% 120% 30%;     transform: rotate(45deg);     z-index: -1;   }      .left-hand {     top: 0%;     left: 75%;     background: var(--penguin-skin, gray);     width: 30%;     height: 60%;     border-radius: 30% 30% 30% 120%;     transform: rotate(-45deg);     z-index: -1;   }      .right-feet {     top: 85%;     left: 60%;     background: var(--penguin-beak, orange);     width: 15%;     height: 30%;     border-radius: 50% 50% 50% 50%;     transform: rotate(-80deg);     z-index: -2222;   }      .left-feet {     top: 85%;     left: 25%;     background: var(--penguin-beak, orange);     width: 15%;     height: 30%;     border-radius: 50% 50% 50% 50%;     transform: rotate(80deg);     z-index: -2222;   }      .right-eye {     top: 45%;     left: 60%;     background: black;     width: 15%;     height: 17%;     border-radius: 50%;   }      .left-eye {     top: 45%;     left: 25%;     background: black;     width: 15%;     height: 17%;     border-radius: 50%;   }      .sparkle {     top: 25%;     left: 15%;     background: white;     width: 35%;     height: 35%;     border-radius: 50%;   }      .blush-right {     top: 65%;     left: 15%;     background: pink;     width: 15%;     height: 10%;     border-radius: 50%;   }      .blush-left {     top: 65%;     left: 70%;     background: pink;     width: 15%;     height: 10%;     border-radius: 50%;   }      .beak-top {     top: 60%;     left: 40%;     background: var(--penguin-beak, orange);     width: 20%;     height: 10%;     border-radius: 50%;   }      .beak-bottom {     top: 65%;     left: 42%;     background: var(--penguin-beak, orange);     width: 16%;     height: 10%;     border-radius: 50%;   }      .penguin * {     position: absolute;   } </style> <div class=\"penguin\">   <div class=\"penguin-bottom\">     <div class=\"right-hand\"></div>     <div class=\"left-hand\"></div>     <div class=\"right-feet\"></div>     <div class=\"left-feet\"></div>   </div>   <div class=\"penguin-top\">     <div class=\"right-cheek\"></div>     <div class=\"left-cheek\"></div>     <div class=\"belly\"></div>     <div class=\"right-eye\">       <div class=\"sparkle\"></div>     </div>     <div class=\"left-eye\">       <div class=\"sparkle\"></div>     </div>     <div class=\"blush-right\"></div>     <div class=\"blush-left\"></div>     <div class=\"beak-top\"></div>     <div class=\"beak-bottom\"></div>   </div> </div>',2),(68,'5a9d72a1424fe3d0e10cad15','Change a variable for a specific area','When you create your variables in <code>:root</code> they will set the value of that variable for the whole page.<br><br>You can then over-write these variables by setting them again within a specific element.<br><br> <hr>Change the value of <code>--penguin-belly</code> to <code>white</code> in the <code>penguin</code> class.<br><br>',' <style>   :root {     --penguin-skin: gray;     --penguin-belly: pink;     --penguin-beak: orange;   }      body {     background: var(--penguin-belly, #c6faf1);   }      .penguin {          /* add code below */          /* add code above */          position: relative;     margin: auto;     display: block;     margin-top: 5%;     width: 300px;     height: 300px;   }      .right-cheek {     top: 15%;     left: 35%;     background: var(--penguin-belly, pink);     width: 60%;     height: 70%;     border-radius: 70% 70% 60% 60%;   }      .left-cheek {     top: 15%;     left: 5%;     background: var(--penguin-belly, pink);     width: 60%;     height: 70%;     border-radius: 70% 70% 60% 60%;   }      .belly {     top: 60%;     left: 2.5%;     background: var(--penguin-belly, pink);     width: 95%;     height: 100%;     border-radius: 120% 120% 100% 100%;   }      .penguin-top {     top: 10%;     left: 25%;     background: var(--penguin-skin, gray);     width: 50%;     height: 45%;     border-radius: 70% 70% 60% 60%;   }      .penguin-bottom {     top: 40%;     left: 23.5%;     background: var(--penguin-skin, gray);     width: 53%;     height: 45%;     border-radius: 70% 70% 100% 100%;   }      .right-hand {     top: 0%;     left: -5%;     background: var(--penguin-skin, gray);     width: 30%;     height: 60%;     border-radius: 30% 30% 120% 30%;     transform: rotate(45deg);     z-index: -1;   }      .left-hand {     top: 0%;     left: 75%;     background: var(--penguin-skin, gray);     width: 30%;     height: 60%;     border-radius: 30% 30% 30% 120%;     transform: rotate(-45deg);     z-index: -1;   }      .right-feet {     top: 85%;     left: 60%;     background: var(--penguin-beak, orange);     width: 15%;     height: 30%;     border-radius: 50% 50% 50% 50%;     transform: rotate(-80deg);     z-index: -2222;   }      .left-feet {     top: 85%;     left: 25%;     background: var(--penguin-beak, orange);     width: 15%;     height: 30%;     border-radius: 50% 50% 50% 50%;     transform: rotate(80deg);     z-index: -2222;   }      .right-eye {     top: 45%;     left: 60%;     background: black;     width: 15%;     height: 17%;     border-radius: 50%;   }      .left-eye {     top: 45%;     left: 25%;     background: black;     width: 15%;     height: 17%;     border-radius: 50%;   }      .sparkle {     top: 25%;     left: 15%;     background: white;     width: 35%;     height: 35%;     border-radius: 50%;   }      .blush-right {     top: 65%;     left: 15%;     background: pink;     width: 15%;     height: 10%;     border-radius: 50%;   }      .blush-left {     top: 65%;     left: 70%;     background: pink;     width: 15%;     height: 10%;     border-radius: 50%;   }      .beak-top {     top: 60%;     left: 40%;     background: var(--penguin-beak, orange);     width: 20%;     height: 10%;     border-radius: 50%;   }      .beak-bottom {     top: 65%;     left: 42%;     background: var(--penguin-beak, orange);     width: 16%;     height: 10%;     border-radius: 50%;   }      .penguin * {     position: absolute;   } </style> <div class=\"penguin\">   <div class=\"penguin-bottom\">     <div class=\"right-hand\"></div>     <div class=\"left-hand\"></div>     <div class=\"right-feet\"></div>     <div class=\"left-feet\"></div>   </div>   <div class=\"penguin-top\">     <div class=\"right-cheek\"></div>     <div class=\"left-cheek\"></div>     <div class=\"belly\"></div>     <div class=\"right-eye\">       <div class=\"sparkle\"></div>     </div>     <div class=\"left-eye\">       <div class=\"sparkle\"></div>     </div>     <div class=\"blush-right\"></div>     <div class=\"blush-left\"></div>     <div class=\"beak-top\"></div>     <div class=\"beak-bottom\"></div>   </div> </div>',2),(69,'5a9d72ad424fe3d0e10cad16','Use a media query to change a variable','CSS Variables can simplify the way you use media queries.<br><br>For instance, when your screen is smaller or larger than your media query break point, you can change the value of a variable, and it will apply its style wherever it is used.<br><br> <hr>In the <code>:root</code> selector of the <code>media query</code>, change it so <code>--penguin-size</code> is redefined and given a value of <code>200px</code>. Also, redefine <code>--penguin-skin</code> and give it a value of <code>black</code>. Then resize the preview to see this change in action.<br><br>',' <style>   :root {     --penguin-size: 300px;     --penguin-skin: gray;     --penguin-belly: white;     --penguin-beak: orange;   }      @media (max-width: 350px) {     :root {              /* add code below */              /* add code above */            }   }      .penguin {     position: relative;     margin: auto;     display: block;     margin-top: 5%;     width: var(--penguin-size, 300px);     height: var(--penguin-size, 300px);   }      .right-cheek {     top: 15%;     left: 35%;     background: var(--penguin-belly, white);     width: 60%;     height: 70%;     border-radius: 70% 70% 60% 60%;   }      .left-cheek {     top: 15%;     left: 5%;     background: var(--penguin-belly, white);     width: 60%;     height: 70%;     border-radius: 70% 70% 60% 60%;   }      .belly {     top: 60%;     left: 2.5%;     background: var(--penguin-belly, white);     width: 95%;     height: 100%;     border-radius: 120% 120% 100% 100%;   }      .penguin-top {     top: 10%;     left: 25%;     background: var(--penguin-skin, gray);     width: 50%;     height: 45%;     border-radius: 70% 70% 60% 60%;   }      .penguin-bottom {     top: 40%;     left: 23.5%;     background: var(--penguin-skin, gray);     width: 53%;     height: 45%;     border-radius: 70% 70% 100% 100%;   }      .right-hand {     top: 5%;     left: 25%;     background: var(--penguin-skin, black);     width: 30%;     height: 60%;     border-radius: 30% 30% 120% 30%;     transform: rotate(130deg);     z-index: -1;     animation-duration: 3s;     animation-name: wave;     animation-iteration-count: infinite;     transform-origin:0% 0%;     animation-timing-function: linear;   }      @keyframes wave {       10% {         transform: rotate(110deg);       }       20% {         transform: rotate(130deg);       }       30% {         transform: rotate(110deg);       }        40% {         transform: rotate(130deg);       }       }      .left-hand {     top: 0%;     left: 75%;     background: var(--penguin-skin, gray);     width: 30%;     height: 60%;     border-radius: 30% 30% 30% 120%;     transform: rotate(-45deg);     z-index: -1;   }      .right-feet {     top: 85%;     left: 60%;     background: var(--penguin-beak, orange);     width: 15%;     height: 30%;     border-radius: 50% 50% 50% 50%;     transform: rotate(-80deg);     z-index: -2222;   }      .left-feet {     top: 85%;     left: 25%;     background: var(--penguin-beak, orange);     width: 15%;     height: 30%;     border-radius: 50% 50% 50% 50%;     transform: rotate(80deg);     z-index: -2222;   }      .right-eye {     top: 45%;     left: 60%;     background: black;     width: 15%;     height: 17%;     border-radius: 50%;   }      .left-eye {     top: 45%;     left: 25%;     background: black;     width: 15%;     height: 17%;     border-radius: 50%;   }      .sparkle {     top: 25%;     left:-23%;     background: white;     width: 150%;     height: 100%;     border-radius: 50%;   }      .blush-right {     top: 65%;     left: 15%;     background: pink;     width: 15%;     height: 10%;     border-radius: 50%;   }      .blush-left {     top: 65%;     left: 70%;     background: pink;     width: 15%;     height: 10%;     border-radius: 50%;   }      .beak-top {     top: 60%;     left: 40%;     background: var(--penguin-beak, orange);     width: 20%;     height: 10%;     border-radius: 50%;   }      .beak-bottom {     top: 65%;     left: 42%;     background: var(--penguin-beak, orange);     width: 16%;     height: 10%;     border-radius: 50%;   }      body {     background:#c6faf1;   }      .penguin * {     position: absolute;   } </style> <div class=\"penguin\">   <div class=\"penguin-bottom\">     <div class=\"right-hand\"></div>     <div class=\"left-hand\"></div>     <div class=\"right-feet\"></div>     <div class=\"left-feet\"></div>   </div>   <div class=\"penguin-top\">     <div class=\"right-cheek\"></div>     <div class=\"left-cheek\"></div>     <div class=\"belly\"></div>     <div class=\"right-eye\">       <div class=\"sparkle\"></div>     </div>     <div class=\"left-eye\">       <div class=\"sparkle\"></div>     </div>     <div class=\"blush-right\"></div>     <div class=\"blush-left\"></div>     <div class=\"beak-top\"></div>     <div class=\"beak-bottom\"></div>   </div> </div>',2),(70,'587d7dbd367417b2b2512bb4','Store Data with Sass Variables','One feature of Sass that\'s different than CSS is it uses variables. They are declared and set to store data, similar to JavaScript.<br><br>In JavaScript, variables are defined using the <code>let</code> and <code>const</code> keywords. In Sass, variables start with a <code>$</code> followed by the variable name.<br><br>Here are a couple examples:<br><br><blockquote>$main-fonts: Arial, sans-serif;<br>$headings-color: green;<br><br>//To use variables:<br>h1 {<br>&nbsp;&nbsp;font-family: $main-fonts;<br>&nbsp;&nbsp;color: $headings-color;<br>}</blockquote><br><br>One example where variables are useful is when a number of elements need to be the same color. If that color is changed, the only place to edit the code is the variable value.<br><br> <hr>Create a variable <code>$text-color</code> and set it to red. Then change the value of the <code>color</code> property for the <code>.blog-post</code> and <code>h2</code> to the <code>$text-color</code> variable.<br><br>',' <style type=\'text/sass\'>         .header{     text-align: center;   }   .blog-post, h2 {     color: red;   } </style>  <h1 class=\"header\">Learn Sass</h1> <div class=\"blog-post\">   <h2>Some random title</h2>   <p>This is a paragraph with some random text in it</p> </div> <div class=\"blog-post\">   <h2>Header #2</h2>   <p>Here is some more random text.</p> </div> <div class=\"blog-post\">   <h2>Here is another header</h2>   <p>Even more random text within a paragraph</p> </div>',0),(71,'587d7dbd367417b2b2512bb5','Nest CSS with Sass','Sass allows <code>nesting</code> of CSS rules, which is a useful way of organizing a style sheet.<br><br>Normally, each element is targeted on a different line to style it, like so:<br><br><blockquote>nav {<br>&nbsp;&nbsp;background-color: red;<br>}<br><br>nav ul {<br>&nbsp;&nbsp;list-style: none;<br>}<br><br>nav ul li {<br>&nbsp;&nbsp;display: inline-block;<br>}</blockquote><br><br>For a large project, the CSS file will have many lines and rules. This is where <code>nesting</code> can help organize your code by placing child style rules within the respective parent elements:<br><br><blockquote>nav {<br>&nbsp;&nbsp;background-color: red;<br><br>&nbsp;&nbsp;ul {<br>&nbsp;&nbsp;&nbsp;&nbsp;list-style: none;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;li {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display: inline-block;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br></blockquote><br><br> <hr>Use the <code>nesting</code> technique shown above to re-organize the CSS rules for both children of <code>.blog-post</code> element. For testing purposes, the <code>h1</code> should come before the <code>p</code> element.<br><br>',' <style type=\'text/sass\'>   .blog-post {        }   h1 {     text-align: center;     color: blue;   }   p {     font-size: 20px;   } </style>  <div class=\"blog-post\">   <h1>Blog Title</h1>   <p>This is a paragraph</p> </div>',0),(72,'587d7dbd367417b2b2512bb6','Create Reusable CSS with Mixins','In Sass, a <code>mixin</code> is a group of CSS declarations that can be reused throughout the style sheet.<br><br>Newer CSS features take time before they are fully adopted and ready to use in all browsers. As features are added to browsers, CSS rules using them may need vendor prefixes. Consider \"box-shadow\":<br><br><blockquote>div {<br>&nbsp;&nbsp;-webkit-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;-moz-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;-ms-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;box-shadow: 0px 0px 4px #fff;<br>}</blockquote><br><br>It\'s a lot of typing to re-write this rule for all the elements that have a <code>box-shadow</code>, or to change each value to test different effects.<br><br><code>Mixins</code> are like functions for CSS. Here is how to write one:<br><br><blockquote>@mixin box-shadow($x, $y, $blur, $c){ <br>&nbsp;&nbsp;-webkit-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;-moz-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;-ms-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;box-shadow: $x, $y, $blur, $c;<br>}</blockquote><br><br>The definition starts with <code>@mixin</code> followed by a custom name. The parameters (the <code>$x</code>, <code>$y</code>, <code>$blur</code>, and <code>$c</code> in the example above) are optional.<br><br>Now any time a <code>box-shadow</code> rule is needed, only a single line calling the <code>mixin</code> replaces having to type all the vendor prefixes. A <code>mixin</code> is called with the <code>@include</code> directive:<br><br><blockquote>div {<br>&nbsp;&nbsp;@include box-shadow(0px, 0px, 4px, #fff);<br>}</blockquote><br><br> <hr>Write a <code>mixin</code> for <code>border-radius</code> and give it a <code>$radius</code> parameter. It should use all the vendor prefixes from the example. Then use the <code>border-radius</code> <code>mixin</code> to give the <code>#awesome</code> element a border radius of 15px.<br><br>',' <style type=\'text/sass\'>            #awesome {     width: 150px;     height: 150px;     background-color: green;        } </style>  <div id=\"awesome\"></div>   ',0),(73,'587d7dbe367417b2b2512bb8','Use @if and @else to Add Logic To Your Styles','The <code>@if</code> directive in Sass is useful to test for a specific case - it works just like the <code>if</code> statement in JavaScript</code>.<br><br><blockquote>@mixin make-bold($bool) {<br>&nbsp;&nbsp;@if $bool == true {<br>&nbsp;&nbsp;&nbsp;&nbsp;font-weight: bold;<br>&nbsp;&nbsp;}<br>}</blockquote><br><br>And just like in JavaScript, <code>@else if</code> and <code>@else</code> test for more conditions:<br><br><blockquote>@mixin text-effect($val) {<br>&nbsp;&nbsp;@if $val == danger {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: red;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else if $val == alert {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: yellow;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else if $val == success {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: green;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: black;<br>&nbsp;&nbsp;}<br>}</blockquote><br><br> <hr>Create a <code>mixin</code> called <code>border-stroke</code> that takes a parameter <code>$val</code>. The <code>mixin</code> should check for the following conditions using <code>@if</code>, <code>@else if</code>, and <code>@else</code>:<br><br><blockquote>light - 1px solid black<br>medium - 3px solid black<br>heavy - 6px solid black<br>none - no border</blockquote><br><br>',' <style type=\'text/sass\'>            #box {     width: 150px;     height: 150px;     background-color: red;     @include border-stroke(medium);   }   </style>  <div id=\"box\"></div>',0),(74,'587d7dbe367417b2b2512bb9','Use @for to Create a Sass Loop','The <code>@for</code> directive adds styles in a loop, very similar to a <code>for</code> loop in JavaScript.<br><br><code>@for</code> is used in two ways: \"start through end\" or \"start to end\". The main difference is that \"start to end\" <em>excludes</em> the end number, and \"start through end\" <em>includes</em> the end number.<br><br>Here\'s a start <b>through</b> end example:<br><br><blockquote>@for $i from 1 through 12 {<br>&nbsp;&nbsp;.col-#{$i} { width: 100%/12 * $i; }<br>}</blockquote><br><br>The <code>#{$i}</code> part is the syntax to combine a variable (<code>i</code>) with text to make a string. When the Sass file is converted to CSS, it looks like this:<br><br><blockquote>.col-1 {<br>&nbsp;&nbsp;width: 8.33333%;<br>}<br><br>.col-2 {<br>&nbsp;&nbsp;width: 16.66667%;<br>}<br><br>...<br><br>.col-12 {<br>&nbsp;&nbsp;width: 100%;<br>}</blockquote><br><br>This is a powerful way to create a grid layout. Now you have twelve options for column widths available as CSS classes.<br><br> <hr>Write a <code>@for</code> directive that takes a variable <code>$j</code> that goes from 1 <b>to</b> 6.<br><br>It should create 5 classes called <code>.text-1</code> to <code>.text-5</code> where each has a <code>font-size</code> set to 10px multiplied by the index.<br><br>',' <style type=\'text/sass\'>          </style>  <p class=\"text-1\">Hello</p> <p class=\"text-2\">Hello</p> <p class=\"text-3\">Hello</p> <p class=\"text-4\">Hello</p> <p class=\"text-5\">Hello</p>',0),(75,'587d7dbf367417b2b2512bba','Use @each to Map Over Items in a List','The last challenge showed how the <code>@for</code> directive uses a starting and ending value to loop a certain number of times. Sass also offers the <code>@each</code> directive which loops over each item in a list or map.<br><br>On each iteration, the variable gets assigned to the current value from the list or map.<br><br><blockquote>@each $color in blue, red, green {<br>&nbsp;&nbsp;.#{$color}-text {color: $color;}<br>}</blockquote><br><br>A map has slightly different syntax. Here\'s an example:<br><br><blockquote>$colors: (color1: blue, color2: red, color3: green);<br><br>@each $key, $color in $colors {<br>&nbsp;&nbsp;.#{$color}-text {color: $color;}<br>}</blockquote><br><br>Note that the <code>$key</code> variable is needed to reference the keys in the map. Otherwise, the compiled CSS would have <code>color1</code>, <code>color2</code>... in it.<br><br>Both of the above code examples are converted into the following CSS:<br><br><blockquote>.blue-text {<br>&nbsp;&nbsp;color: blue;<br>}<br><br>.red-text {<br>&nbsp;&nbsp;color: red;<br>}<br><br>.green-text {<br>&nbsp;&nbsp;color: green;<br>}</blockquote><br><br> <hr>Write an <code>@each</code> directive that goes through a list: <code>blue, black, red</code> and assigns each variable to a <code>.color-bg</code> class, where the \"color\" part changes for each item.<br><br>Each class should set the <code>background-color</code> the respective color.<br><br>',' <style type=\'text/sass\'>            div {     height: 200px;     width: 200px;   } </style>  <div class=\"blue-bg\"></div> <div class=\"black-bg\"></div> <div class=\"red-bg\"></div>',0),(76,'587d7dbf367417b2b2512bbb','Apply a Style Until a Condition is Met with @while','The <code>@while</code> directive is an option with similar functionality to the JavaScript <code>while</code> loop. It creates CSS rules until a condition is met.<br><br>The <code>@for</code> challenge gave an example to create a simple grid system. This can also work with <code>@while</code>.<br><br><blockquote>$x: 1;<br>@while $x < 13 {<br>&nbsp;&nbsp;.col-#{$x} { width: 100%/12 * $x;}<br>&nbsp;&nbsp;$x: $x + 1;<br>}</blockquote><br><br>First, define a variable <code>$x</code> and set it to 1. Next, use the <code>@while</code> directive to create the grid system <i>while</i> <code>$x</code> is less than 13.<br><br>After setting the CSS rule for <code>width</code>, <code>$x</code> is incremented by 1 to avoid an infinite loop.<br><br> <hr>Use <code>@while</code> to create a series of classes with different <code>font-sizes</code>.<br><br>There should be 10 different classes from <code>text-1</code> to <code>text-10</code>. Then set <code>font-size</code> to 5px multiplied by the current index number. Make sure to avoid an infinite loop!<br><br>',' <style type=\'text/sass\'>          </style>  <p class=\"text-1\">Hello</p> <p class=\"text-2\">Hello</p> <p class=\"text-3\">Hello</p> <p class=\"text-4\">Hello</p> <p class=\"text-5\">Hello</p> <p class=\"text-6\">Hello</p> <p class=\"text-7\">Hello</p> <p class=\"text-8\">Hello</p> <p class=\"text-9\">Hello</p> <p class=\"text-10\">Hello</p>',0),(77,'587d7dbf367417b2b2512bbc','Split Your Styles into Smaller Chunks with Partials','<code>Partials</code> in Sass are separate files that hold segments of CSS code. These are imported and used in other Sass files. This is a great way to group similar code into a module to keep it organized.<br><br>Names for <code>partials</code> start with the underscore (<code>_</code>) character, which tells Sass it is a small segment of CSS and not to convert it into a CSS file. Also, Sass files end with the <code>.scss</code> file extension. To bring the code in the <code>partial</code> into another Sass file, use the <code>@import</code> directive.<br><br>For example, if all your <code>mixins</code> are saved in a <code>partial</code> named \"_mixins.scss\", and they are needed in the \"main.scss\" file, this is how to use them in the main file:<br><br><blockquote>// In the main.scss file<br><br>@import \'mixins\'</blockquote><br><br>Note that the underscore is not needed in the <code>import</code> statement - Sass understands it is a <code>partial</code>. Once a <code>partial</code> is imported into a file, all variables, <code>mixins</code>, and other code are available to use.<br><br> <hr>Write an <code>@import</code> statement to import a <code>partial</code> named <code>_variables.scss</code> into the main.scss file.<br><br>',' // The main.scss file    ',0),(78,'587d7fa5367417b2b2512bbd','Extend One Set of CSS Styles to Another Element','Sass has a feature called <code>extend</code> that makes it easy to borrow the CSS rules from one element and build upon them in another.<br><br>For example, the below block of CSS rules style a <code>.panel</code> class. It has a <code>background-color</code>, <code>height</code> and <code>border</code>.<br><br><blockquote>.panel{<br>&nbsp;&nbsp;background-color: red;<br>&nbsp;&nbsp;height: 70px;<br>&nbsp;&nbsp;border: 2px solid green;<br>}</blockquote><br><br>Now you want another panel called <code>.big-panel</code>. It has the same base properties as <code>.panel</code>, but also needs a <code>width</code> and <code>font-size</code>.<br><br>It\'s possible to copy and paste the initial CSS rules from <code>.panel</code>, but the code becomes repetitive as you add more types of panels.<br><br>The <code>extend</code> directive is a simple way to reuse the rules written for one element, then add more for another:<br><br><blockquote>.big-panel{<br>&nbsp;&nbsp;@extend .panel;<br>&nbsp;&nbsp;width: 150px;<br>&nbsp;&nbsp;font-size: 2em;<br>}</blockquote><br><br>The <code>.big-panel</code> will have the same properties as <code>.panel</code> in addition to the new styles.<br><br> <hr>Make a class <code>.info-important</code> that extends <code>.info</code> and also has a <code>background-color</code> set to magenta.<br><br>',' <style type=\'text/sass\'>   h3{     text-align: center;   }   .info{     width: 200px;     border: 1px solid black;     margin: 0 auto;   }             </style> <h3>Posts</h3> <div class=\"info-important\">   <p>This is an important post. It should extend the class \".info\" and have its own CSS styles.</p> </div>  <div class=\"info\">   <p>This is a simple post. It has basic styling and can be extended for other uses.</p> </div>',0),(79,'587d7791367417b2b2512ab3','Create Visual Balance Using the text-align Property','This section of the curriculum focuses on Applied Visual Design. The first group of challenges build on the given card layout to show a number of core principles.<br><br>Text is often a large part of web content. CSS has several options for how to align it with the <code>text-align</code> property.<br><br><code>text-align: justify;</code> causes all lines of text except the last line to meet the left and right edges of the line box.<br><br><code>text-align: center;</code> centers the text<br><br><code>text-align: right;</code> right-aligns the text<br><br>And <code>text-align: left;</code> (the default) left-aligns the text.<br><br> <hr>Align the <code>h4</code> tag\'s text, which says \"Google\", to the center. Then justify the paragraph tag which contains information about how Google was founded.<br><br>',' <style>   h4 {        }   p {        }   .links {     margin-right: 20px;        }   .fullCard {     border: 1px solid #ccc;     border-radius: 5px;     margin: 10px 5px;     padding: 4px;   }   .cardContent {     padding: 10px;   } </style> <div class=\"fullCard\">   <div class=\"cardContent\">     <div class=\"cardText\">       <h4>Google</h4>       <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>     </div>     <div class=\"cardLinks\">       <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>       <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>     </div>   </div> </div>',3),(80,'587d7791367417b2b2512ab4','Adjust the Width of an Element Using the width Property','You can specify the width of an element using the <code>width</code> property in CSS. Values can be given in relative length units (such as em), absolute length units (such as px), or as a percentage of its containing parent element. Here\'s an example that changes the width of an image to 220px:<br><br><blockquote>img {<br>&nbsp;&nbsp;width: 220px;<br>}</blockquote><br><br> <hr>Add a <code>width</code> property to the entire card and set it to an absolute value of 245px. Use the <code>fullCard</code> class to select the element.<br><br>',' <style>   h4 {     text-align: center;   }   p {     text-align: justify;   }   .links {     margin-right: 20px;     text-align: left;   }   .fullCard {          border: 1px solid #ccc;     border-radius: 5px;     margin: 10px 5px;     padding: 4px;   }   .cardContent {     padding: 10px;   } </style> <div class=\"fullCard\">   <div class=\"cardContent\">     <div class=\"cardText\">       <h4>Google</h4>       <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>     </div>     <div class=\"cardLinks\">       <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>       <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>     </div>   </div> </div>',3),(81,'587d7791367417b2b2512ab5','Adjust the Height of an Element Using the height Property','You can specify the height of an element using the <code>height</code> property in CSS, similar to the <code>width</code> property. Here\'s an example that changes the height of an image to 20px:<br><br><blockquote>img {<br>&nbsp;&nbsp;height: 20px;<br>}</blockquote><br><br> <hr>Add a <code>height</code> property to the <code>h4</code> tag and set it to 25px.<br><br>',' <style>   h4 {     text-align: center;        }   p {     text-align: justify;   }   .links {     margin-right: 20px;     text-align: left;   }   .fullCard {     width: 245px;     border: 1px solid #ccc;     border-radius: 5px;     margin: 10px 5px;     padding: 4px;   }   .cardContent {     padding: 10px;   } </style> <div class=\"fullCard\">   <div class=\"cardContent\">     <div class=\"cardText\">       <h4>Google</h4>       <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>     </div>     <div class=\"cardLinks\">       <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>       <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>     </div>   </div> </div>',3),(82,'587d781a367417b2b2512ab7','Use the strong Tag to Make Text Bold','To make text bold, you can use the <code>strong</code> tag. This is often used to draw attention to text and symbolize that it is important. With the <code>strong</code> tag, the browser applies the CSS of <code>font-weight: bold;</code> to the element.<br><br> <hr>Wrap a <code>strong</code> tag around \"Stanford University\" inside the <code>p</code> tag.<br><br>',' <style>   h4 {     text-align: center;     height: 25px;   }   p {     text-align: justify;   }   .links {     text-align: left;     color: black;   }   .fullCard {     width: 245px;     border: 1px solid #ccc;     border-radius: 5px;     margin: 10px 5px;     padding: 4px;   }   .cardContent {     padding: 10px;   }   .cardText {     margin-bottom: 30px;   } </style> <div class=\"fullCard\">   <div class=\"cardContent\">     <div class=\"cardText\">       <h4>Google</h4>       <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>     </div>     <div class=\"cardLinks\">       <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>       <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>     </div>   </div> </div>',3),(83,'587d781a367417b2b2512ab8','Use the u Tag to Underline Text','To underline text, you can use the <code>u</code> tag. This is often used to signify that a section of text is important, or something to remember. With the <code>u</code> tag, the browser applies the CSS of <code>text-decoration: underline;</code> to the element.<br><br> <hr>Wrap the <code>u</code> tag around the text \"Ph.D. students\". It should not include the parent <code>div</code> that has the class of <code>cardText</code>.<br><br><strong>Note</strong><br>Try to avoid using the <code>u</code> tag when it could be confused for a link. Anchor tags also have a default underlined formatting.<br><br>',' <style>   h4 {     text-align: center;     height: 25px;   }   p {     text-align: justify;   }   .links {     text-align: left;     color: black;   }   .fullCard {     width: 245px;     border: 1px solid #ccc;     border-radius: 5px;     margin: 10px 5px;     padding: 4px;   }   .cardContent {     padding: 10px;   }   .cardText {     margin-bottom: 30px;   } </style> <div class=\"fullCard\">   <div class=\"cardContent\">     <div class=\"cardText\">       <h4>Google</h4>       <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at <strong>Stanford University</strong>.</p>     </div>     <div class=\"cardLinks\">       <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>       <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>     </div>   </div> </div>',3),(84,'587d781a367417b2b2512ab9','Use the em Tag to Italicize Text','To emphasize text, you can use the <code>em</code> tag. This displays text as italicized, as the browser applies the CSS of <code>font-style: italic;</code> to the element.<br><br> <hr>Wrap an <code>em</code> tag around the contents of the paragraph tag to give it emphasis.<br><br>',' <style>   h4 {     text-align: center;     height: 25px;   }   p {     text-align: justify;   }   .links {     text-align: left;     color: black;   }   .fullCard {     width: 245px;     border: 1px solid #ccc;     border-radius: 5px;     margin: 10px 5px;     padding: 4px;   }   .cardContent {     padding: 10px;   }   .cardText {     margin-bottom: 30px;   } </style> <div class=\"fullCard\">   <div class=\"cardContent\">     <div class=\"cardText\">       <h4>Google</h4>       <p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p>     </div>     <div class=\"cardLinks\">       <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>       <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>     </div>   </div> </div>',3),(85,'587d781b367417b2b2512aba','Use the s Tag to Strikethrough Text','To strikethrough text, which is when a horizontal line cuts across the characters, you can use the <code>s</code> tag. It shows that a section of text is no longer valid. With the <code>s</code> tag, the browser applies the CSS of <code>text-decoration: line-through;</code> to the element.<br><br> <hr>Wrap the <code>s</code> tag around \"Google\" inside the <code>h4</code> tag and then add the word Alphabet beside it, which should not have the strikethrough formatting.<br><br>',' <style>   h4 {     text-align: center;     height: 25px;   }   p {     text-align: justify;   }   .links {     text-align: left;     color: black;   }   .fullCard {     width: 245px;     border: 1px solid #ccc;     border-radius: 5px;     margin: 10px 5px;     padding: 4px;   }   .cardContent {     padding: 10px;   }   .cardText {     margin-bottom: 30px;   } </style> <div class=\"fullCard\">   <div class=\"cardContent\">     <div class=\"cardText\">       <h4>Google</h4>       <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>     </div>     <div class=\"cardLinks\">       <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>       <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>     </div>   </div> </div>',3),(86,'587d781b367417b2b2512abb','Create a Horizontal Line Using the hr Element','You can use the <code>hr</code> tag to add a horizontal line across the width of its containing element. This can be used to define a change in topic or to visually separate groups of content.<br><br> <hr>Add an <code>hr</code> tag underneath the <code>h4</code> which contains the card title.<br><br><strong>Note</strong><br>In HTML, <code>hr</code> is a self-closing tag, and therefore doesn\'t need a separate closing tag.<br><br>',' <style>   h4 {     text-align: center;     height: 25px;   }   p {     text-align: justify;   }   .links {     text-align: left;     color: black;   }   .fullCard {     width: 245px;     border: 1px solid #ccc;     border-radius: 5px;     margin: 10px 5px;     padding: 4px;   }   .cardContent {     padding: 10px;   }   .cardText {     margin-bottom: 30px;   } </style> <div class=\"fullCard\">   <div class=\"cardContent\">     <div class=\"cardText\">       <h4><s>Google</s>Alphabet</h4>              <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>     </div>     <div class=\"cardLinks\">       <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>       <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>     </div>   </div> </div>',3),(87,'587d781b367417b2b2512abc','Adjust the background-color Property of Text','Instead of adjusting your overall background or the color of the text to make the foreground easily readable, you can add a <code>background-color</code> to the element holding the text you want to emphasize. This challenge uses <code>rgba()</code> instead of <code>hex</code> codes or normal <code>rgb()</code>.<br><br><blockquote>rgba stands for:<br>&nbsp;&nbsp;r = red<br>&nbsp;&nbsp;g = green<br>&nbsp;&nbsp;b = blue<br>&nbsp;&nbsp;a = alpha/level of opacity</blockquote><br><br>The RGB values can range from 0 to 255. The alpha value can range from 1, which is fully opaque or a solid color, to 0, which is fully transparent or clear. <code>rgba()</code> is great to use in this case, as it allows you to adjust the opacity. This means you don\'t have to completely block out the background.<br><br>You\'ll use <code>background-color: rgba(45, 45, 45, 0.1)</code> for this challenge. It produces a dark gray color that is nearly transparent given the low opacity value of 0.1.<br><br> <hr>To make the text stand out more, adjust the <code>background-color</code> of the <code>h4</code> element to the given <code>rgba()</code> value.<br><br>Also for the <code>h4</code>, remove the <code>height</code> property and add <code>padding</code> of 10px.<br><br>',' <style>   h4 {     text-align: center;     height: 25px;             }   p {     text-align: justify;   }   .links {     text-align: left;     color: black;   }   .fullCard {     width: 245px;     border: 1px solid #ccc;     border-radius: 5px;     margin: 10px 5px;     padding: 4px;   }   .cardContent {     padding: 10px;   }   .cardText {     margin-bottom: 30px;   } </style> <div class=\"fullCard\">   <div class=\"cardContent\">     <div class=\"cardText\">       <h4>Alphabet</h4>       <hr>       <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>     </div>     <div class=\"cardLinks\">       <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>       <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>     </div>   </div> </div>',3),(88,'587d781b367417b2b2512abd','Adjust the Size of a Header Versus a Paragraph Tag','The font size of header tags (<code>h1</code> through <code>h6</code>) should generally be larger than the font size of paragraph tags. This makes it easier for the user to visually understand the layout and level of importance of everything on the page. You use the <code>font-size</code> property to adjust the size of the text in an element.<br><br> <hr>To make the heading significantly larger than the paragraph, change the <code>font-size</code> of the <code>h4</code> tag to 27 pixels.<br><br>',' <style>   h4 {     text-align: center;     background-color: rgba(45, 45, 45, 0.1);     padding: 10px;        }   p {     text-align: justify;   }   .links {     text-align: left;     color: black;   }   .fullCard {     width: 245px;     border: 1px solid #ccc;     border-radius: 5px;     margin: 10px 5px;     padding: 4px;   }   .cardContent {     padding: 10px;   }   .cardText {     margin-bottom: 30px;   } </style> <div class=\"fullCard\">   <div class=\"cardContent\">     <div class=\"cardText\">       <h4>Alphabet</h4>       <hr>       <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>     </div>     <div class=\"cardLinks\">       <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>       <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>     </div>   </div> </div>',3),(89,'587d781b367417b2b2512abe','Add a box-shadow to a Card-like Element','The <code>box-shadow</code> property applies one or more shadows to an element.<br><br>The <code>box-shadow</code> property takes values for <code>offset-x</code> (how far to push the shadow horizontally from the element), <code>offset-y</code> (how far to push the shadow vertically from the element), <code>blur-radius</code>, <code>spread-radius</code> and a color value, in that order. The <code>blur-radius</code> and <code>spread-radius</code> values are optional.<br><br>Here\'s an example of the CSS to create multiple shadows with some blur, at mostly-transparent black colors:<br><br><blockquote>box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);</blockquote><br><br> <hr>The element now has an id of <code>thumbnail</code>. With this selector, use the example CSS values above to place a <code>box-shadow</code> on the card.<br><br>',' <style>   h4 {     text-align: center;     background-color: rgba(45, 45, 45, 0.1);     padding: 10px;     font-size: 27px;   }   p {     text-align: justify;   }   .links {     text-align: left;     color: black;   }            .fullCard {     width: 245px;     border: 1px solid #ccc;     border-radius: 5px;     margin: 10px 5px;     padding: 4px;   }   .cardContent {     padding: 10px;   }   .cardText {     margin-bottom: 30px;   } </style> <div class=\"fullCard\" id=\"thumbnail\">   <div class=\"cardContent\">     <div class=\"cardText\">       <h4>Alphabet</h4>       <hr>       <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>     </div>     <div class=\"cardLinks\">       <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>       <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>     </div>   </div> </div>',3),(90,'587d781c367417b2b2512abf','Decrease the Opacity of an Element','The <code>opacity</code> property in CSS is used to adjust the opacity, or conversely, the transparency for an item.<br><br><blockquote>A value of 1 is opaque, which isn\'t transparent at all.<br>A value of 0.5 is half see-through.<br>A value of 0 is completely transparent.</blockquote><br><br>The value given will apply to the entire element, whether that\'s an image with some transparency, or the foreground and background colors for a block of text.<br><br> <hr>Set the <code>opacity</code> of the anchor tags to 0.7 using <code>links</code> class to select them.<br><br>',' <style>   h4 {     text-align: center;     background-color: rgba(45, 45, 45, 0.1);     padding: 10px;     font-size: 27px;   }   p {     text-align: justify;   }   .links {     text-align: left;     color: black;        }   #thumbnail {     box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);   }   .fullCard {     width: 245px;     border: 1px solid #ccc;     border-radius: 5px;     margin: 10px 5px;     padding: 4px;   }   .cardContent {     padding: 10px;   }   .cardText {     margin-bottom: 30px;   } </style> <div class=\"fullCard\" id=\"thumbnail\">   <div class=\"cardContent\">     <div class=\"cardText\">       <h4>Alphabet</h4>       <hr>       <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>     </div>     <div class=\"cardLinks\">       <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>       <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>     </div>   </div> </div>',3),(91,'587d781c367417b2b2512ac0','Use the text-transform Property to Make Text Uppercase','The <code>text-transform</code> property in CSS is used to change the appearance of text. It\'s a convenient way to make sure text on a webpage appears consistently, without having to change the text content of the actual HTML elements.<br><br>The following table shows how the different <code>text-transform</code>values change the example text \"Transform me\".<br><br><table class=\"table table-striped\"><thead><th>Value<th>Result<tbody><tr><td><code>lowercase</code><td>\"transform me\"<tr><td><code>uppercase</code><td>\"TRANSFORM ME\"<tr><td><code>capitalize</code><td>\"Transform Me\"<tr><td><code>initial</code><td>Use the default value<tr><td><code>inherit</code><td>Use the <code>text-transform</code> value from the parent element<tr><td><code>none</code><td><strong>Default:</strong> Use the original text</td></table><br><br> <hr>Transform the text of the <code>h4</code> to be uppercase using the <code>text-transform</code> property.<br><br>',' <style>   h4 {     text-align: center;     background-color: rgba(45, 45, 45, 0.1);     padding: 10px;     font-size: 27px;        }   p {     text-align: justify;   }   .links {     text-align: left;     color: black;     opacity: 0.7;   }   #thumbnail {     box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);   }   .fullCard {     width: 245px;     border: 1px solid #ccc;     border-radius: 5px;     margin: 10px 5px;     padding: 4px;   }   .cardContent {     padding: 10px;   }   .cardText {     margin-bottom: 30px;   } </style> <div class=\"fullCard\" id=\"thumbnail\">   <div class=\"cardContent\">     <div class=\"cardText\">       <h4>Alphabet</h4>       <hr>       <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>     </div>     <div class=\"cardLinks\">       <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>       <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>     </div>   </div> </div>',3),(92,'587d781c367417b2b2512ac2','Set the font-size for Multiple Heading Elements','The <code>font-size</code> property is used to specify how large the text is in a given element. This rule can be used for multiple elements to create visual consistency of text on a page. In this challenge, you\'ll set the values for all <code>h1</code> through <code>h6</code> tags to balance the heading sizes.<br><br> <hr><ul><li>Set the <code>font-size</code> of the <code>h1</code> tag to 68px.</li><li>Set the <code>font-size</code> of the <code>h2</code> tag to 52px.</li><li>Set the <code>font-size</code> of the <code>h3</code> tag to 40px.</li><li>Set the <code>font-size</code> of the <code>h4</code> tag to 32px.</li><li>Set the <code>font-size</code> of the <code>h5</code> tag to 21px.</li><li>Set the <code>font-size</code> of the <code>h6</code> tag to 14px.</li></ul><br><br>',' <style>                   </style> <h1>This is h1 text</h1> <h2>This is h2 text</h2> <h3>This is h3 text</h3> <h4>This is h4 text</h4> <h5>This is h5 text</h5> <h6>This is h6 text</h6>',3),(93,'587d781c367417b2b2512ac3','Set the font-weight for Multiple Heading Elements','You set the <code>font-size</code> of each heading tag in the last challenge, here you\'ll adjust the <code>font-weight</code>.<br><br>The <code>font-weight</code> property sets how thick or thin characters are in a section of text.<br><br> <hr><ul><li>Set the <code>font-weight</code> of the <code>h1</code> tag to 800.</li><li>Set the <code>font-weight</code> of the <code>h2</code> tag to 600.</li><li>Set the <code>font-weight</code> of the <code>h3</code> tag to 500.</li><li>Set the <code>font-weight</code> of the <code>h4</code> tag to 400.</li><li>Set the <code>font-weight</code> of the <code>h5</code> tag to 300.</li><li>Set the <code>font-weight</code> of the <code>h6</code> tag to 200.</li></ul><br><br>',' <style>   h1 {     font-size: 68px;        }   h2 {     font-size: 52px;        }   h3 {     font-size: 40px;        }   h4 {     font-size: 32px;        }   h5 {     font-size: 21px;        }   h6 {     font-size: 14px;        } </style> <h1>This is h1 text</h1> <h2>This is h2 text</h2> <h3>This is h3 text</h3> <h4>This is h4 text</h4> <h5>This is h5 text</h5> <h6>This is h6 text</h6>',3),(94,'587d781c367417b2b2512ac4','Set the font-size of Paragraph Text','The <code>font-size</code> property in CSS is not limited to headings, it can be applied to any element containing text.<br><br> <hr>Change the value of the <code>font-size</code> property for the paragraph to 16px to make it more visible.<br><br>',' <style>   p {     font-size: 10px;   } </style> <p>   Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. </p>',3),(95,'587d781d367417b2b2512ac5','Set the line-height of Paragraphs','CSS offers the <code>line-height</code> property to change the height of each line in a block of text. As the name suggests, it changes the amount of vertical space that each line of text gets.<br><br> <hr>Add a <code>line-height</code> property to the <code>p</code> tag and set it to 25px.<br><br>',' <style>   p {     font-size: 16px;        } </style> <p>   Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. </p>',3),(96,'587d781d367417b2b2512ac8','Adjust the Hover State of an Anchor Tag','This challenge will touch on the usage of pseudo-classes. A pseudo-class is a keyword that can be added to selectors, in order to select a specific state of the element.<br><br>For example, the styling of an anchor tag can be changed for its hover state using the <code>:hover</code> pseudo-class selector. Here\'s the CSS to change the <code>color</code> of the anchor tag to red during its hover state:<br><br><blockquote>a:hover {<br>&nbsp;&nbsp;color: red;<br>}</blockquote><br><br> <hr>The code editor has a CSS rule to style all <code>a</code> tags black. Add a rule so that when the user hovers over the <code>a</code> tag, the <code>color</code> is blue.<br><br>',' <style>   a {     color: #000;   }          </style> <a href=\"http://freecatphotoapp.com/\" target=\"_blank\">CatPhotoApp</a>',3),(97,'587d781e367417b2b2512ac9','Change an Element\'s Relative Position','CSS treats each HTML element as its own box, which is usually referred to as the <code>CSS Box Model</code>. Block-level items automatically start on a new line (think headings, paragraphs, and divs) while inline items sit within surrounding content (like images or spans). The default layout of elements in this way is called the <code>normal flow</code> of a document, but CSS offers the position property to override it.<br><br>When the position of an element is set to <code>relative</code>, it allows you to specify how CSS should move it <i>relative</i> to its current position in the normal flow of the page. It pairs with the CSS offset properties of <code>left</code> or <code>right</code>, and <code>top</code> or <code>bottom</code>. These say how many pixels, percentages, or ems to move the item <i>away</i> from where it is normally positioned. The following example moves the paragraph 10 pixels away from the bottom:<br><br><blockquote>p {<br>&nbsp;&nbsp;position: relative;<br>&nbsp;&nbsp;bottom: 10px;<br>}</blockquote><br><br>Changing an element\'s position to relative does not remove it from the normal flow - other elements around it still behave as if that item were in its default position.<br><br><strong>Note</strong><br>Positioning gives you a lot of flexibility and power over the visual layout of a page. It\'s good to remember that no matter the position of elements, the underlying HTML markup should be organized and make sense when read from top to bottom. This is how users with visual impairments (who rely on assistive devices like screen readers) access your content.<br><br> <hr>Change the <code>position</code> of the <code>h2</code> to <code>relative</code>, and use a CSS offset to move it 15 pixels away from the <code>top</code> of where it sits in the normal flow. Notice there is no impact on the positions of the surrounding h1 and p elements.<br><br>',' <style>   h2 {             } </style> <body>   <h1>On Being Well-Positioned</h1>   <h2>Move me!</h2>   <p>I still think the h2 is where it normally sits.</p> </body>',3),(98,'587d781e367417b2b2512aca','Move a Relatively Positioned Element with CSS Offsets','The CSS offsets of <code>top</code> or <code>bottom</code>, and <code>left</code> or <code>right</code> tell the browser how far to offset an item relative to where it would sit in the normal flow of the document. You\'re offsetting an element away from a given spot, which moves the element away from the referenced side (effectively, the opposite direction). As you saw in the last challenge, using the top offset moved the <code>h2</code> downwards. Likewise, using a left offset moves an item to the right.<br><br><img src=\'https://i.imgur.com/eWWi3gZ.gif\' alt=\'\' /><br><br> <hr>Use CSS offsets to move the <code>h2</code> 15 pixels to the right and 10 pixels up.<br><br>',' <head> <style>   h2 {     position: relative;             } </style> </head> <body>   <h1>On Being Well-Positioned</h1>   <h2>Move me!</h2>   <p>I still think the h2 is where it normally sits.</p> </body>',3),(99,'587d781e367417b2b2512acb','Lock an Element to its Parent with Absolute Positioning','The next option for the CSS <code>position</code> property is <code>absolute</code>, which locks the element in place relative to its parent container. Unlike the <code>relative</code> position, this removes the element from the normal flow of the document, so surrounding items ignore it. The CSS offset properties (top or bottom and left or right) are used to adjust the position.<br><br>One nuance with absolute positioning is that it will be locked relative to its closest <em>positioned</em> ancestor. If you forget to add a position rule to the parent item, (this is typically done using <code>position: relative;</code>), the browser will keep looking up the chain and ultimately default to the body tag.<br><br> <hr>Lock the <code>#searchbar</code> element to the top-right of its <code>section</code> parent by declaring its <code>position</code> as <code>absolute</code>. Give it <code>top</code> and <code>right</code> offsets of 50 pixels each.<br><br>',' <style>   #searchbar {                  }   section {     position: relative;   } </style> <body>   <h1>Welcome!</h1>   <section>     <form id=\"searchbar\">       <label for=\"search\">Search:</label>       <input type=\"search\" id=\"search\" name=\"search\">       <input type=\"submit\" name=\"submit\" value=\"Go!\">     </form>   </section> </body>',3),(100,'587d781e367417b2b2512acc','Lock an Element to the Browser Window with Fixed Positioning','The next layout scheme that CSS offers is the <code>fixed</code> position, which is a type of absolute positioning that locks an element relative to the browser window. Similar to absolute positioning, it\'s used with the CSS offset properties and also removes the element from the normal flow of the document. Other items no longer \"realize\" where it is positioned, which may require some layout adjustments elsewhere.<br><br>One key difference from the <code>absolute</code> position is that the element won\'t move when the user scrolls.<br><br> <hr>The navigation bar in the code is labeled with an id of <code>navbar</code>. Change its <code>position</code> to <code>fixed</code>, and offset it 0 pixels from the <code>top</code> and 0 pixels from the <code>left</code>. Notice the (lack of) impact to the <code>h1</code> position, it hasn\'t been pushed down to accommodate the navigation bar and would need to be adjusted separately.<br><br>',' <style>   #navbar {                    width: 100%;     background-color: #767676;   }   nav ul {     margin: 0px;     padding: 5px 0px 5px 30px;   }   nav li {     display: inline;     margin-right: 20px;   }   a {     text-decoration: none;   } </style> <body>   <header>     <h1>Welcome!</h1>     <nav id=\"navbar\">       <ul>         <li><a href=\"\">Home</a></li>         <li><a href=\"\">Contact</a></li>       </ul>     </nav>   </header>   <p>I shift up when the #navbar is fixed to the browser window.</p> </body>',3),(101,'587d78a3367417b2b2512ace','Push Elements Left or Right with the float Property','The next positioning tool does not actually use <code>position</code>, but sets the <code>float</code> property of an element. Floating elements are removed from the normal flow of a document and pushed to either the <code>left</code> or <code>right</code> of their containing parent element. It\'s commonly used with the <code>width</code> property to specify how much horizontal space the floated element requires.<br><br> <hr>The given markup would work well as a two-column layout, with the <code>section</code> and <code>aside</code> elements next to each other. Give the <code>#left</code> item a <code>float</code> of <code>left</code> and the <code>#right</code> item a <code>float</code> of <code>right</code>.<br><br>',' <head>   <style>   #left {          width: 50%;   }   #right {          width: 40%;   }   aside, section {     padding: 2px;     background-color: #ccc;   }   </style> </head> <body>   <header>     <h1>Welcome!</h1>   </header>   <section id=\"left\">     <h2>Content</h2>     <p>Good stuff</p>   </section>   <aside id=\"right\">     <h2>Sidebar</h2>     <p>Links</p>   </aside> </body>',3),(102,'587d78a3367417b2b2512acf','Change the Position of Overlapping Elements with the z-index Property','When elements are positioned to overlap, the element coming later in the HTML markup will, by default, appear on the top of the other elements. However, the <code>z-index</code> property can specify the order of how elements are stacked on top of one another. It must be an integer (i.e. a whole number and not a decimal), and higher values for the <code>z-index</code> property of an element move it higher in the stack than those with lower values.<br><br> <hr>Add a <code>z-index</code> property to the element with the class name of <code>first</code> (the red rectangle) and set it to a value of 2 so it covers the other element (blue rectangle).<br><br>',' <style>   div {     width: 60%;     height: 200px;     margin-top: 20px;   }      .first {     background-color: red;     position: absolute;        }   .second {     background-color: blue;     position: absolute;     left: 40px;     top: 50px;     z-index: 1;   } </style>  <div class=\"first\"></div> <div class=\"second\"></div>',3),(103,'587d78a3367417b2b2512ad0','Center an Element Horizontally Using the margin Property','Another positioning technique is to center a block element horizontally. One way to do this is to set its <code>margin</code> to a value of auto.<br><br>This method works for images, too. Images are inline elements by default, but can be changed to block elements when you set the <code>display</code> property to block.<br><br> <hr>Center the <code>div</code> on the page by adding a <code>margin</code> property with a value of auto.<br><br>',' <style>   div {     background-color: blue;     height: 100px;     width: 100px;        } </style> <div></div>',3),(104,'587d78a3367417b2b2512ad1','Learn about Complementary Colors','Color theory and its impact on design is a deep topic and only the basics are covered in the following challenges. On a website, color can draw attention to content, evoke emotions, or create visual harmony. Using different combinations of colors can really change the look of a website, and a lot of thought can go into picking a color palette that works with your content.<br><br>The color wheel is a useful tool to visualize how colors relate to each other - it\'s a circle where similar hues are neighbors and different hues are farther apart. When two colors are opposite each other on the wheel, they are called complementary colors. They have the characteristic that if they are combined, they \"cancel\" each other out and create a gray color. However, when placed side-by-side, these colors appear more vibrant and produce a strong visual contrast.<br><br>Some examples of complementary colors with their hex codes are:<br><br><blockquote>red (#FF0000) and cyan (#00FFFF)<br>green (#00FF00) and magenta (#FF00FF)<br>blue (#0000FF) and yellow (#FFFF00)</blockquote><br><br>There are many color picking tools available online that have an option to find the complement of a color.<br><br><strong>Note</strong><br>For all color challenges: Using color can be a powerful way to add visual interest to a page. However, color alone should not be used as the only way to convey important information because users with visual impairments may not understand that content. This issue will be covered in more detail in the Applied Accessibility challenges.<br><br> <hr>Change the <code>background-color</code> property of the <code>blue</code> and <code>yellow</code> classes to their respective colors. Notice how the colors look different next to each other than they do compared against the white background.<br><br>',' <style>   body {     background-color: #FFFFFF;   }   .blue {     background-color: #000000;   }   .yellow {     background-color: #000000;   }   div {     display: inline-block;     height: 100px;     width: 100px;   } </style> <div class=\"blue\"></div> <div class=\"yellow\"></div>',3),(105,'587d78a4367417b2b2512ad2','Learn about Tertiary Colors','Computer monitors and device screens create different colors by combining amounts of red, green, and blue light. This is known as the RGB additive color model in modern color theory. Red (R), green (G), and blue (B) are called primary colors. Mixing two primary colors creates the secondary colors cyan (G + B), magenta (R + B) and yellow (R + G). You saw these colors in the Complementary Colors challenge. These secondary colors happen to be the complement to the primary color not used in their creation, and are opposite to that primary color on the color wheel. For example, magenta is made with red and blue, and is the complement to green.<br><br>Tertiary colors are the result of combining a primary color with one of its secondary color neighbors. For example, red (primary) and yellow (secondary) make orange. This adds six more colors to a simple color wheel for a total of twelve.<br><br>There are various methods of selecting different colors that result in a harmonious combination in design. One example that can use tertiary colors is called the split-complementary color scheme. This scheme starts with a base color, then pairs it with the two colors that are adjacent to its complement. The three colors provide strong visual contrast in a design, but are more subtle than using two complementary colors.<br><br>Here are three colors created using the split-complement scheme:<br><br><table class=\"table table-striped\"><thead><tr><th>Color</th><th>Hex Code</th></tr><thead><tbody><tr><td>orange</td><td>#FF7D00</td></tr><tr><td>cyan</td><td>#00FFFF</td></tr><tr><td>raspberry</td><td>#FF007D</td></tr></tbody></table><br><br> <hr>Change the <code>background-color</code> property of the <code>orange</code>, <code>cyan</code>, and <code>raspberry</code> classes to their respective colors. Make sure to use the hex codes as orange and raspberry are not browser-recognized color names.<br><br>',' <style>   body {     background-color: #FFFFFF;   }      .orange {     background-color: #000000;   }      .cyan {     background-color: #000000;   }      .raspberry {     background-color: #000000;   }      div {     height: 100px;     width: 100px;     margin-bottom: 5px;   } </style>    <div class=\"orange\"></div> <div class=\"cyan\"></div> <div class=\"raspberry\"></div>',3),(106,'587d78a4367417b2b2512ad3','Adjust the Color of Various Elements to Complementary Colors','The Complementary Colors challenge showed that opposite colors on the color wheel can make each other appear more vibrant when placed side-by-side. However, the strong visual contrast can be jarring if it\'s overused on a website, and can sometimes make text harder to read if it\'s placed on a complementary-colored background. In practice, one of the colors is usually dominant and the complement is used to bring visual attention to certain content on the page.<br><br> <hr>This page will use a shade of teal (<code>#09A7A1</code>) as the dominant color, and its orange (<code>#FF790E</code>) complement to visually highlight the sign-up buttons. Change the <code>background-color</code> of both the <code>header</code> and <code>footer</code> from black to the teal color. Then change the <code>h2</code> text <code>color</code> to teal as well. Finally, change the <code>background-color</code> of the <code>button</code> to the orange color.<br><br>',' <style>   body {     background-color: white;   }   header {     background-color: black;     color: white;     padding: 0.25em;   }   h2 {     color: black;   }     button {     background-color: white;   }   footer {     background-color: black;     color: white;     padding: 0.5em;   } </style> <header>   <h1>Cooking with FCC!</h1> </header> <main>   <article>     <h2>Machine Learning in the Kitchen</h2>     <p>Join this two day workshop that walks through how to implement cutting-edge snack-getting algorithms with a command line interface. Coding usually involves writing exact instructions, but sometimes you need your computer to execute flexible commands, like <code>fetch Pringles</code>.</p>     <button>Sign Up</button>   </article>   <article>     <h2>Bisection Vegetable Chopping</h2>     <p>This week-long retreat will level-up your coding ninja skills to actual ninja skills. No longer is the humble bisection search limited to sorted arrays or coding interview questions, applying its concepts in the kitchen will have you chopping carrots in O(log n) time before you know it.</p>     <button>Sign Up</button>   </article> </main> <br> <footer>&copy;2016 FCC Kitchen</footer>',3),(107,'587d78a4367417b2b2512ad4','Adjust the Hue of a Color','Colors have several characteristics including hue, saturation, and lightness. CSS3 introduced the <code>hsl()</code> property as an alternative way to pick a color by directly stating these characteristics.<br><br><b>Hue</b> is what people generally think of as \'color\'. If you picture a spectrum of colors starting with red on the left, moving through green in the middle, and blue on right, the hue is where a color fits along this line. In <code>hsl()</code>, hue uses a color wheel concept instead of the spectrum, where the angle of the color on the circle is given as a value between 0 and 360.<br><br><b>Saturation</b> is the amount of gray in a color. A fully saturated color has no gray in it, and a minimally saturated color is almost completely gray. This is given as a percentage with 100% being fully saturated.<br><br><b>Lightness</b> is the amount of white or black in a color. A percentage is given ranging from 0% (black) to 100% (white), where 50% is the normal color.<br><br>Here are a few examples of using <code>hsl()</code> with fully-saturated, normal lightness colors:<br><br><table class=\"table table-striped\"><thead><tr><th>Color</th><th>HSL</th></tr></thead><tbody><tr><td>red</td><td>hsl(0, 100%, 50%)</td></tr><tr><td>yellow</td><td>hsl(60, 100%, 50%)</td></tr><tr><td>green</td><td>hsl(120, 100%, 50%)</td></tr><tr><td>cyan</td><td>hsl(180, 100%, 50%)</td></tr><tr><td>blue</td><td>hsl(240, 100%, 50%)</td></tr><tr><td>magenta</td><td>hsl(300, 100%, 50%)</td></tr></tbody></table><br><br> <hr>Change the <code>background-color</code> of each <code>div</code> element based on the class names (<code>green</code>, <code>cyan</code>, or <code>blue</code>) using <code>hsl()</code>. All three should have full saturation and normal lightness.<br><br>',' <style>   body {     background-color: #FFFFFF;   }      .green {     background-color: #000000;   }      .cyan {     background-color: #000000;   }      .blue {     background-color: #000000;   }      div {     display: inline-block;     height: 100px;     width: 100px;   } </style>    <div class=\"green\"></div> <div class=\"cyan\"></div> <div class=\"blue\"></div>',3),(108,'587d78a4367417b2b2512ad5','Adjust the Tone of a Color','The <code>hsl()</code> option in CSS also makes it easy to adjust the tone of a color. Mixing white with a pure hue creates a tint of that color, and adding black will make a shade. Alternatively, a tone is produced by adding gray or by both tinting and shading. Recall that the \'s\' and \'l\' of <code>hsl()</code> stand for saturation and lightness, respectively. The saturation percent changes the amount of gray and the lightness percent determines how much white or black is in the color. This is useful when you have a base hue you like, but need different variations of it.<br><br> <hr>The navigation bar on this site currently inherits its <code>background-color</code> from the <code>header</code> element. Starting with that color as a base, add a <code>background-color</code> to the <code>nav</code> element so it uses the same cyan hue, but has 80% saturation and 25% lightness values to change its tone and shade.<br><br>',' <style>   header {     background-color: hsl(180, 90%, 35%);     color: #FFFFFF;   }      nav {      }      h1 {     text-indent: 10px;     padding-top: 10px;   }      nav ul {     margin: 0px;     padding: 5px 0px 5px 30px;   }      nav li {     display: inline;     margin-right: 20px;   }      a {     text-decoration: none;     color: inherit;   } </style>    <header>   <h1>Cooking with FCC!</h1>   <nav>     <ul>       <li><a href=\"\">Home</a></li>       <li><a href=\"\">Classes</a></li>       <li><a href=\"\">Contact</a></li>     </ul>   </nav> </header>',3),(109,'587d78a5367417b2b2512ad6','Create a Gradual CSS Linear Gradient','Applying a color on HTML elements is not limited to one flat hue. CSS provides the ability to use color transitions, otherwise known as gradients, on elements. This is accessed through the <code>background</code> property\'s <code>linear-gradient()</code> function. Here is the general syntax:<br><br><code>background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);</code><br><br>The first argument specifies the direction from which color transition starts - it can be stated as a degree, where 90deg makes a vertical gradient and 45deg is angled like a backslash. The following arguments specify the order of colors used in the gradient.<br><br>Example:<br><br><code>background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));</code><br><br> <hr>Use a <code>linear-gradient()</code> for the <code>div</code> element\'s <code>background</code>, and set it from a direction of 35 degrees to change the color from <code>#CCFFFF</code> to <code>#FFCCCC</code>.<br><br><strong>Note</strong><br>While there are other ways to specify a color value, like <code>rgb()</code> or <code>hsl()</code>, use hex values for this challenge.<br><br>',' <style>    div{      border-radius: 20px;     width: 70%;     height: 400px;     margin: 50px auto;        }  </style>  <div></div>',3),(110,'587d78a5367417b2b2512ad7','Use a CSS Linear Gradient to Create a Striped Element','The <code>repeating-linear-gradient()</code> function is very similar to <code>linear-gradient()</code> with the major difference that it repeats the specified gradient pattern. <code>repeating-linear-gradient()</code> accepts a variety of values, but for simplicity, you\'ll work with an angle value and color stop values in this challenge.<br><br>The angle value is the direction of the gradient. Color stops are like width values that mark where a transition takes place, and are given with a percentage or a number of pixels.<br><br>In the example demonstrated in the code editor, the gradient starts with the color <code>yellow</code> at 0 pixels which blends into the second color <code>blue</code> at 40 pixels away from the start. Since the next color stop is also at 40 pixels, the gradient immediately changes to the third color <code>green</code>, which itself blends into the fourth color value <code>red</code> as that is 80 pixels away from the beginning of the gradient.<br><br>For this example, it helps to think about the color stops as pairs where every two colors blend together.<br><br><code>0px [yellow -- blend -- blue] 40px [green -- blend -- red] 80px</code><br><br>If every two color stop values are the same color, the blending isn\'t noticeable because it\'s between the same color, followed by a hard transition to the next color, so you end up with stripes.<br><br> <hr>Make stripes by changing the <code>repeating-linear-gradient()</code> to use a gradient angle of <code>45deg</code>, then set the first two color stops to <code>yellow</code>, and finally the second two color stops to <code>black</code>.<br><br>',' <style>    div{      border-radius: 20px;     width: 70%;     height: 400px;     margin:  50 auto;     background: repeating-linear-gradient(       90deg,       yellow 0px,       blue 40px,       green 40px,       red 80px     );   }  </style>  <div></div>',3),(111,'587d78a5367417b2b2512ad8','Create Texture by Adding a Subtle Pattern as a Background Image','One way to add texture and interest to a background and have it stand out more is to add a subtle pattern. The key is balance, as you don\'t want the background to stand out too much, and take away from the foreground. The <code>background</code> property supports the <code>url()</code> function in order to link to an image of the chosen texture or pattern. The link address is wrapped in quotes inside the parentheses.<br><br> <hr>Using the url of <code>https://i.imgur.com/MJAkxbh.png</code>, set the <code>background</code> of the whole page with the <code>body</code> selector.<br><br>',' <style>   body {        } </style>',3),(112,'587d78a5367417b2b2512ad9','Use the CSS Transform scale Property to Change the Size of an Element','To change the scale of an element, CSS has the <code>transform</code> property, along with its <code>scale()</code> function. The following code example doubles the size of all the paragraph elements on the page:<br><br><blockquote>p {<br>&nbsp;&nbsp;transform:scale(2);<br>}</blockquote><br><br> <hr>Increase the size of the element with the id of <code>ball2</code> to 1.5 times its original size.<br><br>',' <style>   .ball {      width: 40px;     height: 40px;     margin: 50 auto;     position: fixed;     background: linear-gradient(       35deg,       #ccffff,       #ffcccc     );     border-radius: 50%;   }   #ball1 {     left: 20%;   }   #ball2 {     left: 65%;        }   </style>  <div class=\"ball\" id= \"ball1\"></div> <div class=\"ball\" id= \"ball2\"></div>',3),(113,'587d78a5367417b2b2512ada','Use the CSS Transform scale Property to Scale an Element on Hover','The <code>transform</code> property has a variety of functions that lets you scale, move, rotate, skew, etc., your elements. When used with pseudo-classes such as <code>:hover</code> that specify a certain state of an element, the <code>transform</code> property can easily add interactivity to your elements.<br><br>Here\'s an example to scale the paragraph elements to 2.1 times their original size when a user hovers over them:<br><br><blockquote>p:hover {<br>&nbsp;&nbsp;transform: scale(2.1);<br>}</blockquote><br><br> <hr>Add a CSS rule for the <code>hover</code> state of the <code>div</code> and use the <code>transform</code> property to scale the <code>div</code> element to 1.1 times its original size when a user hovers over it.<br><br>',' <style>   div {      width: 70%;     height: 100px;     margin:  50px auto;     background: linear-gradient(       53deg,       #ccfffc,       #ffcccf     );   }          </style>  <div></div>',3),(114,'587d78a6367417b2b2512adb','Use the CSS Transform Property skewX to Skew an Element Along the X-Axis','The next function of the <code>transform</code> property is <code>skewX()</code>, which skews the selected element along its X (horizontal) axis by a given degree.<br><br>The following code skews the paragraph element by -32 degrees along the X-axis.<br><br><blockquote>p {<br>&nbsp;&nbsp;transform: skewX(-32deg);<br>}</blockquote><br><br> <hr>Skew the element with the id of <code>bottom</code> by 24 degrees along the X-axis by using the <code>transform</code> property.<br><br>',' <style>   div {      width: 70%;     height: 100px;     margin:  50px auto;   }   #top {     background-color: red;   }   #bottom {     background-color: blue;        } </style>  <div id=\"top\"></div> <div id=\"bottom\"></div>',3),(115,'587d78a6367417b2b2512adc','Use the CSS Transform Property skewY to Skew an Element Along the Y-Axis','Given that the <code>skewX()</code> function skews the selected element along the X-axis by a given degree, it is no surprise that the <code>skewY()</code> property skews an element along the Y (vertical) axis.<br><br> <hr>Skew the element with the id of <code>top</code> -10 degrees along the Y-axis by using the <code>transform</code> property.<br><br>',' <style>   div {      width: 70%;     height: 100px;     margin: 50px auto;   }   #top {     background-color: red;        }   #bottom {     background-color: blue;     transform: skewX(24deg);   } </style>  <div id=\"top\"></div> <div id=\"bottom\"></div>',3),(116,'587d78a6367417b2b2512add','Create a Graphic Using CSS','By manipulating different selectors and properties, you can make interesting shapes. One of the easier ones to try is a crescent moon shape. For this challenge you need to work with the <code>box-shadow</code> property that sets the shadow of an element, along with the <code>border-radius</code> property that controls the roundness of the element\'s corners.<br><br>You will create a round, transparent object with a crisp shadow that is slightly offset to the side - the shadow is actually going to be the moon shape you see.<br><br>In order to create a round object, the <code>border-radius</code> property should be set to a value of 50%.<br><br>You may recall from an earlier challenge that the <code>box-shadow</code> property takes values for <code>offset-x</code>, <code>offset-y</code>, <code>blur-radius</code>, <code>spread-radius</code> and a color value in that order. The <code>blur-radius</code> and <code>spread-radius</code> values are optional.<br><br> <hr>Manipulate the square element in the editor to create the moon shape. First, change the <code>background-color</code> to transparent, then set the <code>border-radius</code> property to 50% to make the circular shape. Finally, change the <code>box-shadow</code> property to set the <code>offset-x</code> to 25px, the <code>offset-y</code> to 10px, <code>blur-radius</code> to 0, <code>spread-radius</code> to 0, and color to blue.<br><br>',' <style> .center {   position: absolute;   margin: auto;   top: 0;   right: 0;   bottom: 0;   left: 0;   width: 100px;   height: 100px;      background-color: blue;   border-radius: 0px;   box-shadow: 25px 10px 10px 10px green;  }  </style> <div class=\"center\"></div>',3),(117,'587d78a6367417b2b2512ade','Create a More Complex Shape Using CSS and HTML','One of the most popular shapes in the world is the heart shape, and in this challenge you\'ll create one using pure CSS. But first, you need to understand the <code>::before</code> and <code>::after</code> pseudo-elements. These pseudo-elements are used to add something before or after a selected element. In the following example, a <code>::before</code> pseudo-element is used to add a rectangle to an element with the class <code>heart</code>:<br><br><blockquote>.heart::before {<br>&nbsp;&nbsp;content: \"\";<br>&nbsp;&nbsp;background-color: yellow;<br>&nbsp;&nbsp;border-radius: 25%;<br>&nbsp;&nbsp;position: absolute;<br>&nbsp;&nbsp;height: 50px;<br>&nbsp;&nbsp;width: 70px;<br>&nbsp;&nbsp;top: -50px;<br>&nbsp;&nbsp;left: 5px;<br>}</blockquote><br><br>For the <code>::before</code> and <code>::after</code> pseudo-elements to function properly, they must have a defined <code>content</code> property. This property is usually used to add things like a photo or text to the selected element. When the <code>::before</code> and <code>::after</code> pseudo-elements are used to make shapes, the <code>content</code> property is still required, but it\'s set to an empty string.<br><br>In the above example, the element with the class of <code>heart</code> has a <code>::before</code> pseudo-element that produces a yellow rectangle with <code>height</code> and <code>width</code> of 50px and 70px, respectively. This rectangle has round corners due to its 25% border radius and is positioned absolutely at 5px from the <code>left</code> and 50px above the <code>top</code> of the element.<br><br> <hr>Transform the element on the screen to a heart. In the <code>heart::after</code> selector, change the <code>background-color</code> to pink and the <code>border-radius</code> to 50%.<br><br>Next, target the element with the class <code>heart</code> (just <code>heart</code>) and fill in the <code>transform</code> property. Use the <code>rotate()</code> function with -45 degrees. (<code>rotate()</code> works the same way that <code>skewX()</code> and <code>skewY()</code> do).<br><br>Finally, in the <code>heart::before</code> selector, set its <code>content</code> property to an empty string.<br><br>',' <style> .heart {   position: absolute;   margin: auto;   top: 0;   right: 0;   bottom: 0;   left: 0;   background-color: pink;   height: 50px;   width: 50px;   transform: ; } .heart::after {   background-color: blue;   content: \"\";   border-radius: 25%;   position: absolute;   width: 50px;   height: 50px;   top: 0px;   left: 25px; } .heart::before {   content: ;   background-color: pink;   border-radius: 50%;   position: absolute;   width: 50px;   height: 50px;   top: -25px;   left: 0px; } </style> <div class = \"heart\"></div>',3),(118,'587d78a7367417b2b2512adf','Learn How the CSS @keyframes and animation Properties Work','To animate an element, you need to know about the animation properties and the <code>@keyframes</code> rule. The animation properties control how the animation should behave and the <code>@keyframes</code> rule controls what happens during that animation. There are eight animation properties in total. This challenge will keep it simple and cover the two most important ones first:<br><br><code>animation-name</code> sets the name of the animation, which is later used by <code>@keyframes</code> to tell CSS which rules go with which animations.<br><br><code>animation-duration</code> sets the length of time for the animation.<br><br><code>@keyframes</code> is how to specify exactly what happens within the animation over the duration. This is done by giving CSS properties for specific \"frames\" during the animation, with percentages ranging from 0% to 100%. If you compare this to a movie, the CSS properties for 0% is how the element displays in the opening scene. The CSS properties for 100% is how the element appears at the end, right before the credits roll. Then CSS applies the magic to transition the element over the given duration to act out the scene. Here\'s an example to illustrate the usage of <code>@keyframes</code> and the animation properties:<br><br><blockquote>#anim {<br>&nbsp;&nbsp;animation-name: colorful;<br>&nbsp;&nbsp;animation-duration: 3s;<br>}<br>@keyframes colorful {<br>&nbsp;&nbsp;0% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: blue;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;100% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: yellow;<br>&nbsp;&nbsp;}<br>}</blockquote><br><br>For the element with the <code>anim</code> id, the code snippet above sets the <code>animation-name</code> to <code>colorful</code> and sets the <code>animation-duration</code> to 3 seconds. Then the <code>@keyframes</code> rule links to the animation properties with the name <code>colorful</code>. It sets the color to blue at the beginning of the animation (0%) which will transition to yellow by the end of the animation (100%). You aren\'t limited to only beginning-end transitions, you can set properties for the element for any percentage between 0% and 100%.<br><br> <hr>Create an animation for the element with the id <code>rect</code>, by setting the <code>animation-name</code> to rainbow and the <code>animation-duration</code> to 4 seconds. Next, declare a <code>@keyframes</code> rule, and set the <code>background-color</code> at the beginning of the animation (<code>0%</code>) to blue, the middle of the animation (<code>50%</code>) to green, and the end of the animation (<code>100%</code>) to yellow.<br><br>',' <style>   div {     height: 40px;     width: 70%;     background: black;     margin: 50px auto;     border-radius: 5px;   }    #rect {             }             </style> <div id=\"rect\"></div>',3),(119,'587d78a7367417b2b2512ae0','Use CSS Animation to Change the Hover State of a Button','You can use CSS <code>@keyframes</code> to change the color of a button in its hover state.<br><br>Here\'s an example of changing the width of an image on hover:<br><br><blockquote>&lt;style&gt;<br>&nbsp;&nbsp;img:hover {<br>&nbsp;&nbsp;&nbsp;&nbsp;animation-name: width;<br>&nbsp;&nbsp;&nbsp;&nbsp;animation-duration: 500ms;<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;@keyframes width {<br>&nbsp;&nbsp;&nbsp;&nbsp;100% {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 40px;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br>&lt;img src=&quot;https://bit.ly/smallgooglelogo&quot; alt=&quot;Google\'s Logo&quot; /&gt;</blockquote><br><br> <hr>Note that <code>ms</code> stands for milliseconds, where 1000ms is equal to 1s.<br><br>Use CSS <code>@keyframes</code> to change the <code>background-color</code> of the <code>button</code> element so it becomes <code>#4791d0</code> when a user hovers over it. The <code>@keyframes</code> rule should only have an entry for <code>100%</code>.<br><br>',' <style>   button {     border-radius: 5px;     color: white;     background-color: #0F5897;     padding: 5px 10px 8px 10px;   }      button:hover {     animation-name: background-color;     animation-duration: 500ms;   }       </style>    <button>Register</button>',3),(120,'58a7a6ebf9a6318348e2d5aa','Modify Fill Mode of an Animation','That\'s great, but it doesn\'t work right yet. Notice how the animation resets after <code>500ms</code> has passed, causing the button to revert back to the original color. You want the button to stay highlighted.<br><br>This can be done by setting the <code>animation-fill-mode</code> property to <code>forwards</code>. The <code>animation-fill-mode</code> specifies the style applied to an element when the animation has finished. You can set it like so:<br><br><code>animation-fill-mode: forwards;</code><br><br> <hr>Set the <code>animation-fill-mode</code> property of <code>button:hover</code> to <code>forwards</code> so the button stays highlighted when a user hovers over it.<br><br>',' <style>   button {     border-radius: 5px;     color: white;     background-color: #0F5897;     padding: 5px 10px 8px 10px;   }   button:hover {     animation-name: background-color;     animation-duration: 500ms;     /* add your code below this line */          /* add your code above this line */   }   @keyframes background-color {     100% {       background-color: #4791d0;     }   } </style> <button>Register</button>',3),(121,'587d78a7367417b2b2512ae1','Create Movement Using CSS Animation','When elements have a specified <code>position</code>, such as <code>fixed</code> or <code>relative</code>, the CSS offset properties <code>right</code>, <code>left</code>, <code>top</code>, and <code>bottom</code> can be used in animation rules to create movement.<br><br>As shown in the example below, you can push the item downwards then upwards by setting the <code>top</code> property of the <code>50%</code> keyframe to 50px, but having it set to 0px for the first (<code>0%</code>) and the last (<code>100%</code>) keyframe.<br><br><blockquote>@keyframes rainbow {<br>&nbsp;&nbsp;0% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: blue;<br>&nbsp;&nbsp;&nbsp;&nbsp;top: 0px;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;50% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: green;<br>&nbsp;&nbsp;&nbsp;&nbsp;top: 50px;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;100% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: yellow;<br>&nbsp;&nbsp;&nbsp;&nbsp;top: 0px;<br>&nbsp;&nbsp;}<br>}</blockquote><br><br> <hr>Add a horizontal motion to the <code>div</code> animation. Using the <code>left</code> offset property, add to the <code>@keyframes</code> rule so rainbow starts at 0 pixels at <code>0%</code>, moves to 25 pixels at <code>50%</code>, and ends at -25 pixels at <code>100%</code>. Don\'t replace the <code>top</code> property in the editor - the animation should have both vertical and horizontal motion.<br><br>',' <style>   div {     height: 40px;     width: 70%;     background: black;     margin: 50px auto;     border-radius: 5px;     position: relative;   }  #rect {   animation-name: rainbow;   animation-duration: 4s; }  @keyframes rainbow {   0% {     background-color: blue;     top: 0px;        }   50% {     background-color: green;     top: 50px;        }   100% {     background-color: yellow;     top: 0px;        } } </style>  <div id=\"rect\"></div>',3),(122,'587d78a7367417b2b2512ae2','Create Visual Direction by Fading an Element from Left to Right','For this challenge, you\'ll change the <code>opacity</code> of an animated element so it gradually fades as it reaches the right side of the screen.<br><br>In the displayed animation, the round element with the gradient background moves to the right by the 50% mark of the animation per the <code>@keyframes</code> rule.<br><br> <hr>Target the element with the id of <code>ball</code> and add the <code>opacity</code> property set to 0.1 at <code>50%</code>, so the element fades as it moves to the right.<br><br>',' <style>    #ball {     width: 70px;     height: 70px;     margin: 50px auto;     position: fixed;     left: 20%;     border-radius: 50%;     background: linear-gradient(       35deg,       #ccffff,       #ffcccc     );     animation-name: fade;     animation-duration: 3s;   }    @keyframes fade {     50% {       left: 60%;            }   }  </style>  <div id=\"ball\"></div>',3),(123,'587d78a8367417b2b2512ae3','Animate Elements Continually Using an Infinite Animation Count','The previous challenges covered how to use some of the animation properties and the <code>@keyframes</code> rule. Another animation property is the <code>animation-iteration-count</code>, which allows you to control how many times you would like to loop through the animation. Here\'s an example:<br><br><code>animation-iteration-count: 3;</code><br><br>In this case the animation will stop after running 3 times, but it\'s possible to make the animation run continuously by setting that value to infinite.<br><br> <hr>To keep the ball bouncing on the right on a continuous loop, change the <code>animation-iteration-count</code> property to infinite.<br><br>',' <style>    #ball {     width: 100px;     height: 100px;     margin: 50px auto;     position: relative;     border-radius: 50%;     background: linear-gradient(       35deg,       #ccffff,       #ffcccc     );     animation-name: bounce;     animation-duration: 1s;     animation-iteration-count: 3;   }    @keyframes bounce{     0% {       top: 0px;     }     50% {       top: 249px;       width: 130px;       height: 70px;     }     100% {       top: 0px;     }   } </style> <div id=\"ball\"></div>',3),(124,'587d78a8367417b2b2512ae4','Make a CSS Heartbeat using an Infinite Animation Count','Here\'s one more continuous animation example with the <code>animation-iteration-count</code> property that uses the heart you designed in a previous challenge.<br><br>The one-second long heartbeat animation consists of two animated pieces. The <code>heart</code> elements (including the <code>:before</code> and <code>:after</code> pieces) are animated to change size using the <code>transform</code> property, and the background <code>div</code> is animated to change its color using the <code>background</code> property.<br><br> <hr>Keep the heart beating by adding the <code>animation-iteration-count</code> property for both the <code>back</code> class and the <code>heart</code> class and setting the value to infinite. The <code>heart:before</code> and <code>heart:after</code> selectors do not need any animation properties.<br><br>',' <style>   .back {     position: fixed;     padding: 0;     margin: 0;     top: 0;     left: 0;     width: 100%;     height: 100%;     background: white;     animation-name: backdiv;     animation-duration: 1s;         }    .heart {     position: absolute;     margin: auto;     top: 0;     right: 0;     bottom: 0;     left: 0;     background-color: pink;     height: 50px;     width: 50px;     transform: rotate(-45deg);     animation-name: beat;     animation-duration: 1s;        }   .heart:after {     background-color: pink;     content: \"\";     border-radius: 50%;     position: absolute;     width: 50px;     height: 50px;     top: 0px;     left: 25px;   }   .heart:before {     background-color: pink;     content: \"\";     border-radius: 50%;     position: absolute;     width: 50px;     height: 50px;     top: -25px;     left: 0px;   }    @keyframes backdiv {     50% {       background: #ffe6f2;     }   }    @keyframes beat {     0% {       transform: scale(1) rotate(-45deg);     }     50% {       transform: scale(0.6) rotate(-45deg);     }   }  </style> <div class=\"back\"></div> <div class=\"heart\"></div>',3),(125,'587d78a8367417b2b2512ae5','Animate Elements at Variable Rates','There are a variety of ways to alter the animation rates of similarly animated elements. So far, this has been achieved by applying an <code>animation-iteration-count</code> property and setting <code>@keyframes</code> rules.<br><br>To illustrate, the animation on the right consists of two \"stars\" that each decrease in size and opacity at the 20% mark in the <code>@keyframes</code> rule, which creates the twinkle animation. You can change the <code>@keyframes</code> rule for one of the elements so the stars twinkle at different rates.<br><br> <hr>Alter the animation rate for the element with the class name of <code>star-1</code> by changing its <code>@keyframes</code> rule to 50%.<br><br>',' <style>   .stars {     background-color: white;     height: 30px;     width: 30px;     border-radius: 50%;     animation-iteration-count: infinite;   }    .star-1 {     margin-top: 15%;      margin-left: 60%;     animation-name: twinkle-1;     animation-duration: 1s;   }    .star-2 {     margin-top: 25%;     margin-left: 25%;     animation-name: twinkle-2;     animation-duration: 1s;   }    @keyframes twinkle-1 {     20% {       transform: scale(0.5);       opacity: 0.5;     }   }    @keyframes twinkle-2 {     20% {       transform: scale(0.5);       opacity: 0.5;     }   }    #back {     position: fixed;     padding: 0;     margin: 0;     top: 0;     left: 0;     width: 100%;     height: 100%;     background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);   } </style>  <div id=\"back\"></div> <div class=\"star-1 stars\"></div> <div class=\"star-2 stars\"></div>',3),(126,'587d78a8367417b2b2512ae6','Animate Multiple Elements at Variable Rates','In the previous challenge, you changed the animation rates for two similarly animated elements by altering their <code>@keyframes</code> rules. You can achieve the same goal by manipulating the <code>animation-duration</code> of multiple elements.<br><br>In the animation running in the code editor, there are three \"stars\" in the sky that twinkle at the same rate on a continuous loop. To make them twinkle at different rates, you can set the <code>animation-duration</code> property to different values for each element.<br><br> <hr>Set the <code>animation-duration</code> of the elements with the classes <code>star-1</code>, <code>star-2</code>, and <code>star-3</code> to 1s, 0.9s, and 1.1s, respectively.<br><br>',' <style>   .stars {     background-color: white;     height: 30px;     width: 30px;     border-radius: 50%;     animation-iteration-count: infinite;   }    .star-1 {     margin-top: 15%;      margin-left: 60%;     animation-duration: 1s;     animation-name: twinkle;   }    .star-2 {     margin-top: 25%;     margin-left: 25%;     animation-duration: 1s;     animation-name: twinkle;   }    .star-3 {     margin-top: 10%;     margin-left: 50%;     animation-duration: 1s;     animation-name: twinkle;   }    @keyframes twinkle {     20% {       transform: scale(0.5);       opacity: 0.5;     }   }    #back {     position: fixed;     padding: 0;     margin: 0;     top: 0;     left: 0;     width: 100%;     height: 100%;     background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);   } </style>  <div id=\"back\"></div> <div class=\"star-1 stars\"></div> <div class=\"star-2 stars\"></div> <div class=\"star-3 stars\"></div>',3),(127,'587d78a8367417b2b2512ae7','Change Animation Timing with Keywords','In CSS animations, the <code>animation-timing-function</code> property controls how quickly an animated element changes over the duration of the animation. If the animation is a car moving from point A to point B in a given time (your <code>animation-duration</code>), the <code>animation-timing-function</code> says how the car accelerates and decelerates over the course of the drive.<br><br>There are a number of predefined keywords available for popular options. For example, the default value is <code>ease</code>, which starts slow, speeds up in the middle, and then slows down again in the end. Other options include <code>ease-out</code>, which is quick in the beginning then slows down, <code>ease-in</code>, which is slow in the beginning, then speeds up at the end, or <code>linear</code>, which applies a constant animation speed throughout.<br><br> <hr>For the elements with id of <code>ball1</code> and <code>ball2</code>, add an <code>animation-timing-function</code> property to each, and set <code>#ball1</code> to <code>linear</code>, and <code>#ball2</code> to <code>ease-out</code>. Notice the difference between how the elements move during the animation but end together, since they share the same <code>animation-duration</code> of 2 seconds.<br><br>',' <style>    .balls {     border-radius: 50%;     background: linear-gradient(       35deg,       #ccffff,       #ffcccc     );     position: fixed;       width: 50px;     height: 50px;     margin-top: 50px;     animation-name: bounce;     animation-duration: 2s;     animation-iteration-count: infinite;   }   #ball1 {      left:27%;        }   #ball2 {      left:56%;        }  @keyframes bounce {   0% {     top: 0px;   }    100% {     top: 249px;   } }   </style>  <div class=\"balls\" id=\"ball1\"></div> <div class=\"balls\" id=\"ball2\"></div>',3),(128,'587d78a9367417b2b2512ae8','Learn How Bezier Curves Work','The last challenge introduced the <code>animation-timing-function</code> property and a few keywords that change the speed of an animation over its duration. CSS offers an option other than keywords that provides even finer control over how the animation plays out, through the use of Bezier curves.<br><br>In CSS animations, Bezier curves are used with the <code>cubic-bezier</code> function. The shape of the curve represents how the animation plays out. The curve lives on a 1 by 1 coordinate system. The X-axis of this coordinate system is the duration of the animation (think of it as a time scale), and the Y-axis is the change in the animation.<br><br>The <code>cubic-bezier</code> function consists of four main points that sit on this 1 by 1 grid: <code>p0</code>, <code>p1</code>, <code>p2</code>, and <code>p3</code>. <code>p0</code> and <code>p3</code> are set for you - they are the beginning and end points which are always located respectively at the origin (0, 0) and (1, 1). You set the x and y values for the other two points, and where you place them in the grid dictates the shape of the curve for the animation to follow. This is done in CSS by declaring the x and y values of the <code>p1</code> and <code>p2</code> \"anchor\" points in the form: <code>(x1, y1, x2, y2)</code>. Pulling it all together, here\'s an example of a Bezier curve in CSS code:<br><br><code>animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);</code><br><br>In the example above, the x and y values are equivalent for each point (x1 = 0.25 = y1 and x2 = 0.75 = y2), which if you remember from geometry class, results in a line that extends from the origin to point (1, 1). This animation is a linear change of an element during the length of an animation, and is the same as using the <code>linear</code> keyword. In other words, it changes at a constant speed.<br><br> <hr>For the element with the id of <code>ball1</code>, change the value of the <code>animation-timing-function</code> property from <code>linear</code> to its equivalent <code>cubic-bezier</code> function value. Use the point values given in the example above.<br><br>',' <style>    .balls{     border-radius: 50%;     background: linear-gradient(       35deg,       #ccffff,       #ffcccc     );     position: fixed;       width: 50px;     height: 50px;     margin-top: 50px;     animation-name: bounce;     animation-duration: 2s;     animation-iteration-count: infinite;   }   #ball1 {      left: 27%;     animation-timing-function: linear;   }   #ball2 {      left: 56%;     animation-timing-function: ease-out;   }  @keyframes bounce {   0% {     top: 0px;   }    100% {     top: 249px;   } }   </style>  <div class=\"balls\" id=\"ball1\"></div> <div class=\"balls\" id=\"ball2\"></div>',3),(129,'587d78a9367417b2b2512ae9','Use a Bezier Curve to Move a Graphic','A previous challenge discussed the <code>ease-out</code> keyword that describes an animation change that speeds up first and then slows down at the end of the animation. On the right, the difference between the <code>ease-out</code> keyword (for the blue element) and <code>linear</code> keyword (for the red element) is demonstrated. Similar animation progressions to the <code>ease-out</code> keyword can be achieved by using a custom cubic Bezier curve function.<br><br>In general, changing the <code>p1</code> and <code>p2</code> anchor points drives the creation of different Bezier curves, which controls how the animation progresses through time. Here\'s an example of a Bezier curve using values to mimic the ease-out style:<br><br><code>animation-timing-function: cubic-bezier(0, 0, 0.58, 1);</code><br><br>Remember that all <code>cubic-bezier</code> functions start with <code>p0</code> at (0, 0) and end with <code>p3</code> at (1, 1). In this example, the curve moves faster through the Y-axis (starts at 0, goes to <code>p1</code> y value of 0, then goes to <code>p2</code> y value of 1) than it moves through the X-axis (0 to start, then 0 for <code>p1</code>, up to 0.58 for <code>p2</code>). As a result, the change in the animated element progresses faster than the time of the animation for that segment. Towards the end of the curve, the relationship between the change in x and y values reverses - the y value moves from 1 to 1 (no change), and the x values move from 0.58 to 1, making the animation changes progress slower compared to the animation duration.<br><br> <hr>To see the effect of this Bezier curve in action, change the <code>animation-timing-function</code> of the element with id of <code>red</code> to a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0, 0, 0.58, 1. This will make both elements progress through the animation similarly.<br><br>',' <style>   .balls{     border-radius: 50%;     position: fixed;     width: 50px;     height: 50px;     margin-top: 50px;     animation-name: bounce;     animation-duration: 2s;     animation-iteration-count: infinite;   }   #red {     background: red;     left: 27%;     animation-timing-function: linear;   }   #blue {     background: blue;     left: 56%;     animation-timing-function: ease-out;   }   @keyframes bounce {     0% {       top: 0px;     }     100% {       top: 249px;     }   } </style> <div class=\"balls\" id= \"red\"></div> <div class=\"balls\" id= \"blue\"></div>',3),(130,'587d78a9367417b2b2512aea','Make Motion More Natural Using a Bezier Curve','This challenge animates an element to replicate the movement of a ball being juggled. Prior challenges covered the <code>linear</code> and <code>ease-out</code> cubic Bezier curves, however neither depicts the juggling movement accurately. You need to customize a Bezier curve for this.<br><br>The <code>animation-timing-function</code> automatically loops at every keyframe when the <code>animation-iteration-count</code> is set to infinite. Since there is a keyframe rule set in the middle of the animation duration (at <code>50%</code>), it results in two identical animation progressions at the upward and downward movement of the ball.<br><br>The following cubic Bezier curve simulates a juggling movement:<br><br><code>cubic-bezier(0.3, 0.4, 0.5, 1.6); </code><br><br>Notice that the value of y2 is larger than 1. Although the cubic Bezier curve is mapped on an 1 by 1 coordinate system, and it can only accept x values from 0 to 1, the y value can be set to numbers larger than one. This results in a bouncing movement that is ideal for simulating the juggling ball.<br><br> <hr>Change value of the <code>animation-timing-function</code> of the element with the id of <code>green</code> to a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0.311, 0.441, 0.444, 1.649.<br><br>',' <style>   .balls {     border-radius: 50%;     top: 249px;     position: fixed;       width: 50px;     height: 50px;     top: 60%;     animation-name: jump;     animation-duration: 2s;     animation-iteration-count: infinite;   }   #red {     background: red;     left: 25%;     animation-timing-function: linear;   }   #blue {     background: blue;     left: 50%;     animation-timing-function: ease-out;   }   #green {     background: green;     left: 75%;     animation-timing-function: cubic-bezier(0.69, 0.1, 1, 0.1);   }    @keyframes jump {     50% {       top: 10%;     }   } </style> <div class=\"balls\" id=\"red\"></div> <div class=\"balls\" id=\"blue\"></div> <div class=\"balls\" id=\"green\"></div>',3),(131,'587d774c367417b2b2512a9c','Add a Text Alternative to Images for Visually Impaired Accessibility','It\'s likely you\'ve seen an <code>alt</code> attribute on an <code>img</code> tag in other challenges. <code>Alt</code> text describes the content of the image and provides a text-alternative. This helps in case the image fails to load or can\'t be seen by a user. It\'s also used by search engines to understand what an image contains to include it in search results. Here\'s an example:<br><br><code>&lt;img src=&quot;importantLogo.jpeg&quot; alt=&quot;Company logo&quot;&gt;</code><br><br>People with visual impairments rely on screen readers to convert web content to an audio interface. They won\'t get information if it\'s only presented visually. For images, screen readers can access the <code>alt</code> attribute and read its contents to deliver key information.<br><br>Good <code>alt</code> text is short but descriptive, and meant to briefly convey the meaning of the image. You should always include an <code>alt</code> attribute on your image. Per HTML5 specification, this is now considered mandatory.<br><br> <hr>Camper Cat happens to be both a coding ninja and an actual ninja, and is building a website to share his knowledge. The profile picture he wants to use shows his skills, and should be appreciated by all site visitors. Add an <code>alt</code> attribute in the <code>img</code> tag, that explains Camper Cat is doing karate. (The image <code>src</code> doesn\'t link to an actual file, so you should see the <code>alt</code> text in the display.)<br><br>',' <img src=\"doingKarateWow.jpeg\">',3),(132,'587d774c367417b2b2512a9d','Know When Alt Text Should be Left Blank','In the last challenge, you learned that including an <code>alt</code> attribute on img tags is mandatory. However, sometimes images are grouped with a caption already describing them, or are used for decoration only. In these cases <code>alt</code> text may seem redundant or unnecessary.<br><br>In situations when an image is already explained with text content, or does not add meaning to a page, the <code>img</code> still needs an <code>alt</code> attribute, but it can be set to an empty string. Here\'s an example:<br><br><code>&lt;img src=&quot;visualDecoration.jpeg&quot; alt=&quot;&quot;&gt;</code><br><br>Background images usually fall under the \'decorative\' label as well. However, they are typically applied with CSS rules, and therefore not part of the markup screen readers process.<br><br><strong>Note</strong><br>For images with a caption, you may still want to include <code>alt</code> text, since it helps search engines catalog the content of the image.<br><br> <hr>Camper Cat has coded a skeleton page for the blog part of his website. He\'s planning to add a visual break between his two articles with a decorative image of a samurai sword. Add an <code>alt</code> attribute to the <code>img</code> tag and set it to an empty string. (Note that the image <code>src</code> doesn\'t link to an actual file - don\'t worry that there are no swords showing in the display.)<br><br>',' <h1>Deep Thoughts with Master Camper Cat</h1> <article>   <h2>Defeating your Foe: the Red Dot is Ours!</h2>   <p>To Come...</p> </article>  <img src=\"samuraiSwords.jpeg\">  <article>   <h2>Is Chuck Norris a Cat Person?</h2>   <p>To Come...</p> </article>',3),(133,'587d774d367417b2b2512a9e','Use Headings to Show Hierarchical Relationships of Content','Headings (<code>h1</code> through <code>h6</code> elements) are workhorse tags that help provide structure and labeling to your content. Screen readers can be set to read only the headings on a page so the user gets a summary. This means it is important for the heading tags in your markup to have semantic meaning and relate to each other, not be picked merely for their size values.<br><br><em>Semantic meaning</em> means that the tag you use around content indicates the type of information it contains.<br><br>If you were writing a paper with an introduction, a body, and a conclusion, it wouldn\'t make much sense to put the conclusion as a subsection of the body in your outline. It should be its own section. Similarly, the heading tags in a webpage need to go in order and indicate the hierarchical relationships of your content.<br><br>Headings with equal (or higher) rank start new implied sections, headings with lower rank start subsections of the previous one.<br><br>As an example, a page with an <code>h2</code> element followed by several subsections labeled with <code>h4</code> tags would confuse a screen reader user. With six choices, it\'s tempting to use a tag because it looks better in a browser, but you can use CSS to edit the relative sizing.<br><br>One final point, each page should always have one (and only one) <code>h1</code> element, which is the main subject of your content. This and the other headings are used in part by search engines to understand the topic of the page.<br><br> <hr>Camper Cat wants a page on his site dedicated to becoming a ninja. Help him fix the headings so his markup gives semantic meaning to the content, and shows the proper parent-child relationships of his sections. Change all the <code>h5</code> tags to the proper heading level to indicate they are subsections of the <code>h2</code> ones.<br><br>',' <h1>How to Become a Ninja</h1> <main>   <h2>Learn the Art of Moving Stealthily</h2>   <h5>How to Hide in Plain Sight</h5>   <h5>How to Climb a Wall</h5>    <h2>Learn the Art of Battle</h2>   <h5>How to Strengthen your Body</h5>   <h5>How to Fight like a Ninja</h5>    <h2>Learn the Art of Living with Honor</h2>   <h5>How to Breathe Properly</h5>   <h5>How to Simplify your Life</h5> </main>',3),(134,'587d774e367417b2b2512a9f','Jump Straight to the Content Using the main Element','HTML5 introduced a number of new elements that give developers more options while also incorporating accessibility features. These tags include <code>main</code>, <code>header</code>, <code>footer</code>, <code>nav</code>, <code>article</code>, and <code>section</code>, among others.<br><br>By default, a browser renders these elements similarly to the humble <code>div</code>. However, using them where appropriate gives additional meaning in your markup. The tag name alone can indicate the type of information it contains, which adds semantic meaning to that content. Assistive technologies can access this information to provide better page summary or navigation options to their users.<br><br>The <code>main</code> element is used to wrap (you guessed it) the main content, and there should be only one per page. It\'s meant to surround the information that\'s related to the central topic of your page. It\'s not meant to include items that repeat across pages, like navigation links or banners.<br><br>The <code>main</code> tag also has an embedded landmark feature that assistive technology can use to quickly navigate to the main content. If you\'ve ever seen a \"Jump to Main Content\" link at the top of a page, using a main tag automatically gives assistive devices that functionality.<br><br> <hr>Camper Cat has some big ideas for his ninja weapons page. Help him set up his markup by adding opening and closing <code>main</code> tags between the <code>header</code> and <code>footer</code> (covered in other challenges). Keep the <code>main</code> tags empty for now.<br><br>',' <header>   <h1>Weapons of the Ninja</h1> </header>    <footer></footer>',3),(135,'587d774e367417b2b2512aa0','Wrap Content in the article Element','<code>article</code> is another one of the new HTML5 elements that adds semantic meaning to your markup. <code>Article</code> is a sectioning element, and is used to wrap independent, self-contained content. The tag works well with blog entries, forum posts, or news articles.<br><br>Determining whether content can stand alone is usually a judgement call, but there are a couple simple tests you can use. Ask yourself if you removed all surrounding context, would that content still make sense? Similarly for text, would the content hold up if it were in an RSS feed?<br><br>Remember that folks using assistive technologies rely on organized, semantically meaningful markup to better understand your work.<br><br><strong>Note about <code>section</code> and <code>div</code></strong><br>The <code>section</code> element is also new with HTML5, and has a slightly different semantic meaning than <code>article</code>. An <code>article</code> is for standalone content, and a <code>section</code> is for grouping thematically related content. They can be used within each other, as needed. For example, if a book is the <code>article</code>, then each chapter is a <code>section</code>. When there\'s no relationship between groups of content, then use a <code>div</code>.<br><br><blockquote>&lt;div&gt; - groups content<br>&lt;section&gt; - groups related content<br>&lt;article&gt; - groups independent, self-contained content<br></blockquote><br><br> <hr>Camper Cat used <code>article</code> tags to wrap the posts on his blog page, but he forgot to use them around the top one. Change the <code>div</code> tag to use an <code>article</code> tag instead.<br><br>',' <h1>Deep Thoughts with Master Camper Cat</h1> <main>   <div>     <h2>The Garfield Files: Lasagna as Training Fuel?</h2>     <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let\'s turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>   </div>    <img src=\"samuraiSwords.jpeg\" alt=\"\">    <article>     <h2>Defeating your Foe: the Red Dot is Ours!</h2>     <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightening speed. But chin up, fellow fighters, our time for victory may soon be near...</p>   </article>    <img src=\"samuraiSwords.jpeg\" alt=\"\">    <article>     <h2>Is Chuck Norris a Cat Person?</h2>     <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it\'s a complete coincidence anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>   </article> </main>',3),(136,'587d7787367417b2b2512aa1','Make Screen Reader Navigation Easier with the header Landmark','The next HTML5 element that adds semantic meaning and improves accessibility is the <code>header</code> tag. It\'s used to wrap introductory information or navigation links for its parent tag, and works well around content that\'s repeated at the top on multiple pages.<br><br><code>header</code> shares the embedded landmark feature you saw with <code>main</code>, allowing assistive technologies to quickly navigate to that content.<br><br><strong>Note</strong><br><code>header</code> is meant for use in the <code>body</code> tag of your HTML document. This is different than the <code>head</code> element, which contains the page\'s title, meta information, etc.<br><br> <hr>Camper Cat is writing some great articles about ninja training, and wants to add a page for them to his site. Change the top <code>div</code> that currently contains the <code>h1</code> to a <code>header</code> tag instead.<br><br>',' <body>    <div>     <h1>Training with Camper Cat</h1>   </div>     <main>     <section id=\"stealth\">       <h2>Stealth &amp; Agility Training</h2>       <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>       <article><h3>No training is NP-complete without parkour</h3></article>     </section>     <section id=\"combat\">       <h2>Combat Training</h2>       <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>       <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>     </section>     <section id=\"weapons\">       <h2>Weapons Training</h2>       <article><h3>Swords: the best tool to literally divide and conquer</h3></article>       <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>     </section>   </main> </body>',3),(137,'587d7788367417b2b2512aa2','Make Screen Reader Navigation Easier with the nav Landmark','The <code>nav</code> element is another HTML5 item with the embedded landmark feature for easy screen reader navigation. This tag is meant to wrap around the main navigation links in your page.<br><br>If there are repeated site links at the bottom of the page, it isn\'t necessary to markup those with a <code>nav</code> tag as well. Using a <code>footer</code> (covered in the next challenge) is sufficient.<br><br> <hr>Camper Cat included navigation links at the top of his training page, but wrapped them in a <code>div</code>. Change the <code>div</code> to a <code>nav</code> tag to improve the accessibility on his page.<br><br>',' <body>   <header>     <h1>Training with Camper Cat</h1>      <div>       <ul>         <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>         <li><a href=\"#combat\">Combat</a></li>         <li><a href=\"#weapons\">Weapons</a></li>       </ul>     </div>    </header>   <main>     <section id=\"stealth\">       <h2>Stealth &amp; Agility Training</h2>       <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>       <article><h3>No training is NP-complete without parkour</h3></article>     </section>     <section id=\"combat\">       <h2>Combat Training</h2>       <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>       <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>     </section>     <section id=\"weapons\">       <h2>Weapons Training</h2>       <article><h3>Swords: the best tool to literally divide and conquer</h3></article>       <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>     </section>   </main> </body>',3),(138,'587d7788367417b2b2512aa3','Make Screen Reader Navigation Easier with the footer Landmark','Similar to <code>header</code> and <code>nav</code>, the <code>footer</code> element has a built-in landmark feature that allows assistive devices to quickly navigate to it. It\'s primarily used to contain copyright information or links to related documents that usually sit at the bottom of a page.<br><br> <hr>Camper Cat\'s training page is making good progress. Change the <code>div</code> he used to wrap his copyright information at the bottom of the page to a <code>footer</code> element.<br><br>',' <body>   <header>     <h1>Training</h1>     <nav>       <ul>         <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>         <li><a href=\"#combat\">Combat</a></li>         <li><a href=\"#weapons\">Weapons</a></li>       </ul>     </nav>   </header>   <main>     <section id=\"stealth\">       <h2>Stealth &amp; Agility Training</h2>       <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>       <article><h3>No training is NP-complete without parkour</h3></article>     </section>     <section id=\"combat\">       <h2>Combat Training</h2>       <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>       <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>     </section>     <section id=\"weapons\">       <h2>Weapons Training</h2>       <article><h3>Swords: the best tool to literally divide and conquer</h3></article>       <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>     </section>   </main>     <div>&copy; 2016 Camper Cat</div>   </body>',3),(139,'587d7789367417b2b2512aa4','Improve Accessibility of Audio Content with the audio Element','HTML5\'s <code>audio</code> element gives semantic meaning when it wraps sound or audio stream content in your markup. Audio content also needs a text alternative to be accessible to people who are deaf or hard of hearing. This can be done with nearby text on the page or a link to a transcript.<br><br>The <code>audio</code> tag supports the <code>controls</code> attribute. This shows the browser default play, pause, and other controls, and supports keyboard functionality. This is a boolean attribute, meaning it doesn\'t need a value, its presence on the tag turns the setting on.<br><br>Here\'s an example:<br><br><blockquote>&lt;audio id=&quot;meowClip&quot; controls&gt;<br>&nbsp;&nbsp;&lt;source src=&quot;audio/meow.mp3&quot; type=&quot;audio/mpeg&quot; /&gt;<br>&nbsp;&nbsp;&lt;source src=&quot;audio/meow.ogg&quot; type=&quot;audio/ogg&quot; /&gt;<br>&lt;/audio&gt;<br></blockquote><br><br><strong>Note</strong><br>Multimedia content usually has both visual and auditory components. It needs synchronized captions and a transcript so users with visual and/or auditory impairments can access it. Generally, a web developer is not responsible for creating the captions or transcript, but needs to know to include them.<br><br> <hr>Time to take a break from Camper Cat and meet fellow camper Zersiax (@zersiax), a champion of accessibility and a screen reader user. To hear a clip of his screen reader in action, add an <code>audio</code> element after the <code>p</code>. Include the <code>controls</code> attribute. Then place a <code>source</code> tag inside the <code>audio</code> tags with the <code>src</code> attribute set to \"https://s3.amazonaws.com/freecodecamp/screen-reader.mp3\" and <code>type</code> attribute set to \"audio/mpeg\".<br><br><strong>Note</strong><br>The audio clip may sound fast and be difficult to understand, but that is a normal speed for screen reader users.<br><br>',' <body>   <header>     <h1>Real Coding Ninjas</h1>   </header>   <main>     <p>A sound clip of Zersiax\'s screen reader in action.</p>                  </main> </body>',3),(140,'587d778a367417b2b2512aa5','Improve Chart Accessibility with the figure Element','HTML5 introduced the <code>figure</code> element, along with the related <code>figcaption</code>. Used together, these items wrap a visual representation (like an image, diagram, or chart) along with its caption. This gives a two-fold accessibility boost by both semantically grouping related content, and providing a text alternative that explains the <code>figure</code>.<br><br>For data visualizations like charts, the caption can be used to briefly note the trends or conclusions for users with visual impairments. Another challenge covers how to move a table version of the chart\'s data off-screen (using CSS) for screen reader users.<br><br>Here\'s an example - note that the <code>figcaption</code> goes inside the <code>figure</code> tags and can be combined with other elements:<br><br><blockquote>&lt;figure&gt;<br>&nbsp;&nbsp;&lt;img src=&quot;roundhouseDestruction.jpeg&quot; alt=&quot;Photo of Camper Cat executing a roundhouse kick&quot;&gt;<br>&nbsp;&nbsp;&lt;br&gt;<br>&nbsp;&nbsp;&lt;figcaption&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;Master Camper Cat demonstrates proper form of a roundhouse kick.<br>&nbsp;&nbsp;&lt;/figcaption&gt;<br>&lt;/figure&gt;<br></blockquote><br><br> <hr>Camper Cat is hard at work creating a stacked bar chart showing the amount of time per week to spend training in stealth, combat, and weapons. Help him structure his page better by changing the <code>div</code> tag he used to a <code>figure</code> tag, and the <code>p</code> tag that surrounds the caption to a <code>figcaption</code> tag.<br><br>',' <body>   <header>     <h1>Training</h1>     <nav>       <ul>         <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>         <li><a href=\"#combat\">Combat</a></li>         <li><a href=\"#weapons\">Weapons</a></li>       </ul>     </nav>   </header>   <main>     <section>              <!-- Add your code below this line -->       <div>         <!-- Stacked bar chart will go here -->         <br>         <p>Breakdown per week of time to spend training in stealth, combat, and weapons.</p>       </div>       <!-- Add your code above this line -->            </section>     <section id=\"stealth\">       <h2>Stealth &amp; Agility Training</h2>       <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>       <article><h3>No training is NP-complete without parkour</h3></article>     </section>     <section id=\"combat\">       <h2>Combat Training</h2>       <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>       <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>     </section>     <section id=\"weapons\">       <h2>Weapons Training</h2>       <article><h3>Swords: the best tool to literally divide and conquer</h3></article>       <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>     </section>   </main>   <footer>&copy; 2016 Camper Cat</footer> </body>',3),(141,'587d778a367417b2b2512aa6','Improve Form Field Accessibility with the label Element','Improving accessibility with semantic HTML markup applies to using both appropriate tag names as well as attributes. The next several challenges cover some important scenarios using attributes in forms.<br><br>The <code>label</code> tag wraps the text for a specific form control item, usually the name or label for a choice. This ties meaning to the item and makes the form more readable. The <code>for</code> attribute on a <code>label</code> tag explicitly associates that <code>label</code> with the form control and is used by screen readers.<br><br>You learned about radio buttons and their labels in a lesson in the Basic HTML section. In that lesson, we wrapped the radio button input element inside a <code>label</code> element along with the label text in order to make the text clickable. Another way to achieve this is by using the <code>for</code> attribute as explained in this lesson.<br><br>The value of the <code>for</code> attribute must be the same as the value of the <code>id</code> attribute of the form control. Here\'s an example:<br><br><blockquote>&lt;form&gt;<br>&nbsp;&nbsp;&lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt;<br>&nbsp;&nbsp;&lt;input type=&quottext&quot; id=&quot;name&quot; name=&quot;name&quot;&gt;<br>&lt;/form&gt;<br></blockquote><br><br> <hr>Camper Cat expects a lot of interest in his thoughtful blog posts, and wants to include an email sign up form. Add a <code>for</code> attribute on the email <code>label</code> that matches the <code>id</code> on its <code>input</code> field.<br><br>',' <body>   <header>     <h1>Deep Thoughts with Master Camper Cat</h1>   </header>   <section>     <form>       <p>Sign up to receive Camper Cat\'s blog posts by email here!</p>                     <label>Email:</label>       <input type=\"text\" id=\"email\" name=\"email\">                     <input type=\"submit\" name=\"submit\" value=\"Submit\">     </form>   </section>   <article>     <h2>The Garfield Files: Lasagna as Training Fuel?</h2>     <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let\'s turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>   </article>   <img src=\"samuraiSwords.jpeg\" alt=\"\">   <article>     <h2>Defeating your Foe: the Red Dot is Ours!</h2>     <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightening speed. But chin up, fellow fighters, our time for victory may soon be near...</p>   </article>   <img src=\"samuraiSwords.jpeg\" alt=\"\">   <article>     <h2>Is Chuck Norris a Cat Person?</h2>     <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it\'s a complete coincidence anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>   </article>   <footer>&copy; 2016 Camper Cat</footer> </body>',3),(142,'587d778b367417b2b2512aa7','Wrap Radio Buttons in a fieldset Element for Better Accessibility','The next form topic covers accessibility of radio buttons. Each choice is given a <code>label</code> with a <code>for</code> attribute tying to the <code>id</code> of the corresponding item as covered in the last challenge. Since radio buttons often come in a group where the user must choose one, there\'s a way to semantically show the choices are part of a set.<br><br>The <code>fieldset</code> tag surrounds the entire grouping of radio buttons to achieve this. It often uses a <code>legend</code> tag to provide a description for the grouping, which is read by screen readers for each choice in the <code>fieldset</code> element.<br><br>The <code>fieldset</code> wrapper and <code>legend</code> tag are not necessary when the choices are self-explanatory, like a gender selection. Using a <code>label</code> with the <code>for</code> attribute for each radio button is sufficient.<br><br>Here\'s an example:<br><br><blockquote>&lt;form&gt;<br>&nbsp;&nbsp;&lt;fieldset&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;legend&gt;Choose one of these three items:&lt;/legend&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input id=&quot;one&quot; type=&quot;radio&quot; name=&quot;items&quot; value=&quot;one&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label for=&quot;one&quot;&gt;Choice One&lt;/label&gt;&lt;br&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input id=&quot;two&quot; type=&quot;radio&quot; name=&quot;items&quot; value=&quot;two&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label for=&quot;two&quot;&gt;Choice Two&lt;/label&gt;&lt;br&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input id=&quot;three&quot; type=&quot;radio&quot; name=&quot;items&quot; value=&quot;three&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label for=&quot;three&quot;&gt;Choice Three&lt;/label&gt;<br>&nbsp;&nbsp;&lt;/fieldset&gt;<br>&lt;/form&gt;<br></blockquote><br><br> <hr>Camper Cat wants information about the ninja level of his users when they sign up for his email list. He\'s added a set of radio buttons, and learned from our last lesson to use label tags with <code>for</code> attributes for each choice. Go Camper Cat! However, his code still needs some help. Change the div tag surrounding the radio buttons to a fieldset tag, and change the p tag inside it to a legend.<br><br>',' <body>   <header>     <h1>Deep Thoughts with Master Camper Cat</h1>   </header>   <section>     <form>       <p>Sign up to receive Camper Cat\'s blog posts by email here!</p>       <label for=\"email\">Email:</label>       <input type=\"text\" id=\"email\" name=\"email\">                     <!-- Add your code below this line -->       <div>         <p>What level ninja are you?</p>         <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">         <label for=\"newbie\">Newbie Kitten</label><br>         <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">         <label for=\"intermediate\">Developing Student</label><br>         <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">         <label for=\"master\">Master</label>       </div>       <!-- Add your code above this line -->                     <input type=\"submit\" name=\"submit\" value=\"Submit\">     </form>   </section>   <article>     <h2>The Garfield Files: Lasagna as Training Fuel?</h2>     <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let\'s turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>   </article>   <img src=\"samuraiSwords.jpeg\" alt=\"\">   <article>     <h2>Defeating your Foe: the Red Dot is Ours!</h2>     <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightening speed. But chin up, fellow fighters, our time for victory may soon be near...</p>   </article>   <img src=\"samuraiSwords.jpeg\" alt=\"\">   <article>     <h2>Is Chuck Norris a Cat Person?</h2>     <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it\'s a complete coincidence anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>   </article>   <footer>&copy; 2016 Camper Cat</footer> </body>',3),(143,'587d778b367417b2b2512aa8','Add an Accessible Date Picker','Forms often include the <code>input</code> field, which can be used to create several different form controls. The <code>type</code> attribute on this element indicates what kind of input will be created.<br><br>You may have noticed the <code>text</code> and <code>submit</code> input types in prior challenges, and HTML5 introduced an option to specify a <code>date</code> field. Depending on browser support, a date picker shows up in the <code>input</code> field when it\'s in focus, which makes filling in a form easier for all users.<br><br>For older browsers, the type will default to <code>text</code>, so it helps to show users the expected date format in the label or as placeholder text just in case.<br><br>Here\'s an example:<br><br><blockquote>&lt;label for=&quot;input1&quot;&gt;Enter a date:&lt;/label&gt;<br>&lt;input type=&quot;date&quot; id=&quot;input1&quot; name=&quot;input1&quot;&gt;<br></blockquote><br><br> <hr>Camper Cat is setting up a Mortal Kombat tournament and wants to ask his competitors to see what date works best. Add an <code>input</code> tag with a <code>type</code> attribute of \"date\", an <code>id</code> attribute of \"pickdate\", and a <code>name</code> attribute of \"date\".<br><br>',' <body>   <header>     <h1>Tournaments</h1>   </header>   <main>     <section>       <h2>Mortal Kombat Tournament Survey</h2>       <form>         <p>Tell us the best date for the competition</p>         <label for=\"pickdate\">Preferred Date:</label>                  <!-- Add your code below this line -->                                    <!-- Add your code above this line -->                  <input type=\"submit\" name=\"submit\" value=\"Submit\">       </form>     </section>   </main>   <footer>&copy; 2016 Camper Cat</footer> </body>',3),(144,'587d778c367417b2b2512aa9','Standardize Times with the HTML5 datetime Attribute','Continuing with the date theme, HTML5 also introduced the <code>time</code> element along with a <code>datetime</code> attribute to standardize times. This is an inline element that can wrap a date or time on a page. A valid format of that date is held by the <code>datetime</code> attribute. This is the value accessed by assistive devices. It helps avoid confusion by stating a standardized version of a time, even if it\'s written in an informal or colloquial manner in the text.<br><br>Here\'s an example:<br><br><code>&lt;p&gt;Master Camper Cat officiated the cage match between Goro and Scorpion &lt;time datetime=&quot;2013-02-13&quot;&gt;last Wednesday&lt;/time&gt;, which ended in a draw.&lt;/p&gt;</code><br><br> <hr>Camper Cat\'s Mortal Kombat survey results are in! Wrap a <code>time</code> tag around the text \"Thursday, September 15&lt;sup&gt;th&lt;/sup&gt;\" and add a <code>datetime</code> attribute to it set to \"2016-09-15\".<br><br>',' <body>   <header>     <h1>Tournaments</h1>   </header>   <article>     <h2>Mortal Kombat Tournament Survey Results</h2>          <!-- Add your code below this line -->          <p>Thank you to everyone for responding to Master Camper Cat\'s survey. The best day to host the vaunted Mortal Kombat tournament is Thursday, September 15<sup>th</sup>. May the best ninja win!</p>          <!-- Add your code above this line -->          <section>       <h3>Comments:</h3>       <article>         <p>Posted by: Sub-Zero on <time datetime=\"2016-08-13T20:01Z\">August 13<sup>th</sup></time></p>         <p>Johnny Cage better be there, I\'ll finish him!</p>       </article>       <article>         <p>Posted by: Doge on <time datetime=\"2016-08-15T08:12Z\">August 15<sup>th</sup></time></p>         <p>Wow, much combat, so mortal.</p>       </article>       <article>         <p>Posted by: The Grim Reaper on <time datetime=\"2016-08-16T00:00Z\">August 16<sup>th</sup></time></p>         <p>Looks like I\'ll be busy that day.</p>       </article>     </section>   </article>   <footer>&copy; 2016 Camper Cat</footer> </body>',3),(145,'587d778d367417b2b2512aaa','Make Elements Only Visible to a Screen Reader by Using Custom CSS','Have you noticed that all of the applied accessibility challenges so far haven\'t used any CSS? This is to show the importance of a logical document outline, and using semantically meaningful tags around your content before introducing the visual design aspect.<br><br>However, CSS\'s magic can also improve accessibility on your page when you want to visually hide content meant only for screen readers. This happens when information is in a visual format (like a chart), but screen reader users need an alternative presentation (like a table) to access the data. CSS is used to position the screen reader-only elements off the visual area of the browser window.<br><br>Here\'s an example of the CSS rules that accomplish this:<br><br><blockquote>.sr-only {<br>&nbsp;&nbsp;position: absolute;<br>&nbsp;&nbsp;left: -10000px;<br>&nbsp;&nbsp;width: 1px;<br>&nbsp;&nbsp;height: 1px;<br>&nbsp;&nbsp;top: auto;<br>&nbsp;&nbsp;overflow: hidden;<br>}</blockquote><br><br><strong>Note</strong><br>The following CSS approaches will NOT do the same thing:<br><br><ul><br><br><li><code>display: none;</code> or <code>visibility: hidden;</code> hides content for everyone, including screen reader users</li><br><br><li>Zero values for pixel sizes, such as <code>width: 0px; height: 0px;</code> removes that element from the flow of your document, meaning screen readers will ignore it</li><br><br></ul><br><br> <hr>Camper Cat created a really cool stacked bar chart for his training page, and put the data into a table for his visually impaired users. The table already has an <code>sr-only</code> class, but the CSS rules aren\'t filled in yet. Give the <code>position</code> an absolute value, the <code>left</code> a -10000px value, and the <code>width</code> and <code>height</code> both 1px values.<br><br>',' <head>   <style>   .sr-only {     position: ;     left: ;     width: ;     height: ;     top: auto;     overflow: hidden;   }   </style> </head> <body>   <header>     <h1>Training</h1>     <nav>       <ul>         <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>         <li><a href=\"#combat\">Combat</a></li>         <li><a href=\"#weapons\">Weapons</a></li>       </ul>     </nav>   </header>   <section>     <h2>Master Camper Cat\'s Beginner Three Week Training Program</h2>     <figure>       <!-- Stacked bar chart of weekly training-->       <p>[Stacked bar chart]</p>       <br />       <figcaption>Breakdown per week of time to spend training in stealth, combat, and weapons.</figcaption>     </figure>     <table class=\"sr-only\">       <caption>Hours of Weekly Training in Stealth, Combat, and Weapons</caption>       <thead>         <tr>           <th></th>           <th scope=\"col\">Stealth &amp; Agility</th>           <th scope=\"col\">Combat</th>           <th scope=\"col\">Weapons</th>           <th scope=\"col\">Total</th>                                                 </tr>       </thead>       <tbody>         <tr>           <th scope=\"row\">Week One</th>           <td>3</td>           <td>5</td>           <td>2</td>           <td>10</td>         </tr>         <tr>           <th scope=\"row\">Week Two</th>           <td>4</td>           <td>5</td>           <td>3</td>           <td>12</td>         </tr>         <tr>           <th scope=\"row\">Week Three</th>           <td>4</td>           <td>6</td>           <td>3</td>           <td>13</td>         </tr>       </tbody>     </table>   </section>   <section id=\"stealth\">     <h2>Stealth &amp; Agility Training</h2>     <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>     <article><h3>No training is NP-complete without parkour</h3></article>   </section>   <section id=\"combat\">     <h2>Combat Training</h2>     <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>     <article><h3>Goodbye, world: 5 proven ways to knock out an opponent</h3></article>   </section>   <section id=\"weapons\">     <h2>Weapons Training</h2>     <article><h3>Swords: the best tool to literally divide and conquer</h3></article>     <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>   </section>   <footer>&copy; 2016 Camper Cat</footer> </body>',3),(146,'587d778e367417b2b2512aab','Improve Readability with High Contrast Text','Low contrast between the foreground and background colors can make text difficult to read. Sufficient contrast improves the readability of your content, but what exactly does \"sufficient\" mean?<br><br>The Web Content Accessibility Guidelines (WCAG) recommend at least a 4.5 to 1 contrast ratio for normal text. The ratio is calculated by comparing the relative luminance values of two colors. This ranges from 1:1 for the same color, or no contrast, to 21:1 for white against black, the strongest contrast. There are many contrast checking tools available online that calculate this ratio for you.<br><br> <hr>Camper Cat\'s choice of light gray text on a white background for his recent blog post has a 1.5:1 contrast ratio, making it hard to read. Change the <code>color</code> of the text from the current gray (<code>#D3D3D3</code>) to a darker gray (<code>#636363</code>) to improve the contrast ratio to 6:1.<br><br>',' <head>   <style>   body {     color: #D3D3D3;     background-color: #FFF;   }   </style> </head> <body>   <header>     <h1>Deep Thoughts with Master Camper Cat</h1>   </header>   <article>     <h2>A Word on the Recent Catnip Doping Scandal</h2>     <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public\'s attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>     <p>As I\'ve stated in the past, I firmly believe a true ninja\'s skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>   </article> </body>',3),(147,'587d778f367417b2b2512aac','Avoid Colorblindness Issues by Using Sufficient Contrast','Color is a large part of visual design, but its use introduces two accessibility issues. First, color alone should not be used as the only way to convey important information because screen reader users won\'t see it. Second, foreground and background colors need sufficient contrast so colorblind users can distinguish them.<br><br>Previous challenges covered having text alternatives to address the first issue. The last challenge introduced contrast checking tools to help with the second. The WCAG-recommended contrast ratio of 4.5:1 applies for color use as well as gray-scale combinations.<br><br>Colorblind users have trouble distinguishing some colors from others - usually in hue but sometimes lightness as well. You may recall the contrast ratio is calculated using the relative luminance (or lightness) values of the foreground and background colors.<br><br>In practice, the 4.5:1 ratio can be reached by darkening the darker color and lightening the lighter one with the aid of a color contrast checker. Darker colors on the color wheel are considered to be blues, violets, magentas, and reds, whereas lighter colors are oranges, yellows, greens, and blue-greens.<br><br> <hr>Camper Cat is experimenting with using color for his blog text and background, but his current combination of a greenish <code>background-color</code> with maroon text <code>color</code> has a 2.5:1 contrast ratio. You can easily adjust the lightness of the colors since he declared them using the CSS <code>hsl()</code> property (which stands for hue, saturation, lightness) by changing the third argument. Increase the <code>background-color</code> lightness value from 35% to 55%, and decrease the <code>color</code> lightness value from 20% to 15%. This improves the contrast to 5.9:1.<br><br>',' <head>   <style>   body {     color: hsl(0, 55%, 20%);     background-color: hsl(120, 25%, 35%);   }   </style> </head> <body>   <header>     <h1>Deep Thoughts with Master Camper Cat</h1>   </header>   <article>     <h2>A Word on the Recent Catnip Doping Scandal</h2>     <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public\'s attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>     <p>As I\'ve stated in the past, I firmly believe a true ninja\'s skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>   </article> </body>',3),(148,'587d778f367417b2b2512aad','Avoid Colorblindness Issues by Carefully Choosing Colors that Convey Information','There are various forms of colorblindness. These can range from a reduced sensitivity to a certain wavelength of light to the inability to see color at all. The most common form is a reduced sensitivity to detect greens.<br><br>For example, if two similar green colors are the foreground and background color of your content, a colorblind user may not be able to distinguish them. Close colors can be thought of as neighbors on the color wheel, and those combinations should be avoided when conveying important information.<br><br><strong>Note</strong><br>Some online color picking tools include visual simulations of how colors appear for different types of colorblindness. These are great resources in addition to online contrast checking calculators.<br><br> <hr>Camper Cat is testing different styles for an important button, but the yellow (<code>#FFFF33</code>) <code>background-color</code> and the green (<code>#33FF33</code>) text <code>color</code> are neighboring hues on the color wheel and virtually indistinguishable for some colorblind users. (Their similar lightness also fails the contrast ratio check). Change the text <code>color</code> to a dark blue (<code>#003366</code>) to solve both problems.<br><br>',' <head>   <style>   button {     color: #33FF33;     background-color: #FFFF33;     font-size: 14px;     padding: 10px;   }   </style> </head> <body>   <header>     <h1>Danger!</h1>   </header>   <button>Delete Internet</button> </body>',3),(149,'587d778f367417b2b2512aae','Give Links Meaning by Using Descriptive Link Text','Screen reader users have different options for what type of content their device reads. This includes skipping to (or over) landmark elements, jumping to the main content, or getting a page summary from the headings. Another option is to only hear the links available on a page.<br><br>Screen readers do this by reading the link text, or what\'s between the anchor (<code>a</code>) tags. Having a list of \"click here\" or \"read more\" links isn\'t helpful. Instead, you should use brief but descriptive text within the <code>a</code> tags to provide more meaning for these users.<br><br> <hr>The link text that Camper Cat is using is not very descriptive without the surrounding context. Move the anchor (<code>a</code>) tags so they wrap around the text \"information about batteries\" instead of \"Click here\".<br><br>',' <body>   <header>     <h1>Deep Thoughts with Master Camper Cat</h1>   </header>   <article>     <h2>Defeating your Foe: the Red Dot is Ours!</h2>     <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightening speed. But chin up, fellow fighters, our time for victory may soon be near. <a href=\"\">Click here</a> for information about batteries</p>   </article> </body>',3),(150,'587d7790367417b2b2512aaf','Make Links Navigatable with HTML Access Keys','HTML offers the <code>accesskey</code> attribute to specify a shortcut key to activate or bring focus to an element. This can make navigation more efficient for keyboard-only users.<br><br>HTML5 allows this attribute to be used on any element, but it\'s particularly useful when it\'s used with interactive ones. This includes links, buttons, and form controls.<br><br>Here\'s an example:<br><br><code>&lt;button accesskey=&quot;b&quot;&gt;Important Button&lt;/button&gt;</code><br><br> <hr>Camper Cat wants the links around the two blog article titles to have keyboard shortcuts so his site\'s users can quickly navigate to the full story. Add an <code>accesskey</code> attribute to both links and set the first one to \"g\" (for Garfield) and the second one to \"c\" (for Chuck Norris).<br><br>',' <body>   <header>     <h1>Deep Thoughts with Master Camper Cat</h1>   </header>   <article>               <h2><a id=\"first\" href=\"\">The Garfield Files: Lasagna as Training Fuel?</a></h2>               <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let\'s turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>   </article>   <article>               <h2><a id=\"second\" href=\"\">Is Chuck Norris a Cat Person?</a></h2>               <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it\'s a complete coincidence anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>   </article>   <footer>&copy; 2016 Camper Cat</footer> </body>',3),(151,'587d7790367417b2b2512ab0','Use tabindex to Add Keyboard Focus to an Element','The HTML <code>tabindex</code> attribute has three distinct functions relating to an element\'s keyboard focus. When it\'s on a tag, it indicates that element can be focused on. The value (an integer that\'s positive, negative, or zero) determines the behavior.<br><br>Certain elements, such as links and form controls, automatically receive keyboard focus when a user tabs through a page. It\'s in the same order as the elements come in the HTML source markup. This same functionality can be given to other elements, such as <code>div</code>, <code>span</code>, and <code>p</code>, by placing a <code>tabindex=\"0\"</code> attribute on them. Here\'s an example:<br><br><code>&lt;div tabindex=&quot;0&quot;&gt;I need keyboard focus!&lt;/div&gt;</code><br><br><strong>Note</strong><br>A negative <code>tabindex</code> value (typically -1) indicates that an element is focusable, but is not reachable by the keyboard. This method is generally used to bring focus to content programmatically (like when a <code>div</code> used for a pop-up window is activated), and is beyond the scope of these challenges.<br><br> <hr>Camper Cat created a new survey to collect information about his users. He knows input fields automatically get keyboard focus, but he wants to make sure his keyboard users pause at the instructions while tabbing through the items. Add a <code>tabindex</code> attribute to the <code>p</code> tag and set its value to \"0\". Bonus - using <code>tabindex</code> also enables the CSS pseudo-class <code>:focus</code> to work on the <code>p</code> tag.<br><br>',' <head>   <style>   p:focus {     background-color: yellow;   }   </style> </head> <body>   <header>     <h1>Ninja Survey</h1>   </header>   <section>     <form>                     <p>Instructions: Fill in ALL your information then click <b>Submit</b></p>                     <label for=\"username\">Username:</label>       <input type=\"text\" id=\"username\" name=\"username\"><br>       <fieldset>         <legend>What level ninja are you?</legend>         <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">         <label for=\"newbie\">Newbie Kitten</label><br>         <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">         <label for=\"intermediate\">Developing Student</label><br>         <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">         <label for=\"master\">9th Life Master</label>       </fieldset>       <br>       <fieldset>       <legend>Select your favorite weapons:</legend>       <input id=\"stars\" type=\"checkbox\" name=\"weapons\" value=\"stars\">       <label for=\"stars\">Throwing Stars</label><br>       <input id=\"nunchucks\" type=\"checkbox\" name=\"weapons\" value=\"nunchucks\">       <label for=\"nunchucks\">Nunchucks</label><br>       <input id=\"sai\" type=\"checkbox\" name=\"weapons\" value=\"sai\">       <label for=\"sai\">Sai Set</label><br>       <input id=\"sword\" type=\"checkbox\" name=\"weapons\" value=\"sword\">       <label for=\"sword\">Sword</label>       </fieldset>       <br>       <input type=\"submit\" name=\"submit\" value=\"Submit\">     </form><br>   </section>   <footer>&copy; 2016 Camper Cat</footer> </body>',3),(152,'587d7790367417b2b2512ab1','Use tabindex to Specify the Order of Keyboard Focus for Several Elements','The <code>tabindex</code> attribute also specifies the exact tab order of elements. This is achieved when the value of the attribute is set to a positive number of 1 or higher.<br><br>Setting a tabindex=\"1\" will bring keyboard focus to that element first. Then it cycles through the sequence of specified <code>tabindex</code> values (2, 3, etc.), before moving to default and <code>tabindex=\"0\"</code> items.<br><br>It\'s important to note that when the tab order is set this way, it overrides the default order (which uses the HTML source). This may confuse users who are expecting to start navigation from the top of the page. This technique may be necessary in some circumstances, but in terms of accessibility, take care before applying it.<br><br>Here\'s an example:<br><br><code>&lt;div tabindex=&quot;1&quot;&gt;I get keyboard focus, and I get it first!&lt;/div&gt;</code><br><br><code>&lt;div tabindex=&quot;2&quot;&gt;I get keyboard focus, and I get it second!&lt;/div&gt;</code><br><br> <hr>Camper Cat has a search field on his Inspirational Quotes page that he plans to position in the upper right corner with CSS. He wants the search <code>input</code> and submit <code>input</code> form controls to be the first two items in the tab order. Add a <code>tabindex</code> attribute set to \"1\" to the search <code>input</code>, and a <code>tabindex</code> attribute set to \"2\" to the submit <code>input</code>.<br><br>',' <body>   <header>     <h1>Even Deeper Thoughts with Master Camper Cat</h1>     <nav>       <ul>         <li><a href=\"\">Home</a></li>         <li><a href=\"\">Blog</a></li>         <li><a href=\"\">Training</a></li>       </ul>     </nav>   </header>   <form>     <label for=\"search\">Search:</label>               <input type=\"search\" name=\"search\" id=\"search\">     <input type=\"submit\" name=\"submit\" value=\"Submit\" id=\"submit\">             </form>   <h2>Inspirational Quotes</h2>   <blockquote>     <p>&ldquo;There\'s no Theory of Evolution, just a list of creatures I\'ve allowed to live.&rdquo;<br>     - Chuck Norris</p>   </blockquote>   <blockquote>     <p>&ldquo;Wise men say forgiveness is divine, but never pay full price for late pizza.&rdquo;<br>     - TMNT</p>   </blockquote>   <footer>&copy; 2016 Camper Cat</footer> </body>',3),(153,'code_id','title','description','code',0),(154,'bad87fee1348bd9acde08712','Use Responsive Design with Bootstrap Fluid Containers','In the HTML5 and CSS section of freeCodeCamp we built a Cat Photo App. Now let\'s go back to it. This time, we\'ll style it using the popular Bootstrap responsive CSS framework.<br><br>Bootstrap will figure out how wide your screen is and respond by resizing your HTML elements - hence the name <code>Responsive Design</code>.<br><br>With responsive design, there is no need to design a mobile version of your website. It will look good on devices with screens of any width.<br><br>You can add Bootstrap to any app by adding the following code to the top of your HTML:<br><br><code>&#60;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"/&#62;</code><br><br>In this case, we\'ve already added it for you to this page behind the scenes. Note that using either <code>></code> or <code>/></code> to close the <code>link</code> tag is acceptable.<br><br>To get started, we should nest all of our HTML (except the <code>link</code> tag and the <code>style</code> element) in a <code>div</code> element with the class <code>container-fluid</code>.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, Monospace;   }    p {     font-size: 16px;     font-family: Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }    .smaller-image {     width: 100px;   } </style>  <h2 class=\"red-text\">CatPhotoApp</h2>  <p>Click here for <a href=\"#\">cat photos</a>.</p>  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>  <p>Things cats love:</p> <ul>   <li>cat nip</li>   <li>laser pointers</li>   <li>lasagna</li> </ul> <p>Top 3 things cats hate:</p> <ol>   <li>flea treatment</li>   <li>thunder</li>   <li>other cats</li> </ol> <form action=\"/submit-cat-photo\">   <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>   <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>   <label><input type=\"checkbox\" name=\"personality\"> Loving</label>   <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>   <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>   <input type=\"text\" placeholder=\"cat photo URL\" required>   <button type=\"submit\">Submit</button> </form>',4),(155,'bad87fee1348bd9acde08812','Make Images Mobile Responsive','First, add a new image below the existing one. Set its <code>src</code> attribute to <code>https://bit.ly/fcc-running-cats</code>.<br><br>It would be great if this image could be exactly the width of our phone\'s screen.<br><br>Fortunately, with Bootstrap, all we need to do is add the <code>img-responsive</code> class to your image. Do this, and the image should perfectly fit the width of your page.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, Monospace;   }    p {     font-size: 16px;     font-family: Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }    .smaller-image {     width: 100px;   } </style>  <div class=\"container-fluid\">   <h2 class=\"red-text\">CatPhotoApp</h2>    <p>Click here for <a href=\"#\">cat photos</a>.</p>    <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>    <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(156,'bad87fee1348bd8acde08812','Center Text with Bootstrap','Now that we\'re using Bootstrap, we can center our heading element to make it look better. All we need to do is add the class <code>text-center</code> to our <code>h2</code> element.<br><br>Remember that you can add several classes to the same element by separating each of them with a space, like this:<br><br><code>&#60h2 class=\"red-text text-center\"&#62your text&#60/h2&#62</code><br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, Monospace;   }    p {     font-size: 16px;     font-family: Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }    .smaller-image {     width: 100px;   } </style>  <div class=\"container-fluid\">   <h2 class=\"red-text\">CatPhotoApp</h2>    <p>Click here for <a href=\"#\">cat photos</a>.</p>    <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>    <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">   <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(157,'bad87fee1348cd8acdf08812','Create a Bootstrap Button','Bootstrap has its own styles for <code>button</code> elements, which look much better than the plain HTML ones.<br><br>Create a new <code>button</code> element below your large kitten photo. Give it the <code>btn</code> and <code>btn-default</code> classes, as well as the text of \"Like\".<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, Monospace;   }    p {     font-size: 16px;     font-family: Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }    .smaller-image {     width: 100px;   } </style>  <div class=\"container-fluid\">   <h2 class=\"red-text text-center\">CatPhotoApp</h2>    <p>Click here for <a href=\"#\">cat photos</a>.</p>    <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>    <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">    <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(158,'bad87fee1348cd8acef08812','Create a Block Element Bootstrap Button','Normally, your <code>button</code> elements with the <code>btn</code> and <code>btn-default</code> classes are only as wide as the text that they contain. For example:<br><br><code>&lt;button class=\"btn btn-default\"&gt;Submit&lt;/button&gt;</code><br><br>This button would only be as wide as the word \"Submit\".<br><br><button class=\'btn btn-default\'>Submit</button><br><br>By making them block elements with the additional class of <code>btn-block</code>, your button will stretch to fill your page\'s entire horizontal space and any elements following it will flow onto a \"new line\" below the block.<br><br><code>&lt;button class=\"btn btn-default btn-block\"&gt;Submit&lt;/button&gt;</code><br><br>This button would take up 100% of the available width.<br><br><button class=\'btn btn-default btn-block\'>Submit</button><br><br>Note that these buttons still need the <code>btn</code> class.<br><br>Add Bootstrap\'s <code>btn-block</code> class to your Bootstrap button.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, Monospace;   }    p {     font-size: 16px;     font-family: Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }    .smaller-image {     width: 100px;   } </style>  <div class=\"container-fluid\">   <h2 class=\"red-text text-center\">CatPhotoApp</h2>    <p>Click here for <a href=\"#\">cat photos</a>.</p>    <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>    <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">   <button class=\"btn btn-default\">Like</button>   <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(159,'bad87fee1348cd8acef08811','Taste the Bootstrap Button Color Rainbow','The <code>btn-primary</code> class is the main color you\'ll use in your app. It is useful for highlighting actions you want your user to take.<br><br>Replace Bootstrap\'s <code>btn-default</code> class by <code>btn-primary</code> in your button.<br><br>Note that this button will still need the <code>btn</code> and <code>btn-block</code> classes.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, Monospace;   }    p {     font-size: 16px;     font-family: Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }    .smaller-image {     width: 100px;   } </style>  <div class=\"container-fluid\">   <h2 class=\"red-text text-center\">CatPhotoApp</h2>    <p>Click here for <a href=\"#\">cat photos</a>.</p>    <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>    <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">   <button class=\"btn btn-default btn-block\">Like</button>   <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(160,'bad87fee1348cd8acef08813','Call out Optional Actions with btn-info','Bootstrap comes with several pre-defined colors for buttons. The <code>btn-info</code> class is used to call attention to optional actions that the user can take.<br><br>Create a new block-level Bootstrap button below your \"Like\" button with the text \"Info\", and add Bootstrap\'s <code>btn-info</code> and <code>btn-block</code> classes to it.<br><br>Note that these buttons still need the <code>btn</code> and <code>btn-block</code> classes.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, Monospace;   }    p {     font-size: 16px;     font-family: Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }    .smaller-image {     width: 100px;   } </style>  <div class=\"container-fluid\">   <h2 class=\"red-text text-center\">CatPhotoApp</h2>    <p>Click here for <a href=\"#\">cat photos</a>.</p>    <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>    <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">   <button class=\"btn btn-block btn-primary\">Like</button>   <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(161,'bad87fee1348ce8acef08814','Warn Your Users of a Dangerous Action with btn-danger','Bootstrap comes with several pre-defined colors for buttons. The <code>btn-danger</code> class is the button color you\'ll use to notify users that the button performs a destructive action, such as deleting a cat photo.<br><br>Create a button with the text \"Delete\" and give it the class <code>btn-danger</code>.<br><br>Note that these buttons still need the <code>btn</code> and <code>btn-block</code> classes.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, Monospace;   }    p {     font-size: 16px;     font-family: Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }    .smaller-image {     width: 100px;   } </style>  <div class=\"container-fluid\">   <h2 class=\"red-text text-center\">CatPhotoApp</h2>    <p>Click here for <a href=\"#\">cat photos</a>.</p>    <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>    <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">   <button class=\"btn btn-block btn-primary\">Like</button>   <button class=\"btn btn-block btn-info\">Info</button>   <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(162,'bad88fee1348ce8acef08815','Use the Bootstrap Grid to Put Elements Side By Side','Bootstrap uses a responsive 12-column grid system, which makes it easy to put elements into rows and specify each element\'s relative width. Most of Bootstrap\'s classes can be applied to a <code>div</code> element.<br><br>Bootstrap has different column width attributes that it uses depending on how wide the user\'s screen is. For example, phones have narrow screens, and laptops have wider screens.<br><br>Take for example Bootstrap\'s <code>col-md-*</code> class. Here, <code>md</code> means medium, and <code>*</code> is a number specifying how many columns wide the element should be. In this case, the column width of an element on a medium-sized screen, such as a laptop, is being specified.<br><br>In the Cat Photo App that we\'re building, we\'ll use <code>col-xs-*</code>, where <code>xs</code> means extra small (like an extra-small mobile phone screen), and <code>*</code> is the number of columns specifying how many columns wide the element should be.<br><br>Put the <code>Like</code>, <code>Info</code> and <code>Delete</code> buttons side-by-side by nesting all three of them within one <code>&#60;div class=\"row\"&#62;</code> element, then each of them within a <code>&#60;div class=\"col-xs-4\"&#62;</code> element.<br><br>The <code>row</code> class is applied to a <code>div</code>, and the buttons themselves can be nested within it.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, Monospace;   }    p {     font-size: 16px;     font-family: Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }    .smaller-image {     width: 100px;   } </style>  <div class=\"container-fluid\">   <h2 class=\"red-text text-center\">CatPhotoApp</h2>    <p>Click here for <a href=\"#\">cat photos</a>.</p>    <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>    <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">   <button class=\"btn btn-block btn-primary\">Like</button>   <button class=\"btn btn-block btn-info\">Info</button>   <button class=\"btn btn-block btn-danger\">Delete</button>   <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(163,'bad87fee1347bd9aedf08845','Ditch Custom CSS for Bootstrap','We can clean up our code and make our Cat Photo App look more conventional by using Bootstrap\'s built-in styles instead of the custom styles we created earlier.<br><br>Don\'t worry - there will be plenty of time to customize our CSS later.<br><br>Delete the <code>.red-text</code>, <code>p</code>, and <code>.smaller-image</code> CSS declarations from your <code>style</code> element so that the only declarations left in your <code>style</code> element are <code>h2</code> and <code>thick-green-border</code>.<br><br>Then delete the <code>p</code> element that contains a dead link. Then remove the <code>red-text</code> class from your <code>h2</code> element and replace it with the <code>text-primary</code> Bootstrap class.<br><br>Finally, remove the \"smaller-image\" class from your first <code>img</code> element and replace it with the <code>img-responsive</code> class.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   .red-text {     color: red;   }    h2 {     font-family: Lobster, Monospace;   }    p {     font-size: 16px;     font-family: Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }    .smaller-image {     width: 100px;   } </style>  <div class=\"container-fluid\">   <h2 class=\"red-text text-center\">CatPhotoApp</h2>    <p>Click here for <a href=\"#\">cat photos</a>.</p>    <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>    <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">   <div class=\"row\">     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-primary\">Like</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-info\">Info</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-danger\">Delete</button>     </div>   </div>   <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(164,'bad87fee1348bd9aedf08845','Use a span to Target Inline Elements','You can use spans to create inline elements. Remember when we used the <code>btn-block</code> class to make the button fill the entire row?<br><br><button class=\'btn\' style=\'background-color: rgb(0, 100, 0);  color: rgb(255, 255, 255);\'>normal button</button><br><br><button class=\'btn btn-block\' style=\'background-color: rgb(0, 100, 0);  color: rgb(255, 255, 255);\'>btn-block button</button><br><br>That illustrates the difference between an \"inline\" element and a \"block\" element.<br><br>By using the inline <code>span</code> element, you can put several elements on the same line, and even style different parts of the same line differently.<br><br>Nest the word \"love\" in your \"Things cats love\" element below within a <code>span</code> element. Then give that <code>span</code> the class <code>text-danger</code> to make the text red.<br><br>Here\'s how you would do this with the \"Top 3 things cats hate\" element:<br><br><code>&#60;p&#62;Top 3 things cats &#60;span class=\"text-danger\"&#62;hate:&#60;/span&#62;&#60;/p&#62;</code><br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>    h2 {     font-family: Lobster, Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }  </style>  <div class=\"container-fluid\">   <h2 class=\"text-primary text-center\">CatPhotoApp</h2>    <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>    <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">   <div class=\"row\">     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-primary\">Like</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-info\">Info</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-danger\">Delete</button>     </div>   </div>   <p>Things cats love:</p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(165,'bad87fee1348bd9aede08845','Create a Custom Heading','We will make a simple heading for our Cat Photo App by putting the title and relaxing cat image in the same row.<br><br>Remember, Bootstrap uses a responsive grid system, which makes it easy to put elements into rows and specify each element\'s relative width. Most of Bootstrap\'s classes can be applied to a <code>div</code> element.<br><br>Nest your first image and your <code>h2</code> element within a single <code>&#60;div class=\"row\"&#62;</code> element. Nest your <code>h2</code> element within a <code>&#60;div class=\"col-xs-8\"&#62;</code> and your image in a <code>&#60;div class=\"col-xs-4\"&#62;</code> so that they are on the same line.<br><br>Notice how the image is now just the right size to fit along the text?<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">  <style>   h2 {     font-family: Lobster, Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   } </style>  <div class=\"container-fluid\">   <h2 class=\"text-primary text-center\">CatPhotoApp</h2>    <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>    <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">   <div class=\"row\">     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-primary\">Like</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-info\">Info</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-danger\">Delete</button>     </div>   </div>   <p>Things cats <span class=\"text-danger\">love:</span></p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(166,'bad87fee1348bd9aedd08845','Add Font Awesome Icons to our Buttons','Font Awesome is a convenient library of icons. These icons are vector graphics, stored in the <code>.svg</code> file format. These icons are treated just like fonts. You can specify their size using pixels, and they will assume the font size of their parent HTML elements.<br><br>You can include Font Awesome in any app by adding the following code to the top of your HTML:<br><br><code>&#60;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css\" integrity=\"sha384-XdYbMnZ/QjLh6iI4ogqCTaIjrFk87ip+ekIjefZch0Y+PvJ8CDYtEs1ipDmPorQ+\" crossorigin=\"anonymous\"&#62;</code><br><br>In this case, we\'ve already added it for you to this page behind the scenes.<br><br>The <code>i</code> element was originally used to make other elements italic, but is now commonly used for icons. You can add the Font Awesome classes to the <code>i</code> element to turn it into an icon, for example:<br><br><code>&lt;i class=\"fa fa-info-circle\"&gt;&lt;/i&gt;</code><br><br>Note that the <code>span</code> element is also acceptable for use with icons.<br><br>Use Font Awesome to add a <code>thumbs-up</code> icon to your like button by giving it an <code>i</code> element with the classes <code>fa</code> and <code>fa-thumbs-up</code>; make sure to keep the text \"Like\" next to the icon.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   h2 {     font-family: Lobster, Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   } </style>  <div class=\"container-fluid\">   <div class=\"row\">     <div class=\"col-xs-8\">       <h2 class=\"text-primary text-center\">CatPhotoApp</h2>     </div>     <div class=\"col-xs-4\">       <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>     </div>   </div>   <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">   <div class=\"row\">     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-primary\">Like</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-info\">Info</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-danger\">Delete</button>     </div>   </div>   <p>Things cats <span class=\"text-danger\">love:</span></p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(167,'bad87fee1348bd9aedc08845','Add Font Awesome Icons to all of our Buttons','Font Awesome is a convenient library of icons. These icons are vector graphics, stored in the <code>.svg</code> file format. These icons are treated just like fonts. You can specify their size using pixels, and they will assume the font size of their parent HTML elements.<br><br>Use Font Awesome to add an <code>info-circle</code> icon to your info button and a <code>trash</code> icon to your delete button.<br><br>Note: The <code>span</code> element is an acceptable alternative to the <code>i</code> element for the directions below.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   h2 {     font-family: Lobster, Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   } </style>  <div class=\"container-fluid\">   <div class=\"row\">     <div class=\"col-xs-8\">       <h2 class=\"text-primary text-center\">CatPhotoApp</h2>     </div>     <div class=\"col-xs-4\">       <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>     </div>   </div>   <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">   <div class=\"row\">     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-info\">Info</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-danger\">Delete</button>     </div>   </div>   <p>Things cats <span class=\"text-danger\">love:</span></p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(168,'bad87fee1348bd9aedb08845','Responsively Style Radio Buttons','You can use Bootstrap\'s <code>col-xs-*</code> classes on <code>form</code> elements, too! This way, our radio buttons will be evenly spread out across the page, regardless of how wide the screen resolution is.<br><br>Nest both your radio buttons within a <code>&#60;div class=\"row\"&#62;</code> element. Then nest each of them within a <code>&#60;div class=\"col-xs-6\"&#62;</code> element.<br><br><strong>Note:</strong> As a reminder, radio buttons are <code>input</code> elements of type <code>radio</code>.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   h2 {     font-family: Lobster, Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   } </style>  <div class=\"container-fluid\">   <div class=\"row\">     <div class=\"col-xs-8\">       <h2 class=\"text-primary text-center\">CatPhotoApp</h2>     </div>     <div class=\"col-xs-4\">       <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>     </div>   </div>   <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">   <div class=\"row\">     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>     </div>   </div>   <p>Things cats <span class=\"text-danger\">love:</span></p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>     <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(169,'bad87fee1348bd9aeda08845','Responsively Style Checkboxes','You can use Bootstrap\'s <code>col-xs-*</code> classes on <code>form</code> elements, too! This way, our checkboxes will be evenly spread out across the page, regardless of how wide the screen resolution is.<br><br>Nest all three of your checkboxes in a <code>&#60;div class=\"row\"&#62;</code> element. Then nest each of them in a <code>&#60;div class=\"col-xs-4\"&#62;</code> element.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   h2 {     font-family: Lobster, Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }  </style>  <div class=\"container-fluid\">   <div class=\"row\">     <div class=\"col-xs-8\">       <h2 class=\"text-primary text-center\">CatPhotoApp</h2>     </div>     <div class=\"col-xs-4\">       <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>     </div>   </div>   <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">   <div class=\"row\">     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>     </div>   </div>   <p>Things cats <span class=\"text-danger\">love:</span></p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <div class=\"row\">       <div class=\"col-xs-6\">         <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>       </div>       <div class=\"col-xs-6\">         <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>       </div>     </div>     <label><input type=\"checkbox\" name=\"personality\"> Loving</label>     <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>     <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(170,'bad87fee1348bd9aed908845','Style Text Inputs as Form Controls','You can add the <code>fa-paper-plane</code> Font Awesome icon by adding <code>&#60;i class=\"fa fa-paper-plane\"&#62;&#60;/i&#62;</code> within your submit <code>button</code> element.<br><br>Give your form\'s text input field a class of <code>form-control</code>. Give your form\'s submit button the classes <code>btn btn-primary</code>. Also give this button the Font Awesome icon of <code>fa-paper-plane</code>.<br><br>All textual <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code> elements with the class <code>.form-control</code> have a width of 100%.<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   h2 {     font-family: Lobster, Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }  </style>  <div class=\"container-fluid\">   <div class=\"row\">     <div class=\"col-xs-8\">       <h2 class=\"text-primary text-center\">CatPhotoApp</h2>     </div>     <div class=\"col-xs-4\">       <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>     </div>   </div>   <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">   <div class=\"row\">     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>     </div>   </div>   <p>Things cats <span class=\"text-danger\">love:</span></p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <div class=\"row\">       <div class=\"col-xs-6\">         <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>       </div>       <div class=\"col-xs-6\">         <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>       </div>     </div>     <div class=\"row\">       <div class=\"col-xs-4\">         <label><input type=\"checkbox\" name=\"personality\"> Loving</label>       </div>       <div class=\"col-xs-4\">         <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>       </div>       <div class=\"col-xs-4\">         <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>       </div>     </div>     <input type=\"text\" placeholder=\"cat photo URL\" required>     <button type=\"submit\">Submit</button>   </form> </div>',4),(171,'bad87fee1348bd9aec908845','Line up Form Elements Responsively with Bootstrap','Now let\'s get your form <code>input</code> and your submission <code>button</code> on the same line. We\'ll do this the same way we have previously: by using a <code>div</code> element with the class <code>row</code>, and other <code>div</code> elements within it using the <code>col-xs-*</code> class.<br><br>Nest both your form\'s text <code>input</code> and submit <code>button</code> within a <code>div</code> with the class <code>row</code>. Nest your form\'s text <code>input</code> within a div with the class of <code>col-xs-7</code>. Nest your form\'s submit <code>button</code> in a <code>div</code> with the class <code>col-xs-5</code>.<br><br>This is the last challenge we\'ll do for our Cat Photo App for now. We hope you\'ve enjoyed learning Font Awesome, Bootstrap, and responsive design!<br><br>',' <link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"> <style>   h2 {     font-family: Lobster, Monospace;   }    .thick-green-border {     border-color: green;     border-width: 10px;     border-style: solid;     border-radius: 50%;   }  </style>  <div class=\"container-fluid\">   <div class=\"row\">     <div class=\"col-xs-8\">       <h2 class=\"text-primary text-center\">CatPhotoApp</h2>     </div>     <div class=\"col-xs-4\">       <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>     </div>   </div>   <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">   <div class=\"row\">     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>     </div>     <div class=\"col-xs-4\">       <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>     </div>   </div>   <p>Things cats <span class=\"text-danger\">love:</span></p>   <ul>     <li>cat nip</li>     <li>laser pointers</li>     <li>lasagna</li>   </ul>   <p>Top 3 things cats hate:</p>   <ol>     <li>flea treatment</li>     <li>thunder</li>     <li>other cats</li>   </ol>   <form action=\"/submit-cat-photo\">     <div class=\"row\">       <div class=\"col-xs-6\">         <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>       </div>       <div class=\"col-xs-6\">         <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>       </div>     </div>     <div class=\"row\">       <div class=\"col-xs-4\">         <label><input type=\"checkbox\" name=\"personality\"> Loving</label>       </div>       <div class=\"col-xs-4\">         <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>       </div>       <div class=\"col-xs-4\">         <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>       </div>     </div>     <input type=\"text\" class=\"form-control\" placeholder=\"cat photo URL\" required>     <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-paper-plane\"></i> Submit</button>   </form> </div>',4),(172,'bad87fee1348bd9aec908846','Create a Bootstrap Headline','Now let\'s build something from scratch to practice our HTML, CSS and Bootstrap skills.<br><br>We\'ll build a jQuery playground, which we\'ll soon put to use in our jQuery challenges.<br><br>To start with, create an <code>h3</code> element, with the text <code>jQuery Playground</code>.<br><br>Color your <code>h3</code> element with the <code>text-primary</code> Bootstrap class, and center it with the <code>text-center</code> Bootstrap class.<br><br>',' <h3 class=\"text-primary text-center\">jQuery Playground</h3>  ',4),(173,'bad87fee1348bd9aec908746','House our page within a Bootstrap container-fluid div','Now let\'s make sure all the content on your page is mobile-responsive.<br><br>Let\'s nest your <code>h3</code> element within a <code>div</code> element with the class <code>container-fluid</code>.<br><br>',' <div class=\"container-fluid\">   <h3 class=\"text-primary text-center\">jQuery Playground</h3>  </div> ',4),(174,'bad87fee1348bd9bec908846','Create a Bootstrap Row','Now we\'ll create a Bootstrap row for our inline elements.<br><br>Create a <code>div</code> element below the <code>h3</code> tag, with a class of <code>row</code>.<br><br>',' <div class=\"container-fluid\">   <h3 class=\"text-primary text-center\">jQuery Playground</h3>   <div class=\"row\">     </div> </div>',4),(175,'bad87fee1348bd9aec908847','Split Your Bootstrap Row','Now that we have a Bootstrap Row, let\'s split it into two columns to house our elements.<br><br>Create two <code>div</code> elements within your row, both with the class <code>col-xs-6</code>.<br><br>',' <div class=\"container-fluid\">   <h3 class=\"text-primary text-center\">jQuery Playground</h3>   <div class=\"row\">     <div class=\"col-xs-6\">      </div>     <div class=\"col-xs-6\">      </div>   </div> </div>',4),(176,'bad87fee1348bd9aec908848','Create Bootstrap Wells','Bootstrap has a class called <code>well</code> that can create a visual sense of depth for your columns.<br><br>Nest one <code>div</code> element with the class <code>well</code> within each of your <code>col-xs-6</code> <code>div</code> elements.<br><br>',' <div class=\"container-fluid\">   <h3 class=\"text-primary text-center\">jQuery Playground</h3>   <div class=\"row\">     <div class=\"col-xs-6\">       <div class=\"well\">          </div>     </div>     <div class=\"col-xs-6\">       <div class=\"well\">          </div>     </div>   </div> </div>',4),(177,'bad87fee1348bd9aec908849','Add Elements within Your Bootstrap Wells','Now we\'re several <code>div</code> elements deep on each column of our row. This is as deep as we\'ll need to go. Now we can add our <code>button</code> elements.<br><br>Nest three <code>button</code> elements within each of your <code>well</code> <code>div</code> elements.<br><br>',' <div class=\"container-fluid\">   <h3 class=\"text-primary text-center\">jQuery Playground</h3>   <div class=\"row\">     <div class=\"col-xs-6\">       <div class=\"well\">         <button></button>         <button></button>         <button></button>       </div>     </div>     <div class=\"col-xs-6\">       <div class=\"well\">         <button></button>         <button></button>         <button></button>       </div>     </div>   </div> </div>',4),(178,'bad87fee1348bd9aec908850','Apply the Default Bootstrap Button Style','Bootstrap has another button class called <code>btn-default</code>.<br><br>Apply both the <code>btn</code> and <code>btn-default</code> classes to each of your <code>button</code> elements.<br><br>',' <div class=\"container-fluid\">   <h3 class=\"text-primary text-center\">jQuery Playground</h3>   <div class=\"row\">     <div class=\"col-xs-6\">       <div class=\"well\">         <button class=\"btn btn-default\"></button>         <button class=\"btn btn-default\"></button>         <button class=\"btn btn-default\"></button>       </div>     </div>     <div class=\"col-xs-6\">       <div class=\"well\">         <button class=\"btn btn-default\"></button>         <button class=\"btn btn-default\"></button>         <button class=\"btn btn-default\"></button>       </div>     </div>   </div> </div>',4),(179,'bad87fee1348bd9aec908852','Create a Class to Target with jQuery Selectors','Not every class needs to have corresponding CSS. Sometimes we create classes just for the purpose of selecting these elements more easily using jQuery.<br><br>Give each of your <code>button</code> elements the class <code>target</code>.<br><br>',' <div class=\"container-fluid\">   <h3 class=\"text-primary text-center\">jQuery Playground</h3>   <div class=\"row\">     <div class=\"col-xs-6\">       <div class=\"well\">         <button class=\"btn btn-default target\"></button>         <button class=\"btn btn-default target\"></button>         <button class=\"btn btn-default target\"></button>       </div>     </div>     <div class=\"col-xs-6\">       <div class=\"well\">         <button class=\"btn btn-default target\"></button>         <button class=\"btn btn-default target\"></button>         <button class=\"btn btn-default target\"></button>       </div>     </div>   </div> </div>',4),(180,'bad87fee1348bd9aec908853','Add id Attributes to Bootstrap Elements','Recall that in addition to class attributes, you can give each of your elements an <code>id</code> attribute.<br><br>Each id must be unique to a specific element and used only once per page.<br><br>Let\'s give a unique id to each of our <code>div</code> elements of class <code>well</code>.<br><br>Remember that you can give an element an id like this:<br><br><code>&#60;div class=\"well\" id=\"center-well\"&#62;</code><br><br>Give the well on the left the id of <code>left-well</code>. Give the well on the right the id of <code>right-well</code>.<br><br>',' <div class=\"container-fluid\">   <h3 class=\"text-primary text-center\">jQuery Playground</h3>   <div class=\"row\">     <div class=\"col-xs-6\">        <div class=\"well\" id=\"left-well\">         <button class=\"btn btn-default target\"></button>         <button class=\"btn btn-default target\"></button>         <button class=\"btn btn-default target\"></button>       </div>     </div>     <div class=\"col-xs-6\">        <div class=\"well\" id=\"right-well\">         <button class=\"btn btn-default target\"></button>         <button class=\"btn btn-default target\"></button>         <button class=\"btn btn-default target\"></button>       </div>     </div>   </div> </div>',4),(181,'bad87fee1348bd9aec908854','Label Bootstrap Wells','For the sake of clarity, let\'s label both of our wells with their ids.<br><br>Above your left-well, inside its <code>col-xs-6</code> <code>div</code> element, add a <code>h4</code> element with the text <code>#left-well</code>.<br><br>Above your right-well, inside its <code>col-xs-6</code> <code>div</code> element, add a <code>h4</code> element with the text <code>#right-well</code>.<br><br>',' <div class=\"container-fluid\">   <h3 class=\"text-primary text-center\">jQuery Playground</h3>   <div class=\"row\">     <div class=\"col-xs-6\">       <h4>#left-well</h4>       <div class=\"well\" id=\"left-well\">         <button class=\"btn btn-default target\"></button>         <button class=\"btn btn-default target\"></button>         <button class=\"btn btn-default target\"></button>       </div>     </div>     <div class=\"col-xs-6\">       <h4>#right-well</h4>       <div class=\"well\" id=\"right-well\">         <button class=\"btn btn-default target\"></button>         <button class=\"btn btn-default target\"></button>         <button class=\"btn btn-default target\"></button>       </div>     </div>   </div> </div>',4),(182,'bad87fee1348bd9aec908855','Give Each Element a Unique id','We will also want to be able to use jQuery to target each button by its unique id.<br><br>Give each of your buttons a unique id, starting with <code>target1</code> and ending with <code>target6</code>.<br><br>Make sure that <code>target1</code> to <code>target3</code> are in <code>#left-well</code>, and <code>target4</code> to <code>target6</code> are in <code>#right-well</code>.<br><br>',' <div class=\"container-fluid\">   <h3 class=\"text-primary text-center\">jQuery Playground</h3>   <div class=\"row\">     <div class=\"col-xs-6\">       <h4>#left-well</h4>       <div class=\"well\" id=\"left-well\">         <button class=\"btn btn-default target\" id=\"target1\"></button>         <button class=\"btn btn-default target\" id=\"target2\"></button>         <button class=\"btn btn-default target\" id=\"target3\"></button>       </div>     </div>     <div class=\"col-xs-6\">       <h4>#right-well</h4>       <div class=\"well\" id=\"right-well\">         <button class=\"btn btn-default target\" id=\"target4\"></button>         <button class=\"btn btn-default target\" id=\"target5\"></button>         <button class=\"btn btn-default target\" id=\"target6\"></button>       </div>     </div>   </div> </div>',4),(183,'bad87fee1348bd9aec908856','Label Bootstrap Buttons','Just like we labeled our wells, we want to label our buttons.<br><br>Give each of your <code>button</code> elements text that corresponds to its <code>id</code>\'s selector.<br><br>',' <div class=\"container-fluid\">   <h3 class=\"text-primary text-center\">jQuery Playground</h3>   <div class=\"row\">     <div class=\"col-xs-6\">       <h4>#left-well</h4>       <div class=\"well\" id=\"left-well\">         <button class=\"btn btn-default target\" id=\"target1\">#target1</button>         <button class=\"btn btn-default target\" id=\"target2\">#target2</button>         <button class=\"btn btn-default target\" id=\"target3\">#target3</button>       </div>     </div>     <div class=\"col-xs-6\">       <h4>#right-well</h4>       <div class=\"well\" id=\"right-well\">         <button class=\"btn btn-default target\" id=\"target4\">#target4</button>         <button class=\"btn btn-default target\" id=\"target5\">#target5</button>         <button class=\"btn btn-default target\" id=\"target6\">#target6</button>       </div>     </div>   </div> </div>',4),(184,'bad87fee1348bd9aec908857','Use Comments to Clarify Code','When we start using jQuery, we will modify HTML elements without needing to actually change them in HTML.<br><br>Let\'s make sure that everyone knows they shouldn\'t actually modify any of this code directly.<br><br>Remember that you can start a comment with <code>&#60;!--</code> and end a comment with <code>--&#62;</code><br><br>Add a comment at the top of your HTML that says <code>Only change code above this line.</code><br><br>','',4),(185,'bd7123c9c441eddfaeb4bdef','Comment Your JavaScript Code','Comments are lines of code that JavaScript will intentionally ignore. Comments are a great way to leave notes to yourself and to other people who will later need to figure out what that code does.<br><br>There are two ways to write comments in JavaScript:<br><br>Using <code>//</code> will tell JavaScript to ignore the remainder of the text on the current line:<br><br><blockquote>// This is an in-line comment.</blockquote><br><br>You can make a multi-line comment beginning with <code>/*</code> and ending with <code>*/</code>:<br><br><blockquote>/* This is a<br>multi-line comment */</blockquote><br><br><strong>Best Practice</strong><br>As you write code, you should regularly add comments to clarify the function of parts of your code. Good commenting can help communicate the intent of your code&mdash;both for others <em>and</em> for your future self.<br><br> <hr>Try creating one of each type of comment.<br><br>','// Example<br>var ourName;<br><br>// Declare myName below this line<br><br>',5),(186,'bd7123c9c443eddfaeb5bdef','Declare JavaScript Variables','In computer science, <dfn>data</dfn> is anything that is meaningful to the computer. JavaScript provides seven different <dfn>data types</dfn> which are <code>undefined</code>, <code>null</code>, <code>boolean</code>, <code>string</code>, <code>symbol</code>, <code>number</code>, and <code>object</code>.<br><br>For example, computers distinguish between numbers, such as the number <code>12</code>, and <code>strings</code>, such as <code>\"12\"</code>, <code>\"dog\"</code>, or <code>\"123 cats\"</code>, which are collections of characters. Computers can perform mathematical operations on a number, but not on a string.<br><br><dfn>Variables</dfn> allow computers to store and manipulate data in a dynamic fashion. They do this by using a \"label\" to point to the data rather than using the data itself. Any of the seven data types may be stored in a variable.<br><br><code>Variables</code> are similar to the x and y variables you use in mathematics, which means they\'re a simple name to represent the data we want to refer to. Computer <code>variables</code> differ from mathematical variables in that they can store different values at different times.<br><br>We tell JavaScript to create or <dfn>declare</dfn> a variable by putting the keyword <code>var</code> in front of it, like so:<br><br><blockquote>var ourName;</blockquote><br><br>creates a <code>variable</code> called <code>ourName</code>. In JavaScript we end statements with semicolons.<br><br><code>Variable</code> names can be made up of numbers, letters, and <code>$</code> or <code>_</code>, but may not contain spaces or start with a number.<br><br> <hr>Use the <code>var</code> keyword to create a variable called <code>myName</code>.<br><br><strong>Hint</strong><br>Look at the <code>ourName</code> example if you get stuck.<br><br>','// Setup<br>var a;<br>var b = 2;<br><br>// Only change code below this line<br><br>',5),(187,'56533eb9ac21ba0edf2244a8','Storing Values with the Assignment Operator','In JavaScript, you can store a value in a variable with the <dfn>assignment</dfn> operator.<br><br><code>myVariable = 5;</code><br><br>This assigns the <code>Number</code> value <code>5</code> to <code>myVariable</code>.<br><br>Assignment always goes from right to left. Everything to the right of the <code>=</code> operator is resolved before the value is assigned to the variable to the left of the operator.<br><br><blockquote>myVar = 5;<br>myNum = myVar;</blockquote><br><br>This assigns <code>5</code> to <code>myVar</code> and then resolves <code>myVar</code> to <code>5</code>  again and assigns it to <code>myNum</code>.<br><br> <hr>Assign the value <code>7</code> to variable <code>a</code>.<br><br>Assign the contents of <code>a</code> to variable <code>b</code>.<br><br>','// Example<br>var ourVar = 19;<br><br>// Only change code below this line<br><br>',5),(188,'56533eb9ac21ba0edf2244a9','Initializing Variables with the Assignment Operator','It is common to <dfn>initialize</dfn> a variable to an initial value in the same line as it is declared.<br><br><code>var myVar = 0;</code><br><br>Creates a new variable called <code>myVar</code> and assigns it an initial value of <code>0</code>.<br><br> <hr>Define a variable <code>a</code> with <code>var</code> and initialize it to a value of <code>9</code>.<br><br>','// Initialize these three variables<br>var a;<br>var b;<br>var c;<br><br>// Do not change code below this line<br><br>a = a + 1;<br>b = b + 5;<br>c = c + \" String!\";<br><br>',5),(189,'56533eb9ac21ba0edf2244aa','Understanding Uninitialized Variables','When JavaScript variables are declared, they have an initial value of <code>undefined</code>. If you do a mathematical operation on an <code>undefined</code> variable your result will be <code>NaN</code> which means <dfn>\"Not a Number\"</dfn>. If you concatenate a string with an <code>undefined</code> variable, you will get a literal <dfn>string</dfn> of <code>\"undefined\"</code>.<br><br> <hr>Initialize the three variables <code>a</code>, <code>b</code>, and <code>c</code> with <code>5</code>, <code>10</code>, and <code>\"I am a\"</code> respectively so that they will not be <code>undefined</code>.<br><br>','// Declarations<br>var StUdLyCapVaR;<br>var properCamelCase;<br>var TitleCaseOver;<br><br>// Assignments<br>STUDLYCAPVAR = 10;<br>PRoperCAmelCAse = \"A String\";<br>tITLEcASEoVER = 9000;<br>',5),(190,'56533eb9ac21ba0edf2244ab','Understanding Case Sensitivity in Variables','In JavaScript all variables and function names are case sensitive. This means that capitalization matters.<br><br><code>MYVAR</code> is not the same as <code>MyVar</code> nor <code>myvar</code>. It is possible to have multiple distinct variables with the same name but different casing. It is strongly recommended that for the sake of clarity, you <em>do not</em> use this language feature.<br><br><h4>Best Practice</h4><br><br>Write variable names in JavaScript in <dfn>camelCase</dfn>. In <dfn>camelCase</dfn>, multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized.<br><br><strong>Examples:</strong><br><br><blockquote>var someVariable;<br>var anotherVariableName;<br>var thisVariableNameIsSoLong;</blockquote><br><br> <hr>Modify the existing declarations and assignments so their names use <dfn>camelCase</dfn>.<br>Do not create any new variables.<br><br>','var sum = 10 + 0;<br><br>',5),(191,'cf1111c1c11feddfaeb3bdef','Add Two Numbers with JavaScript','<code>Number</code> is a data type in JavaScript which represents numeric data.<br><br>Now let\'s try to add two numbers using JavaScript.<br><br>JavaScript uses the <code>+</code> symbol as addition operation when placed between two numbers.<br><br><strong>Example</strong><br><br><blockquote>myVar = 5 + 10; // assigned 15</blockquote><br><br> <hr>Change the <code>0</code> so that sum will equal <code>20</code>.<br><br>','var difference = 45 - 0;<br><br><br>',5),(192,'cf1111c1c11feddfaeb4bdef','Subtract One Number from Another with JavaScript','We can also subtract one number from another.<br><br>JavaScript uses the <code>-</code> symbol for subtraction.<br><br><br><br><strong>Example</strong><br><br><blockquote>myVar = 12 - 6; // assigned 6</blockquote><br><br><br><br> <hr>Change the <code>0</code> so the difference is <code>12</code>.<br><br>','var product = 8 * 0;<br><br><br>',5),(193,'cf1231c1c11feddfaeb5bdef','Multiply Two Numbers with JavaScript','We can also multiply one number by another.<br><br>JavaScript uses the <code>*</code> symbol for multiplication of two numbers.<br><br><br><br><strong>Example</strong><br><br><blockquote>myVar = 13 * 13; // assigned 169</blockquote><br><br><br><br> <hr>Change the <code>0</code> so that product will equal <code>80</code>.<br><br>','var quotient = 66 / 0;<br><br><br>',5),(194,'cf1111c1c11feddfaeb6bdef','Divide One Number by Another with JavaScript','We can also divide one number by another.<br><br>JavaScript uses the <code>/</code> symbol for division.<br><br><br><br><strong>Example</strong><br><br><blockquote>myVar = 16 / 2; // assigned 8</blockquote><br><br><br><br> <hr>Change the <code>0</code> so that the <code>quotient</code> is equal to <code>2</code>.<br><br>','var myVar = 87;<br><br>// Only change code below this line<br>myVar = myVar + 1;<br><br>',5),(195,'56533eb9ac21ba0edf2244ac','Increment a Number with JavaScript','You can easily <dfn>increment</dfn> or add one to a variable with the <code>++</code> operator.<br><br><code>i++;</code><br><br>is the equivalent of<br><br><code>i = i + 1;</code><br><br><strong>Note</strong><br>The entire line becomes <code>i++;</code>, eliminating the need for the equal sign.<br><br> <hr>Change the code to use the <code>++</code> operator on <code>myVar</code>.<br><br><strong>Hint</strong><br>Learn more about <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment_()\" target=\"_blank\">Arithmetic operators - Increment (++)</a>.<br><br>','var myVar = 11;<br><br>// Only change code below this line<br>myVar = myVar - 1;<br><br>',5),(196,'56533eb9ac21ba0edf2244ad','Decrement a Number with JavaScript','You can easily <dfn>decrement</dfn> or decrease a variable by one with the <code>--</code> operator.<br><br><code>i--;</code><br><br>is the equivalent of<br><br><code>i = i - 1;</code><br><br><strong>Note</strong><br>The entire line becomes <code>i--;</code>, eliminating the need for the equal sign.<br><br> <hr>Change the code to use the <code>--</code> operator on <code>myVar</code>.<br><br>','var ourDecimal = 5.7;<br><br>// Only change code below this line<br><br><br>',5),(197,'cf1391c1c11feddfaeb4bdef','Create Decimal Numbers with JavaScript','We can store decimal numbers in variables too. Decimal numbers are sometimes referred to as <dfn>floating point</dfn> numbers or <dfn>floats</dfn>.<br><br><strong>Note</strong><br>Not all real numbers can accurately be represented in <dfn>floating point</dfn>. This can lead to rounding errors. <a href=\"https://en.wikipedia.org/wiki/Floating_point#Accuracy_problems\" target=\"_blank\">Details Here</a>.<br><br> <hr>Create a variable <code>myDecimal</code> and give it a decimal value with a fractional part (e.g. <code>5.7</code>).<br><br>','var product = 2.0 * 0.0;<br><br><br>',5),(198,'bd7993c9c69feddfaeb7bdef','Multiply Two Decimals with JavaScript','In JavaScript, you can also perform calculations with decimal numbers, just like whole numbers.<br><br>Let\'s multiply two decimals together to get their product.<br><br> <hr>Change the <code>0.0</code> so that product will equal <code>5.0</code>.<br><br>','var quotient = 0.0 / 2.0; // Fix this line<br><br><br>',5),(199,'bd7993c9ca9feddfaeb7bdef','Divide One Decimal by Another with JavaScript','Now let\'s divide one decimal by another.<br><br> <hr>Change the <code>0.0</code> so that <code>quotient</code> will equal to <code>2.2</code>.<br><br>','// Only change code below this line<br><br>var remainder;<br><br>',5),(200,'56533eb9ac21ba0edf2244ae','Finding a Remainder in JavaScript','The <dfn>remainder</dfn> operator <code>%</code> gives the remainder of the division of two numbers.<br><br><strong>Example</strong><br><br><blockquote>5 % 2 = 1 because<br>Math.floor(5 / 2) = 2 (Quotient)<br>2 * 2 = 4<br>5 - 4 = 1 (Remainder)</blockquote><br><br><strong>Usage</strong><br>In mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by <code>2</code>.<br><br><blockquote>17 % 2 = 1 (17 is Odd)<br>48 % 2 = 0 (48 is Even)</blockquote><br><br><strong>Note</strong><br>The <dfn>remainder</dfn> operator is sometimes incorrectly referred to as  the \"modulus\" operator. It is very similar to modulus, but does not work properly with negative numbers.<br><br> <hr>Set <code>remainder</code> equal to the remainder of <code>11</code> divided by <code>3</code> using the <dfn>remainder</dfn> (<code>%</code>) operator.<br><br>','var a = 3;<br>var b = 17;<br>var c = 12;<br><br>// Only modify code below this line<br><br>a = a + 12;<br>b = 9 + b;<br>c = c + 7;<br><br>',5),(201,'56533eb9ac21ba0edf2244af','Compound Assignment With Augmented Addition','In programming, it is common to use assignments to modify the contents of a variable. Remember that everything to the right of the equals sign is evaluated first, so we can say:<br><br><code>myVar = myVar + 5;</code><br><br>to add <code>5</code> to <code>myVar</code>. Since this is such a common pattern, there are operators which do both a mathematical operation and assignment in one step.<br><br>One such operator is the <code>+=</code> operator.<br><br><blockquote>var myVar = 1;<br>myVar += 5;<br>console.log(myVar); // Returns 6</blockquote><br><br> <hr>Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>+=</code> operator.<br><br>','var a = 11;<br>var b = 9;<br>var c = 3;<br><br>// Only modify code below this line<br><br>a = a - 6;<br>b = b - 15;<br>c = c - 1;<br><br><br>',5),(202,'56533eb9ac21ba0edf2244b0','Compound Assignment With Augmented Subtraction','Like the <code>+=</code> operator, <code>-=</code> subtracts a number from a variable.<br><br><code>myVar = myVar - 5;</code><br><br>will subtract <code>5</code> from <code>myVar</code>. This can be rewritten as: <br><br><code>myVar -= 5;</code><br><br> <hr>Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>-=</code> operator.<br><br>','var a = 5;<br>var b = 12;<br>var c = 4.6;<br><br>// Only modify code below this line<br><br>a = a * 5;<br>b = 3 * b;<br>c = c * 10;<br><br><br>',5),(203,'56533eb9ac21ba0edf2244b1','Compound Assignment With Augmented Multiplication','The <code>*=</code> operator multiplies a variable by a number.<br><br><code>myVar = myVar * 5;</code><br><br>will multiply <code>myVar</code> by <code>5</code>. This can be rewritten as: <br><br><code>myVar *= 5;</code><br><br> <hr>Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>*=</code> operator.<br><br>','var a = 48;<br>var b = 108;<br>var c = 33;<br><br>// Only modify code below this line<br><br>a = a / 12;<br>b = b / 4;<br>c = c / 11;<br><br>',5),(204,'56533eb9ac21ba0edf2244b2','Compound Assignment With Augmented Division','The <code>/=</code> operator divides a variable by another number.<br><br><code>myVar = myVar / 5;</code><br><br>Will divide <code>myVar</code> by <code>5</code>. This can be rewritten as: <br><br><code>myVar /= 5;</code><br><br> <hr>Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>/=</code> operator.<br><br>','// Example<br>var firstName = \"Alan\";<br>var lastName = \"Turing\";<br><br>// Only change code below this line<br><br><br>',5),(205,'bd7123c9c444eddfaeb5bdef','Declare String Variables','Previously we have used the code<br><br><code>var myName = \"your name\";</code><br><br><code>\"your name\"</code> is called a <dfn>string</dfn> <dfn>literal</dfn>. It is a string because it is a series of zero or more characters enclosed in single or double quotes.<br><br> <hr>Create two new <code>string</code> variables: <code>myFirstName</code> and <code>myLastName</code> and assign them the values of your first and last name, respectively.<br><br>','var myStr = \"\"; // Change this line<br><br><br>',5),(206,'56533eb9ac21ba0edf2244b5','Escaping Literal Quotes in Strings','When you are defining a string you must start and end with a single or double quote. What happens when you need a literal quote: <code>\"</code> or <code>\'</code> inside of your string?<br><br>In JavaScript, you can <dfn>escape</dfn> a quote from considering it as an end of string quote by placing a <dfn>backslash</dfn> (<code>\\</code>) in front of the quote.<br><br><code>var sampleStr = \"Alan said, \\\"Peter is learning JavaScript\\\".\";</code><br><br>This signals to JavaScript that the following quote is not the end of the string, but should instead appear inside the string. So if you were to print this to the console, you would get:<br><br><code>Alan said, \"Peter is learning JavaScript\".</code><br><br> <hr>Use <dfn>backslashes</dfn> to assign a string to the <code>myStr</code> variable so that if you were to print it to the console, you would see:<br><br><code>I am a \"double quoted\" string inside \"double quotes\".</code><br><br>','var myStr = \"<a href=\"http://www.example.com\" target=\"_blank\">Link</a>\";<br><br><br>',5),(207,'56533eb9ac21ba0edf2244b4','Quoting Strings with Single Quotes','<dfn>String</dfn> values in JavaScript may be written with single or double quotes, as long as you start and end with the same type of quote. Unlike some other programming languages, single and double quotes work the same in JavaScript.<br><br><blockquote>doubleQuoteStr = \"This is a string\"; <br/>singleQuoteStr = \'This is also a string\';</blockquote><br><br>The reason why you might want to use one type of quote over the other is if you want to use both in a string. This might happen if you want to save a conversation in a string and have the conversation in quotes. Another use for it would be saving an <code>&#60;a&#62;</code> tag with various attributes in quotes, all within a string.<br><br><blockquote>conversation = \'Finn exclaims to Jake, \"Algebraic!\"\';</blockquote><br><br>However, this becomes a problem if you need to use the outermost quotes within it. Remember, a string has the same kind of quote at the beginning and end. But if you have that same quote somewhere in the middle, the string will stop early and throw an error.<br><br><blockquote>goodStr = \'Jake asks Finn, \"Hey, let\\\'s go on an adventure?\"\'; <br/>badStr = \'Finn responds, \"Let\'s go!\"\'; // Throws an error</blockquote><br><br>In the <dfn>goodStr</dfn> above, you can use both quotes safely by using the backslash <code>\\</code> as an escape character.<br><br><strong>Note</strong><br/>The backslash <code>\\</code> should not be be confused with the forward slash <code>/</code>. They do not do the same thing.<br><br> <hr>Change the provided string to a string with single quotes at the beginning and end and no escape characters.<br><br>Right now, the <code>&#60;a&#62;</code> tag in the string uses double quotes everywhere. You will need to change the outer quotes to single quotes so you can remove the escape characters.<br><br>','var myStr; // Change this line<br><br><br>',5),(208,'56533eb9ac21ba0edf2244b6','Escape Sequences in Strings','Quotes are not the only characters that can be <dfn>escaped</dfn> inside a string. There are two reasons to use escaping characters: First is to allow you to use characters you might not otherwise be able to type out, such as a backspace. Second is to allow you to represent multiple quotes in a string without JavaScript misinterpreting what you mean. We learned this in the previous challenge.<br><br><table class=\"table table-striped\"><thead><tr><th>Code</th><th>Output</th></tr></thead><tbody><tr><td><code>\\\'</code></td><td>single quote</td></tr><tr><td><code>\\\"</code></td><td>double quote</td></tr><tr><td><code>\\\\</code></td><td>backslash</td></tr><tr><td><code>\\n</code></td><td>newline</td></tr><tr><td><code>\\r</code></td><td>carriage return</td></tr><tr><td><code>\\t</code></td><td>tab</td></tr><tr><td><code>\\b</code></td><td>backspace</td></tr><tr><td><code>\\f</code></td><td>form feed</td></tr></tbody></table><br><br><em>Note that the backslash itself must be escaped in order to display as a backslash.</em><br><br> <hr>Assign the following three lines of text into the single variable <code>myStr</code> using escape sequences.<br><br><blockquote>FirstLine<br/>&nbsp;&nbsp;&nbsp;&nbsp;\\SecondLine<br/>ThirdLine</blockquote><br><br>You will need to use escape sequences to insert special characters correctly. You will also need to follow the spacing as it looks above, with no spaces between escape sequences or words.<br><br>Here is the text with the escape sequences written out.<br><br><q>FirstLine<code>newline</code><code>tab</code><code>backslash</code>SecondLine<code>newline</code>ThirdLine</q><br><br>','// Example<br>var ourStr = \"I come first. \" + \"I come second.\";<br><br>// Only change code below this line<br><br>var myStr;<br><br><br>',5),(209,'56533eb9ac21ba0edf2244b7','Concatenating Strings with Plus Operator','In JavaScript, when the <code>+</code> operator is used with a <code>String</code> value, it is called the <dfn>concatenation</dfn> operator. You can build a new string out of other strings by <dfn>concatenating</dfn> them together.<br><br><strong>Example</strong><br><br><blockquote>\'My name is Alan,\' + \' I concatenate.\'</blockquote><br><br><strong>Note</strong><br>Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you\'ll need to add them yourself.<br><br> <hr>Build <code>myStr</code> from the strings <code>\"This is the start. \"</code> and <code>\"This is the end.\"</code> using the <code>+</code> operator.<br><br>','// Example<br>var ourStr = \"I come first. \";<br>ourStr += \"I come second.\";<br><br>// Only change code below this line<br><br>var myStr;<br><br><br>',5),(210,'56533eb9ac21ba0edf2244b8','Concatenating Strings with the Plus Equals Operator','We can also use the <code>+=</code> operator to <dfn>concatenate</dfn> a string onto the end of an existing string variable. This can be very helpful to break a long string over several lines.<br><br><strong>Note</strong><br>Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you\'ll need to add them yourself.<br><br> <hr>Build <code>myStr</code> over several lines by concatenating these two strings: <code>\"This is the first sentence. \"</code> and <code>\"This is the second sentence.\"</code> using the <code>+=</code> operator. Use the <code>+=</code> operator similar to how it is shown in the editor. Start by assigning the first string to <code>myStr</code>, then add on the second string.<br><br>','// Example<br>var ourName = \"freeCodeCamp\";<br>var ourStr = \"Hello, our name is \" + ourName + \", how are you?\";<br><br>// Only change code below this line<br>var myName;<br>var myStr;<br><br><br>',5),(211,'56533eb9ac21ba0edf2244b9','Constructing Strings with Variables','Sometimes you will need to build a string, <a href=\"https://en.wikipedia.org/wiki/Mad_Libs\" target=\"_blank\">Mad Libs</a> style. By using the concatenation operator (<code>+</code>), you can insert one or more variables into a string you\'re building.<br><br> <hr>Set <code>myName</code> to a string equal to your name and build <code>myStr</code> with <code>myName</code> between the strings <code>\"My name is \"</code> and <code>\" and I am well!\"</code><br><br>','// Example<br>var anAdjective = \"awesome!\";<br>var ourStr = \"freeCodeCamp is \";<br>ourStr += anAdjective;<br><br>// Only change code below this line<br><br>var someAdjective;<br>var myStr = \"Learning to code is \";<br><br>',5),(212,'56533eb9ac21ba0edf2244ed','Appending Variables to Strings','Just as we can build a string over multiple lines out of string <dfn>literals</dfn>, we can also append variables to a string using the plus equals (<code>+=</code>) operator.<br><br> <hr>Set <code>someAdjective</code> and append it to <code>myStr</code> using the <code>+=</code> operator.<br><br>','// Example<br>var firstNameLength = 0;<br>var firstName = \"Ada\";<br><br>firstNameLength = firstName.length;<br><br>// Setup<br>var lastNameLength = 0;<br>var lastName = \"Lovelace\";<br><br>// Only change code below this line.<br><br>lastNameLength = lastName;<br><br><br>',5),(213,'bd7123c9c448eddfaeb5bdef','Find the Length of a String','You can find the length of a <code>String</code> value by writing <code>.length</code> after the string variable or string literal.<br><br><code>\"Alan Peter\".length; // 10</code><br><br>For example, if we created a variable <code>var firstName = \"Charles\"</code>, we could find out how long the string <code>\"Charles\"</code> is by using the <code>firstName.length</code> property.<br><br> <hr>Use the <code>.length</code> property to count the number of characters in the <code>lastName</code> variable and assign it to <code>lastNameLength</code>.<br><br>','// Example<br>var firstLetterOfFirstName = \"\";<br>var firstName = \"Ada\";<br><br>firstLetterOfFirstName = firstName[0];<br><br>// Setup<br>var firstLetterOfLastName = \"\";<br>var lastName = \"Lovelace\";<br><br>// Only change code below this line<br>firstLetterOfLastName = lastName;<br><br><br>',5),(214,'bd7123c9c549eddfaeb5bdef','Use Bracket Notation to Find the First Character in a String','<code>Bracket notation</code> is a way to get a character at a specific <code>index</code> within a string.<br><br>Most modern programming languages, like JavaScript, don\'t start counting at 1 like humans do. They start at 0. This is referred to as <dfn>Zero-based</dfn> indexing.<br><br>For example, the character at index 0 in the word \"Charles\" is \"C\". So if <code>var firstName = \"Charles\"</code>, you can get the value of the first letter of the string by using <code>firstName[0]</code>.<br><br> <hr>Use <dfn>bracket notation</dfn> to find the first character in the <code>lastName</code> variable and assign it to <code>firstLetterOfLastName</code>.<br><br><strong>Hint</strong><br>Try looking at the <code>firstLetterOfFirstName</code> variable declaration if you get stuck.<br><br>','// Setup<br>var myStr = \"Jello World\";<br><br>// Only change code below this line<br><br>myStr[0] = \"H\"; // Fix Me<br><br><br>',5),(215,'56533eb9ac21ba0edf2244ba','Understand String Immutability','In JavaScript, <code>String</code> values are <dfn>immutable</dfn>, which means that they cannot be altered once created.<br><br>For example, the following code:<br><br><blockquote>var myStr = \"Bob\";<br>myStr[0] = \"J\";</blockquote><br><br>cannot change the value of <code>myStr</code> to \"Job\", because the contents of <code>myStr</code> cannot be altered. Note that this does <em>not</em> mean that <code>myStr</code> cannot be changed, just that the individual characters of a <dfn>string literal</dfn> cannot be changed. The only way to change <code>myStr</code> would be to assign it with a new string, like this:<br><br><blockquote>var myStr = \"Bob\";<br>myStr = \"Job\";</blockquote><br><br> <hr>Correct the assignment to <code>myStr</code> so it contains the string value of <code>Hello World</code> using the approach shown in the example above.<br><br>','// Example<br>var firstName = \"Ada\";<br>var secondLetterOfFirstName = firstName[1];<br><br>// Setup<br>var lastName = \"Lovelace\";<br><br>// Only change code below this line.<br>var thirdLetterOfLastName = lastName;<br><br><br>',5),(216,'bd7123c9c450eddfaeb5bdef','Use Bracket Notation to Find the Nth Character in a String','You can also use <dfn>bracket notation</dfn> to get the character at other positions within a string.<br><br>Remember that computers start counting at <code>0</code>, so the first character is actually the zeroth character.<br><br> <hr>Let\'s try to set <code>thirdLetterOfLastName</code> to equal the third letter of the <code>lastName</code> variable using bracket notation.<br><br><strong>Hint</strong><br>Try looking at the <code>secondLetterOfFirstName</code> variable declaration if you get stuck.<br><br>','// Example<br>var firstName = \"Ada\";<br>var lastLetterOfFirstName = firstName[firstName.length - 1];<br><br>// Setup<br>var lastName = \"Lovelace\";<br><br>// Only change code below this line.<br>var lastLetterOfLastName = lastName;<br><br><br>',5),(217,'bd7123c9c451eddfaeb5bdef','Use Bracket Notation to Find the Last Character in a String','In order to get the last letter of a string, you can subtract one from the string\'s length.<br><br>For example, if <code>var firstName = \"Charles\"</code>, you can get the value of the last letter of the string by using <code>firstName[firstName.length - 1]</code>.<br><br> <hr>Use <dfn>bracket notation</dfn> to find the last character in the <code>lastName</code> variable.<br><br><strong>Hint</strong><br>Try looking at the <code>lastLetterOfFirstName</code> variable declaration if you get stuck.<br><br>','// Example<br>var firstName = \"Ada\";<br>var thirdToLastLetterOfFirstName = firstName[firstName.length - 3];<br><br>// Setup<br>var lastName = \"Lovelace\";<br><br>// Only change code below this line<br>var secondToLastLetterOfLastName = lastName;<br><br><br>',5),(218,'bd7123c9c452eddfaeb5bdef','Use Bracket Notation to Find the Nth-to-Last Character in a String','You can use the same principle we just used to retrieve the last character in a string to retrieve the Nth-to-last character.<br><br>For example, you can get the value of the third-to-last letter of the <code>var firstName = \"Charles\"</code> string by using <code>firstName[firstName.length - 3]</code><br><br> <hr>Use <dfn>bracket notation</dfn> to find the second-to-last character in the <code>lastName</code> string.<br><br><strong>Hint</strong><br>Try looking at the <code>thirdToLastLetterOfFirstName</code> variable declaration if you get stuck.<br><br>','function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {<br>  // Your code below this line<br>  var result = \"\";<br><br>  // Your code above this line<br>  return result;<br>}<br><br>// Change the words here to test your function<br>wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\");<br>',5),(219,'56533eb9ac21ba0edf2244bb','Word Blanks','We will now use our knowledge of strings to build a \"<a href=\'https://en.wikipedia.org/wiki/Mad_Libs\' target=\'_blank\'>Mad Libs</a>\" style word game we\'re calling \"Word Blanks\". You will create an (optionally humorous) \"Fill in the Blanks\" style sentence.<br><br>In a \"Mad Libs\" game, you are provided sentences with some missing words, like nouns, verbs, adjectives and adverbs. You then fill in the missing pieces with words of your choice in a way that the completed sentence makes sense.<br><br>Consider this sentence - \"It was really <strong>____</strong>, and we <strong>____</strong> ourselves <strong>____</strong>\". This sentence has three missing pieces- an adjective, a verb and an adverb, and we can add words of our choice to complete it. We can then assign the completed sentence to a variable as follows:<br><br><blockquote>var sentence = \"It was really\" + \"hot\" + \", and we\" + \"laughed\" + \"ourselves\" + \"silly.\";</blockquote><br><br> <hr>In this challenge, we provide you with a noun, a verb, an adjective and an adverb. You need to form a complete sentence using words of your choice, along with the words we provide.<br><br>You will need to use the string concatenation operator <code>+</code> to build a new string, using the provided variables: <code>myNoun</code>, <code>myAdjective</code>, <code>myVerb</code>, and <code>myAdverb</code>. You will then assign the formed string to the <code>result</code> variable.<br><br>You will also need to account for spaces in your string, so that the final sentence has spaces between all the words. The result should be a complete sentence.<br><br>','// Example<br>var ourArray = [\"John\", 23];<br><br>// Only change code below this line.<br>var myArray = [];<br><br>',5),(220,'bd7993c9c69feddfaeb8bdef','Store Multiple Values in one Variable using JavaScript Arrays','With JavaScript <code>array</code> variables, we can store several pieces of data in one place.<br><br>You start an array declaration with an opening square bracket, end it with a closing square bracket, and put a comma between each entry, like this: <br><br><code>var sandwich = [\"peanut butter\", \"jelly\", \"bread\"]</code>.<br><br> <hr>Modify the new array <code>myArray</code> so that it contains both a <code>string</code> and a <code>number</code> (in that order).<br><br><strong>Hint</strong><br>Refer to the example code in the text editor if you get stuck.<br><br>','// Example<br>var ourArray = [[\"the universe\", 42], [\"everything\", 101010]];<br><br>// Only change code below this line.<br>var myArray = [];<br><br>',5),(221,'cf1111c1c11feddfaeb7bdef','Nest one Array within Another Array','You can also nest arrays within other arrays, like this: <code>[[\"Bulls\", 23], [\"White Sox\", 45]]</code>. This is also called a <dfn>Multi-dimensional Array<dfn>.<br><br> <hr>Create a nested array called <code>myArray</code>.<br><br>','// Example<br>var ourArray = [50,60,70];<br>var ourData = ourArray[0]; // equals 50<br><br>// Setup<br>var myArray = [50,60,70];<br><br>// Only change code below this line.<br><br>',5),(222,'56bbb991ad1ed5201cd392ca','Access Array Data with Indexes','We can access the data inside arrays using <code>indexes</code>.<br><br>Array indexes are written in the same bracket notation that strings use, except that instead of specifying a character, they are specifying an entry in the array. Like strings, arrays use <dfn>zero-based</dfn> indexing, so the first element in an array is element <code>0</code>.<br><br><strong>Example</strong><br><br><blockquote>var array = [50,60,70];<br>array[0]; // equals 50<br>var data = array[1];  // equals 60</blockquote><br><br><strong>Note</strong><br>There shouldn\'t be any spaces between the array name and the square brackets, like <code>array [0]</code>. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.<br><br> <hr>Create a variable called <code>myData</code> and set it to equal the first value of <code>myArray</code> using bracket notation.<br><br>','// Example<br>var ourArray = [18,64,99];<br>ourArray[1] = 45; // ourArray now equals [18,45,99].<br><br>// Setup<br>var myArray = [18,64,99];<br><br>// Only change code below this line.<br><br><br>',5),(223,'cf1111c1c11feddfaeb8bdef','Modify Array Data With Indexes','Unlike strings, the entries of arrays are <dfn>mutable</dfn> and can be changed freely.<br><br><strong>Example</strong><br><br><blockquote>var ourArray = [50,40,30];<br>ourArray[0] = 15; // equals [15,40,30]</blockquote><br><br><strong>Note</strong><br>There shouldn\'t be any spaces between the array name and the square brackets, like <code>array [0]</code>. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.<br><br> <hr>Modify the data stored at index <code>0</code> of <code>myArray</code> to a value of <code>45</code>.<br><br>','// Setup<br>var myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];<br><br>// Only change code below this line.<br>var myData = myArray[0][0];<br><br>',5),(224,'56592a60ddddeae28f7aa8e1','Access Multi-Dimensional Arrays With Indexes','One way to think of a <dfn>multi-dimensional</dfn> array, is as an <em>array of arrays</em>. When you use brackets to access your array, the first set of brackets refers to the entries in the outer-most (the first level) array, and each additional pair of brackets refers to the next level of entries inside.<br><br><strong>Example</strong><br><br><blockquote>var arr = [<br>&nbsp;&nbsp;[1,2,3],<br>&nbsp;&nbsp;[4,5,6],<br>&nbsp;&nbsp;[7,8,9],<br>&nbsp;&nbsp;[[10,11,12], 13, 14]<br>];<br>arr[3]; // equals [[10,11,12], 13, 14]<br>arr[3][0]; // equals [10,11,12]<br>arr[3][0][1]; // equals 11</blockquote><br><br><strong>Note</strong><br>There shouldn\'t be any spaces between the array name and the square brackets, like <code>array [0][0]</code> and even this <code>array [0] [0]</code> is not allowed. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.<br><br> <hr>Using bracket notation select an element from <code>myArray</code> such that <code>myData</code> is equal to <code>8</code>.<br><br>','// Example<br>var ourArray = [\"Stimpson\", \"J\", \"cat\"];<br>ourArray.push([\"happy\", \"joy\"]); <br>// ourArray now equals [\"Stimpson\", \"J\", \"cat\", [\"happy\", \"joy\"]]<br><br>// Setup<br>var myArray = [[\"John\", 23], [\"cat\", 2]];<br><br>// Only change code below this line.<br><br><br>',5),(225,'56bbb991ad1ed5201cd392cb','Manipulate Arrays With push()','An easy way to append data to the end of an array is via the <code>push()</code> function.<br><br><code>.push()</code> takes one or more <dfn>parameters</dfn> and \"pushes\" them onto the end of the array.<br><br><blockquote>var arr = [1,2,3];<br>arr.push(4);<br>// arr is now [1,2,3,4]</blockquote><br><br> <hr>Push <code>[\"dog\", 3]</code> onto the end of the <code>myArray</code> variable.<br><br>','// Example<br>var ourArray = [1,2,3];<br>var removedFromOurArray = ourArray.pop(); <br>// removedFromOurArray now equals 3, and ourArray now equals [1,2]<br><br>// Setup<br>var myArray = [[\"John\", 23], [\"cat\", 2]];<br><br>// Only change code below this line.<br>var removedFromMyArray;<br><br><br>',5),(226,'56bbb991ad1ed5201cd392cc','Manipulate Arrays With pop()','Another way to change the data in an array is with the <code>.pop()</code> function.<br><br><code>.pop()</code> is used to \"pop\" a value off of the end of an array. We can store this \"popped off\" value by assigning it to a variable. In other words, <code>.pop()</code> removes the last element from an array and returns that element.<br><br>Any type of entry can be \"popped\" off of an array - numbers, strings, even nested arrays.<br><br><blockquote><code>var threeArr = [1, 4, 6];<br> var oneDown = threeArr.pop();<br> console.log(oneDown); // Returns 6<br> console.log(threeArr); // Returns [1, 4]</code></blockquote><br><br> <hr>Use the <code>.pop()</code> function to remove the last item from <code>myArray</code>, assigning the \"popped off\" value to <code>removedFromMyArray</code>.<br><br>','// Example<br>var ourArray = [\"Stimpson\", \"J\", [\"cat\"]];<br>var removedFromOurArray = ourArray.shift();<br>// removedFromOurArray now equals \"Stimpson\" and ourArray now equals [\"J\", [\"cat\"]].<br><br>// Setup<br>var myArray = [[\"John\", 23], [\"dog\", 3]];<br><br>// Only change code below this line.<br>var removedFromMyArray;<br><br><br>',5),(227,'56bbb991ad1ed5201cd392cd','Manipulate Arrays With shift()','<code>pop()</code> always removes the last element of an array. What if you want to remove the first?<br><br>That\'s where <code>.shift()</code> comes in. It works just like <code>.pop()</code>, except it removes the first element instead of the last.<br><br> <hr>Use the <code>.shift()</code> function to remove the first item from <code>myArray</code>, assigning the \"shifted off\" value to <code>removedFromMyArray</code>.<br><br>','// Example<br>var ourArray = [\"Stimpson\", \"J\", \"cat\"];<br>ourArray.shift(); // ourArray now equals [\"J\", \"cat\"]<br>ourArray.unshift(\"Happy\"); <br>// ourArray now equals [\"Happy\", \"J\", \"cat\"]<br><br>// Setup<br>var myArray = [[\"John\", 23], [\"dog\", 3]];<br>myArray.shift();<br><br>// Only change code below this line.<br><br><br>',5),(228,'56bbb991ad1ed5201cd392ce','Manipulate Arrays With unshift()','Not only can you <code>shift</code> elements off of the beginning of an array, you can also <code>unshift</code> elements to the beginning of an array i.e. add elements in front of the array.<br><br><code>.unshift()</code> works exactly like <code>.push()</code>, but instead of adding the element at the end of the array, <code>unshift()</code> adds the element at the beginning of the array.<br><br> <hr>Add <code>[\"Paul\",35]</code> to the beginning of the <code>myArray</code> variable using <code>unshift()</code>.<br><br>','var myList = [];<br><br><br>',5),(229,'56533eb9ac21ba0edf2244bc','Shopping List','Create a shopping list in the variable <code>myList</code>. The list should be a multi-dimensional array containing several sub-arrays.<br><br>The first element in each sub-array should contain a string with the name of the item. The second element should be a number representing the quantity i.e.<br><br><code>[\"Chocolate Bar\", 15]</code><br><br>There should be at least 5 sub-arrays in the list.<br><br>','// Example<br>function ourReusableFunction() {<br>  console.log(\"Heyya, World\");<br>}<br><br>ourReusableFunction();<br><br>// Only change code below this line<br><br>',5),(230,'56bbb991ad1ed5201cd392cf','Write Reusable JavaScript with Functions','In JavaScript, we can divide up our code into reusable parts called <dfn>functions</dfn>.<br><br>Here\'s an example of a function:<br><br><blockquote>function functionName() {<br>&nbsp;&nbsp;console.log(\"Hello World\");<br>}</blockquote><br><br>You can call or <dfn>invoke</dfn> this function by using its name followed by parentheses, like this:<br><br><code>functionName();</code><br><br>Each time the function is called it will print out the message <code>\"Hello World\"</code> on the dev console. All of the code between the curly braces will be executed every time the function is called.<br><br> <hr><ol><li>Create a function called <code>reusableFunction</code> which prints <code>\"Hi World\"</code> to the dev console.</li><li>Call the function.</li></ol><br><br>','// Example<br>function ourFunctionWithArgs(a, b) {<br>  console.log(a - b);<br>}<br>ourFunctionWithArgs(10, 5); // Outputs 5<br><br>// Only change code below this line.<br><br><br>',5),(231,'56533eb9ac21ba0edf2244bd','Passing Values to Functions with Arguments','<dfn>Parameters</dfn> are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters. The actual values that are input (or <dfn>\"passed\"</dfn>) into a function when it is called are known as <dfn>arguments</dfn>.<br><br>Here is a function with two parameters, <code>param1</code> and <code>param2</code>:<br><br><blockquote>function testFun(param1, param2) {<br>&nbsp;&nbsp;console.log(param1, param2);<br>}</blockquote><br><br>Then we can call <code>testFun</code>:<br><br><code>testFun(\"Hello\", \"World\");</code><br><br>We have passed two arguments, <code>\"Hello\"</code> and <code>\"World\"</code>. Inside the function, <code>param1</code> will equal \"Hello\" and <code>param2</code> will equal \"World\". Note that you could call <code>testFun</code> again with different arguments and the parameters would take on the value of the new arguments.<br><br> <hr><ol><li>Create a function called <code>functionWithArgs</code> that accepts two arguments and outputs their sum to the dev console.</li><li>Call the function with two numbers as arguments.</li></ol><br><br>','// Declare your variable here<br><br><br>function fun1() {<br>  // Assign 5 to oopsGlobal Here<br>  <br>}<br><br>// Only change code above this line<br>function fun2() {<br>  var output = \"\";<br>  if (typeof myGlobal != \"undefined\") {<br>    output += \"myGlobal: \" + myGlobal;<br>  }<br>  if (typeof oopsGlobal != \"undefined\") {<br>    output += \" oopsGlobal: \" + oopsGlobal;<br>  }<br>  console.log(output);<br>}<br>',5),(232,'56533eb9ac21ba0edf2244be','Global Scope and Functions','In JavaScript, <dfn>scope</dfn> refers to the visibility of variables. Variables which are defined outside of a function block have <dfn>Global</dfn> scope. This means, they can be seen everywhere in your JavaScript code.<br><br>Variables which are used without the <code>var</code> keyword are automatically created in the <code>global</code> scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with <code>var</code>.<br><br> <hr>Using <code>var</code>, declare a <code>global</code> variable <code>myGlobal</code> outside of any function. Initialize it with a value of <code>10</code>.<br><br>Inside function <code>fun1</code>, assign <code>5</code> to <code>oopsGlobal</code> <strong><em>without</em></strong> using the <code>var</code> keyword.<br><br>','function myLocalScope() {<br>  \'\'use strict\'\'; // you shouldn\'\'t need to edit this line<br>  <br>  console.log(myVar);<br>}<br>myLocalScope();<br><br>// Run and check the console<br>// myVar is not defined outside of myLocalScope<br>console.log(myVar);<br><br>// Now remove the console log line to pass the test<br><br>',5),(233,'56533eb9ac21ba0edf2244bf','Local Scope and Functions','Variables which are declared within a function, as well as the function parameters have <dfn>local</dfn> scope. That means, they are only visible within that function.<br><br>Here is a function <code>myTest</code> with a local variable called <code>loc</code>.<br><br><blockquote>function myTest() {<br>&nbsp;&nbsp;var loc = \"foo\";<br>&nbsp;&nbsp;console.log(loc);<br>}<br>myTest(); // logs \"foo\"<br>console.log(loc); // loc is not defined</blockquote><br><br><code>loc</code> is not defined outside of the function.<br><br> <hr>Declare a local variable <code>myVar</code> inside <code>myLocalScope</code>. Run the tests and then follow the instructions commented out in the editor.<br><br><strong>Hint</strong><br>Refreshing the page may help if you get stuck.<br><br>','// Setup<br>var outerWear = \"T-Shirt\";<br><br>function myOutfit() {<br>  // Only change code below this line<br>  <br>  <br>  <br>  // Only change code above this line<br>  return outerWear;<br>}<br><br>myOutfit();<br>',5),(234,'56533eb9ac21ba0edf2244c0','Global vs. Local Scope in Functions','It is possible to have both <dfn>local</dfn> and <dfn>global</dfn> variables with the same name. When you do this, the <code>local</code> variable takes precedence over the <code>global</code> variable.<br><br>In this example:<br><br><blockquote>var someVar = \"Hat\";<br>function myFun() {<br>&nbsp;&nbsp;var someVar = \"Head\";<br>&nbsp;&nbsp;return someVar;<br>}</blockquote><br><br>The function <code>myFun</code> will return <code>\"Head\"</code> because the <code>local</code> version of the variable is present.<br><br> <hr>Add a local variable to <code>myOutfit</code> function to override the value of <code>outerWear</code> with <code>\"sweater\"</code>.<br><br>','// Example<br>function minusSeven(num) {<br>  return num - 7;<br>}<br><br>// Only change code below this line<br><br><br><br>console.log(minusSeven(10));<br>',5),(235,'56533eb9ac21ba0edf2244c2','Return a Value from a Function with Return','We can pass values into a function with <dfn>arguments</dfn>. You can use a <code>return</code> statement to send a value back out of a function.<br><br><strong>Example</strong><br><br><blockquote>function plusThree(num) {<br>&nbsp;&nbsp;return num + 3;<br>}<br>var answer = plusThree(5); // 8</blockquote><br><br><code>plusThree</code> takes an <dfn>argument</dfn> for <code>num</code> and returns a value equal to <code>num + 3</code>.<br><br> <hr>Create a function <code>timesFive</code> that accepts one argument, multiplies it by <code>5</code>, and returns the new value. See the last line in the editor for an example of how you can test your <code>timesFive</code> function.<br><br>','// Example<br>var sum = 0;<br>function addThree() {<br>  sum = sum + 3;<br>}<br><br>// Only change code below this line<br><br><br><br>// Only change code above this line<br>var returnedValue = addFive();<br>',5),(236,'598e8944f009e646fc236146','Understanding Undefined Value returned from a Function','A function can include the <code>return</code> statement but it does not have to. In the case that the function doesn\'t have a <code>return</code> statement, when you call it, the function processes the inner code but the returned value is <code>undefined</code>.<br><br><strong>Example</strong><br><br><blockquote>var sum = 0;<br>function addSum(num) {<br>&nbsp;&nbsp;sum = sum + num;<br>}<br>var returnedValue = addSum(3); // sum will be modified but returned value is undefined</blockquote><br><br><code>addSum</code> is a function without a <code>return</code> statement. The function will change the global <code>sum</code> variable but the returned value of the function is <code>undefined</code><br><br> <hr>Create a function <code>addFive</code> without any arguments. This function adds 5 to the <code>sum</code> variable, but its returned value is <code>undefined</code>.<br><br>','// Example<br>var changed = 0;<br><br>function change(num) {<br>  return (num + 5) / 3;<br>}<br><br>changed = change(10);<br><br>// Setup<br>var processed = 0;<br><br>function processArg(num) {<br>  return (num + 3) / 5;<br>}<br><br>// Only change code below this line<br><br><br>',5),(237,'56533eb9ac21ba0edf2244c3','Assignment with a Returned Value','If you\'ll recall from our discussion of <a href=\"javascript-algorithms-and-data-structures/basic-javascript/storing-values-with-the-assignment-operator\" target=\"_blank\">Storing Values with the Assignment Operator</a>, everything to the right of the equal sign is resolved before the value is assigned. This means we can take the return value of a function and assign it to a variable.<br><br>Assume we have pre-defined a function <code>sum</code> which adds two numbers together, then: <br><br><code>ourSum = sum(5, 12);</code><br><br>will call <code>sum</code> function, which returns a value of <code>17</code> and assigns it to <code>ourSum</code> variable.<br><br> <hr>Call the <code>processArg</code> function with an argument of <code>7</code> and assign its return value to the variable <code>processed</code>.<br><br>','function nextInLine(arr, item) {<br>  // Your code here<br>  <br>  return item;  // Change this line<br>}<br><br>// Test Setup<br>var testArr = [1,2,3,4,5];<br><br>// Display Code<br>console.log(\"Before: \" + JSON.stringify(testArr));<br>console.log(nextInLine(testArr, 6)); // Modify this line to test<br>console.log(\"After: \" + JSON.stringify(testArr));<br>',5),(238,'56533eb9ac21ba0edf2244c6','Stand in Line','In Computer Science a <dfn>queue</dfn> is an abstract <dfn>Data Structure</dfn> where items are kept in order. New items can be added at the back of the <code>queue</code> and old items are taken off from the front of the <code>queue</code>.<br><br>Write a function <code>nextInLine</code> which takes an array (<code>arr</code>) and a number (<code>item</code>) as arguments.<br><br>Add the number to the end of the array, then remove the first element of the array.<br><br>The <code>nextInLine</code> function should then return the element that was removed.<br><br>','function welcomeToBooleans() {<br><br>// Only change code below this line.<br><br>return false; // Change this line<br><br>// Only change code above this line.<br>}<br>',5),(239,'bd7123c9c441eddfaeb5bdef','Understanding Boolean Values','Another data type is the <dfn>Boolean</dfn>. <code>Booleans</code> may only be one of two values: <code>true</code> or <code>false</code>. They are basically little on-off switches, where <code>true</code> is \"on\" and <code>false</code> is \"off.\"  These two states are mutually exclusive.<br><br><strong>Note</strong><br><code>Boolean</code> values are never written with quotes. The <code>strings</code> <code>\"true\"</code> and <code>\"false\"</code> are not <code>Boolean</code> and have no special meaning in JavaScript.<br><br> <hr>Modify the <code>welcomeToBooleans</code> function so that it returns <code>true</code> instead of <code>false</code> when the run button is clicked.<br><br>','// Example<br>function ourTrueOrFalse(isItTrue) {<br>  if (isItTrue) { <br>    return \"Yes, it\'\'s true\";<br>  }<br>  return \"No, it\'\'s false\";<br>}<br><br>// Setup<br>function trueOrFalse(wasThatTrue) {<br><br>  // Only change code below this line.<br>  <br>  <br>  <br>  // Only change code above this line.<br><br>}<br><br>// Change this value to test<br>trueOrFalse(true);<br>',5),(240,'cf1111c1c12feddfaeb3bdef','Use Conditional Logic with If Statements','<code>If</code> statements are used to make decisions in code. The keyword <code>if</code> tells JavaScript to execute the code in the curly braces under certain conditions, defined in the parentheses. These conditions are known as <code>Boolean</code> conditions and they may only be <code>true</code> or <code>false</code>.<br><br>When the condition evaluates to <code>true</code>, the program executes the statement inside the curly braces. When the Boolean condition evaluates to <code>false</code>, the statement inside the curly braces will not execute.<br><br><strong>Pseudocode</strong><br><br><blockquote>if (<i>condition is true</i>) {<br>&nbsp;&nbsp;<i>statement is executed</i><br>}</blockquote><br><br><strong>Example</strong><br><br><blockquote>function test (myCondition) {<br>&nbsp;&nbsp;if (myCondition) {<br>&nbsp;&nbsp;&nbsp;&nbsp; return \"It was true\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return \"It was false\";<br>}<br>test(true);  // returns \"It was true\"<br>test(false); // returns \"It was false\"</blockquote><br><br>When <code>test</code> is called with a value of <code>true</code>, the <code>if</code> statement evaluates <code>myCondition</code> to see if it is <code>true</code> or not. Since it is <code>true</code>, the function returns <code>\"It was true\"</code>. When we call <code>test</code> with a value of <code>false</code>, <code>myCondition</code> is <em>not</em> <code>true</code> and the statement in the curly braces is not executed and the function returns <code>\"It was false\"</code>.<br><br> <hr>Create an <code>if</code> statement inside the function to return <code>\"Yes, that was true\"</code> if the parameter <code>wasThatTrue</code> is <code>true</code> and return <code>\"No, that was false\"</code> otherwise.<br><br>','// Setup<br>function testEqual(val) {<br>  if (val) { // Change this line<br>    return \"Equal\";<br>  }<br>  return \"Not Equal\";<br>}<br><br>// Change this value to test<br>testEqual(10);<br>',5),(241,'56533eb9ac21ba0edf2244d0','Comparison with the Equality Operator','There are many <dfn>Comparison Operators</dfn> in JavaScript. All of these operators return a boolean <code>true</code> or <code>false</code> value.<br><br>The most basic operator is the equality operator <code>==</code>. The equality operator compares two values and returns <code>true</code> if they\'re equivalent or <code>false</code> if they are not. Note that equality is different from assignment (<code>=</code>), which assigns the value at the right of the operator to a variable in the left.<br><br><blockquote>function equalityTest(myVal) {<br>&nbsp;&nbsp;if (myVal == 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp; return \"Equal\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return \"Not Equal\";<br>}</blockquote><br><br>If <code>myVal</code> is equal to <code>10</code>, the equality operator returns <code>true</code>, so the code in the curly braces will execute, and the function will return <code>\"Equal\"</code>. Otherwise, the function will return <code>\"Not Equal\"</code>.<br><br>In order for JavaScript to compare two different <code>data types</code> (for example, <code>numbers</code> and <code>strings</code>), it must convert one type to another. This is known as \"Type Coercion\". Once it does, however, it can compare terms as follows:<br><br><blockquote>1   ==  1    // true<br>1   ==  2    // false<br>1   == \'1\'   // true<br>\"3\"  ==  3    // true</blockquote><br><br> <hr>Add the <code>equality operator</code> to the indicated line so that the function will return \"Equal\" when <code>val</code> is equivalent to <code>12</code><br><br>','// Setup<br>function testStrict(val) {<br>  if (val) { // Change this line<br>    return \"Equal\";<br>  }<br>  return \"Not Equal\";<br>}<br><br>// Change this value to test<br>testStrict(10);<br>',5),(242,'56533eb9ac21ba0edf2244d1','Comparison with the Strict Equality Operator','Strict equality (<code>===</code>) is the counterpart to the equality operator (<code>==</code>). However, unlike the equality operator, which attempts to convert both values being compared to a common type, the strict equality operator does not perform a type conversion.<br><br>If the values being compared have different types, they are considered unequal, and the strict equality operator will return false.<br><br><strong>Examples</strong><br><br><blockquote>3 === 3   // true<br>3 === \'3\' // false</blockquote><br><br>In the second example, <code>3</code> is a <code>Number</code> type and <code>\'3\'</code> is a <code>String</code> type.<br><br> <hr>Use the strict equality operator in the <code>if</code> statement so the function will return \"Equal\" when <code>val</code> is strictly equal to <code>7</code><br><br>','// Setup<br>function compareEquality(a, b) {<br>  if (a == b) { // Change this line<br>    return \"Equal\";<br>  }<br>  return \"Not Equal\";<br>}<br><br>// Change this value to test<br>compareEquality(10, \"10\");<br>',5),(243,'599a789b454f2bbd91a3ff4d','Practice comparing different values','In the last two challenges, we learned about the equality operator (<code>==</code>) and the strict equality operator (<code>===</code>). Let\'s do a quick review and practice using these operators some more.<br><br>If the values being compared are not of the same type, the equality operator will perform a type conversion, and then evaluate the values. However, the strict equality operator will compare both the data type and value as-is, without converting one type to the other.<br><br><strong>Examples</strong><br><br><blockquote>3 == \'3\'  // returns true because JavaScript performs type conversion from string to number<br>3 === \'3\' // returns false because the types are different and type conversion is not performed</blockquote><br><br><strong>Note</strong><br>In JavaScript, you can determine the type of a variable or a value with the <code>typeof</code> operator, as follows:<br><br><blockquote>typeof 3   // returns \'number\'<br>typeof \'3\' // returns \'string\'</blockquote><br><br> <hr>The <code>compareEquality</code> function in the editor compares two values using the <code>equality operator</code>. Modify the function so that it returns \"Equal\" only when the values are strictly equal.<br><br>','// Setup<br>function testNotEqual(val) {<br>  if (val) { // Change this line<br>    return \"Not Equal\";<br>  }<br>  return \"Equal\";<br>}<br><br>// Change this value to test<br>testNotEqual(10);<br>',5),(244,'56533eb9ac21ba0edf2244d2','Comparison with the Inequality Operator','The inequality operator (<code>!=</code>) is the opposite of the equality operator. It means \"Not Equal\" and returns <code>false</code> where equality would return <code>true</code> and <em>vice versa</em>. Like the equality operator, the inequality operator will convert data types of values while comparing.<br><br><strong>Examples</strong><br><br><blockquote>1 != 2      // true<br>1 != \"1\"    // false<br>1 != \'1\'    // false<br>1 != true   // false<br>0 != false  // false</blockquote><br><br> <hr>Add the inequality operator <code>!=</code> in the <code>if</code> statement so that the function will return \"Not Equal\" when <code>val</code> is not equivalent to <code>99</code><br><br>','// Setup<br>function testStrictNotEqual(val) {<br>  // Only Change Code Below this Line<br>  <br>  if (val) {<br><br>  // Only Change Code Above this Line<br><br>    return \"Not Equal\";<br>  }<br>  return \"Equal\";<br>}<br><br>// Change this value to test<br>testStrictNotEqual(10);<br>',5),(245,'56533eb9ac21ba0edf2244d3','Comparison with the Strict Inequality Operator','The strict inequality operator (<code>!==</code>) is the logical opposite of the strict equality operator. It means \"Strictly Not Equal\" and returns <code>false</code> where strict equality would return <code>true</code> and <em>vice versa</em>. Strict inequality will not convert data types.<br><br><strong>Examples</strong><br><br><blockquote>3 !== 3   // false<br>3 !== \'3\' // true<br>4 !== 3   // true</blockquote><br><br> <hr>Add the <code>strict inequality operator</code> to the <code>if</code> statement so the function will return \"Not Equal\" when <code>val</code> is not strictly equal to <code>17</code><br><br>','function testGreaterThan(val) {<br>  if (val) {  // Change this line<br>    return \"Over 100\";<br>  }<br>  <br>  if (val) {  // Change this line<br>    return \"Over 10\";<br>  }<br><br>  return \"10 or Under\";<br>}<br><br>// Change this value to test<br>testGreaterThan(10);<br>',5),(246,'56533eb9ac21ba0edf2244d4','Comparison with the Greater Than Operator','The greater than operator (<code>&gt;</code>) compares the values of two numbers. If the number to the left is greater than the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>.<br><br>Like the equality operator, greater than operator will convert data types of values while comparing.<br><br><strong>Examples</strong><br><br><blockquote> 5 > 3   // true<br> 7 > \'3\' // true<br> 2 > 3   // false<br>\'1\' > 9  // false</blockquote><br><br> <hr>Add the <code>greater than</code> operator to the indicated lines so that the return statements make sense.<br><br>','function testGreaterOrEqual(val) {<br>  if (val) {  // Change this line<br>    return \"20 or Over\";<br>  }<br>  <br>  if (val) {  // Change this line<br>    return \"10 or Over\";<br>  }<br><br>  return \"Less than 10\";<br>}<br><br>// Change this value to test<br>testGreaterOrEqual(10);<br>',5),(247,'56533eb9ac21ba0edf2244d5','Comparison with the Greater Than Or Equal To Operator','The <code>greater than or equal to</code> operator (<code>&gt;=</code>) compares the values of two numbers. If the number to the left is greater than or equal to the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>.<br><br>Like the equality operator, <code>greater than or equal to</code> operator will convert data types while comparing.<br><br><strong>Examples</strong><br><br><blockquote> 6  >=  6  // true<br> 7  >= \'3\' // true<br> 2  >=  3  // false<br>\'7\' >=  9  // false</blockquote><br><br> <hr>Add the <code>greater than or equal to</code> operator to the indicated lines so that the return statements make sense.<br><br>','function testLessThan(val) {<br>  if (val) {  // Change this line<br>    return \"Under 25\";<br>  }<br>  <br>  if (val) {  // Change this line<br>    return \"Under 55\";<br>  }<br><br>  return \"55 or Over\";<br>}<br><br>// Change this value to test<br>testLessThan(10);<br>',5),(248,'56533eb9ac21ba0edf2244d6','Comparison with the Less Than Operator','The <dfn>less than</dfn> operator (<code>&lt;</code>) compares the values of two numbers. If the number to the left is less than the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>. Like the equality operator, <dfn>less than</dfn> operator converts data types while comparing.<br><br><strong>Examples</strong><br><br><blockquote>2 &lt; 5  // true<br>\'3\' &lt; 7  // true<br>5 &lt; 5  // false<br>3 &lt; 2  // false<br>\'8\' &lt; 4  // false</blockquote><br><br> <hr>Add the <code>less than</code> operator to the indicated lines so that the return statements make sense.<br><br>','function testLessOrEqual(val) {<br>  if (val) {  // Change this line<br>    return \"Smaller Than or Equal to 12\";<br>  }<br>  <br>  if (val) {  // Change this line<br>    return \"Smaller Than or Equal to 24\";<br>  }<br><br>  return \"More Than 24\";<br>}<br><br>// Change this value to test<br>testLessOrEqual(10);<br><br>',5),(249,'56533eb9ac21ba0edf2244d7','Comparison with the Less Than Or Equal To Operator','The <code>less than or equal to</code> operator (<code>&lt;=</code>) compares the values of two numbers. If the number to the left is less than or equal to the number to the right, it returns <code>true</code>. If the number on the left is greater than the number on the right, it returns <code>false</code>. Like the equality operator, <code>less than or equal to</code> converts data types.<br><br><strong>Examples</strong><br><br><blockquote>4 &lt;= 5  // true<br>\'7\' &lt;= 7  // true<br>5 &lt;= 5  // true<br>3 &lt;= 2  // false<br>\'8\' &lt;= 4  // false</blockquote><br><br> <hr>Add the <code>less than or equal to</code> operator to the indicated lines so that the return statements make sense.<br><br>','function testLogicalAnd(val) {<br>  // Only change code below this line<br><br>  if (val) {<br>    if (val) {<br>      return \"Yes\";<br>    }<br>  }<br><br>  // Only change code above this line<br>  return \"No\";<br>}<br><br>// Change this value to test<br>testLogicalAnd(10);<br>',5),(250,'56533eb9ac21ba0edf2244d8','Comparisons with the Logical And Operator','Sometimes you will need to test more than one thing at a time. The <dfn>logical and</dfn> operator (<code>&&</code>) returns <code>true</code> if and only if the <dfn>operands</dfn> to the left and right of it are true.<br><br>The same effect could be achieved by nesting an if statement inside another if:<br><br><blockquote>if (num > 5) {<br>&nbsp;&nbsp;if (num < 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Yes\";<br>&nbsp;&nbsp;}<br>}<br>return \"No\";</blockquote><br><br>will only return \"Yes\" if <code>num</code> is greater than <code>5</code> and less than <code>10</code>. The same logic can be written as:<br><br><blockquote>if (num > 5 && num < 10) {<br>&nbsp;&nbsp;return \"Yes\";<br>}<br>return \"No\";</blockquote><br><br> <hr>Combine the two if statements into one statement which will return <code>\"Yes\"</code> if <code>val</code> is less than or equal to <code>50</code> and greater than or equal to <code>25</code>. Otherwise, will return <code>\"No\"</code>.<br><br>','function testLogicalOr(val) {<br>  // Only change code below this line<br><br>  if (val) {<br>    return \"Outside\";<br>  }<br><br>  if (val) {<br>    return \"Outside\";<br>  }<br><br>  // Only change code above this line<br>  return \"Inside\";<br>}<br><br>// Change this value to test<br>testLogicalOr(15);<br>',5),(251,'56533eb9ac21ba0edf2244d9','Comparisons with the Logical Or Operator','The <dfn>logical or</dfn> operator (<code>||</code>) returns <code>true</code> if either of the <dfn>operands</dfn> is <code>true</code>. Otherwise, it returns <code>false</code>.<br><br>The <dfn>logical or</dfn> operator is composed of two pipe symbols (<code>|</code>). This can typically be found between your Backspace and Enter keys.<br><br>The pattern below should look familiar from prior waypoints:<br><br><blockquote>if (num > 10) {<br>&nbsp;&nbsp;return \"No\";<br>}<br>if (num < 5) {<br>&nbsp;&nbsp;return \"No\";<br>}<br>return \"Yes\";</blockquote><br><br>will return \"Yes\" only if <code>num</code> is between <code>5</code> and <code>10</code> (5 and 10 included). The same logic can be written as:<br><br><blockquote>if (num > 10 || num < 5) {<br>&nbsp;&nbsp;return \"No\";<br>}<br>return \"Yes\";</blockquote><br><br> <hr>Combine the two <code>if</code> statements into one statement which returns <code>\"Outside\"</code> if <code>val</code> is not between <code>10</code> and <code>20</code>, inclusive. Otherwise, return <code>\"Inside\"</code>.<br><br>','function testElse(val) {<br>  var result = \"\";<br>  // Only change code below this line<br>  <br>  if (val > 5) {<br>    result = \"Bigger than 5\";<br>  }<br>  <br>  if (val <= 5) {<br>    result = \"5 or Smaller\";<br>  }<br>  <br>  // Only change code above this line<br>  return result;<br>}<br><br>// Change this value to test<br>testElse(4);<br><br>',5),(252,'56533eb9ac21ba0edf2244da','Introducing Else Statements','When a condition for an <code>if</code> statement is true, the block of code following it is executed. What about when that condition is false?  Normally nothing would happen. With an <code>else</code> statement, an alternate block of code can be executed.<br><br><blockquote>if (num > 10) {<br>&nbsp;&nbsp;return \"Bigger than 10\";<br>} else {<br>&nbsp;&nbsp;return \"10 or Less\";<br>}</blockquote><br><br> <hr>Combine the <code>if</code> statements into a single <code>if/else</code> statement.<br><br>','function testElseIf(val) {<br>  if (val > 10) {<br>    return \"Greater than 10\";<br>  }<br>  <br>  if (val < 5) {<br>    return \"Smaller than 5\";<br>  }<br>  <br>  return \"Between 5 and 10\";<br>}<br><br>// Change this value to test<br>testElseIf(7);<br><br>',5),(253,'56533eb9ac21ba0edf2244db','Introducing Else If Statements','If you have multiple conditions that need to be addressed, you can chain <code>if</code> statements together with <code>else if</code> statements.<br><br><blockquote>if (num > 15) {<br>&nbsp;&nbsp;return \"Bigger than 15\";<br>} else if (num < 5) {<br>&nbsp;&nbsp;return \"Smaller than 5\";<br>} else {<br>&nbsp;&nbsp;return \"Between 5 and 15\";<br>}</blockquote><br><br> <hr>Convert the logic to use <code>else if</code> statements.<br><br>','function orderMyLogic(val) {<br>  if (val < 10) {<br>    return \"Less than 10\";<br>  } else if (val < 5) {<br>    return \"Less than 5\";<br>  } else {<br>    return \"Greater than or equal to 10\";<br>  }<br>}<br><br>// Change this value to test<br>orderMyLogic(7);<br>',5),(254,'5690307fddb111c6084545d7','Logical Order in If Else Statements','Order is important in <code>if</code>, <code>else if</code> statements.<br><br>The function is executed from top to bottom so you will want to be careful of what statement comes first.<br><br>Take these two functions as an example.<br><br>Here\'s the first:<br><br><blockquote>function foo(x) {<br>&nbsp;&nbsp;if (x < 1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Less than one\";<br>&nbsp;&nbsp;} else if (x < 2) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Less than two\";<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Greater than or equal to two\";<br>&nbsp;&nbsp;}<br>}</blockquote><br><br>And the second just switches the order of the statements:<br><br><blockquote>function bar(x) {<br>&nbsp;&nbsp;if (x < 2) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Less than two\";<br>&nbsp;&nbsp;} else if (x < 1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Less than one\";<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Greater than or equal to two\";<br>&nbsp;&nbsp;}<br>}</blockquote><br><br>While these two functions look nearly identical if we pass a number to both we get different outputs.<br><br><blockquote>foo(0) // \"Less than one\"<br>bar(0) // \"Less than two\"</blockquote><br><br> <hr>Change the order of logic in the function so that it will return the correct statements in all cases.<br><br>','function testSize(num) {<br>  // Only change code below this line<br>  <br>  <br>  return \"Change Me\";<br>  // Only change code above this line<br>}<br><br>// Change this value to test<br>testSize(7);<br>',5),(255,'56533eb9ac21ba0edf2244dc','Chaining If Else Statements','<code>if/else</code> statements can be chained together for complex logic. Here is <dfn>pseudocode</dfn> of multiple chained <code>if</code> / <code>else if</code> statements:<br><br><blockquote>if (<em>condition1</em>) {<br>&nbsp;&nbsp;<em>statement1</em><br>} else if (<em>condition2</em>) {<br>&nbsp;&nbsp;<em>statement2</em><br>} else if (<em>condition3</em>) {<br>&nbsp;&nbsp;<em>statement3</em><br>. . .<br>} else {<br>&nbsp;&nbsp;<em>statementN</em><br>}</blockquote><br><br> <hr>Write chained <code>if</code>/<code>else if</code> statements to fulfill the following conditions:<br><br><code>num &lt;   5</code> - return \"Tiny\"<br><code>num &lt;  10</code> - return \"Small\"<br><code>num &lt; 15</code> - return \"Medium\"<br><code>num &lt; 20</code> - return \"Large\"<br><code>num >= 20</code>  - return \"Huge\"<br><br>','var names = [\"Hole-in-one!\", \"Eagle\", \"Birdie\", \"Par\", \"Bogey\", \"Double Bogey\", \"Go Home!\"];<br>function golfScore(par, strokes) {<br>  // Only change code below this line<br>  <br>  <br>  return \"Change Me\";<br>  // Only change code above this line<br>}<br><br>// Change these values to test<br>golfScore(5, 4);<br>',5),(256,'5664820f61c48e80c9fa476c','Golf Code','In the game of <a href=\"https://en.wikipedia.org/wiki/Golf\" target=\"_blank\">golf</a> each hole has a <code>par</code> meaning the average number of <code>strokes</code> a golfer is expected to make in order to sink the ball in a hole to complete the play. Depending on how far above or below <code>par</code> your <code>strokes</code> are, there is a different nickname.<br><br>Your function will be passed <code>par</code> and <code>strokes</code> arguments. Return the correct string according to this table which lists the strokes in order of priority; top (highest) to bottom (lowest):<br><br><table class=\"table table-striped\"><thead><tr><th>Strokes</th><th>Return</th></tr></thead><tbody><tr><td>1</td><td>\"Hole-in-one!\"</td></tr><tr><td>&lt;= par - 2</td><td>\"Eagle\"</td></tr><tr><td>par - 1</td><td>\"Birdie\"</td></tr><tr><td>par</td><td>\"Par\"</td></tr><tr><td>par + 1</td><td>\"Bogey\"</td></tr><tr><td>par + 2</td><td>\"Double Bogey\"</td></tr><tr><td>&gt;= par + 3</td><td>\"Go Home!\"</td></tr></tbody></table><br><br><code>par</code> and <code>strokes</code> will always be numeric and positive. We have added an array of all the names for your convenience.<br><br>','function caseInSwitch(val) {<br>  var answer = \"\";<br>  // Only change code below this line<br>  <br>  <br>  <br>  // Only change code above this line  <br>  return answer;  <br>}<br><br>// Change this value to test<br>caseInSwitch(1);<br><br>',5),(257,'56533eb9ac21ba0edf2244dd','Selecting from Many Options with Switch Statements','If you have many options to choose from, use a <code>switch</code> statement. A <code>switch</code> statement tests a value and can have many <code>case</code> statements which define various possible values. Statements are executed from the first matched <code>case</code> value until a <code>break</code> is encountered.<br><br>Here is a <dfn>pseudocode</dfn> example:<br><br><blockquote>switch(num) {<br>&nbsp;&nbsp;case value1:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement1;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case value2:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement2;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>...<br>&nbsp;&nbsp;case valueN:<br>&nbsp;&nbsp;&nbsp;&nbsp;statementN;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}</blockquote><br><br><code>case</code> values are tested with strict equality (<code>===</code>). The <code>break</code> tells JavaScript to stop executing statements. If the <code>break</code> is omitted, the next statement will be executed.<br><br> <hr>Write a switch statement which tests <code>val</code> and sets <code>answer</code> for the following conditions:<br><code>1</code> - \"alpha\"<br><code>2</code> - \"beta\"<br><code>3</code> - \"gamma\"<br><code>4</code> - \"delta\"<br><br>','function switchOfStuff(val) {<br>  var answer = \"\";<br>  // Only change code below this line<br>  <br>  <br>  <br>  // Only change code above this line  <br>  return answer;  <br>}<br><br>// Change this value to test<br>switchOfStuff(1);<br><br>',5),(258,'56533eb9ac21ba0edf2244de','Adding a Default Option in Switch Statements','In a <code>switch</code> statement you may not be able to specify all possible values as <code>case</code> statements. Instead, you can add the <code>default</code> statement which will be executed if no matching <code>case</code> statements are found. Think of it like the final <code>else</code> statement in an <code>if/else</code> chain.<br><br>A <code>default</code> statement should be the last case.<br><br><blockquote>switch (num) {<br>&nbsp;&nbsp;case value1:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement1;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case value2:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement2;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>...<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;defaultStatement;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}</blockquote><br><br> <hr>Write a switch statement to set <code>answer</code> for the following conditions:<br><code>\"a\"</code> - \"apple\"<br><code>\"b\"</code> - \"bird\"<br><code>\"c\"</code> - \"cat\"<br><code>default</code> - \"stuff\"<br><br>','function sequentialSizes(val) {<br>  var answer = \"\";<br>  // Only change code below this line<br>  <br>  <br>  <br>  // Only change code above this line  <br>  return answer;  <br>}<br><br>// Change this value to test<br>sequentialSizes(1);<br><br>',5),(259,'56533eb9ac21ba0edf2244df','Multiple Identical Options in Switch Statements','If the <code>break</code> statement is omitted from a <code>switch</code> statement\'s <code>case</code>, the following <code>case</code> statement(s) are executed until a <code>break</code> is encountered. If you have multiple inputs with the same output, you can represent them in a <code>switch</code> statement like this:<br><br><blockquote>switch(val) {<br>&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;case 2:<br>&nbsp;&nbsp;case 3:<br>&nbsp;&nbsp;&nbsp;&nbsp;result = \"1, 2, or 3\";<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case 4:<br>&nbsp;&nbsp;&nbsp;&nbsp;result = \"4 alone\";<br>}</blockquote><br><br>Cases for 1, 2, and 3 will all produce the same result.<br><br> <hr>Write a switch statement to set <code>answer</code> for the following ranges:<br><code>1-3</code> - \"Low\"<br><code>4-6</code> - \"Mid\"<br><code>7-9</code> - \"High\"<br><br><strong>Note</strong><br>You will need to have a <code>case</code> statement for each number in the range.<br><br>','function chainToSwitch(val) {<br>  var answer = \"\";<br>  // Only change code below this line<br>  <br>  if (val === \"bob\") {<br>    answer = \"Marley\";<br>  } else if (val === 42) {<br>    answer = \"The Answer\";<br>  } else if (val === 1) {<br>    answer = \"There is no #1\";<br>  } else if (val === 99) {<br>    answer = \"Missed me by this much!\";<br>  } else if (val === 7) {<br>    answer = \"Ate Nine\";<br>  }<br>  <br>  // Only change code above this line  <br>  return answer;  <br>}<br><br>// Change this value to test<br>chainToSwitch(7);<br><br>',5),(260,'56533eb9ac21ba0edf2244e0','Replacing If Else Chains with Switch','If you have many options to choose from, a <code>switch</code> statement can be easier to write than many chained <code>if</code>/<code>else if</code> statements. The following:<br><br><blockquote>if (val === 1) {<br>&nbsp;&nbsp;answer = \"a\";<br>} else if (val === 2) {<br>&nbsp;&nbsp;answer = \"b\";<br>} else {<br>&nbsp;&nbsp;answer = \"c\";<br>}</blockquote><br><br>can be replaced with:<br><br><blockquote>switch(val) {<br>&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;answer = \"a\";<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case 2:<br>&nbsp;&nbsp;&nbsp;&nbsp;answer = \"b\";<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;answer = \"c\";<br>}</blockquote><br><br> <hr>Change the chained <code>if</code>/<code>else if</code> statements into a <code>switch</code> statement.<br><br>','function isLess(a, b) {<br>  // Fix this code<br>  if (a < b) {<br>    return true;<br>  } else {<br>    return false;<br>  }<br>}<br><br>// Change these values to test<br>isLess(10, 15);<br>',5),(261,'5679ceb97cbaa8c51670a16b','Returning Boolean Values from Functions','You may recall from <a href=\"waypoint-comparison-with-the-equality-operator\" target=\"_blank\">Comparison with the Equality Operator</a> that all comparison operators return a boolean <code>true</code> or <code>false</code> value.<br><br>Sometimes people use an if/else statement to do a comparison, like this:<br><br><blockquote>function isEqual(a,b) {<br>&nbsp;&nbsp;if (a === b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>&nbsp;&nbsp;}<br>}</blockquote><br><br>But there\'s a better way to do this. Since <code>===</code> returns <code>true</code> or <code>false</code>, we can return the result of the comparison:<br><br><blockquote>function isEqual(a,b) {<br>&nbsp;&nbsp;return a === b;<br>}</blockquote><br><br> <hr>Fix the function <code>isLess</code> to remove the <code>if/else</code> statements.<br><br>','// Setup<br>function abTest(a, b) {<br>  // Only change code below this line<br>  <br>  <br>  <br>  // Only change code above this line<br><br>  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));<br>}<br><br>// Change values below to test your code<br>abTest(2,2);<br>',5),(262,'56533eb9ac21ba0edf2244c4','Return Early Pattern for Functions','When a <code>return</code> statement is reached, the execution of the current function stops and control returns to the calling location.<br><br><strong>Example</strong><br><br><blockquote>function myFun() {<br>&nbsp;&nbsp;console.log(\"Hello\");<br>&nbsp;&nbsp;return \"World\";<br>&nbsp;&nbsp;console.log(\"byebye\")<br>}<br>myFun();</blockquote><br><br>The above outputs \"Hello\" to the console, returns \"World\", but <code>\"byebye\"</code> is never output, because the function exits at the <code>return</code> statement.<br><br> <hr>Modify the function <code>abTest</code> so that if <code>a</code> or <code>b</code> are less than <code>0</code> the function will immediately exit with a value of <code>undefined</code>.<br><br><strong>Hint</strong><br>Remember that <a href=\'http://www.freecodecamp.org/challenges/understanding-uninitialized-variables\' target=\'_blank\'><code>undefined</code> is a keyword</a>, not a string.<br><br>','var count = 0;<br><br>function cc(card) {<br>  // Only change code below this line<br>  <br>  <br>  return \"Change Me\";<br>  // Only change code above this line<br>}<br><br>// Add/remove calls to test your function.<br>// Note: Only the last will display<br>cc(2); cc(3); cc(7); cc(\'\'K\'\'); cc(\'\'A\'\');<br>',5),(263,'565bbe00e9cc8ac0725390f4','Counting Cards','In the casino game Blackjack, a player can gain an advantage over the house by keeping track of the relative number of high and low cards remaining in the deck. This is called <a href=\'https://en.wikipedia.org/wiki/Card_counting\' target=\'_blank\'>Card Counting</a>.<br><br>Having more high cards remaining in the deck favors the player. Each card is assigned a value according to the table below. When the count is positive, the player should bet high. When the count is zero or negative, the player should bet low.<br><br><table class=\"table table-striped\"><thead><tr><th>Count Change</th><th>Cards</th></tr></thead><tbody><tr><td>+1</td><td>2, 3, 4, 5, 6</td></tr><tr><td>0</td><td>7, 8, 9</td></tr><tr><td>-1</td><td>10, \'J\', \'Q\', \'K\', \'A\'</td></tr></tbody></table><br><br>You will write a card counting function. It will receive a <code>card</code> parameter, which can be a number or a string, and increment or decrement the global <code>count</code> variable according to the card\'s value (see table). The function will then return a string with the current count and the string <code>Bet</code> if the count is positive, or <code>Hold</code> if the count is zero or negative. The current count and the player\'s decision (<code>Bet</code> or <code>Hold</code>) should be separated by a single space.<br><br><strong>Example Output</strong><br><code>-3 Hold</code><br><code>5 Bet</code><br><br><strong>Hint</strong><br>Do NOT reset <code>count</code> to 0 when value is 7, 8, or 9.<br>Do NOT return an array.<br>Do NOT include quotes (single or double) in the output.<br><br>','// Example<br>var ourDog = {<br>  \"name\": \"Camper\",<br>  \"legs\": 4,<br>  \"tails\": 1,<br>  \"friends\": [\"everything!\"]<br>};<br><br>// Only change code below this line.<br><br>var myDog = {<br>  <br>  <br>  <br>  <br>};<br>',5),(264,'56bbb991ad1ed5201cd392d0','Build JavaScript Objects','You may have heard the term <code>object</code> before.<br><br>Objects are similar to <code>arrays</code>, except that instead of using indexes to access and modify their data, you access the data in objects through what are called <code>properties</code>.<br><br>Objects are useful for storing data in a structured way, and can represent real world objects, like a cat.<br><br>Here\'s a sample cat object:<br><br><blockquote>var cat = {<br>&nbsp;&nbsp;\"name\": \"Whiskers\",<br>&nbsp;&nbsp;\"legs\": 4,<br>&nbsp;&nbsp;\"tails\": 1,<br>&nbsp;&nbsp;\"enemies\": [\"Water\", \"Dogs\"]<br>};</blockquote><br><br>In this example, all the properties are stored as strings, such as - <code>\"name\"</code>, <code>\"legs\"</code>, and <code>\"tails\"</code>. However, you can also use numbers as properties. You can even omit the quotes for single-word string properties, as follows:<br><br><blockquote>var anotherObject = {<br>&nbsp;&nbsp;make: \"Ford\",<br>&nbsp;&nbsp;5: \"five\",<br>&nbsp;&nbsp;\"model\": \"focus\"<br>};</blockquote><br><br>However, if your object has any non-string properties, JavaScript will automatically typecast them as strings.<br><br> <hr>Make an object that represents a dog called <code>myDog</code> which contains the properties <code>\"name\"</code> (a string), <code>\"legs\"</code>, <code>\"tails\"</code> and <code>\"friends\"</code>.<br><br>You can set these object properties to whatever values you want, as long <code>\"name\"</code> is a string, <code>\"legs\"</code> and <code>\"tails\"</code> are numbers, and <code>\"friends\"</code> is an array.<br><br>','// Setup<br>var testObj = {<br>  \"hat\": \"ballcap\",<br>  \"shirt\": \"jersey\",<br>  \"shoes\": \"cleats\"<br>};<br><br>// Only change code below this line<br><br>var hatValue = testObj;      // Change this line<br>var shirtValue = testObj;    // Change this line<br>',5),(265,'56533eb9ac21ba0edf2244c7','Accessing Object Properties with Dot Notation','There are two ways to access the properties of an object: dot notation (<code>.</code>) and bracket notation (<code>[]</code>), similar to an array.<br><br>Dot notation is what you use when you know the name of the property you\'re trying to access ahead of time.<br><br>Here is a sample of using dot notation (<code>.</code>) to read an object\'s property:<br><br><blockquote>var myObj = {<br>&nbsp;&nbsp;prop1: \"val1\",<br>&nbsp;&nbsp;prop2: \"val2\"<br>};<br>var prop1val = myObj.prop1; // val1<br>var prop2val = myObj.prop2; // val2</blockquote><br><br> <hr>Read in the property values of <code>testObj</code> using dot notation. Set the variable <code>hatValue</code> equal to the object\'s property <code>hat</code> and set the variable <code>shirtValue</code> equal to the object\'s property <code>shirt</code>.<br><br>','// Setup<br>var testObj = {<br>  \"an entree\": \"hamburger\",<br>  \"my side\": \"veggies\",<br>  \"the drink\": \"water\"<br>};<br><br>// Only change code below this line<br><br>var entreeValue = testObj;   // Change this line<br>var drinkValue = testObj;    // Change this line<br>',5),(266,'56533eb9ac21ba0edf2244c8','Accessing Object Properties with Bracket Notation','The second way to access the properties of an object is bracket notation (<code>[]</code>). If the property of the object you are trying to access has a space in its name, you will need to use bracket notation.<br><br>However, you can still use bracket notation on object properties without spaces.<br><br>Here is a sample of using bracket notation to read an object\'s property:<br><br><blockquote>var myObj = {<br>&nbsp;&nbsp;\"Space Name\": \"Kirk\",<br>&nbsp;&nbsp;\"More Space\": \"Spock\",<br>&nbsp;&nbsp;\"NoSpace\": \"USS Enterprise\"<br>};<br>myObj[\"Space Name\"]; // Kirk<br>myObj[\'More Space\']; // Spock<br>myObj[\"NoSpace\"];    // USS Enterprise</blockquote><br><br>Note that property names with spaces in them must be in quotes (single or double).<br><br> <hr>Read the values of the properties <code>\"an entree\"</code> and <code>\"the drink\"</code> of <code>testObj</code> using bracket notation and assign them to <code>entreeValue</code> and <code>drinkValue</code> respectively.<br><br>','// Setup<br>var testObj = {<br>  12: \"Namath\",<br>  16: \"Montana\",<br>  19: \"Unitas\"<br>};<br><br>// Only change code below this line;<br><br>var playerNumber;       // Change this Line<br>var player = testObj;   // Change this Line<br>',5),(267,'56533eb9ac21ba0edf2244c9','Accessing Object Properties with Variables','Another use of bracket notation on objects is to access a property which is stored as the value of a variable. This can be very useful for iterating through an object\'s properties or when accessing a lookup table.<br><br>Here is an example of using a variable to access a property:<br><br><blockquote>var dogs = {<br>&nbsp;&nbsp;Fido: \"Mutt\",\r\n  Hunter: \"Doberman\",\r\n  Snoopie: \"Beagle\"<br>};<br>var myDog = \"Hunter\";<br>var myBreed = dogs[myDog];<br>console.log(myBreed); // \"Doberman\"</blockquote><br><br>Another way you can use this concept is when the property\'s name is collected dynamically during the program execution, as follows:<br><br><blockquote>var someObj = {<br>&nbsp;&nbsp;propName: \"John\"<br>};<br>function propPrefix(str) {<br>&nbsp;&nbsp;var s = \"prop\";<br>&nbsp;&nbsp;return s + str;<br>}<br>var someProp = propPrefix(\"Name\"); // someProp now holds the value \'propName\'<br>console.log(someObj[someProp]); // \"John\"</blockquote><br><br>Note that we do <em>not</em> use quotes around the variable name when using it to access the property because we are using the <em>value</em> of the variable, not the <em>name</em>.<br><br> <hr>Use the <code>playerNumber</code> variable to look up player <code>16</code> in <code>testObj</code> using bracket notation. Then assign that name to the <code>player</code> variable.<br><br>','// Example<br>var ourDog = {<br>  \"name\": \"Camper\",<br>  \"legs\": 4,<br>  \"tails\": 1,<br>  \"friends\": [\"everything!\"]<br>};<br><br>ourDog.name = \"Happy Camper\";<br><br>// Setup<br>var myDog = {<br>  \"name\": \"Coder\",<br>  \"legs\": 4,<br>  \"tails\": 1,<br>  \"friends\": [\"freeCodeCamp Campers\"]<br>};<br><br>// Only change code below this line.<br><br><br>',5),(268,'56bbb991ad1ed5201cd392d1','Updating Object Properties','After you\'ve created a JavaScript object, you can update its properties at any time just like you would update any other variable. You can use either dot or bracket notation to update.<br><br>For example, let\'s look at <code>ourDog</code>:<br><br><blockquote>var ourDog = {<br>&nbsp;&nbsp;\"name\": \"Camper\",<br>&nbsp;&nbsp;\"legs\": 4,<br>&nbsp;&nbsp;\"tails\": 1,<br>&nbsp;&nbsp;\"friends\": [\"everything!\"]<br>};</blockquote><br><br>Since he\'s a particularly happy dog, let\'s change his name to \"Happy Camper\". Here\'s how we update his object\'s name property:<br><br><code>ourDog.name = \"Happy Camper\";</code> or<br><br><code>ourDog[\"name\"] = \"Happy Camper\";</code><br><br>Now when we evaluate <code>ourDog.name</code>, instead of getting \"Camper\", we\'ll get his new name, \"Happy Camper\".<br><br> <hr>Update the <code>myDog</code> object\'s name property. Let\'s change her name from \"Coder\" to \"Happy Coder\". You can use either dot or bracket notation.<br><br>','// Example<br>var ourDog = {<br>  \"name\": \"Camper\",<br>  \"legs\": 4,<br>  \"tails\": 1,<br>  \"friends\": [\"everything!\"]<br>};<br><br>ourDog.bark = \"bow-wow\";<br><br>// Setup<br>var myDog = {<br>  \"name\": \"Happy Coder\",<br>  \"legs\": 4,<br>  \"tails\": 1,<br>  \"friends\": [\"freeCodeCamp Campers\"]<br>};<br><br>// Only change code below this line.<br><br>',5),(269,'56bbb991ad1ed5201cd392d2','Add New Properties to a JavaScript Object','You can add new properties to existing JavaScript objects the same way you would modify them.<br><br>Here\'s how we would add a <code>\"bark\"</code> property to <code>ourDog</code>:<br><br><code>ourDog.bark = \"bow-wow\";</code> <br><br>or<br><br><code>ourDog[\"bark\"] = \"bow-wow\";</code><br><br>Now when we evaluate <code>ourDog.bark</code>, we\'ll get his bark, \"bow-wow\".<br><br> <hr>Add a <code>\"bark\"</code> property to <code>myDog</code> and set it to a dog sound, such as \"woof\". You may use either dot or bracket notation.<br><br>','// Example<br>var ourDog = {<br>  \"name\": \"Camper\",<br>  \"legs\": 4,<br>  \"tails\": 1,<br>  \"friends\": [\"everything!\"],<br>  \"bark\": \"bow-wow\"<br>};<br><br>delete ourDog.bark;<br><br>// Setup<br>var myDog = {<br>  \"name\": \"Happy Coder\",<br>  \"legs\": 4,<br>  \"tails\": 1,<br>  \"friends\": [\"freeCodeCamp Campers\"],<br>  \"bark\": \"woof\"<br>};<br><br>// Only change code below this line.<br><br><br>',5),(270,'56bbb991ad1ed5201cd392d3','Delete Properties from a JavaScript Object','We can also delete properties from objects like this:<br><br><code>delete ourDog.bark;</code><br><br> <hr>Delete the <code>\"tails\"</code> property from <code>myDog</code>. You may use either dot or bracket notation.<br><br>','// Setup<br>function phoneticLookup(val) {<br>  var result = \"\";<br><br>  // Only change code below this line<br>  switch(val) {<br>    case \"alpha\": <br>      result = \"Adams\";<br>      break;<br>    case \"bravo\": <br>      result = \"Boston\";<br>      break;<br>    case \"charlie\": <br>      result = \"Chicago\";<br>      break;<br>    case \"delta\": <br>      result = \"Denver\";<br>      break;<br>    case \"echo\": <br>      result = \"Easy\";<br>      break;<br>    case \"foxtrot\": <br>      result = \"Frank\";<br>  }<br><br>  // Only change code above this line<br>  return result;<br>}<br><br>// Change this value to test<br>phoneticLookup(\"charlie\");<br>',5),(271,'56533eb9ac21ba0edf2244ca','Using Objects for Lookups','Objects can be thought of as a key/value storage, like a dictionary. If you have tabular data, you can use an object to \"lookup\" values rather than a <code>switch</code> statement or an <code>if/else</code> chain. This is most useful when you know that your input data is limited to a certain range.<br><br>Here is an example of a simple reverse alphabet lookup:<br><br><blockquote>var alpha = {<br>&nbsp;&nbsp;1:\"Z\",<br>&nbsp;&nbsp;2:\"Y\",<br>&nbsp;&nbsp;3:\"X\",<br>&nbsp;&nbsp;4:\"W\",<br>&nbsp;&nbsp;...<br>&nbsp;&nbsp;24:\"C\",<br>&nbsp;&nbsp;25:\"B\",<br>&nbsp;&nbsp;26:\"A\"<br>};<br>alpha[2]; // \"Y\"<br>alpha[24]; // \"C\"<br><br>var value = 2;<br>alpha[value]; // \"Y\"</blockquote><br><br> <hr>Convert the switch statement into an object called <code>lookup</code>. Use it to look up <code>val</code> and assign the associated string to the <code>result</code> variable.<br><br>','// Setup<br>var myObj = {<br>  gift: \"pony\",<br>  pet: \"kitten\",<br>  bed: \"sleigh\"<br>};<br><br>function checkObj(checkProp) {<br>  // Your Code Here<br>  <br>  return \"Change Me!\";<br>}<br><br>// Test your code by modifying these values<br>checkObj(\"gift\");<br>',5),(272,'567af2437cbaa8c51670a16c','Testing Objects for Properties','Sometimes it is useful to check if the property of a given object exists or not. We can use the <code>.hasOwnProperty(propname)</code> method of objects to determine if that object has the given property name. <code>.hasOwnProperty()</code> returns <code>true</code> or <code>false</code> if the property is found or not.<br><br><strong>Example</strong><br><br><blockquote>var myObj = {<br>&nbsp;&nbsp;top: \"hat\",<br>&nbsp;&nbsp;bottom: \"pants\"<br>};<br>myObj.hasOwnProperty(\"top\");    // true<br>myObj.hasOwnProperty(\"middle\"); // false</blockquote><br><br> <hr>Modify the function <code>checkObj</code> to test <code>myObj</code> for <code>checkProp</code>. If the property is found, return that property\'s value. If not, return <code>\"Not Found\"</code>.<br><br>','var myMusic = [<br>  {<br>    \"artist\": \"Billy Joel\",<br>    \"title\": \"Piano Man\",<br>    \"release_year\": 1973,<br>    \"formats\": [ <br>      \"CD\",<br>      \"8T\",<br>      \"LP\"<br>    ],<br>    \"gold\": true<br>  }<br>  // Add record here<br>];<br><br>',5),(273,'56533eb9ac21ba0edf2244cb','Manipulating Complex Objects','Sometimes you may want to store data in a flexible <dfn>Data Structure</dfn>. A JavaScript object is one way to handle flexible data. They allow for arbitrary combinations of <dfn>strings</dfn>, <dfn>numbers</dfn>, <dfn>booleans</dfn>, <dfn>arrays</dfn>, <dfn>functions</dfn>, and <dfn>objects</dfn>.<br><br>Here\'s an example of a complex data structure:<br><br><blockquote>var ourMusic = [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\"artist\": \"Daft Punk\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"title\": \"Homework\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"release_year\": 1997,<br>&nbsp;&nbsp;&nbsp;&nbsp;\"formats\": [ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"CD\", <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Cassette\", <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"LP\"<br>&nbsp;&nbsp;&nbsp;&nbsp;],<br>&nbsp;&nbsp;&nbsp;&nbsp;\"gold\": true<br>&nbsp;&nbsp;}<br>];</blockquote><br><br>This is an array which contains one object inside. The object has various pieces of <dfn>metadata</dfn> about an album. It also has a nested <code>\"formats\"</code> array. If you want to add more album records, you can do this by adding records to the top level array.<br><br>Objects hold data in a property, which has a key-value format. In the example above, <code>\"artist\": \"Daft Punk\"</code> is a property that has a key of <code>\"artist\"</code> and a value of <code>\"Daft Punk\"</code>.<br><br><a href=\'http://www.json.org/\' target=_blank>JavaScript Object Notation</a> or <code>JSON</code> is a related data interchange format used to store data.<br><br><blockquote>{<br>&nbsp;&nbsp;\"artist\": \"Daft Punk\",<br>&nbsp;&nbsp;\"title\": \"Homework\",<br>&nbsp;&nbsp;\"release_year\": 1997,<br>&nbsp;&nbsp;\"formats\": [ <br>&nbsp;&nbsp;&nbsp;&nbsp;\"CD\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Cassette\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"LP\"<br>&nbsp;&nbsp;],<br>&nbsp;&nbsp;\"gold\": true<br>}</blockquote><br><br><strong>Note</strong><br>You will need to place a comma after every object in the array, unless it is the last object in the array.<br><br> <hr>Add a new album to the <code>myMusic</code> array. Add <code>artist</code> and <code>title</code> strings, <code>release_year</code> number, and a <code>formats</code> array of strings.<br><br>','// Setup<br>var myStorage = {<br>  \"car\": {<br>    \"inside\": {<br>      \"glove box\": \"maps\",<br>      \"passenger seat\": \"crumbs\"<br>     },<br>    \"outside\": {<br>      \"trunk\": \"jack\"<br>    }<br>  }<br>};<br><br>var gloveBoxContents = undefined; // Change this line<br><br>',5),(274,'56533eb9ac21ba0edf2244cc','Accessing Nested Objects','The sub-properties of objects can be accessed by chaining together the dot or bracket notation.<br><br>Here is a nested object:<br><br><blockquote>var ourStorage = {<br>&nbsp;&nbsp;\"desk\": {<br>&nbsp;&nbsp;&nbsp;&nbsp;\"drawer\": \"stapler\"<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;\"cabinet\": {<br>&nbsp;&nbsp;&nbsp;&nbsp;\"top drawer\": { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"folder1\": \"a file\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"folder2\": \"secrets\"<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;\"bottom drawer\": \"soda\"<br>&nbsp;&nbsp;}<br>};<br>ourStorage.cabinet[\"top drawer\"].folder2;  // \"secrets\"<br>ourStorage.desk.drawer; // \"stapler\"</blockquote><br><br> <hr>Access the <code>myStorage</code> object and assign the contents of the <code>glove box</code> property to the <code>gloveBoxContents</code> variable. Use bracket notation for properties with a space in their name.<br><br>','// Setup<br>var myPlants = [<br>  { <br>    type: \"flowers\",<br>    list: [<br>      \"rose\",<br>      \"tulip\",<br>      \"dandelion\"<br>    ]<br>  },<br>  {<br>    type: \"trees\",<br>    list: [<br>      \"fir\",<br>      \"pine\",<br>      \"birch\"<br>    ]<br>  }  <br>];<br><br>// Only change code below this line<br><br>var secondTree = \"\"; // Change this line<br><br>',5),(275,'56533eb9ac21ba0edf2244cd','Accessing Nested Arrays','As we have seen in earlier examples, objects can contain both nested objects and nested arrays. Similar to accessing nested objects, Array bracket notation can be chained to access nested arrays.<br><br>Here is an example of how to access a nested array:<br><br><blockquote>var ourPets = [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;animalType: \"cat\",<br>&nbsp;&nbsp;&nbsp;&nbsp;names: [<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Meowzer\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Fluffy\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Kit-Cat\"<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;animalType: \"dog\",<br>&nbsp;&nbsp;&nbsp;&nbsp;names: [<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Spot\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Bowser\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Frankie\"<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;}<br>];<br>ourPets[0].names[1]; // \"Fluffy\"<br>ourPets[1].names[0]; // \"Spot\"</blockquote><br><br> <hr>Retrieve the second tree from the variable <code>myPlants</code> using object dot and array bracket notation.<br><br>','// Setup<br>var collection = {<br>    \"2548\": {<br>      \"album\": \"Slippery When Wet\",<br>      \"artist\": \"Bon Jovi\",<br>      \"tracks\": [ <br>        \"Let It Rock\", <br>        \"You Give Love a Bad Name\" <br>      ]<br>    },<br>    \"2468\": {<br>      \"album\": \"1999\",<br>      \"artist\": \"Prince\",<br>      \"tracks\": [ <br>        \"1999\", <br>        \"Little Red Corvette\" <br>      ]<br>    },<br>    \"1245\": {<br>      \"artist\": \"Robert Palmer\",<br>      \"tracks\": [ ]<br>    },<br>    \"5439\": {<br>      \"album\": \"ABBA Gold\"<br>    }<br>};<br>// Keep a copy of the collection for tests<br>var collectionCopy = JSON.parse(JSON.stringify(collection));<br><br>// Only change code below this line<br>function updateRecords(id, prop, value) {<br>  <br>  <br>  return collection;<br>}<br><br>// Alter values below to test your code<br>updateRecords(5439, \"artist\", \"ABBA\");<br><br>',5),(276,'56533eb9ac21ba0edf2244cf','Record Collection','You are given a JSON object representing a part of your musical album collection. Each album has several properties and a unique id number as its key. Not all albums have complete information.<br><br>Write a function which takes an album\'s <code>id</code> (like <code>2548</code>), a property <code>prop</code> (like <code>\"artist\"</code> or <code>\"tracks\"</code>), and a <code>value</code> (like <code>\"Addicted to Love\"</code>) to modify the data in this collection.<br><br>If <code>prop</code> isn\'t <code>\"tracks\"</code> and <code>value</code> isn\'t empty (<code>\"\"</code>), update or set the <code>value</code> for that record album\'s property.<br><br>Your function must always return the entire collection object.<br><br>There are several rules for handling incomplete data:<br><br>If <code>prop</code> is <code>\"tracks\"</code> but the album doesn\'t have a <code>\"tracks\"</code> property, create an empty array before adding the new value to the album\'s corresponding property.<br><br>If <code>prop</code> is <code>\"tracks\"</code> and <code>value</code> isn\'t empty (<code>\"\"</code>), push the <code>value</code> onto the end of the album\'s existing <code>tracks</code> array.<br><br>If <code>value</code> is empty (<code>\"\"</code>), delete the given <code>prop</code> property from the album.<br><br><strong>Hints</strong><br>Use <code>bracket notation</code> when <a href=\"javascript-algorithms-and-data-structures/basic-javascript/accessing-object-properties-with-variables\" target=\"_blank\">accessing object properties with variables</a>.<br><br>Push is an array method you can read about on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\" target=\"_blank\">Mozilla Developer Network</a>.<br><br>You may refer back to <a href=\"javascript-algorithms-and-data-structures/basic-javascript/manipulating-complex-objects\" target=\"_blank\">Manipulating Complex Objects</a> Introducing JavaScript Object Notation (JSON) for a refresher.<br><br>','// Setup<br>var myArray = [];<br><br>// Only change code below this line.<br><br><br>',5),(277,'cf1111c1c11feddfaeb1bdef','Iterate with JavaScript While Loops','You can run the same code multiple times by using a loop.<br><br>The first type of loop we will learn is called a \"<code>while</code>\" loop because it runs \"while\" a specified condition is true and stops once that condition is no longer true.<br><br><blockquote>var ourArray = [];<br>var i = 0;<br>while(i &#60; 5) {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>}</blockquote><br><br>Let\'s try getting a while loop to work by pushing values to an array.<br><br> <hr>Push the numbers 0 through 4 to <code>myArray</code> using a <code>while</code> loop.<br><br>','// Example<br>var ourArray = [];<br><br>for (var i = 0; i < 5; i++) {<br>  ourArray.push(i);<br>}<br><br>// Setup<br>var myArray = [];<br><br>// Only change code below this line.<br><br><br>',5),(278,'cf1111c1c11feddfaeb5bdef','Iterate with JavaScript For Loops','You can run the same code multiple times by using a loop.<br><br>The most common type of JavaScript loop is called a \"<code>for loop</code>\" because it runs \"for\" a specific number of times.<br><br>For loops are declared with three optional expressions separated by semicolons:<br><br><code>for ([initialization]; [condition]; [final-expression])</code><br><br>The <code>initialization</code> statement is executed one time only before the loop starts. It is typically used to define and setup your loop variable.<br><br>The <code>condition</code> statement is evaluated at the beginning of every loop iteration and will continue as long as it evaluates to <code>true</code>. When <code>condition</code> is <code>false</code> at the start of the iteration, the loop will stop executing. This means if <code>condition</code> starts as <code>false</code>, your loop will never execute.<br><br>The <code>final-expression</code> is executed at the end of each loop iteration, prior to the next <code>condition</code> check and is usually used to increment or decrement your loop counter.<br><br>In the following example we initialize with <code>i = 0</code> and iterate while our condition <code>i &#60; 5</code> is true. We\'ll increment <code>i</code> by <code>1</code> in each loop iteration with <code>i++</code> as our <code>final-expression</code>.<br><br><blockquote>var ourArray = [];<br>for (var i = 0; i &#60; 5; i++) {<br>&nbsp;&nbsp;ourArray.push(i);<br>}</blockquote><br><br><code>ourArray</code> will now contain <code>[0,1,2,3,4]</code>.<br><br> <hr>Use a <code>for</code> loop to work to push the values 1 through 5 onto <code>myArray</code>.<br><br>','// Example<br>var ourArray = [];<br><br>for (var i = 0; i < 10; i += 2) {<br>  ourArray.push(i);<br>}<br><br>// Setup<br>var myArray = [];<br><br>// Only change code below this line.<br><br><br>',5),(279,'56104e9e514f539506016a5c','Iterate Odd Numbers With a For Loop','For loops don\'t have to iterate one at a time. By changing our <code>final-expression</code>, we can count by even numbers.<br><br>We\'ll start at <code>i = 0</code> and loop while <code>i &#60; 10</code>. We\'ll increment <code>i</code> by 2 each loop with <code>i += 2</code>.<br><br><blockquote>var ourArray = [];<br>for (var i = 0; i &#60; 10; i += 2) {<br>&nbsp;&nbsp;ourArray.push(i);<br>}</blockquote><br><br><code>ourArray</code> will now contain <code>[0,2,4,6,8]</code>.<br><br>Let\'s change our <code>initialization</code> so we can count by odd numbers.<br><br> <hr>Push the odd numbers from 1 through 9 to <code>myArray</code> using a <code>for</code> loop.<br><br>','// Example<br>var ourArray = [];<br><br>for (var i = 10; i > 0; i -= 2) {<br>  ourArray.push(i);<br>}<br><br>// Setup<br>var myArray = [];<br><br>// Only change code below this line.<br><br><br>',5),(280,'56105e7b514f539506016a5e','Count Backwards With a For Loop','A for loop can also count backwards, so long as we can define the right conditions.<br><br>In order to count backwards by twos, we\'ll need to change our <code>initialization</code>, <code>condition</code>, and <code>final-expression</code>.<br><br>We\'ll start at <code>i = 10</code> and loop while <code>i &#62; 0</code>. We\'ll decrement <code>i</code> by 2 each loop with <code>i -= 2</code>.<br><br><blockquote>var ourArray = [];<br>for (var i=10; i &#62; 0; i-=2) {<br>&nbsp;&nbsp;ourArray.push(i);<br>}</blockquote><br><br><code>ourArray</code> will now contain <code>[10,8,6,4,2]</code>.<br><br>Let\'s change our <code>initialization</code> and <code>final-expression</code> so we can count backward by twos by odd numbers.<br><br> <hr>Push the odd numbers from 9 through 1 to <code>myArray</code> using a <code>for</code> loop.<br><br>','// Example<br>var ourArr = [ 9, 10, 11, 12];<br>var ourTotal = 0;<br><br>for (var i = 0; i < ourArr.length; i++) {<br>  ourTotal += ourArr[i];<br>}<br><br>// Setup<br>var myArr = [ 2, 3, 4, 5, 6];<br><br>// Only change code below this line<br><br><br>',5),(281,'5675e877dbd60be8ad28edc6','Iterate Through an Array with a For Loop','A common task in JavaScript is to iterate through the contents of an array. One way to do that is with a <code>for</code> loop. This code will output each element of the array <code>arr</code> to the console:<br><br><blockquote>var arr = [10,9,8,7,6];<br>for (var i = 0; i < arr.length; i++) {<br>&nbsp;&nbsp; console.log(arr[i]);<br>}</blockquote><br><br>Remember that Arrays have zero-based numbering, which means the last index of the array is length - 1. Our <dfn>condition</dfn> for this loop is <code>i < arr.length</code>, which stops when <code>i</code> is at length - 1.<br><br> <hr>Declare and initialize a variable <code>total</code> to <code>0</code>. Use a <code>for</code> loop to add the value of each element of the <code>myArr</code> array to <code>total</code>.<br><br>','function multiplyAll(arr) {<br>  var product = 1;<br>  // Only change code below this line<br>  <br>  // Only change code above this line<br>  return product;<br>}<br><br>// Modify values below to test your code<br>multiplyAll([[1,2],[3,4],[5,6,7]]);<br><br>',5),(282,'56533eb9ac21ba0edf2244e1','Nesting For Loops','If you have a multi-dimensional array, you can use the same logic as the prior waypoint to loop through both the array and any sub-arrays. Here is an example:<br><br><blockquote>var arr = [<br>&nbsp;&nbsp;[1,2], [3,4], [5,6]<br>];<br>for (var i=0; i &lt; arr.length; i++) {<br>&nbsp;&nbsp;for (var j=0; j &lt; arr[i].length; j++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(arr[i][j]);<br>&nbsp;&nbsp;}<br>}</blockquote><br><br>This outputs each sub-element in <code>arr</code> one at a time. Note that for the inner loop, we are checking the <code>.length</code> of <code>arr[i]</code>, since <code>arr[i]</code> is itself an array.<br><br> <hr>Modify function <code>multiplyAll</code> so that it multiplies the <code>product</code> variable by each number in the sub-arrays of <code>arr</code><br><br>','// Setup<br>var myArray = [];<br>var i = 10;<br><br>// Only change code below this line.<br><br>while (i < 5) {<br>  myArray.push(i);<br>  i++;<br>}<br><br>',5),(283,'5a2efd662fb457916e1fe604','Iterate with JavaScript Do...While Loops','You can run the same code multiple times by using a loop.<br><br>The next type of loop you will learn is called a \"<code>do...while</code>\" loop because it first will \"<code>do</code>\" one pass of the code inside the loop no matter what, and then it runs \"<code>while</code>\" a specified condition is true and stops once that condition is no longer true. Let\'s look at an example.<br><br><blockquote>var ourArray = [];<br>var i = 0;<br>do {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>} while (i < 5);</blockquote><br><br>This behaves just as you would expect with any other type of loop, and the resulting array will look like <code>[0, 1, 2, 3, 4]</code>. However, what makes the <code>do...while</code> different from other loops is how it behaves when the condition fails on the first check. Let\'s see this in action.<br><br>Here is a regular while loop that will run the code in the loop as long as <code>i < 5</code>.<br><br><blockquote>var ourArray = []; <br>var i = 5;<br>while (i < 5) {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>}</blockquote><br><br>Notice that we initialize the value of <code>i</code> to be 5. When we execute the next line, we notice that <code>i</code> is not less than 5. So we do not execute the code inside the loop. The result is that <code>ourArray</code> will end up with nothing added to it, so it will still look like this <code>[]</code> when all the code in the example above finishes running.<br><br>Now, take a look at a <code>do...while</code> loop.<br><br><blockquote>var ourArray = []; <br>var i = 5;<br>do {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>} while (i < 5);</blockquote><br><br>In this case, we initialize the value of <code>i</code> as 5, just like we did with the while loop. When we get to the next line, there is no check for the value of <code>i</code>, so we go to the code inside the curly braces and execute it. We will add one element to the array and increment <code>i</code> before we get to the condition check. Then, when we get to checking if <code>i < 5</code> see that <code>i</code> is now 6, which fails the conditional check. So we exit the loop and are done. At the end of the above example, the value of <code>ourArray</code> is <code>[5]</code>.<br><br>Essentially, a <code>do...while</code> loop ensures that the code inside the loop will run at least once.<br><br>Let\'s try getting a <code>do...while</code> loop to work by pushing values to an array.<br><br> <hr>Change the <code>while</code> loop in the code to a <code>do...while</code> loop so that the loop will push the number 10 to <code>myArray</code>, and <code>i</code> will be equal to <code>11</code> when your code finishes running.<br><br>','//Setup<br>var contacts = [<br>    {<br>        \"firstName\": \"Akira\",<br>        \"lastName\": \"Laine\",<br>        \"number\": \"0543236543\",<br>        \"likes\": [\"Pizza\", \"Coding\", \"Brownie Points\"]<br>    },<br>    {<br>        \"firstName\": \"Harry\",<br>        \"lastName\": \"Potter\",<br>        \"number\": \"0994372684\",<br>        \"likes\": [\"Hogwarts\", \"Magic\", \"Hagrid\"]<br>    },<br>    {<br>        \"firstName\": \"Sherlock\",<br>        \"lastName\": \"Holmes\",<br>        \"number\": \"0487345643\",<br>        \"likes\": [\"Intriguing Cases\", \"Violin\"]<br>    },<br>    {<br>        \"firstName\": \"Kristian\",<br>        \"lastName\": \"Vos\",<br>        \"number\": \"unknown\",<br>        \"likes\": [\"JavaScript\", \"Gaming\", \"Foxes\"]<br>    }<br>];<br><br><br>function lookUpProfile(name, prop){<br>// Only change code below this line<br><br>// Only change code above this line<br>}<br><br>// Change these values to test your function<br>lookUpProfile(\"Akira\", \"likes\");<br>',5),(284,'5688e62ea601b2482ff8422b','Profile Lookup','We have an array of objects representing different people in our contacts lists.<br><br>A <code>lookUpProfile</code> function that takes <code>name</code> and a property (<code>prop</code>) as arguments has been pre-written for you.<br><br>The function should check if <code>name</code> is an actual contact\'s <code>firstName</code> and the given property (<code>prop</code>) is a property of that contact.<br><br>If both are true, then return the \"value\" of that property.<br><br>If <code>name</code> does not correspond to any contacts then return <code>\"No such contact\"</code><br><br>If <code>prop</code> does not correspond to any valid properties of a contact found to match <code>name</code> then return <code>\"No such property\"</code><br><br>','function randomFraction() {<br><br>  // Only change code below this line.<br><br>  return 0;<br><br>  // Only change code above this line.<br>}<br>',5),(285,'cf1111c1c11feddfaeb9bdef','Generate Random Fractions with JavaScript','Random numbers are useful for creating random behavior.<br><br>JavaScript has a <code>Math.random()</code> function that generates a random decimal number between <code>0</code> (inclusive) and not quite up to <code>1</code> (exclusive). Thus <code>Math.random()</code> can return a <code>0</code> but never quite return a <code>1</code><br><br><strong>Note</strong><br>Like <a href=\'storing-values-with-the-assignment-operator\' target=\'_blank\'>Storing Values with the Equal Operator</a>, all function calls will be resolved before the <code>return</code> executes, so we can <code>return</code> the value of the <code>Math.random()</code> function.<br><br> <hr>Change <code>randomFraction</code> to return a random number instead of returning <code>0</code>.<br><br>','var randomNumberBetween0and19 = Math.floor(Math.random() * 20);<br><br>function randomWholeNum() {<br><br>  // Only change code below this line.<br><br>  return Math.random();<br>}<br>',5),(286,'cf1111c1c12feddfaeb1bdef','Generate Random Whole Numbers with JavaScript','It\'s great that we can generate random decimal numbers, but it\'s even more useful if we use it to generate random whole numbers.<br><br><ol><li>Use <code>Math.random()</code> to generate a random decimal.</li><li>Multiply that random decimal by <code>20</code>.</li><li>Use another function, <code>Math.floor()</code> to round the number down to its nearest whole number.</li></ol><br><br>Remember that <code>Math.random()</code> can never quite return a <code>1</code> and, because we\'re rounding down, it\'s impossible to actually get <code>20</code>. This technique will give us a whole number between <code>0</code> and <code>19</code>.<br><br>Putting everything together, this is what our code looks like:<br><br><code>Math.floor(Math.random() * 20);</code><br><br>We are calling <code>Math.random()</code>, multiplying the result by 20, then passing the value to <code>Math.floor()</code> function to round the value down to the nearest whole number.<br><br> <hr>Use this technique to generate and return a random whole number between <code>0</code> and <code>9</code>.<br><br>','// Example<br>function ourRandomRange(ourMin, ourMax) {<br><br>  return Math.floor(Math.random() * (ourMax - ourMin + 1)) + ourMin;<br>}<br><br>ourRandomRange(1, 9);<br><br>// Only change code below this line.<br><br>function randomRange(myMin, myMax) {<br><br>  return 0; // Change this line<br><br>}<br><br>// Change these values to test your function<br>var myRandom = randomRange(5, 15);<br>',5),(287,'cf1111c1c12feddfaeb2bdef','Generate Random Whole Numbers within a Range','Instead of generating a random number between zero and a given number like we did before, we can generate a random number that falls within a range of two specific numbers.<br><br>To do this, we\'ll define a minimum number <code>min</code> and a maximum number <code>max</code>.<br><br>Here\'s the formula we\'ll use. Take a moment to read it and try to understand what this code is doing:<br><br><code>Math.floor(Math.random() * (max - min + 1)) + min</code><br><br> <hr>Create a function called <code>randomRange</code> that takes a range <code>myMin</code> and <code>myMax</code> and returns a random number that\'s greater than or equal to <code>myMin</code>, and is less than or equal to <code>myMax</code>, inclusive.<br><br>','function convertToInteger(str) {<br>  <br>}<br><br>convertToInteger(\"56\");<br>',5),(288,'587d7b7e367417b2b2512b23','Use the parseInt Function','The <code>parseInt()</code> function parses a string and returns an integer. Here\'s an example:<br><br><code>var a = parseInt(\"007\");</code><br><br>The above function converts the string \"007\" to an integer 7. If the first character in the string can\'t be converted into a number, then it returns <code>NaN</code>.<br><br> <hr>Use <code>parseInt()</code> in the <code>convertToInteger</code> function so it converts the input string <code>str</code> into an integer, and returns it.<br><br>','function convertToInteger(str) {<br>  <br>}<br><br>convertToInteger(\"10011\");<br>',5),(289,'587d7b7e367417b2b2512b22','Use the parseInt Function with a Radix','The <code>parseInt()</code> function parses a string and returns an integer. It takes a second argument for the radix, which specifies the base of the number in the string. The radix can be an integer between 2 and 36.<br><br>The function call looks like:<br><br><code>parseInt(string, radix);</code><br><br>And here\'s an example:<br><br><code>var a = parseInt(\"11\", 2);</code><br><br>The radix variable says that \"11\" is in the binary system, or base 2. This example converts the string \"11\" to an integer 3.<br><br> <hr>Use <code>parseInt()</code> in the <code>convertToInteger</code> function so it converts a binary number to an integer and returns it.<br><br>','function checkEqual(a, b) {<br>  <br>}<br><br>checkEqual(1, 2);<br>',5),(290,'587d7b7e367417b2b2512b24','Use the Conditional (Ternary) Operator','The <dfn>conditional operator</dfn>, also called the <dfn>ternary operator</dfn>, can be used as a one line if-else expression.<br><br>The syntax is:<br><br><code>condition ? statement-if-true : statement-if-false;</code><br><br>The following function uses an if-else statement to check a condition:<br><br><blockquote>function findGreater(a, b) {<br>&nbsp;&nbsp;if(a > b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"a is greater\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"b is greater\";<br>&nbsp;&nbsp;}<br>}</blockquote><br><br>This can be re-written using the <code>conditional operator</code>:<br><br><blockquote>function findGreater(a, b) {<br>&nbsp;&nbsp;return a > b ? \"a is greater\" : \"b is greater\";<br>}</blockquote><br><br> <hr>Use the <code>conditional operator</code> in the <code>checkEqual</code> function to check if two numbers are equal or not. The function should return either true or false.<br><br>','function checkSign(num) {<br>  <br>}<br><br>checkSign(10);<br>',5),(291,'587d7b7e367417b2b2512b21','Use Multiple Conditional (Ternary) Operators','In the previous challenge, you used a single <code>conditional operator</code>. You can also chain them together to check for multiple conditions.<br><br>The following function uses if, else if, and else statements to check multiple conditions:<br><br><blockquote>function findGreaterOrEqual(a, b) {<br>&nbsp;&nbsp;if(a === b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"a and b are equal\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else if(a > b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"a is greater\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"b is greater\";<br>&nbsp;&nbsp;}<br>}</blockquote><br><br>The above function can be re-written using multiple <code>conditional operators</code>:<br><br><blockquote>function findGreaterOrEqual(a, b) {<br>&nbsp;&nbsp;return (a === b) ? \"a and b are equal\" : (a > b) ? \"a is greater\" : \"b is greater\";<br>}</blockquote><br><br> <hr>Use multiple <code>conditional operators</code> in the <code>checkSign</code> function to check if a number is positive, negative or zero.<br><br>','let yourArray; // change this line<br>',5),(292,'587d7b7e367417b2b2512b20','Use an Array to Store a Collection of Data','The below is an example of the simplest implementation of an array data structure. This is known as a <dfn>one-dimensional array</dfn>, meaning it only has one level, or that it does not have any other arrays nested within it. Notice it contains <dfn>booleans</dfn>, <dfn>strings</dfn>, and <dfn>numbers</dfn>, among other valid JavaScript data types:<br><br><blockquote>let simpleArray = [\'one\', 2, \'three?, true, false, undefined, null];<br>console.log(simpleArray.length);<br>// logs 7</blockquote><br><br>All array\'s have a length property, which as shown above, can be very easily accessed with the syntax <code>Array.length</code>.<br><br>A more complex implementation of an array can be seen below. This is known as a <dfn>multi-dimensional array</dfn>, or an array that contains other arrays. Notice that this array also contains JavaScript <dfn>objects</dfn>, which we will examine very closely in our next section, but for now, all you need to know is that arrays are also capable of storing complex objects.<br><br><blockquote>let complexArray = [<br>&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;one: 1,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;two: 2<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;three: 3,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;four: 4<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;],<br>&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a: \"a\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b: \"b\"<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c: \"c\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d: ?d?<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;]<br>];</blockquote><br><br> <hr>We have defined a variable called <code>yourArray</code>. Complete the statement by assigning an array of at least 5 elements in length to the <code>yourArray</code> variable. Your array should contain at least one <dfn>string</dfn>, one <dfn>number</dfn>, and one <dfn>boolean</dfn>.<br><br>','let myArray = [\"a\", \"b\", \"c\", \"d\"];<br>// change code below this line<br><br>//change code above this line<br>console.log(myArray);<br>',5),(293,'5a661e0f1068aca922b3ef17','Access an Array\'s Contents Using Bracket Notation','The fundamental feature of any data structure is, of course, the ability to not only store data, but to be able to retrieve that data on command. So, now that we\'ve learned how to create an array, let\'s begin to think about how we can access that array\'s information.<br><br>When we define a simple array as seen below, there are 3 items in it:<br><br><blockquote>let ourArray = [\"a\", \"b\", \"c\"];</blockquote><br><br>In an array, each array item has an <dfn>index</dfn>.  This index doubles as the position of that item in the array, and how you reference it. However, it is important to note, that JavaScript arrays are <dfn>zero-indexed</dfn>, meaning that the first element of an array is actually at the <em><strong>zeroth</strong></em> position, not the first.<br><br>In order to retrieve an element from an array we can enclose an index in brackets and append it to the end of an array, or more commonly, to a variable which references an array object. This is known as <dfn>bracket notation</dfn>.<br><br>For example, if we want to retrieve the <code>\"a\"</code> from <code>ourArray</code> and assign it to a variable, we can do so with the following code:<br><br><blockquote>let ourVariable = ourArray[0];<br>// ourVariable equals \"a\"</blockquote><br><br>In addition to accessing the value associated with an index, you can also <em>set</em> an index to a value using the same notation:<br><br><blockquote>ourArray[1] = \"not b anymore\";<br>// ourArray now equals [\"a\", \"not b anymore\", \"c\"];</blockquote><br><br>Using bracket notation, we have now reset the item at index 1 from <code>\"b\"</code>, to <code>\"not b anymore\"</code>.<br><br> <hr>In order to complete this challenge, set the 2nd position (index <code>1</code>) of <code>myArray</code> to anything you want, besides <code>\"b\"</code>.<br><br>','function mixedNumbers(arr) {<br>  // change code below this line<br><br>  // change code above this line<br>  return arr;<br>}<br><br>// do not change code below this line<br>console.log(mixedNumbers([\'\'IV\'\', 5, \'\'six\'\']));<br>',5),(294,'587d78b2367417b2b2512b0e','Add Items to an Array with push() and unshift()','An array\'s length, like the data types it can contain, is not fixed. Arrays can be defined with a length of any number of elements, and elements can be added or removed over time; in other words, arrays are <dfn>mutable</dfn>. In this challenge, we will look at two methods with which we can programmatically modify an array: <code>Array.push()</code> and <code>Array.unshift()</code>. <br><br>Both methods take one or more elements as parameters and add those elements to the array the method is being called on; the <code>push()</code> method adds elements to the end of an array, and <code>unshift()</code> adds elements to the beginning. Consider the following:<br><br><blockquote>let twentyThree = \'XXIII\';<br>let romanNumerals = [\'XXI\', \'XXII\'];<br><br>romanNumerals.unshift(\'XIX\', \'XX\');<br>// now equals [\'XIX\', \'XX\', \'XXI\', \'XXII\']<br><br>romanNumerals.push(twentyThree);<br>// now equals [\'XIX\', \'XX\', \'XXI\', \'XXII\', \'XXIII\']<br><br>Notice that we can also pass variables, which allows us even greater flexibility in dynamically modifying our array\'s data.<br><br> <hr>We have defined a function, <code>mixedNumbers</code>, which we are passing an array as an argument. Modify the function by using <code>push()</code> and <code>unshift()</code> to add <code>\'I\', 2, \'three\'</code> to the beginning of the array and <code>7, \'VIII\', 9</code> to the end so that the returned array contains representations of the numbers 1-9 in order.<br><br>','function popShift(arr) {<br>  let popped; // change this line<br>  let shifted; // change this line<br>  return [shifted, popped];<br>}<br><br>// do not change code below this line<br>console.log(popShift([\'\'challenge\'\', \'\'is\'\', \'\'not\'\', \'\'complete\'\']));<br>',5),(295,'587d78b2367417b2b2512b0f','Remove Items from an Array with pop() and shift()','Both <code>push()</code> and <code>unshift()</code> have corresponding methods that are nearly functional opposites: <code>pop()</code> and <code>shift()</code>. As you may have guessed by now, instead of adding, <code>pop()</code> <em>removes</em> an element from the end of an array, while <code>shift()</code> removes an element from the beginning. The key difference between <code>pop()</code> and <code>shift()</code> and their cousins <code>push()</code> and <code>unshift()</code>, is that neither method takes parameters, and each only allows an array to be modified by a single element at a time.<br><br>Let\'s take a look:<br><br><blockquote>let greetings = [\'whats up?\', \'hello\', \'see ya!\'];<br><br>greetings.pop();<br>// now equals [\'whats up?\', \'hello\']<br><br>greetings.shift();<br>// now equals [\'hello\']</blockquote><br><br>We can also return the value of the removed element with either method like this:<br><br><blockquote>let popped = greetings.pop();<br>// returns \'hello\'<br>// greetings now equals []</blockquote><br><br> <hr>We have defined a function, <code>popShift</code>, which takes an array as an argument and returns a new array. Modify the function, using <code>pop()</code> and <code>shift()</code>, to remove the first and last elements of the argument array, and assign the removed elements to their corresponding variables, so that the returned array contains their values.<br><br>','function sumOfTen(arr) {<br>  // change code below this line<br>  <br>  // change code above this line<br>  return arr.reduce((a, b) => a + b);<br>}<br><br>// do not change code below this line<br>console.log(sumOfTen([2, 5, 1, 5, 2, 1]));<br>',5),(296,'587d78b2367417b2b2512b10','Remove Items Using splice()','Ok, so we\'ve learned how to remove elements from the beginning and end of arrays using <code>shift()</code> and <code>pop()</code>, but what if we want to remove an element from somewhere in the middle? Or remove more than one element at once? Well, that\'s where <code>splice()</code> comes in. <code>splice()</code> allows us to do just that: <strong>remove any number of consecutive elements</strong> from anywhere in an array.<br><br><code>splice()</code> can take up to 3 parameters, but for now, we\'ll focus on just the first 2. The first two parameters of <code>splice()</code> are integers which represent indexes, or positions, of the array that <code>splice()</code> is being called upon. And remember, arrays are <em>zero-indexed</em>, so to indicate the first element of an array, we would use <code>0</code>. <code>splice()</code>\'s first parameter represents the index on the array from which to begin removing elements, while the second parameter indicates the number of elements to delete. For example:<br><br><blockquote>let array = [\'today\', \'was\', \'not\', \'so\', \'great\'];<br><br>array.splice(2, 2);<br>// remove 2 elements beginning with the 3rd element<br>// array now equals [\'today\', \'was\', \'great\']</blockquote><br><br><code>splice()</code> not only modifies the array it\'s being called on, but it also returns a new array containing the value of the removed elements:<br><br><blockquote>let array = [\'I\', \'am\', \'feeling\', \'really\', \'happy\'];<br><br>let newArray = array.splice(3, 2);<br>// newArray equals [\'really\', \'happy\']</blockquote><br><br> <hr>We\'ve defined a function, <code>sumOfTen</code>, which takes an array as an argument and returns the sum of that array\'s elements. Modify the function, using <code>splice()</code>, so that it returns a value of <code>10</code>.<br><br>','function htmlColorNames(arr) {<br>  // change code below this line<br>  <br>  // change code above this line<br>  return arr;<br>} <br> <br>// do not change code below this line<br>console.log(htmlColorNames([\'\'DarkGoldenRod\'\', \'\'WhiteSmoke\'\', \'\'LavenderBlush\'\', \'\'PaleTurqoise\'\', \'\'FireBrick\'\']));<br>',5),(297,'587d78b3367417b2b2512b11','Add Items Using splice()','Remember in the last challenge we mentioned that <code>splice()</code> can take up to three parameters? Well, we can go one step further with <code>splice()</code> &mdash; in addition to removing elements, we can use that third parameter, which represents one or more elements, to <em>add</em> them as well. This can be incredibly useful for quickly switching out an element, or a set of elements, for another. For instance, let\'s say you\'re storing a color scheme for a set of DOM elements in an array, and want to dynamically change a color based on some action:<br><br><blockquote>function colorChange(arr, index, newColor) {<br>&nbsp;&nbsp;arr.splice(index, 1, newColor);<br>&nbsp;&nbsp;return arr;<br>}<br><br>let colorScheme = [\'#878787\', \'#a08794\', \'#bb7e8c\', \'#c9b6be\', \'#d1becf\'];<br><br>colorScheme = colorChange(colorScheme, 2, \'#332327\');<br>// we have removed \'#bb7e8c\' and added \'#332327\' in its place<br>// colorScheme now equals [\'#878787\', \'#a08794\', \'#332327\', \'#c9b6be\', \'#d1becf\']</blockquote><br><br>This function takes an array of hex values, an index at which to remove an element, and the new color to replace the removed element with. The return value is an array containing a newly modified color scheme! While this example is a bit oversimplified, we can see the value that utilizing <code>splice()</code> to its maximum potential can have.<br><br> <hr>We have defined a function, <code>htmlColorNames</code>, which takes an array of HTML colors as an argument. Modify the function using <code>splice()</code> to remove the first two elements of the array and add <code>\'DarkSalmon\'</code> and <code>\'BlanchedAlmond\'</code> in their respective places.<br><br>','function forecast(arr) {<br>  // change code below this line<br>  <br>  return arr;<br>}<br><br>// do not change code below this line<br>console.log(forecast([\'\'cold\'\', \'\'rainy\'\', \'\'warm\'\', \'\'sunny\'\', \'\'cool\'\', \'\'thunderstorms\'\']));<br>',5),(298,'587d7b7a367417b2b2512b12','Copy Array Items Using slice()','The next method we will cover is <code>slice()</code>. <code>slice()</code>, rather than modifying an array, copies, or <em>extracts</em>, a given number of elements to a new array, leaving the array it is called upon untouched. <code>slice()</code> takes only 2 parameters &mdash; the first is the index at which to begin extraction, and the second is the index at which to stop extraction (extraction will occur up to, but not including the element at this index). Consider this:<br><br><blockquote>let weatherConditions = [\'rain\', \'snow\', \'sleet\', \'hail\', \'clear\'];<br><br>let todaysWeather = weatherConditions.slice(1, 3);<br>// todaysWeather equals [\'snow\', \'sleet\'];<br>// weatherConditions still equals [\'rain\', \'snow\', \'sleet\', \'hail\', \'clear\']<br></blockquote><br><br>In effect, we have created a new array by extracting elements from an existing array.<br><br> <hr>We have defined a function, <code>forecast</code>, that takes an array as an argument. Modify the function using <code>slice()</code> to extract information from the argument array and return a new array that contains the elements <code>\'warm\'</code> and <code>\'sunny\'</code>.<br><br>','function copyMachine(arr, num) {<br>  let newArr = [];<br>  while (num >= 1) {<br>    // change code below this line<br><br>    // change code above this line<br>    num--;<br>  }<br>  return newArr;<br>}<br><br>// change code here to test different cases:<br>console.log(copyMachine([true, false, true], 2));<br>',5),(299,'587d7b7b367417b2b2512b13','Copy an Array with the Spread Operator','While <code>slice()</code> allows us to be selective about what elements of an array to copy, among several other useful tasks, ES6\'s new <dfn>spread operator</dfn> allows us to easily copy <em>all</em> of an array\'s elements, in order, with a simple and highly readable syntax. The spread syntax simply looks like this: <code>...</code><br><br>In practice, we can use the spread operator to copy an array like so:<br><br><blockquote>let thisArray = [true, true, undefined, false, null];<br>let thatArray = [...thisArray];<br>// thatArray equals [true, true, undefined, false, null]<br>// thisArray remains unchanged, and is identical to thatArray</blockquote><br><br> <hr>We have defined a function, <code>copyMachine</code> which takes <code>arr</code> (an array) and <code>num</code> (a number) as arguments. The function is supposed to return a new array made up of <code>num</code> copies of <code>arr</code>. We have done most of the work for you, but it doesn\'t work quite right yet. Modify the function using spread syntax so that it works correctly (hint: another method we have already covered might come in handy here!).<br><br>','function spreadOut() {<br>  let fragment = [\'\'to\'\', \'\'code\'\'];<br>  let sentence; // change this line<br>  return sentence;<br>}<br><br>// do not change code below this line<br>console.log(spreadOut());<br>',5),(300,'587d7b7b367417b2b2512b17','Combine Arrays with the Spread Operator','Another huge advantage of the <dfn>spread</dfn> operator, is the ability to combine arrays, or to insert all the elements of one array into another, at any index. With more traditional syntaxes, we can concatenate arrays, but this only allows us to combine arrays at the end of one, and at the start of another. Spread syntax makes the following operation extremely simple:<br><br><blockquote>let thisArray = [\'sage\', \'rosemary\', \'parsley\', \'thyme\'];<br><br>let thatArray = [\'basil\', \'cilantro\', ...thisArray, \'coriander\'];<br>// thatArray now equals [\'basil\', \'cilantro\', \'sage\', \'rosemary\', \'parsley\', \'thyme\', \'coriander\']</blockquote><br><br>Using spread syntax, we have just achieved an operation that would have been more more complex and more verbose had we used traditional methods.<br><br> <hr>We have defined a function <code>spreadOut</code> that returns the variable <code>sentence</code>, modify the function using the <dfn>spread</dfn> operator so that it returns the array <code>[\'learning\', \'to\', \'code\', \'is\', \'fun\']</code>.<br><br>','function quickCheck(arr, elem) {<br>  // change code below this line<br><br>  // change code above this line<br>}<br><br>// change code here to test different cases:<br>console.log(quickCheck([\'\'squash\'\', \'\'onions\'\', \'\'shallots\'\'], \'\'mushrooms\'\'));<br>',5),(301,'587d7b7b367417b2b2512b14','Check For The Presence of an Element With indexOf()','Since arrays can be changed, or <em>mutated</em>, at any time, there\'s no guarantee about where a particular piece of data will be on a given array, or if that element even still exists. Luckily, JavaScript provides us with another built-in method, <code>indexOf()</code>, that allows us to quickly and easily check for the presence of an element on an array. <code>indexOf()</code> takes an element as a parameter, and when called, it returns the position, or index, of that element, or <code>-1</code> if the element does not exist on the array.<br><br>For example:<br><br><blockquote>let fruits = [\'apples\', \'pears\', \'oranges\', \'peaches\', \'pears\'];<br><br>fruits.indexOf(\'dates\') // returns -1<br>fruits.indexOf(\'oranges\') // returns 2<br>fruits.indexOf(\'pears\') // returns 1, the first index at which the element exists</blockquote><br><br> <hr><code>indexOf()</code> can be incredibly useful for quickly checking for the presence of an element on an array. We have defined a function, <code>quickCheck</code>, that takes an array and an element as arguments. Modify the function using <code>indexOf()</code> so that it returns <code>true</code> if the passed element exists on the array, and <code>false</code> if it does not.<br><br>','function filteredArray(arr, elem) {<br>  let newArr = [];<br>  // change code below this line<br><br>  // change code above this line<br>  return newArr;<br>}<br><br>// change code here to test different cases:<br>console.log(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3));<br>',5),(302,'587d7b7b367417b2b2512b15','Iterate Through All an Array\'s Items Using For Loops','Sometimes when working with arrays, it is very handy to be able to iterate through each item to find one or more elements that we might need, or to manipulate an array based on which data items meet a certain set of criteria. JavaScript offers several built in methods that each iterate over arrays in slightly different ways to achieve different results (such as <code>every()</code>, <code>forEach()</code>, <code>map()</code>, etc.), however the technique which is most flexible and offers us the greatest amount of control is a simple <code>for</code> loop.<br><br>Consider the following:<br><br><blockquote>function greaterThanTen(arr) {<br>&nbsp;&nbsp;let newArr = [];<br>&nbsp;&nbsp;for (let i = 0; i < arr.length; i++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (arr[i] > 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newArr.push(arr[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return newArr;<br>}<br><br>greaterThanTen([2, 12, 8, 14, 80, 0, 1]);<br>// returns [12, 14, 80]</blockquote><br><br>Using a <code>for</code> loop, this function iterates through and accesses each element of the array, and subjects it to a simple test that we have created. In this way, we have easily and programmatically determined which data items are greater than <code>10</code>, and returned a new array containing those items.<br><br> <hr>We have defined a function, <code>filteredArray</code>, which takes <code>arr</code>, a nested array, and <code>elem</code> as arguments, and returns a new array. <code>elem</code> represents an element that may or may not be present on one or more of the arrays nested within <code>arr</code>. Modify the function, using a <code>for</code> loop, to return a filtered version of the passed array such that any array nested within <code>arr</code> containing <code>elem</code> has been removed.<br><br>','let myNestedArray = [<br>  // change code below this line<br>  [\'\'unshift\'\', false, 1, 2, 3, \'\'complex\'\', \'\'nested\'\'],<br>  [\'\'loop\'\', \'\'shift\'\', 6, 7, 1000, \'\'method\'\'],<br>  [\'\'concat\'\', false, true, \'\'spread\'\', \'\'array\'\'],<br>  [\'\'mutate\'\', 1327.98, \'\'splice\'\', \'\'slice\'\', \'\'push\'\'],<br>  [\'\'iterate\'\', 1.3849, 7, \'\'8.4876\'\', \'\'arbitrary\'\', \'\'depth\'\']<br>  // change code above this line<br>];<br>',5),(303,'587d7b7b367417b2b2512b16','Create complex multi-dimensional arrays','Awesome! You have just learned a ton about arrays! This has been a fairly high level overview, and there is plenty more to learn about working with arrays, much of which you will see in later sections. But before moving on to looking at <dfn>Objects</dfn>, lets take one more look, and see how arrays can become a bit more complex than what we have seen in previous challenges.<br><br>One of the most powerful features when thinking of arrays as data structures, is that arrays can contain, or even be completely made up of other arrays. We have seen arrays that contain arrays in previous challenges, but fairly simple ones. However, arrays can contain an infinite depth of arrays that can contain other arrays, each with their own arbitrary levels of depth, and so on. In this way, an array can very quickly become very complex data structure, known as a <dfn>multi-dimensional</dfn>, or nested array. Consider the following example:<br><br><blockquote>let nestedArray = [ // top, or first level - the outer most array<br>&nbsp;&nbsp;[\'deep\'], // an array within an array, 2 levels of depth<br>&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;[\'deeper\'], [\'deeper\'] // 2 arrays nested 3 levels deep<br>&nbsp;&nbsp;],<br>&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\'deepest\'], [\'deepest\'] // 2 arrays nested 4 levels deep<br>&nbsp;&nbsp;&nbsp;&nbsp;],<br>&nbsp;&nbsp;&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\'deepest-est?\'] // an array nested 5 levels deep<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;]<br>];</blockquote><br><br>While this example may seem convoluted, this level of complexity is not unheard of, or even unusual, when dealing with large amounts of data.<br><br>However, we can still very easily access the deepest levels of an array this complex with bracket notation:<br><br><blockquote>console.log(nestedArray[2][1][0][0][0]);<br>// logs: deepest-est?</blockquote><br><br>And now that we know where that piece of data is, we can reset it if we need to:<br><br><blockquote>nestedArray[2][1][0][0][0] = \'deeper still\';<br><br>console.log(nestedArray[2][1][0][0][0]);<br>// now logs: deeper still</blockquote><br><br> <hr>We have defined a variable, <code>myNestedArray</code>, set equal to an array. Modify <code>myNestedArray</code>, using any combination of <dfn>strings</dfn>, <dfn>numbers</dfn>, and <dfn>booleans</dfn> for data elements, so that it has exactly five levels of depth (remember, the outer-most array is level 1). Somewhere on the third level, include the string <code>\'deep\'</code>, on the fourth level, include the string <code>\'deeper\'</code>, and on the fifth level, include the string <code>\'deepest\'</code>.<br><br>','let foods = {<br>  apples: 25,<br>  oranges: 32,<br>  plums: 28<br>};<br><br>// change code below this line<br><br>// change code above this line<br><br>console.log(foods);<br>',5),(304,'587d7b7c367417b2b2512b18','Add Key-Value Pairs to JavaScript Objects','At their most basic, objects are just collections of <dfn>key-value pairs</dfn>, or in other words, pieces of data mapped to unique identifiers that we call <dfn>properties</dfn> or <dfn>keys</dfn>. Let\'s take a look at a very simple example:<br><br><blockquote>let FCC_User = {<br>&nbsp;&nbsp;username: \'awesome_coder\',<br>&nbsp;&nbsp;followers: 572,<br>&nbsp;&nbsp;points: 1741,<br>&nbsp;&nbsp;completedProjects: 15<br>};</blockquote><br><br>The above code defines an object called <code>FCC_User</code> that has four <dfn>properties</dfn>, each of which map to a specific value. If we wanted to know the number of <code>followers</code> <code>FCC_User</code> has, we can access that property by writing:<br><br><blockquote>let userData = FCC_User.followers;<br>// userData equals 572</blockquote><br><br>This is called <dfn>dot notation</dfn>. Alternatively, we can also access the property with brackets, like so:<br><br><blockquote>let userData = FCC_User[\'followers\']<br>// userData equals 572</blockquote><br><br>Notice that with <dfn>bracket notation</dfn>, we enclosed <code>followers</code> in quotes. This is because the brackets actually allow us to pass a variable in to be evaluated as a property name (hint: keep this in mind for later!). Had we passed <code>followers</code> in without the quotes, the JavaScript engine would have attempted to evaluate it as a variable, and a <code>ReferenceError: followers is not defined</code> would have been thrown.<br><br> <hr>Using the same syntax, we can also <em><strong>add new</strong></em> key-value pairs to objects. We\'ve created a <code>foods</code> object with three entries. Add three more entries: <code>bananas</code> with a value of <code>13</code>, <code>grapes</code> with a value of <code>35</code>, and <code>strawberries</code> with a value of <code>27</code>.<br><br>','let userActivity = {<br>  id: 23894201352,<br>  date: \'\'January 1, 2017\'\',<br>  data: {<br>    totalUsers: 51,<br>    online: 42<br>  }<br>};<br><br>// change code below this line<br><br>// change code above this line<br><br>console.log(userActivity);<br>',5),(305,'587d7b7c367417b2b2512b19','Modify an Object Nested Within an Object','Now let\'s take a look at a slightly more complex object. Object properties can be nested to an arbitrary depth, and their values can be any type of data supported by JavaScript, including arrays and even other objects. Consider the following:<br><br><blockquote>let nestedObject = {<br>&nbsp;&nbsp;id: 28802695164,<br>&nbsp;&nbsp;date: \'December 31, 2016\',<br>&nbsp;&nbsp;data: {<br>&nbsp;&nbsp;&nbsp;&nbsp;totalUsers: 99,<br>&nbsp;&nbsp;&nbsp;&nbsp;online: 80,<br>&nbsp;&nbsp;&nbsp;&nbsp;onlineStatus: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;active: 67,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;away: 13<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>};</blockquote><br><br><code>nestedObject</code> has three unique keys: <code>id</code>, whose value is a number, <code>date</code> whose value is a string, and <code>data</code>, whose value is an object which has yet another object nested within it. While structures can quickly become complex, we can still use the same notations to access the information we need.<br><br> <hr>Here we\'ve defined an object, <code>userActivity</code>, which includes another object nested within it. You can modify properties on this nested object in the same way you modified properties in the last challenge. Set the value of the <code>online</code> key to <code>45</code>.<br><br>','let foods = {<br>  apples: 25,<br>  oranges: 32,<br>  plums: 28,<br>  bananas: 13,<br>  grapes: 35,<br>  strawberries: 27<br>};<br>// do not change code above this line<br><br>function checkInventory(scannedItem) {<br>  // change code below this line<br><br>}<br><br>// change code below this line to test different cases:<br>console.log(checkInventory(\"apples\"));<br>',5),(306,'587d7b7c367417b2b2512b1a','Access Property Names with Bracket Notation','In the first object challenge we mentioned the use of bracket notation as a way to access property values using the evaluation of a variable. For instance, imagine that our <code>foods</code> object is being used in a program for a supermarket cash register. We have some function that sets the <code>selectedFood</code> and we want to check our <code>foods</code> object for the presence of that food. This might look like:<br><br><blockquote>let selectedFood = getCurrentFood(scannedItem);<br>let inventory = foods[selectedFood];</blockquote><br><br>This code will evaluate the value stored in the <code>selectedFood</code> variable and return the value of that key in the <code>foods</code> object, or <code>undefined</code> if it is not present. Bracket notation is very useful because sometimes object properties are not known before runtime or we need to access them in a more dynamic way.<br><br> <hr>We\'ve defined a function, <code>checkInventory</code>, which receives a scanned item as an argument. Return the current value of the <code>scannedItem</code> key in the <code>foods</code> object. You can assume that only valid keys will be provided as an argument to <code>checkInventory</code>.<br><br>','let foods = {<br>  apples: 25,<br>  oranges: 32,<br>  plums: 28,<br>  bananas: 13,<br>  grapes: 35,<br>  strawberries: 27<br>};<br><br>// change code below this line<br><br>// change code above this line<br><br>console.log(foods);<br>',5),(307,'587d7b7c367417b2b2512b1b','Use the delete Keyword to Remove Object Properties','Now you know what objects are and their basic features and advantages. In short, they are key-value stores which provide a flexible, intuitive way to structure data, <strong><em>and</em></strong>, they provide very fast lookup time. Throughout the rest of these challenges, we will describe several common operations you can perform on objects so you can become comfortable applying these useful data structures in your programs.<br><br>In earlier challenges, we have both added to and modified an object\'s key-value pairs. Here we will see how we can <em>remove</em> a key-value pair from an object.<br><br>Let\'s revisit our <code>foods</code> object example one last time. If we wanted to remove the <code>apples</code> key, we can remove it by using the <code>delete</code> keyword like this:<br><br><blockquote>delete foods.apples;</blockquote><br><br> <hr>Use the delete keyword to remove the <code>oranges</code>, <code>plums</code>, and <code>strawberries</code> keys from the <code>foods</code> object.<br><br>','let users = {<br>  Alan: {<br>    age: 27,<br>    online: true<br>  },<br>  Jeff: {<br>    age: 32,<br>    online: true<br>  },<br>  Sarah: {<br>    age: 48,<br>    online: true<br>  },<br>  Ryan: {<br>    age: 19,<br>    online: true<br>  }<br>};<br><br>function isEveryoneHere(obj) {<br>  // change code below this line<br><br>  // change code above this line<br>}<br><br>console.log(isEveryoneHere(users));<br>',5),(308,'587d7b7d367417b2b2512b1c','Check if an Object has a Property','Now we can add, modify, and remove keys from objects. But what if we just wanted to know if an object has a specific property? JavaScript provides us with two different ways to do this. One uses the <code>hasOwnProperty()</code> method and the other uses the <code>in</code> keyword. If we have an object <code>users</code> with a property of <code>Alan</code>, we could check for its presence in either of the following ways:<br><br><blockquote>users.hasOwnProperty(\'Alan\');<br>\'Alan\' in users;<br>// both return true</blockquote><br><br> <hr>We\'ve created an object, <code>users</code>, with some users in it and a function <code>isEveryoneHere</code>, which we pass the <code>users</code> object to as an argument. Finish writing this function so that it returns <code>true</code> only if the <code>users</code> object contains all four names, <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code>, as keys, and <code>false</code> otherwise.<br><br>','let users = {<br>  Alan: {<br>    age: 27,<br>    online: false<br>  },<br>  Jeff: {<br>    age: 32,<br>    online: true<br>  },<br>  Sarah: {<br>    age: 48,<br>    online: false<br>  },<br>  Ryan: {<br>    age: 19,<br>    online: true<br>  }<br>};<br><br>function countOnline(obj) {<br>  // change code below this line<br><br>  // change code above this line<br>}<br><br>console.log(countOnline(users));<br>',5),(309,'587d7b7d367417b2b2512b1d',' Iterate Through the Keys of an Object with a for...in Statement','Sometimes you may need to iterate through all the keys within an object. This requires a specific syntax in JavaScript called a <dfn>for...in</dfn> statement. For our <code>users</code> object, this could look like:<br><br><blockquote>for (let user in users) {<br>&nbsp;&nbsp;console.log(user);<br>};<br><br>// logs:<br>Alan<br>Jeff<br>Sarah<br>Ryan</blockquote><br><br>In this statement, we defined a variable <code>user</code>, and as you can see, this variable was reset during each iteration to each of the object\'s keys as the statement looped through the object, resulting in each user\'s name being printed to the console.<br><br><strong>NOTE:</strong><br>Objects do not maintain an ordering to stored keys like arrays do; thus a keys position on an object, or the relative order in which it appears, is irrelevant when referencing or accessing that key.<br><br> <hr>We\'ve defined a function, <code>countOnline</code>; use a <dfn>for...in</dfn> statement within this function to loop through the users in the <code>users</code> object and return the number of users whose <code>online</code> property is set to <code>true</code>.<br><br>','let users = {<br>  Alan: {<br>    age: 27,<br>    online: false<br>  },<br>  Jeff: {<br>    age: 32,<br>    online: true<br>  },<br>  Sarah: {<br>    age: 48,<br>    online: false<br>  },<br>  Ryan: {<br>    age: 19,<br>    online: true<br>  }<br>};<br><br>function getArrayOfUsers(obj) {<br>  // change code below this line<br><br>  // change code above this line<br>}<br><br>console.log(getArrayOfUsers(users));<br>',5),(310,'587d7b7d367417b2b2512b1e','Generate an Array of All Object Keys with Object.keys()','We can also generate an array which contains all the keys stored in an object using the <code>Object.keys()</code> method and passing in an object as the argument. This will return an array with strings representing each property in the object. Again, there will be no specific order to the entries in the array.<br><br> <hr>Finish writing the <code>getArrayOfUsers</code> function so that it returns an array containing all the properties in the object it receives as an argument.<br><br>','let user = {<br>  name: \'\'Kenneth\'\',<br>  age: 28,<br>  data: {<br>    username: \'\'kennethCodesAllDay\'\',<br>    joinDate: \'\'March 26, 2016\'\',<br>    organization: \'\'freeCodeCamp\'\',<br>    friends: [<br>      \'\'Sam\'\',<br>      \'\'Kira\'\',<br>      \'\'Tomo\'\'<br>    ],<br>    location: {<br>      city: \'\'San Francisco\'\',<br>      state: \'\'CA\'\',<br>      country: \'\'USA\'\'<br>    }<br>  }<br>};<br><br>function addFriend(userObj, friend) {<br>  // change code below this line  <br><br>  // change code above this line<br>}<br><br>console.log(addFriend(user, \'\'Pete\'\'));<br>',5),(311,'587d7b7d367417b2b2512b1f','Modify an Array Stored in an Object','Now you\'ve seen all the basic operations for JavaScript objects. You can add, modify, and remove key-value pairs, check if keys exist, and iterate over all the keys in an object. As you continue learning JavaScript you will see even more versatile applications of objects. Additionally, the optional Advanced Data Structures lessons later in the curriculum also cover the ES6 <dfn>Map</dfn> and <dfn>Set</dfn> objects, both of which are similar to ordinary objects but provide some additional features. Now that you\'ve learned the basics of arrays and objects, you\'re fully prepared to begin tackling more complex problems using JavaScript!<br><br> <hr>Take a look at the object we\'ve provided in the code editor. The <code>user</code> object contains three keys. The <code>data</code> key contains five keys, one of which contains an array of <code>friends</code>. From this, you can see how flexible objects are as data structures. We\'ve started writing a function <code>addFriend</code>. Finish writing it so that it takes a <code>user</code> object and adds the name of the <code>friend</code> argument to the array stored in <code>user.data.friends</code> and returns that array.<br><br>','function convertToF(celsius) {<br>  let fahrenheit;<br>  return fahrenheit;<br>}<br><br>convertToF(30);<br>',5),(312,'code_id','title','description','function reverseString(str) {<br>  return str;<br>}<br><br>reverseString(\"hello\");<br>',5),(313,'56533eb9ac21ba0edf2244b3','Convert Celsius to Fahrenheit','The algorithm to convert from Celsius to Fahrenheit is the temperature in Celsius times <code>9/5</code>, plus <code>32</code>.<br><br>You are given a variable <code>celsius</code> representing a temperature in Celsius. Use the variable <code>fahrenheit</code> already defined and assign it the Fahrenheit temperature equivalent to the given Celsius temperature. Use the algorithm mentioned above to help convert the Celsius temperature to Fahrenheit.<br><br>Don\'t worry too much about the function and return statements as they will be covered in future challenges. For now, only use operators that you have already learned.<br><br>','function factorialize(num) {<br>  return num;<br>}<br><br>factorialize(5);<br>',5),(314,'a202eed8fc186c8434cb6d61','Reverse a String','Reverse the provided string.<br><br>You may need to turn the string into an array before you can reverse it.<br><br>Your result must be a string.<br><br>Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.<br><br>','function findLongestWordLength(str) {<br>  return str.length;<br>}<br><br>findLongestWordLength(\"The quick brown fox jumped over the lazy dog\");<br>',5),(315,'a302f7aae1aa3152a5b413bc','Factorialize a Number','Return the factorial of the provided integer.<br><br>If the integer is represented with the letter n, a factorial is the product of all positive integers less than or equal to n.<br><br>Factorials are often represented with the shorthand notation <code>n!</code><br><br>For example: <code>5! = 1 * 2 * 3 * 4 * 5 = 120</code><br><br>Only integers greater than or equal to zero will be supplied to the function.<br><br>Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.<br><br>','function largestOfFour(arr) {<br>  // You can do this!<br>  return arr;<br>}<br><br>largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);<br>',5),(316,'a26cbbe9ad8655a977e1ceb5','Find the Longest Word in a String','Return the length of the longest word in the provided sentence.<br><br>Your response should be a number.<br><br>Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.<br><br>','function confirmEnding(str, target) {<br>  // \"Never give up and good luck will find you.\"<br>  // -- Falcor<br>  return str;<br>}<br><br>confirmEnding(\"Bastian\", \"n\");<br>',5),(317,'a789b3483989747d63b0e427','Return Largest Numbers in Arrays','Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.<br><br>Remember, you can iterate through an array with a simple for loop, and access each member with array syntax <code>arr[i]</code>.<br><br>Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.<br><br>','function repeatStringNumTimes(str, num) {<br>  // repeat after me<br>  return str;<br>}<br><br>repeatStringNumTimes(\"abc\", 3);<br>',5),(318,'acda2fb1324d9b0fa741e6b5','Confirm the Ending','Check if a string (first argument, <code>str</code>) ends with the given target string (second argument, <code>target</code>).<br><br>This challenge <em>can</em> be solved with the <code>.endsWith()</code> method, which was introduced in ES2015. But for the purpose of this challenge, we would like you to use one of the JavaScript substring methods instead.<br><br>Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.<br><br>','function truncateString(str, num) {<br>  // Clear out that junk in your trunk<br>  return str;<br>}<br><br>truncateString(\"A-tisket a-tasket A green and yellow basket\", 8);<br>',5),(319,'afcc8d540bea9ea2669306b6','Repeat a String Repeat a String','Repeat a given string <code>str</code> (first argument) for <code>num</code> times (second argument). Return an empty string if <code>num</code> is not a positive number.<br><br>Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.<br><br>','function findElement(arr, func) {<br>  let num = 0;<br>  return num;<br>}<br><br>findElement([1, 2, 3, 4], num => num % 2 === 0);<br>',5),(320,'ac6993d51946422351508a41','Truncate a String','Truncate a string (first argument) if it is longer than the given maximum string length (second argument). Return the truncated string with a <code>...</code> ending.<br><br>Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.<br><br>','function booWho(bool) {<br>  // What is the new fad diet for ghost developers? The Boolean.<br>  return bool;<br>}<br><br>booWho(null);<br>',5),(321,'a6e40f1041b06c996f7b2406','Finders Keepers','Create a function that looks through an array (first argument) and returns the first element in the array that passes a truth test (second argument). If no element passes the test, return undefined.<br><br>Remember to use <a href=\'http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\' target=\'_blank\'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.<br><br>','function titleCase(str) {<br>  return str;<br>}<br><br>titleCase(\"I\'\'m a little tea pot\");<br>',5),(322,'a77dbc43c33f39daa4429b4f','Boo who','Check if a value is classified as a boolean primitive. Return true or false.<br><br>Boolean primitives are true and false.<br><br>Remember to use <a href=\'http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\' target=\'_blank\'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.<br><br>','function frankenSplice(arr1, arr2, n) {<br>  // It\'\'s alive. It\'\'s alive!<br>  return arr2;<br>}<br><br>frankenSplice([1, 2, 3], [4, 5, 6], 1);<br>',5),(323,'ab6137d4e35944e21037b769','Title Case a Sentence','Return the provided string with the first letter of each word capitalized. Make sure the rest of the word is in lower case.<br><br>For the purpose of this exercise, you should also capitalize connecting words like \"the\" and \"of\".<br><br>Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.<br><br>','function bouncer(arr) {<br>  // Don\'\'t show a false ID to this bouncer.<br>  return arr;<br>}<br><br>bouncer([7, \"ate\", \"\", false, 9]);<br>',5),(324,'579e2a2c335b9d72dd32e05c','Slice and Splice','You are given two arrays and an index.<br><br>Use the array methods <code>slice</code> and <code>splice</code> to copy each element of the first array into the second array, in order.<br><br>Begin inserting elements at index <code>n</code> of the second array.<br><br>Return the resulting array. The input arrays should remain the same after the function runs.<br><br>Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.<br><br>','function getIndexToIns(arr, num) {<br>  // Find my place in this sorted array.<br>  return num;<br>}<br><br>getIndexToIns([40, 60], 50);<br>',5),(325,'adf08ec01beb4f99fc7a68f2','Falsy Bouncer','Remove all falsy values from an array.<br><br>Falsy values in JavaScript are <code>false</code>, <code>null</code>, <code>0</code>, <code>\"\"</code>, <code>undefined</code>, and <code>NaN</code>.<br><br>Hint: Try converting each value to a Boolean.<br><br>Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.<br><br>','function mutation(arr) {<br>  return arr;<br>}<br><br>mutation([\"hello\", \"hey\"]);<br>',5),(326,'a24c1a4622e3c05097f71d67','Where do I Belong','Return the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted. The returned value should be a number.<br><br>For example, <code>getIndexToIns([1,2,3,4], 1.5)</code> should return <code>1</code> because it is greater than <code>1</code> (index 0), but less than <code>2</code> (index 1).<br><br>Likewise, <code>getIndexToIns([20,3,5], 19)</code> should return <code>2</code> because once the array has been sorted it will look like <code>[3,5,20]</code> and <code>19</code> is less than <code>20</code> (index 2) and greater than <code>5</code> (index 1).<br><br>Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.<br><br>','function chunkArrayInGroups(arr, size) {<br>  // Break it up.<br>  return arr;<br>}<br><br>chunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);<br>',5),(327,'af2170cad53daa0770fabdea','Mutations','Return true if the string in the first element of the array contains all of the letters of the string in the second element of the array.<br><br>For example, <code>[\"hello\", \"Hello\"]</code>, should return true because all of the letters in the second string are present in the first, ignoring case.<br><br>The arguments <code>[\"hello\", \"hey\"]</code> should return false because the string \"hello\" does not contain a \"y\".<br><br>Lastly, <code>[\"Alien\", \"line\"]</code>, should return true because all of the letters in \"line\" are present in \"Alien\".<br><br>Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.<br><br>','let dog = {<br>  <br>};<br>',5),(328,'a9bd25c716030ec90084d8a1','Chunky Monkey','Write a function that splits an array (first argument) into groups the length of <code>size</code> (second argument) and returns them as a two-dimensional array.<br><br>Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.<br><br>','let dog = {<br>  name: \"Spot\",<br>  numLegs: 4<br>};<br>// Add your code below this line<br><br><br>',5),(329,'587d7dac367417b2b2512b73','Create a Basic JavaScript Object','Think about things people see everyday, like cars, shops, and birds. These are all <code>objects</code>: tangible things people can observe and interact with.<br><br>What are some qualities of these <code>objects</code>? A car has wheels. Shops sell items. Birds have wings.<br><br>These qualities, or <code>properties</code>, define what makes up an <code>object</code>. Note that similar <code>objects</code> share the same <code>properties</code>, but may have different values for those <code>properties</code>. For example, all cars have wheels, but not all cars have the same number of wheels.<br><br><code>Objects</code> in JavaScript are used to model real-world objects, giving them <code>properties</code> and behavior just like their real-world counterparts. Here\'s an example using these concepts to create a <code>duck</code> <code>object</code>:<br><br><blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2<br>};</blockquote><br><br>This <code>duck</code> <code>object</code> has two property/value pairs: a <code>name</code> of \"Aflac\" and a <code>numLegs</code> of 2.<br><br> <hr>Create a <code>dog</code> <code>object</code> with <code>name</code> and <code>numLegs</code> properties, and set them to a string and a number, respectively.<br><br>','let dog = {<br>  name: \"Spot\",<br>  numLegs: 4,<br>  <br>};<br><br>dog.sayLegs();<br>',5),(330,'587d7dac367417b2b2512b74','Use Dot Notation to Access the Properties of an Object','The last challenge created an <code>object</code> with various <code>properties</code>, now you\'ll see how to access the values of those <code>properties</code>. Here\'s an example:<br><br><blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2<br>};<br>console.log(duck.name);<br>// This prints \"Aflac\" to the console</blockquote><br><br>Dot notation is used on the <code>object</code> name, <code>duck</code>, followed by the name of the <code>property</code>, <code>name</code>, to access the value of \"Aflac\".<br><br> <hr>Print both <code>properties</code> of the <code>dog</code> object below to your console.<br><br>','let dog = {<br>  name: \"Spot\",<br>  numLegs: 4,<br>  sayLegs: function() {return \"This dog has \" + dog.numLegs + \" legs.\";}<br>};<br><br>dog.sayLegs();<br>',5),(331,'587d7dad367417b2b2512b75','Create a Method on an Object','<code>Objects</code> can have a special type of <code>property</code>, called a <code>method</code>.<br><br><code>Methods</code> are <code>properties</code> that are functions. This adds different behavior to an <code>object</code>. Here is the <code>duck</code> example with a method:<br><br><blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2,<br>&nbsp;&nbsp;sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}<br>};<br>duck.sayName();<br>// Returns \"The name of this duck is Aflac.\"</blockquote><br><br>The example adds the <code>sayName</code> <code>method</code>, which is a function that returns a sentence giving the name of the <code>duck</code>.<br><br>Notice that the <code>method</code> accessed the <code>name</code> property in the return statement using <code>duck.name</code>. The next challenge will cover another way to do this.<br><br> <hr>Using the <code>dog</code> <code>object</code>, give it a method called <code>sayLegs</code>. The method should return the sentence \"This dog has 4 legs.\"<br><br>','',5),(332,'587d7dad367417b2b2512b76','Make Code More Reusable with the this Keyword','The last challenge introduced a <code>method</code> to the <code>duck</code> object. It used <code>duck.name</code> dot notation to access the value for the <code>name</code> property within the return statement:<br><br><code>sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}</code><br><br>While this is a valid way to access the object\'s property, there is a pitfall here. If the variable name changes, any code referencing the original name would need to be updated as well. In a short object definition, it isn\'t a problem, but if an object has many references to its properties there is a greater chance for error.<br><br>A way to avoid these issues is with the <code>this</code> keyword:<br><br><blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2,<br>&nbsp;&nbsp;sayName: function() {return \"The name of this duck is \" + this.name + \".\";}<br>};</blockquote><br><br><code>this</code> is a deep topic, and the above example is only one way to use it. In the current context, <code>this</code> refers to the object that the method is associated with: <code>duck</code>.<br><br>If the object\'s name is changed to <code>mallard</code>, it is not necessary to find all the references to <code>duck</code> in the code. It makes the code reusable and easier to read.<br><br> <hr>Modify the <code>dog.sayLegs</code> method to remove any references to <code>dog</code>. Use the <code>duck</code> example for guidance.<br><br>','function Dog() {<br>  this.name = \"Rupert\";<br>  this.color = \"brown\";<br>  this.numLegs = 4;<br>}<br>// Add your code below this line<br><br><br>',5),(333,'587d7dad367417b2b2512b77','Define a Constructor Function','<code>Constructors</code> are functions that create new objects. They define properties and behaviors that will belong to the new object. Think of them as a blueprint for the creation of new objects.<br><br>Here is an example of a <code>constructor</code>:<br><br><blockquote>function Bird() {<br>&nbsp;&nbsp;this.name = \"Albert\";<br>&nbsp;&nbsp;this.color = \"blue\";<br>&nbsp;&nbsp;this.numLegs = 2;<br>}</blockquote><br><br>This <code>constructor</code> defines a <code>Bird</code> object with properties <code>name</code>, <code>color</code>, and <code>numLegs</code> set to Albert, blue, and 2, respectively.<br><br><code>Constructors</code> follow a few conventions:<br><br><ul><li><code>Constructors</code> are defined with a capitalized name to distinguish them from other functions that are not <code>constructors</code>.</li><li><code>Constructors</code> use the keyword <code>this</code> to set properties of the object they will create. Inside the <code>constructor</code>, <code>this</code> refers to the new object it will create.</li><li><code>Constructors</code> define properties and behaviors instead of returning a value as other functions might.</li></ul><br><br> <hr>Create a <code>constructor</code>, <code>Dog</code>, with properties <code>name</code>, <code>color</code>, and <code>numLegs</code> that are set to a string, a string, and a number, respectively.<br><br>','function Dog() {<br>  <br>}<br><br><br>',5),(334,'587d7dad367417b2b2512b78','Use a Constructor to Create Objects','Here\'s the <code>Bird</code> constructor from the previous challenge:<br><br><blockquote>function Bird() {<br>&nbsp;&nbsp;this.name = \"Albert\";<br>&nbsp;&nbsp;this.color  = \"blue\";<br>&nbsp;&nbsp;this.numLegs = 2;<br>&nbsp;&nbsp;// \"this\" inside the constructor always refers to the object being created<br>}<br><br>let blueBird = new Bird();</blockquote><br><br>Notice that the <code>new</code> operator is used when calling a constructor. This tells JavaScript to create a new <code>instance</code> of <code>Bird</code> called <code>blueBird</code>. Without the <code>new</code> operator, <code>this</code> inside the constructor would not point to the newly created object, giving unexpected results.<br><br>Now <code>blueBird</code> has all the properties defined inside the <code>Bird</code> constructor:<br><br><blockquote>blueBird.name; // => Albert<br>blueBird.color; // => blue<br>blueBird.numLegs; // => 2</blockquote><br><br>Just like any other object, its properties can be accessed and modified:<br><br><blockquote>blueBird.name = \'Elvira\';<br>blueBird.name; // => Elvira</blockquote><br><br> <hr>Use the <code>Dog</code> constructor from the last lesson to create a new instance of <code>Dog</code>, assigning it to a variable <code>hound</code>.<br><br>','/* jshint expr: true */<br><br>function House(numBedrooms) {<br>  this.numBedrooms = numBedrooms;<br>}<br><br>// Add your code below this line<br><br><br><br>',5),(335,'587d7dae367417b2b2512b79','Extend Constructors to Receive Arguments','The <code>Bird</code> and <code>Dog</code> constructors from last challenge worked well. However, notice that all <code>Birds</code> that are created with the <code>Bird</code> constructor are automatically named Albert, are blue in color, and have two legs. What if you want birds with different values for name and color? It\'s possible to change the properties of each bird manually but that would be a lot of work:<br><br><blockquote>let swan = new Bird();<br>swan.name = \"Carlos\";<br>swan.color = \"white\";</blockquote><br><br>Suppose you were writing a program to keep track of hundreds or even thousands of different birds in an aviary. It would take a lot of time to create all the birds, then change the properties to different values for every one.<br><br>To more easily create different <code>Bird</code> objects, you can design your Bird constructor to accept parameters:<br><br><blockquote>function Bird(name, color) {<br>&nbsp;&nbsp;this.name = name;<br>&nbsp;&nbsp;this.color = color;<br>&nbsp;&nbsp;this.numLegs = 2;<br>}</blockquote><br><br>Then pass in the values as arguments to define each unique bird into the <code>Bird</code> constructor:<br><br><code>let cardinal = new Bird(\"Bruce\", \"red\");</code><br><br>This gives a new instance of <code>Bird</code> with name and color properties set to Bruce and red, respectively. The <code>numLegs</code> property is still set to 2.<br><br>The <code>cardinal</code> has these properties:<br><br><blockquote>cardinal.name // => Bruce<br>cardinal.color // => red<br>cardinal.numLegs // => 2</blockquote><br><br>The constructor is more flexible. It\'s now possible to define the properties for each <code>Bird</code> at the time it is created, which is one way that JavaScript constructors are so useful. They group objects together based on shared characteristics and behavior and define a blueprint that automates their creation.<br><br> <hr>Create another <code>Dog</code> constructor. This time, set it up to take the parameters <code>name</code> and <code>color</code>, and have the property <code>numLegs</code> fixed at 4. Then create a new <code>Dog</code> saved in a variable <code>terrier</code>. Pass it two strings as arguments for the <code>name</code> and <code>color</code> properties.<br><br>','function Bird(name) {<br>  this.name = name;<br>  this.numLegs = 2;<br>}<br><br>let canary = new Bird(\"Tweety\");<br>let ownProps = [];<br>// Add your code below this line<br><br><br><br>',5),(336,'587d7dae367417b2b2512b7a','Verify an Object\'s Constructor with instanceof','Anytime a constructor function creates a new object, that object is said to be an <code>instance</code> of its constructor. JavaScript gives a convenient way to verify this with the <code>instanceof</code> operator. <code>instanceof</code> allows you to compare an object to a constructor, returning <code>true</code> or <code>false</code> based on whether or not that object was created with the constructor. Here\'s an example:<br><br><blockquote>let Bird = function(name, color) {<br>&nbsp;&nbsp;this.name = name;<br>&nbsp;&nbsp;this.color = color;<br>&nbsp;&nbsp;this.numLegs = 2;<br>}<br><br>let crow = new Bird(\"Alexis\", \"black\");<br><br>crow instanceof Bird; // => true</blockquote><br><br>If an object is created without using a constructor, <code>instanceof</code> will verify that it is not an instance of that constructor:<br><br><blockquote>let canary = {<br>&nbsp;&nbsp;name: \"Mildred\",<br>&nbsp;&nbsp;color: \"Yellow\",<br>&nbsp;&nbsp;numLegs: 2<br>};<br><br>canary instanceof Bird; // => false</blockquote><br><br> <hr>Create a new instance of the <code>House</code> constructor, calling it <code>myHouse</code> and passing a number of bedrooms. Then, use <code>instanceof</code> to verify that it is an instance of <code>House</code>.<br><br>','function Dog(name) {<br>  this.name = name;<br>}<br><br><br><br>// Add your code above this line<br>let beagle = new Dog(\"Snoopy\");<br>',5),(337,'587d7dae367417b2b2512b7b','Understand Own Properties','In the following example, the <code>Bird</code> constructor defines two properties: <code>name</code> and <code>numLegs</code>:<br><br><blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name  = name;<br>&nbsp;&nbsp;this.numLegs = 2;<br>}<br><br>let duck = new Bird(\"Donald\");<br>let canary = new Bird(\"Tweety\");</blockquote><br><br><code>name</code> and <code>numLegs</code> are called <code>own</code> properties, because they are defined directly on the instance object. That means that <code>duck</code> and <code>canary</code> each has its own separate copy of these properties.<br><br>In fact every instance of <code>Bird</code> will have its own copy of these properties.<br><br>The following code adds all of the <code>own</code> properties of <code>duck</code> to the array <code>ownProps</code>:<br><br><blockquote>let ownProps = [];<br><br>for (let property in duck) {<br>&nbsp;&nbsp;if(duck.hasOwnProperty(property)) {<br>&nbsp;&nbsp;&nbsp;&nbsp;ownProps.push(property);<br>&nbsp;&nbsp;}<br>}<br><br>console.log(ownProps); // prints [ \"name\", \"numLegs\" ]</blockquote><br><br> <hr>Add the <code>own</code> properties of <code>canary</code> to the array <code>ownProps</code>.<br><br>','function Dog(name) {<br>  this.name = name;<br>}<br><br>Dog.prototype.numLegs = 4;<br><br>let beagle = new Dog(\"Snoopy\");<br><br>let ownProps = [];<br>let prototypeProps = [];<br><br>// Add your code below this line <br><br><br><br>',5),(338,'587d7dae367417b2b2512b7c','Use Prototype Properties to Reduce Duplicate Code','Since <code>numLegs</code> will probably have the same value for all instances of <code>Bird</code>, you essentially have a duplicated variable <code>numLegs</code> inside each <code>Bird</code> instance.<br><br>This may not be an issue when there are only two instances, but imagine if there are millions of instances. That would be a lot of duplicated variables.<br><br>A better way is to use <code>Bird?s</code> <code>prototype</code>. The <code>prototype</code> is an object that is shared among ALL instances of <code>Bird</code>. Here\'s how to add <code>numLegs</code> to the <code>Bird prototype</code>:<br><br><blockquote>Bird.prototype.numLegs = 2;</blockquote><br><br>Now all instances of <code>Bird</code> have the <code>numLegs</code> property.<br><br><blockquote>console.log(duck.numLegs);  // prints 2<br>console.log(canary.numLegs);  // prints 2</blockquote><br><br>Since all instances automatically have the properties on the <code>prototype</code>, think of a <code>prototype</code> as a \"recipe\" for creating objects.<br><br>Note that the <code>prototype</code> for <code>duck</code> and <code>canary</code> is part of the <code>Bird</code> constructor as <code>Bird.prototype</code>. Nearly every object in JavaScript has a <code>prototype</code> property which is part of the constructor function that created it.<br><br> <hr>Add a <code>numLegs</code> property to the <code>prototype</code> of <code>Dog</code><br><br>','function Dog(name) {<br>  this.name = name;<br>}<br><br>// Add your code below this line<br>function joinDogFraternity(candidate) {<br>  <br>}<br><br>',5),(339,'587d7daf367417b2b2512b7d','Iterate Over All Properties','You have now seen two kinds of properties: <code>own</code> properties and <code>prototype</code> properties. <code>Own</code> properties are defined directly on the object instance itself. And <code>prototype</code> properties are defined on the <code>prototype</code>.<br><br><blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name = name;  //own property<br>}<br><br>Bird.prototype.numLegs = 2; // prototype property<br><br>let duck = new Bird(\"Donald\");</blockquote><br><br>Here is how you add <code>duck?s</code> <code>own</code> properties to the array <code>ownProps</code> and <code>prototype</code> properties to the array <code>prototypeProps</code>:<br><br><blockquote>let ownProps = [];<br>let prototypeProps = [];<br><br>for (let property in duck) {<br>&nbsp;&nbsp;if(duck.hasOwnProperty(property)) {<br>&nbsp;&nbsp;&nbsp;&nbsp;ownProps.push(property);<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;prototypeProps.push(property);<br>&nbsp;&nbsp;}<br>}<br><br>console.log(ownProps); // prints [\"name\"]<br>console.log(prototypeProps); // prints [\"numLegs\"]</blockquote><br><br> <hr>Add all of the <code>own</code> properties of <code>beagle</code> to the array <code>ownProps</code>. Add all of the <code>prototype</code> properties of <code>Dog</code> to the array <code>prototypeProps</code>.<br><br>','function Dog(name) {<br>  this.name = name; <br>}<br><br>Dog.prototype = {<br>  // Add your code below this line<br>  <br>};<br>',5),(340,'587d7daf367417b2b2512b7e','Understand the Constructor Property','There is a special <code>constructor</code> property located on the object instances <code>duck</code> and <code>beagle</code> that were created in the previous challenges:<br><br><blockquote>let duck = new Bird();<br>let beagle = new Dog();<br><br>console.log(duck.constructor === Bird);  //prints true<br>console.log(beagle.constructor === Dog);  //prints true</blockquote><br><br>Note that the <code>constructor</code> property is a reference to the constructor function that created the instance.<br><br>The advantage of the <code>constructor</code> property is that it\'s possible to check for this property to find out what kind of object it is. Here\'s an example of how this could be used:<br><br><blockquote>function joinBirdFraternity(candidate) {<br>&nbsp;&nbsp;if (candidate.constructor === Bird) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>&nbsp;&nbsp;}<br>}</blockquote><br><br><strong>Note</strong><br>Since the <code>constructor</code> property can be overwritten (which will be covered in the next two challenges) it?s generally better to use the <code>instanceof</code> method to check the type of an object.<br><br> <hr>Write a <code>joinDogFraternity</code> function that takes a <code>candidate</code> parameter and, using the <code>constructor</code> property, return <code>true</code> if the candidate is a <code>Dog</code>, otherwise return <code>false</code>.<br><br>','function Dog(name) {<br>  this.name = name; <br>}<br><br>// Modify the code below this line<br>Dog.prototype = {<br>  <br>  numLegs: 2, <br>  eat: function() {<br>    console.log(\"nom nom nom\"); <br>  }, <br>  describe: function() {<br>    console.log(\"My name is \" + this.name); <br>  }<br>};<br>',5),(341,'587d7daf367417b2b2512b7f','Change the Prototype to a New Object','Up until now you have been adding properties to the <code>prototype</code> individually:<br><br><blockquote>Bird.prototype.numLegs = 2;</blockquote><br><br>This becomes tedious after more than a few properties.<br><br><blockquote>Bird.prototype.eat = function() {<br>&nbsp;&nbsp;console.log(\"nom nom nom\");<br>}<br><br>Bird.prototype.describe = function() {<br>&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>}</blockquote><br><br>A more efficient way is to set the <code>prototype</code> to a new object that already contains the properties. This way, the properties are added all at once:<br><br><blockquote>Bird.prototype = {<br>&nbsp;&nbsp;numLegs: 2, <br>&nbsp;&nbsp;eat: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"nom nom nom\");<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote><br><br> <hr>Add the property <code>numLegs</code> and the two methods <code>eat()</code> and <code>describe()</code> to the <code>prototype</code> of <code>Dog</code> by setting the <code>prototype</code> to a new object.<br><br>','function Dog(name) {<br>  this.name = name;<br>}<br><br>let beagle = new Dog(\"Snoopy\");<br><br>// Add your code below this line<br><br><br>',5),(342,'587d7daf367417b2b2512b80','Remember to Set the Constructor Property when Changing the Prototype','There is one crucial side effect of manually setting the <code>prototype</code> to a new object. It erased the <code>constructor</code> property! The code in the previous challenge would print the following for <code>duck</code>:<br><br><blockquote>console.log(duck.constructor)<br>// prints ?undefined? - Oops!</blockquote><br><br>To fix this, whenever a prototype is manually set to a new object, remember to define the <code>constructor</code> property:<br><br><blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird, // define the constructor property<br>&nbsp;&nbsp;numLegs: 2,<br>&nbsp;&nbsp;eat: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"nom nom nom\");<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name); <br>&nbsp;&nbsp;}<br>};</blockquote><br><br> <hr>Define the <code>constructor</code> property on the <code>Dog</code> <code>prototype</code>.<br><br>','function Dog(name) {<br>  this.name = name;<br>}<br><br>let beagle = new Dog(\"Snoopy\");<br><br>Dog.prototype.isPrototypeOf(beagle);  // => true<br><br>// Fix the code below so that it evaluates to true<br>???.isPrototypeOf(Dog.prototype);<br><br>',5),(343,'587d7db0367417b2b2512b81','Understand Where an Object?s Prototype Comes From','Just like people inherit genes from their parents, an object inherits its <code>prototype</code> directly from the constructor function that created it. For example, here the <code>Bird</code> constructor creates the <code>duck</code> object:<br><br><blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name = name;<br>}<br><br>let duck = new Bird(\"Donald\");</blockquote><br><br><code>duck</code> inherits its <code>prototype</code> from the <code>Bird</code> constructor function. You can show this relationship with the <code>isPrototypeOf</code> method:<br><br><blockquote>Bird.prototype.isPrototypeOf(duck);<br>// returns true</blockquote><br><br> <hr>Use <code>isPrototypeOf</code> to check the <code>prototype</code> of <code>beagle</code>.<br><br>','function Cat(name) {<br>  this.name = name; <br>}<br><br>Cat.prototype = {<br>  constructor: Cat, <br>  eat: function() {<br>    console.log(\"nom nom nom\");<br>  }<br>};<br><br>function Bear(name) {<br>  this.name = name; <br>}<br><br>Bear.prototype = {<br>  constructor: Bear, <br>  eat: function() {<br>    console.log(\"nom nom nom\");<br>  }<br>};<br><br>function Animal() { }<br><br>Animal.prototype = {<br>  constructor: Animal,<br>  <br>};<br>',5),(344,'587d7db0367417b2b2512b82','Understand the Prototype Chain','All objects in JavaScript (with a few exceptions) have a <code>prototype</code>. Also, an object?s <code>prototype</code> itself is an object.<br><br><blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name = name;<br>}<br><br>typeof Bird.prototype; // => object</blockquote><br><br>Because a <code>prototype</code> is an object, a <code>prototype</code> can have its own <code>prototype</code>! In this case, the <code>prototype</code> of <code>Bird.prototype</code> is <code>Object.prototype</code>:<br><br><blockquote>Object.prototype.isPrototypeOf(Bird.prototype);<br>// returns true</blockquote><br><br>How is this useful? You may recall the <code>hasOwnProperty</code> method from a previous challenge:<br><br><blockquote>let duck = new Bird(\"Donald\");<br>duck.hasOwnProperty(\"name\"); // => true</blockquote><br><br>The <code>hasOwnProperty</code> method is defined in <code>Object.prototype</code>, which can be accessed by <code>Bird.prototype</code>, which can then be accessed by <code>duck</code>. This is an example of the <code>prototype</code> chain.<br><br>In this <code>prototype</code> chain, <code>Bird</code> is the <code>supertype</code> for <code>duck</code>, while <code>duck</code> is the <code>subtype</code>. <code>Object</code> is a <code>supertype</code> for both <code>Bird</code> and <code>duck</code>.<br><br><code>Object</code> is a <code>supertype</code> for all objects in JavaScript. Therefore, any object can use the <code>hasOwnProperty</code> method.<br><br> <hr>Modify the code to show the correct prototype chain.<br><br>','function Animal() { }<br><br>Animal.prototype = {<br>  constructor: Animal, <br>  eat: function() {<br>    console.log(\"nom nom nom\");<br>  }<br>};<br><br>// Add your code below this line<br><br>let duck; // Change this line<br>let beagle; // Change this line<br><br>duck.eat(); // Should print \"nom nom nom\"<br>beagle.eat(); // Should print \"nom nom nom\" <br>',5),(345,'587d7db0367417b2b2512b83','Use Inheritance So You Don\'t Repeat Yourself','There\'s a principle in programming called <code>Don\'t Repeat Yourself (DRY)</code>. The reason repeated code is a problem is because any change requires fixing code in multiple places. This usually means more work for programmers and more room for errors.<br><br>Notice in the example below that the <code>describe</code> method is shared by <code>Bird</code> and <code>Dog</code>:<br><br><blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird,<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};<br><br>Dog.prototype = {<br>&nbsp;&nbsp;constructor: Dog,<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote><br><br>The <code>describe</code> method is repeated in two places. The code can be edited to follow the <code>DRY</code> principle by creating a <code>supertype</code> (or parent) called <code>Animal</code>:<br><br><blockquote>function Animal() { };<br><br>Animal.prototype = {<br>&nbsp;&nbsp;constructor: Animal, <br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote><br><br>Since <code>Animal</code> includes the <code>describe</code> method, you can remove it from <code>Bird</code> and <code>Dog</code>:<br><br><blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird<br>};<br><br>Dog.prototype = {<br>&nbsp;&nbsp;constructor: Dog<br>};</blockquote><br><br> <hr>The <code>eat</code> method is repeated in both <code>Cat</code> and <code>Bear</code>. Edit the code in the spirit of <code>DRY</code> by moving the <code>eat</code> method to the <code>Animal</code> <code>supertype</code>.<br><br>','function Animal() { }<br><br>Animal.prototype = {<br>  constructor: Animal,<br>  eat: function() {<br>    console.log(\"nom nom nom\");<br>  }<br>};<br><br>function Dog() { }<br><br>// Add your code below this line<br><br><br>let beagle = new Dog();<br>beagle.eat();  // Should print \"nom nom nom\"<br>',5),(346,'587d7db0367417b2b2512b84','Inherit Behaviors from a Supertype','In the previous challenge, you created a <code>supertype</code> called <code>Animal</code> that defined behaviors shared by all animals:<br><br><blockquote>function Animal() { }<br>Animal.prototype.eat = function() {<br>&nbsp;&nbsp;console.log(\"nom nom nom\");<br>};</blockquote><br><br>This and the next challenge will cover how to reuse <code>Animal\'s</code> methods inside <code>Bird</code> and <code>Dog</code> without defining them again. It uses a technique called <code>inheritance</code>.<br><br>This challenge covers the first step: make an instance of the <code>supertype</code> (or parent).<br><br>You already know one way to create an instance of <code>Animal</code> using the <code>new</code> operator:<br><br><blockquote>let animal = new Animal();</blockquote><br><br>There are some disadvantages when using this syntax for <code>inheritance</code>, which are too complex for the scope of this challenge. Instead, here\'s an alternative approach without those disadvantages:<br><br><blockquote>let animal = Object.create(Animal.prototype);</blockquote><br><br><code>Object.create(obj)</code> creates a new object, and sets <code>obj</code> as the new object\'s <code>prototype</code>. Recall that the <code>prototype</code> is like the \"recipe\" for creating an object. By setting the <code>prototype</code> of <code>animal</code> to be <code>Animal\'s</code> <code>prototype</code>, you are effectively giving the <code>animal</code> instance the same \"recipe\" as any other instance of <code>Animal</code>.<br><br><blockquote>animal.eat(); // prints \"nom nom nom\"<br>animal instanceof Animal; // => true</blockquote><br><br> <hr>Use <code>Object.create</code> to make two instances of <code>Animal</code> named <code>duck</code> and <code>beagle</code>.<br><br>','function Animal() { }<br>function Bird() { }<br>function Dog() { }<br><br>Bird.prototype = Object.create(Animal.prototype);<br>Dog.prototype = Object.create(Animal.prototype);<br><br>// Add your code below this line<br><br><br><br>let duck = new Bird();<br>let beagle = new Dog();<br>',5),(347,'587d7db1367417b2b2512b85','Set the Child\'s Prototype to an Instance of the Parent','In the previous challenge you saw the first step for inheriting behavior from the <code>supertype</code> (or parent) <code>Animal</code>: making a new instance of <code>Animal</code>.<br><br>This challenge covers the next step: set the <code>prototype</code> of the <code>subtype</code> (or child)&mdash;in this case, <code>Bird</code>&mdash;to be an instance of <code>Animal</code>.<br><br><blockquote>Bird.prototype = Object.create(Animal.prototype);</blockquote><br><br>Remember that the <code>prototype</code> is like the \"recipe\" for creating an object. In a way, the recipe for <code>Bird</code> now includes all the key \"ingredients\" from <code>Animal</code>.<br><br><blockquote>let duck = new Bird(\"Donald\");<br>duck.eat(); // prints \"nom nom nom\"</blockquote><br><br><code>duck</code> inherits all of <code>Animal</code>\'s properties, including the <code>eat</code> method.<br><br> <hr>Modify the code so that instances of <code>Dog</code> inherit from <code>Animal</code>.<br><br>','function Animal() { }<br>Animal.prototype.eat = function() { console.log(\"nom nom nom\"); };<br><br>function Dog() { }<br><br>// Add your code below this line<br><br><br><br><br>// Add your code above this line<br><br>let beagle = new Dog();<br><br>beagle.eat(); // Should print \"nom nom nom\"<br>beagle.bark(); // Should print \"Woof!\"<br>',5),(348,'587d7db1367417b2b2512b86','Reset an Inherited Constructor Property','When an object inherits its <code>prototype</code> from another object, it also inherits the <code>supertype</code>\'s constructor property.<br><br>Here\'s an example:<br><br><blockquote>function Bird() { }<br>Bird.prototype = Object.create(Animal.prototype);<br>let duck = new Bird();<br>duck.constructor // function Animal(){...}</blockquote><br><br>But <code>duck</code> and all instances of <code>Bird</code> should show that they were constructed by <code>Bird</code> and not <code>Animal</code>. To do so, you can manually set <code>Bird\'s</code> constructor property to the <code>Bird</code> object:<br><br><blockquote>Bird.prototype.constructor = Bird;<br>duck.constructor // function Bird(){...}</blockquote><br><br> <hr>Fix the code so <code>duck.constructor</code> and <code>beagle.constructor</code> return their respective constructors.<br><br>','function Bird() { }<br><br>Bird.prototype.fly = function() { return \"I am flying!\"; };<br><br>function Penguin() { }<br>Penguin.prototype = Object.create(Bird.prototype);<br>Penguin.prototype.constructor = Penguin;<br><br>// Add your code below this line<br><br><br><br>// Add your code above this line<br><br>let penguin = new Penguin();<br>console.log(penguin.fly());<br>',5),(349,'587d7db1367417b2b2512b87','Add Methods After Inheritance','A constructor function that inherits its <code>prototype</code> object from a <code>supertype</code> constructor function can still have its own methods in addition to inherited methods.<br><br>For example, <code>Bird</code> is a constructor that inherits its <code>prototype</code> from <code>Animal</code>:<br><br><blockquote>function Animal() { }<br>Animal.prototype.eat = function() {<br>&nbsp;&nbsp;console.log(\"nom nom nom\");<br>};<br>function Bird() { }<br>Bird.prototype = Object.create(Animal.prototype);<br>Bird.prototype.constructor = Bird;</blockquote><br><br>In addition to what is inherited from <code>Animal</code>, you want to add behavior that is unique to <code>Bird</code> objects. Here, <code>Bird</code> will get a <code>fly()</code> function. Functions are added to <code>Bird\'s</code> <code>prototype</code> the same way as any constructor function:<br><br><blockquote>Bird.prototype.fly = function() {<br>&nbsp;&nbsp;console.log(\"I\'m flying!\");<br>};</blockquote><br><br>Now instances of <code>Bird</code> will have both <code>eat()</code> and <code>fly()</code> methods:<br><br><blockquote>let duck = new Bird();<br>duck.eat(); // prints \"nom nom nom\"<br>duck.fly(); // prints \"I\'m flying!\"</blockquote><br><br> <hr>Add all necessary code so the <code>Dog</code> object inherits from <code>Animal</code> and the <code>Dog\'s</code> <code>prototype</code> constructor is set to Dog. Then add a <code>bark()</code> method to the <code>Dog</code> object so that <code>beagle</code> can both <code>eat()</code> and <code>bark()</code>. The <code>bark()</code> method should print \"Woof!\" to the console.<br><br>','let bird = {<br>  name: \"Donald\",<br>  numLegs: 2<br>};<br><br>let boat = {<br>  name: \"Warrior\",<br>  type: \"race-boat\"<br>};<br><br>// Add your code below this line<br><br><br><br><br><br><br>',5),(350,'587d7db1367417b2b2512b88','Override Inherited Methods','In previous lessons, you learned that an object can inherit its behavior (methods) from another object by cloning its <code>prototype</code> object:<br><br><blockquote>ChildObject.prototype = Object.create(ParentObject.prototype);</blockquote><br><br>Then the <code>ChildObject</code> received its own methods by chaining them onto its <code>prototype</code>:<br><br><blockquote>ChildObject.prototype.methodName = function() {...};</blockquote><br><br>It\'s possible to override an inherited method. It\'s done the same way - by adding a method to <code>ChildObject.prototype</code> using the same method name as the one to override.<br><br>Here\'s an example of <code>Bird</code> overriding the <code>eat()</code> method inherited from <code>Animal</code>:<br><br><blockquote>function Animal() { }<br>Animal.prototype.eat = function() {<br>&nbsp;&nbsp;return \"nom nom nom\";<br>};<br>function Bird() { }<br><br>// Inherit all methods from Animal<br>Bird.prototype = Object.create(Animal.prototype);<br><br>// Bird.eat() overrides Animal.eat()<br>Bird.prototype.eat = function() {<br>&nbsp;&nbsp;return \"peck peck peck\";<br>};</blockquote><br><br>If you have an instance <code>let duck = new Bird();</code> and you call <code>duck.eat()</code>, this is how JavaScript looks for the method on <code>duck?s</code> <code>prototype</code> chain:<br><br>1. duck => Is eat() defined here? No.<br><br>2. Bird => Is eat() defined here? => Yes. Execute it and stop searching.<br><br>3. Animal => eat() is also defined, but JavaScript stopped searching before reaching this level.<br><br>4. Object => JavaScript stopped searching before reaching this level.<br><br> <hr>Override the <code>fly()</code> method for <code>Penguin</code> so that it returns \"Alas, this is a flightless bird.\"<br><br>','function Bird() {<br>  this.weight = 15;<br>  <br>  <br>}<br><br>',5),(351,'587d7db2367417b2b2512b89','Use a Mixin to Add Common Behavior Between Unrelated Objects','As you have seen, behavior is shared through inheritance. However, there are cases when inheritance is not the best solution. Inheritance does not work well for unrelated objects like <code>Bird</code> and <code>Airplane</code>. They can both fly, but a <code>Bird</code> is not a type of <code>Airplane</code> and vice versa.<br><br>For unrelated objects, it\'s better to use <code>mixins</code>. A <code>mixin</code> allows other objects to use a collection of functions.<br><br><blockquote>let flyMixin = function(obj) {<br>&nbsp;&nbsp;obj.fly = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Flying, wooosh!\");<br>&nbsp;&nbsp;}<br>};</blockquote><br><br>The <code>flyMixin</code> takes any object and gives it the <code>fly</code> method.<br><br><blockquote>let bird = {<br>&nbsp;&nbsp;name: \"Donald\",<br>&nbsp;&nbsp;numLegs: 2<br>};<br><br>let plane = {<br>&nbsp;&nbsp;model: \"777\",<br>&nbsp;&nbsp;numPassengers: 524<br>};<br><br>flyMixin(bird);<br>flyMixin(plane);</blockquote><br><br>Here <code>bird</code> and <code>plane</code> are passed into <code>flyMixin</code>, which then assigns the <code>fly</code> function to each object. Now <code>bird</code> and <code>plane</code> can both fly:<br><br><blockquote>bird.fly(); // prints \"Flying, wooosh!\"<br>plane.fly(); // prints \"Flying, wooosh!\"</blockquote><br><br>Note how the <code>mixin</code> allows for the same <code>fly</code> method to be reused by unrelated objects <code>bird</code> and <code>plane</code>.<br><br> <hr>Create a <code>mixin</code> named <code>glideMixin</code> that defines a method named <code>glide</code>. Then use the <code>glideMixin</code> to give both <code>bird</code> and <code>boat</code> the ability to glide.<br><br>','function makeNest() {<br>  console.log(\"A cozy nest is ready\");<br>}<br><br>makeNest(); <br>',0),(352,'587d7db2367417b2b2512b8a','Use Closure to Protect Properties Within an Object from Being Modified Externally','In the previous challenge, <code>bird</code> had a public property <code>name</code>. It is considered public because it can be accessed and changed outside of <code>bird</code>\'s definition.<br><br><blockquote>bird.name = \"Duffy\";</blockquote><br><br>Therefore, any part of your code can easily change the name of <code>bird</code> to any value. Think about things like passwords and bank accounts being easily changeable by any part of your codebase. That could cause a lot of issues.<br><br>The simplest way to make properties private is by creating a variable within the constructor function. This changes the scope of that variable to be within the constructor function versus available globally. This way, the property can only be accessed and changed by methods also within the constructor function.<br><br><blockquote>function Bird() {<br>&nbsp;&nbsp;let hatchedEgg = 10; // private property<br><br>&nbsp;&nbsp;this.getHatchedEggCount = function() { // publicly available method that a bird object can use<br>&nbsp;&nbsp;&nbsp;&nbsp;return hatchedEgg;<br>&nbsp;&nbsp;};<br>}<br>let ducky = new Bird();<br>ducky.getHatchedEggCount(); // returns 10</blockquote><br><br>Here <code>getHachedEggCount</code> is a privileged method, because it has access to the private variable <code>hatchedEgg</code>. This is possible because <code>hatchedEgg</code> is declared in the same context as <code>getHachedEggCount</code>. In JavaScript, a function always has access to the context in which it was created. This is called <code>closure</code>.<br><br> <hr>Change how <code>weight</code> is declared in the <code>Bird</code> function so it is a private variable. Then, create a method <code>getWeight</code> that returns the value of <code>weight</code>.<br><br>','let isCuteMixin = function(obj) {<br>  obj.isCute = function() {<br>    return true;<br>  };<br>};<br>let singMixin = function(obj) {<br>  obj.sing = function() {<br>    console.log(\"Singing to an awesome tune\");<br>  };<br>};<br>',0),(353,'587d7db2367417b2b2512b8b','Understand the Immediately Invoked Function Expression (IIFE)','A common pattern in JavaScript is to execute a function as soon as it is declared:<br><br><blockquote>(function () {<br>&nbsp;&nbsp;console.log(\"Chirp, chirp!\");<br>})(); // this is an anonymous function expression that executes right away<br>// Outputs \"Chirp, chirp!\" immediately</blockquote><br><br>Note that the function has no name and is not stored in a variable. The two parentheses () at the end of the function expression cause it to be immediately executed or invoked. This pattern is known as an <code>immediately invoked function expression</code> or <code>IIFE</code>.<br><br> <hr>Rewrite the function <code>makeNest</code> and remove its call so instead it\'s an anonymous <code>immediately invoked function expression</code> (<code>IIFE</code>).<br><br>','/**<br> * A long process to prepare tea.<br> * @return {string} A cup of tea.<br> **/<br>const prepareTea = () => \'\'greenTea\'\';<br><br>/**<br> * Get given number of cups of tea.<br> * @param {number} numOfCups Number of required cups of tea.<br> * @return {Array<string>} Given amount of tea cups.<br> **/<br>const getTea = (numOfCups) => {<br>  const teaCups = [];<br>  <br>  for(let cups = 1; cups <= numOfCups; cups += 1) {<br>    const teaCup = prepareTea();<br>    teaCups.push(teaCup);<br>  }<br><br>  return teaCups;<br>};<br><br>// Add your code below this line<br><br>const tea4TeamFCC = null; // :(<br><br>// Add your code above this line<br><br>console.log(tea4TeamFCC);<br>',0),(354,'587d7db2367417b2b2512b8c','Use an IIFE to Create a Module','An <code>immediately invoked function expression</code> (<code>IIFE</code>) is often used to group related functionality into a single object or <code>module</code>. For example, an earlier challenge defined two mixins:<br><br><blockquote>function glideMixin(obj) {<br>&nbsp;&nbsp;obj.glide = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Gliding on the water\");<br>&nbsp;&nbsp;};<br>}<br>function flyMixin(obj) {<br>&nbsp;&nbsp;obj.fly = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Flying, wooosh!\");<br>&nbsp;&nbsp;};<br>}</blockquote><br><br>We can group these <code>mixins</code> into a module as follows:<br><br><blockquote>let motionModule = (function () {<br>&nbsp;&nbsp;return {<br>&nbsp;&nbsp;&nbsp;&nbsp;glideMixin: function (obj) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj.glide = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Gliding on the water\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;flyMixin: function(obj) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj.fly = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Flying, wooosh!\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}) (); // The two parentheses cause the function to be immediately invoked</blockquote><br><br>Note that you have an <code>immediately invoked function expression</code> (<code>IIFE</code>) that returns an object <code>motionModule</code>. This returned object contains all of the <code>mixin</code> behaviors as properties of the object.<br><br>The advantage of the <code>module</code> pattern is that all of the motion behaviors can be packaged into a single object that can then be used by other parts of your code. Here is an example using it:<br><br><blockquote>motionModule.glideMixin(duck);<br>duck.glide();</blockquote><br><br> <hr>Create a <code>module</code> named <code>funModule</code> to wrap the two <code>mixins</code> <code>isCuteMixin</code> and <code>singMixin</code>. <code>funModule</code> should return an object.<br><br>','/**<br> * A long process to prepare green tea.<br> * @return {string} A cup of green tea.<br> **/<br>const prepareGreenTea = () => \'\'greenTea\'\';<br><br>/**<br> * A long process to prepare black tea.<br> * @return {string} A cup of black tea.<br> **/<br>const prepareBlackTea = () => \'\'blackTea\'\';<br><br>/**<br> * Get given number of cups of tea.<br> * @param {function():string} prepareTea The type of tea preparing function.<br> * @param {number} numOfCups Number of required cups of tea.<br> * @return {Array<string>} Given amount of tea cups.<br> **/<br>const getTea = (prepareTea, numOfCups) => {<br>  const teaCups = [];<br><br>  for(let cups = 1; cups <= numOfCups; cups += 1) {<br>    const teaCup = prepareTea();<br>    teaCups.push(teaCup);<br>  }<br><br>  return teaCups;<br>};<br><br>// Add your code below this line<br><br>const tea4GreenTeamFCC = null; // :(<br>const tea4BlackTeamFCC = null; // :(<br><br>// Add your code above this line<br><br>console.log(<br>  tea4GreenTeamFCC,<br>  tea4BlackTeamFCC<br>);<br>',0),(355,'bad87fee1348bd9acdd08826','Learn How Script Tags and Document Ready Work','Now we\'re ready to learn jQuery, the most popular JavaScript tool of all time.<br><br>Before we can start using jQuery, we need to add some things to our HTML.<br><br>First, add a <code>script</code> element at the top of your page. Be sure to close it on the following line.<br><br>Your browser will run any JavaScript inside a <code>script</code> element, including jQuery.<br><br>Inside your <code>script</code> element, add this code: <code>$(document).ready(function() {</code> to your <code>script</code>. Then close it on the following line (still inside your <code>script</code> element) with: <code>});</code><br><br>We\'ll learn more about <code>functions</code> later. The important thing to know is that code you put inside this <code>function</code> will run as soon as your browser has loaded your page.<br><br>This is important because without your <code>document ready function</code>, your code may run before your HTML is rendered, which would cause bugs.<br><br>','// tabs is an array of titles of each site open within the window<br>var Window = function(tabs) {<br>  this.tabs = tabs; // we keep a record of the array inside the object<br>};<br><br>// When you join two windows into one window<br>Window.prototype.join = function (otherWindow) {<br>  this.tabs = this.tabs.concat(otherWindow.tabs);<br>  return this;<br>};<br><br>// When you open a new tab at the end<br>Window.prototype.tabOpen = function (tab) {<br>  this.tabs.push(\'\'new tab\'\'); // let\'\'s open a new tab for now<br>  return this;<br>};<br><br>// When you close a tab<br>Window.prototype.tabClose = function (index) {<br>  var tabsBeforeIndex = this.tabs.splice(0, index); // get the tabs before the tab<br>  var tabsAfterIndex = this.tabs.splice(index); // get the tabs after the tab<br><br>  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex); // join them together <br>  return this;<br> };<br><br>// Let\'\'s create three browser windows<br>var workWindow = new Window([\'\'GMail\'\', \'\'Inbox\'\', \'\'Work mail\'\', \'\'Docs\'\', \'\'freeCodeCamp\'\']); // Your mailbox, drive, and other work sites<br>var socialWindow = new Window([\'\'FB\'\', \'\'Gitter\'\', \'\'Reddit\'\', \'\'Twitter\'\', \'\'Medium\'\']); // Social sites<br>var videoWindow = new Window([\'\'Netflix\'\', \'\'YouTube\'\', \'\'Vimeo\'\', \'\'Vine\'\']); //  Entertainment sites<br><br>// Now perform the tab opening, closing, and other operations<br>var finalTabs = socialWindow<br>                    .tabOpen() // Open a new tab for cat memes<br>                    .join(videoWindow.tabClose(2)) // Close third tab in video window, and join<br>                    .join(workWindow.tabClose(1).tabOpen());<br><br>alert(finalTabs.tabs);<br>',0),(356,'bad87fee1348bd9bedc08826','Target HTML Elements with Selectors Using jQuery','Now we have a <code>document ready function</code>.<br><br>Now let\'s write our first jQuery statement. All jQuery functions start with a <code>$</code>, usually referred to as a <code>dollar sign operator</code>, or as <code>bling</code>.<br><br>jQuery often selects an HTML element with a <code>selector</code>, then does something to that element.<br><br>For example, let\'s make all of your <code>button</code> elements bounce. Just add this code inside your document ready function:<br><br><code>$(\"button\").addClass(\"animated bounce\");</code><br><br>Note that we\'ve already included both the jQuery library and the Animate.css library in the background so that you can use them in the editor. So you are using jQuery to apply the Animate.css <code>bounce</code> class to your <code>button</code> elements.<br><br>','// the global variable<br>var fixedValue = 4;<br><br>function incrementer () {<br>  // Add your code below this line<br>  <br>  <br>  // Add your code above this line<br>}<br><br>var newValue = incrementer(); // Should equal 5<br>console.log(fixedValue); // Should print 4<br>',0),(357,'bad87fee1348bd9aedc08826','Target Elements by Class Using jQuery','You see how we made all of your <code>button</code> elements bounce? We selected them with <code>$(\"button\")</code>, then we added some CSS classes to them with <code>.addClass(\"animated bounce\");</code>.<br><br>You just used jQuery\'s <code>.addClass()</code> function, which allows you to add classes to elements.<br><br>First, let\'s target your <code>div</code> elements with the class <code>well</code> by using the <code>$(\".well\")</code> selector.<br><br>Note that, just like with CSS declarations, you type a <code>.</code> before the class\'s name.<br><br>Then use jQuery\'s <code>.addClass()</code> function to add the classes <code>animated</code> and <code>shake</code>.<br><br>For example, you could make all the elements with the class <code>text-primary</code> shake by adding the following to your <code>document ready function</code>:<br><br><code>$(\".text-primary\").addClass(\"animated shake\");</code><br><br>','// the global variable<br>var fixedValue = 4;<br><br>// Add your code below this line<br>function incrementer () {<br>  <br>  <br>  // Add your code above this line<br>}<br><br>var newValue = incrementer(fixedValue); // Should equal 5<br>console.log(fixedValue); // Should print 4<br>',0),(358,'bad87fee1348bd9aeda08826','Target Elements by id Using jQuery','You can also target elements by their id attributes.<br><br>First target your <code>button</code> element with the id <code>target3</code> by using the <code>$(\"#target3\")</code> selector.<br><br>Note that, just like with CSS declarations, you type a <code>#</code> before the id\'s name.<br><br>Then use jQuery\'s <code>.addClass()</code> function to add the classes <code>animated</code> and <code>fadeOut</code>.<br><br>Here\'s how you\'d make the <code>button</code> element with the id <code>target6</code> fade out:<br><br><code>$(\"#target6\").addClass(\"animated fadeOut\")</code>.<br><br>','// the global variable<br>var bookList = [\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"];<br><br>/* This function should add a book to the list and return the list */<br>// New parameters should come before the bookName one<br><br>// Add your code below this line<br>function add (bookName) {<br>  <br>  return bookList.push(bookName);<br>  <br>  // Add your code above this line<br>}<br><br>/* This function should remove a book from the list and return the list */<br>// New parameters should come before the bookName one<br><br>// Add your code below this line<br>function remove (bookName) {<br>  if (bookList.indexOf(bookName) >= 0) {<br>    <br>    return bookList.splice(0, 1, bookName);<br>    <br>    // Add your code above this line<br>    }<br>}<br><br>var newBookList = add(bookList, \'\'A Brief History of Time\'\');<br>var newerBookList = remove(bookList, \'\'On The Electrodynamics of Moving Bodies\'\');<br>var newestBookList = remove(add(bookList, \'\'A Brief History of Time\'\'), \'\'On The Electrodynamics of Moving Bodies\'\');<br><br>console.log(bookList);<br>',0),(359,'bad87fee1348bd9aeda08726','Delete Your jQuery Functions','These animations were cool at first, but now they\'re getting kind of distracting.<br><br>Delete all three of these jQuery functions from your <code>document ready function</code>, but leave your <code>document ready function</code> itself intact.<br><br>','// the global variable<br>var watchList = [<br>                 {  <br>                   \"Title\": \"Inception\",<br>                   \"Year\": \"2010\",<br>                   \"Rated\": \"PG-13\",<br>                   \"Released\": \"16 Jul 2010\",<br>                   \"Runtime\": \"148 min\",<br>                   \"Genre\": \"Action, Adventure, Crime\",<br>                   \"Director\": \"Christopher Nolan\",<br>                   \"Writer\": \"Christopher Nolan\",<br>                   \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Ellen Page, Tom Hardy\",<br>                   \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",<br>                   \"Language\": \"English, Japanese, French\",<br>                   \"Country\": \"USA, UK\",<br>                   \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",<br>                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",<br>                   \"Metascore\": \"74\",<br>                   \"imdbRating\": \"8.8\",<br>                   \"imdbVotes\": \"1,446,708\",<br>                   \"imdbID\": \"tt1375666\",<br>                   \"Type\": \"movie\",<br>                   \"Response\": \"True\"<br>                },<br>                {  <br>                   \"Title\": \"Interstellar\",<br>                   \"Year\": \"2014\",<br>                   \"Rated\": \"PG-13\",<br>                   \"Released\": \"07 Nov 2014\",<br>                   \"Runtime\": \"169 min\",<br>                   \"Genre\": \"Adventure, Drama, Sci-Fi\",<br>                   \"Director\": \"Christopher Nolan\",<br>                   \"Writer\": \"Jonathan Nolan, Christopher Nolan\",<br>                   \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",<br>                   \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity\'\'s survival.\",<br>                   \"Language\": \"English\",<br>                   \"Country\": \"USA, UK\",<br>                   \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",<br>                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",<br>                   \"Metascore\": \"74\",<br>                   \"imdbRating\": \"8.6\",<br>                   \"imdbVotes\": \"910,366\",<br>                   \"imdbID\": \"tt0816692\",<br>                   \"Type\": \"movie\",<br>                   \"Response\": \"True\"<br>                },<br>                {<br>                   \"Title\": \"The Dark Knight\",<br>                   \"Year\": \"2008\",<br>                   \"Rated\": \"PG-13\",<br>                   \"Released\": \"18 Jul 2008\",<br>                   \"Runtime\": \"152 min\",<br>                   \"Genre\": \"Action, Adventure, Crime\",<br>                   \"Director\": \"Christopher Nolan\",<br>                   \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",<br>                   \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",<br>                   \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",<br>                   \"Language\": \"English, Mandarin\",<br>                   \"Country\": \"USA, UK\",<br>                   \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",<br>                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",<br>                   \"Metascore\": \"82\",<br>                   \"imdbRating\": \"9.0\",<br>                   \"imdbVotes\": \"1,652,832\",<br>                   \"imdbID\": \"tt0468569\",<br>                   \"Type\": \"movie\",<br>                   \"Response\": \"True\"<br>                },<br>                {  <br>                   \"Title\": \"Batman Begins\",<br>                   \"Year\": \"2005\",<br>                   \"Rated\": \"PG-13\",<br>                   \"Released\": \"15 Jun 2005\",<br>                   \"Runtime\": \"140 min\",<br>                   \"Genre\": \"Action, Adventure\",<br>                   \"Director\": \"Christopher Nolan\",<br>                   \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",<br>                   \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",<br>                   \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",<br>                   \"Language\": \"English, Urdu, Mandarin\",<br>                   \"Country\": \"USA, UK\",<br>                   \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",<br>                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",<br>                   \"Metascore\": \"70\",<br>                   \"imdbRating\": \"8.3\",<br>                   \"imdbVotes\": \"972,584\",<br>                   \"imdbID\": \"tt0372784\",<br>                   \"Type\": \"movie\",<br>                   \"Response\": \"True\"<br>                },<br>                {<br>                   \"Title\": \"Avatar\",<br>                   \"Year\": \"2009\",<br>                   \"Rated\": \"PG-13\",<br>                   \"Released\": \"18 Dec 2009\",<br>                   \"Runtime\": \"162 min\",<br>                   \"Genre\": \"Action, Adventure, Fantasy\",<br>                   \"Director\": \"James Cameron\",<br>                   \"Writer\": \"James Cameron\",<br>                   \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",<br>                   \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",<br>                   \"Language\": \"English, Spanish\",<br>                   \"Country\": \"USA, UK\",<br>                   \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",<br>                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",<br>                   \"Metascore\": \"83\",<br>                   \"imdbRating\": \"7.9\",<br>                   \"imdbVotes\": \"876,575\",<br>                   \"imdbID\": \"tt0499549\",<br>                   \"Type\": \"movie\",<br>                   \"Response\": \"True\"<br>                }<br>];<br><br>// Add your code below this line<br><br>var rating = [];<br>for(var i=0; i < watchList.length; i++){<br>  rating.push({title: watchList[i][\"Title\"],  rating: watchList[i][\"imdbRating\"]});<br>}<br><br>// Add your code above this line<br><br>console.log(rating); <br>',0),(360,'bad87fee1348bd9aed908626','Target the Same Element with Multiple jQuery Selectors','Now you know three ways of targeting elements: by type: <code>$(\"button\")</code>, by class: <code>$(\".btn\")</code>, and by id <code>$(\"#target1\")</code>.<br><br>Although it is possible to add multiple classes in a single <code>.addClass()</code> call, let\'s add them to the same element in <em>three separate ways</em>.<br><br>Using <code>.addClass()</code>, add only one class at a time to the same element, three different ways:<br><br>Add the <code>animated</code> class to all elements with type <code>button</code>.<br><br>Add the <code>shake</code> class to all the buttons with class <code>.btn</code>.<br><br>Add the <code>btn-primary</code> class to the button with id <code>#target1</code>.<br><br><strong>Note</strong><br>You should only be targeting one element and adding only one class at a time. Altogether, your three individual selectors will end up adding the three classes <code>shake</code>, <code>animated</code>, and <code>btn-primary</code> to <code>#target1</code>.<br><br>','// the global Array<br>var s = [23, 65, 98, 5];<br><br>Array.prototype.myMap = function(callback){<br>  var newArray = [];<br>  // Add your code below this line<br>  <br>  // Add your code above this line<br>  return newArray;<br><br>};<br><br>var new_s = s.myMap(function(item){<br>  return item * 2;<br>});<br>',0),(361,'bad87fee1348bd9aed918626','Remove Classes from an Element with jQuery','In the same way you can add classes to an element with jQuery\'s <code>addClass()</code> function, you can remove them with jQuery\'s <code>removeClass()</code> function.<br><br>Here\'s how you would do this for a specific button:<br><br><code>$(\"#target2\").removeClass(\"btn-default\");</code><br><br>Let\'s remove the <code>btn-default</code> class from all of our <code>button</code> elements.<br><br>','// the global variable<br>var watchList = [<br>                 {  <br>                   \"Title\": \"Inception\",<br>                   \"Year\": \"2010\",<br>                   \"Rated\": \"PG-13\",<br>                   \"Released\": \"16 Jul 2010\",<br>                   \"Runtime\": \"148 min\",<br>                   \"Genre\": \"Action, Adventure, Crime\",<br>                   \"Director\": \"Christopher Nolan\",<br>                   \"Writer\": \"Christopher Nolan\",<br>                   \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Ellen Page, Tom Hardy\",<br>                   \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",<br>                   \"Language\": \"English, Japanese, French\",<br>                   \"Country\": \"USA, UK\",<br>                   \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",<br>                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",<br>                   \"Metascore\": \"74\",<br>                   \"imdbRating\": \"8.8\",<br>                   \"imdbVotes\": \"1,446,708\",<br>                   \"imdbID\": \"tt1375666\",<br>                   \"Type\": \"movie\",<br>                   \"Response\": \"True\"<br>                },<br>                {  <br>                   \"Title\": \"Interstellar\",<br>                   \"Year\": \"2014\",<br>                   \"Rated\": \"PG-13\",<br>                   \"Released\": \"07 Nov 2014\",<br>                   \"Runtime\": \"169 min\",<br>                   \"Genre\": \"Adventure, Drama, Sci-Fi\",<br>                   \"Director\": \"Christopher Nolan\",<br>                   \"Writer\": \"Jonathan Nolan, Christopher Nolan\",<br>                   \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",<br>                   \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity\'\'s survival.\",<br>                   \"Language\": \"English\",<br>                   \"Country\": \"USA, UK\",<br>                   \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",<br>                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",<br>                   \"Metascore\": \"74\",<br>                   \"imdbRating\": \"8.6\",<br>                   \"imdbVotes\": \"910,366\",<br>                   \"imdbID\": \"tt0816692\",<br>                   \"Type\": \"movie\",<br>                   \"Response\": \"True\"<br>                },<br>                {<br>                   \"Title\": \"The Dark Knight\",<br>                   \"Year\": \"2008\",<br>                   \"Rated\": \"PG-13\",<br>                   \"Released\": \"18 Jul 2008\",<br>                   \"Runtime\": \"152 min\",<br>                   \"Genre\": \"Action, Adventure, Crime\",<br>                   \"Director\": \"Christopher Nolan\",<br>                   \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",<br>                   \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",<br>                   \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",<br>                   \"Language\": \"English, Mandarin\",<br>                   \"Country\": \"USA, UK\",<br>                   \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",<br>                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",<br>                   \"Metascore\": \"82\",<br>                   \"imdbRating\": \"9.0\",<br>                   \"imdbVotes\": \"1,652,832\",<br>                   \"imdbID\": \"tt0468569\",<br>                   \"Type\": \"movie\",<br>                   \"Response\": \"True\"<br>                },<br>                {  <br>                   \"Title\": \"Batman Begins\",<br>                   \"Year\": \"2005\",<br>                   \"Rated\": \"PG-13\",<br>                   \"Released\": \"15 Jun 2005\",<br>                   \"Runtime\": \"140 min\",<br>                   \"Genre\": \"Action, Adventure\",<br>                   \"Director\": \"Christopher Nolan\",<br>                   \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",<br>                   \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",<br>                   \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",<br>                   \"Language\": \"English, Urdu, Mandarin\",<br>                   \"Country\": \"USA, UK\",<br>                   \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",<br>                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",<br>                   \"Metascore\": \"70\",<br>                   \"imdbRating\": \"8.3\",<br>                   \"imdbVotes\": \"972,584\",<br>                   \"imdbID\": \"tt0372784\",<br>                   \"Type\": \"movie\",<br>                   \"Response\": \"True\"<br>                },<br>                {<br>                   \"Title\": \"Avatar\",<br>                   \"Year\": \"2009\",<br>                   \"Rated\": \"PG-13\",<br>                   \"Released\": \"18 Dec 2009\",<br>                   \"Runtime\": \"162 min\",<br>                   \"Genre\": \"Action, Adventure, Fantasy\",<br>                   \"Director\": \"James Cameron\",<br>                   \"Writer\": \"James Cameron\",<br>                   \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",<br>                   \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",<br>                   \"Language\": \"English, Spanish\",<br>                   \"Country\": \"USA, UK\",<br>                   \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",<br>                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",<br>                   \"Metascore\": \"83\",<br>                   \"imdbRating\": \"7.9\",<br>                   \"imdbVotes\": \"876,575\",<br>                   \"imdbID\": \"tt0499549\",<br>                   \"Type\": \"movie\",<br>                   \"Response\": \"True\"<br>                }<br>];<br><br>// Add your code below this line<br><br>var filteredList;<br><br>// Add your code above this line<br><br>console.log(filteredList); <br>',0),(362,'bad87fee1348bd9aed908826','Change the CSS of an Element Using jQuery','We can also change the CSS of an HTML element directly with jQuery.<br><br>jQuery has a function called <code>.css()</code> that allows you to change the CSS of an element.<br><br>Here\'s how we would change its color to blue:<br><br><code>$(\"#target1\").css(\"color\", \"blue\");</code><br><br>This is slightly different from a normal CSS declaration, because the CSS property and its value are in quotes, and separated with a comma instead of a colon.<br><br>Delete your jQuery selectors, leaving an empty <code>document ready function</code>.<br><br>Select <code>target1</code> and change its color to red.<br><br>','// the global Array<br>var s = [23, 65, 98, 5];<br><br>Array.prototype.myFilter = function(callback){<br>  var newArray = [];<br>  // Add your code below this line<br>  <br>  // Add your code above this line<br>  return newArray;<br><br>};<br><br>var new_s = s.myFilter(function(item){<br>  return item % 2 === 1;<br>});<br>',0),(363,'bad87fee1348bd9aed808826','Disable an Element Using jQuery','You can also change the non-CSS properties of HTML elements with jQuery. For example, you can disable buttons.<br><br>When you disable a button, it will become grayed-out and can no longer be clicked.<br><br>jQuery has a function called <code>.prop()</code> that allows you to adjust the properties of elements.<br><br>Here\'s how you would disable all buttons:<br><br><code>$(\"button\").prop(\"disabled\", true);</code><br><br>Disable only the <code>target1</code> button.<br><br>','function sliceArray(anim, beginSlice, endSlice) {<br>  // Add your code below this line<br>  <br>  <br>  // Add your code above this line<br>}<br>var inputAnim = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"];<br>sliceArray(inputAnim, 1, 3);<br>',0),(364,'564944c91be2204b269d51e3','Change Text Inside an Element Using jQuery','Using jQuery, you can change the text between the start and end tags of an element. You can even change HTML markup.<br><br>jQuery has a function called <code>.html()</code> that lets you add HTML tags and text within an element. Any content previously within the element will be completely replaced with the content you provide using this function.<br><br>Here\'s how you would rewrite and emphasize the text of our heading:<br><br><code>$(\"h3\").html(\"&#60;em&#62;jQuery Playground&#60;/em&#62;\");</code><br><br>jQuery also has a similar function called <code>.text()</code> that only alters text without adding tags. In other words, this function will not evaluate any HTML tags passed to it, but will instead treat it as the text you want to replace the existing content with.<br><br>Change the button with id <code>target4</code> by emphasizing its text.<br><br>Check this <a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/em\" target=\"_blank\">link</a> to know more on the difference between <code>&#60;i&#62;</code> and <code>&#60;em&#62;</code> and their uses.<br><br>Note that while the <code>&#60;i&#62;</code> tag has traditionally been used to emphasize text, it has since been coopted for use as a tag for icons. The <code>&#60;em&#62;</code> tag is now widely accepted as the tag for emphasis. Either will work for this challenge.<br><br>','function nonMutatingSplice(cities) {<br>  // Add your code below this line<br>  return cities.splice(3);<br>  <br>  // Add your code above this line<br>}<br>var inputCities = [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"];<br>nonMutatingSplice(inputCities);<br>',0),(365,'bad87fee1348bd9aed708826','Remove an Element Using jQuery','Now let\'s remove an HTML element from your page using jQuery.<br><br>jQuery has a function called <code>.remove()</code> that will remove an HTML element entirely<br><br>Remove element <code>target4</code> from the page by using the <code>.remove()</code> function.<br><br>','function nonMutatingConcat(original, attach) {<br>  // Add your code below this line<br>  <br>  <br>  // Add your code above this line<br>}<br>var first = [1, 2, 3];<br>var second = [4, 5];<br>nonMutatingConcat(first, second);<br>',0),(366,'bad87fee1348bd9aed608826','Use appendTo to Move Elements with jQuery','Now let\'s try moving elements from one <code>div</code> to another.<br><br>jQuery has a function called <code>appendTo()</code> that allows you to select HTML elements and append them to another element.<br><br>For example, if we wanted to move <code>target4</code> from our right well to our left well, we would use:<br><br><code>$(\"#target4\").appendTo(\"#left-well\");</code><br><br>Move your <code>target2</code> element from your <code>left-well</code> to your <code>right-well</code>.<br><br>','function nonMutatingPush(original, newItem) {<br>  // Add your code below this line<br>  return original.push(newItem);<br>  <br>  // Add your code above this line<br>}<br>var first = [1, 2, 3];<br>var second = [4, 5];<br>nonMutatingPush(first, second);<br>',0),(367,'bad87fee1348bd9aed508826','Clone an Element Using jQuery','In addition to moving elements, you can also copy them from one place to another.<br><br>jQuery has a function called <code>clone()</code> that makes a copy of an element.<br><br>For example, if we wanted to copy <code>target2</code> from our <code>left-well</code> to our <code>right-well</code>, we would use:<br><br><code>$(\"#target2\").clone().appendTo(\"#right-well\");</code><br><br>Did you notice this involves sticking two jQuery functions together? This is called <code>function chaining</code> and it\'s a convenient way to get things done with jQuery.<br><br>Clone your <code>target5</code> element and append it to your <code>left-well</code>.<br><br>','// the global variable<br>var watchList = [<br>                 {  <br>                   \"Title\": \"Inception\",<br>                   \"Year\": \"2010\",<br>                   \"Rated\": \"PG-13\",<br>                   \"Released\": \"16 Jul 2010\",<br>                   \"Runtime\": \"148 min\",<br>                   \"Genre\": \"Action, Adventure, Crime\",<br>                   \"Director\": \"Christopher Nolan\",<br>                   \"Writer\": \"Christopher Nolan\",<br>                   \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Ellen Page, Tom Hardy\",<br>                   \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",<br>                   \"Language\": \"English, Japanese, French\",<br>                   \"Country\": \"USA, UK\",<br>                   \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",<br>                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",<br>                   \"Metascore\": \"74\",<br>                   \"imdbRating\": \"8.8\",<br>                   \"imdbVotes\": \"1,446,708\",<br>                   \"imdbID\": \"tt1375666\",<br>                   \"Type\": \"movie\",<br>                   \"Response\": \"True\"<br>                },<br>                {  <br>                   \"Title\": \"Interstellar\",<br>                   \"Year\": \"2014\",<br>                   \"Rated\": \"PG-13\",<br>                   \"Released\": \"07 Nov 2014\",<br>                   \"Runtime\": \"169 min\",<br>                   \"Genre\": \"Adventure, Drama, Sci-Fi\",<br>                   \"Director\": \"Christopher Nolan\",<br>                   \"Writer\": \"Jonathan Nolan, Christopher Nolan\",<br>                   \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",<br>                   \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity\'\'s survival.\",<br>                   \"Language\": \"English\",<br>                   \"Country\": \"USA, UK\",<br>                   \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",<br>                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",<br>                   \"Metascore\": \"74\",<br>                   \"imdbRating\": \"8.6\",<br>                   \"imdbVotes\": \"910,366\",<br>                   \"imdbID\": \"tt0816692\",<br>                   \"Type\": \"movie\",<br>                   \"Response\": \"True\"<br>                },<br>                {<br>                   \"Title\": \"The Dark Knight\",<br>                   \"Year\": \"2008\",<br>                   \"Rated\": \"PG-13\",<br>                   \"Released\": \"18 Jul 2008\",<br>                   \"Runtime\": \"152 min\",<br>                   \"Genre\": \"Action, Adventure, Crime\",<br>                   \"Director\": \"Christopher Nolan\",<br>                   \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",<br>                   \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",<br>                   \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",<br>                   \"Language\": \"English, Mandarin\",<br>                   \"Country\": \"USA, UK\",<br>                   \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",<br>                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",<br>                   \"Metascore\": \"82\",<br>                   \"imdbRating\": \"9.0\",<br>                   \"imdbVotes\": \"1,652,832\",<br>                   \"imdbID\": \"tt0468569\",<br>                   \"Type\": \"movie\",<br>                   \"Response\": \"True\"<br>                },<br>                {  <br>                   \"Title\": \"Batman Begins\",<br>                   \"Year\": \"2005\",<br>                   \"Rated\": \"PG-13\",<br>                   \"Released\": \"15 Jun 2005\",<br>                   \"Runtime\": \"140 min\",<br>                   \"Genre\": \"Action, Adventure\",<br>                   \"Director\": \"Christopher Nolan\",<br>                   \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",<br>                   \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",<br>                   \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",<br>                   \"Language\": \"English, Urdu, Mandarin\",<br>                   \"Country\": \"USA, UK\",<br>                   \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",<br>                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",<br>                   \"Metascore\": \"70\",<br>                   \"imdbRating\": \"8.3\",<br>                   \"imdbVotes\": \"972,584\",<br>                   \"imdbID\": \"tt0372784\",<br>                   \"Type\": \"movie\",<br>                   \"Response\": \"True\"<br>                },<br>                {<br>                   \"Title\": \"Avatar\",<br>                   \"Year\": \"2009\",<br>                   \"Rated\": \"PG-13\",<br>                   \"Released\": \"18 Dec 2009\",<br>                   \"Runtime\": \"162 min\",<br>                   \"Genre\": \"Action, Adventure, Fantasy\",<br>                   \"Director\": \"James Cameron\",<br>                   \"Writer\": \"James Cameron\",<br>                   \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",<br>                   \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",<br>                   \"Language\": \"English, Spanish\",<br>                   \"Country\": \"USA, UK\",<br>                   \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",<br>                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",<br>                   \"Metascore\": \"83\",<br>                   \"imdbRating\": \"7.9\",<br>                   \"imdbVotes\": \"876,575\",<br>                   \"imdbID\": \"tt0499549\",<br>                   \"Type\": \"movie\",<br>                   \"Response\": \"True\"<br>                }<br>];<br><br>// Add your code below this line<br><br>var averageRating;<br><br>// Add your code above this line<br><br>console.log(averageRating); <br>',0),(368,'bad87fee1348bd9aed308826','Target the Parent of an Element Using jQuery','Every HTML element has a <code>parent</code> element from which it <code>inherits</code> properties.<br><br>For example, your <code>jQuery Playground</code> <code>h3</code> element has the parent element of <code>&#60;div class=\"container-fluid\"&#62</code>, which itself has the parent <code>body</code>.<br><br>jQuery has a function called <code>parent()</code> that allows you to access the parent of whichever element you\'ve selected.<br><br>Here\'s an example of how you would use the <code>parent()</code> function if you wanted to give the parent element of the <code>left-well</code> element a background color of blue:<br><br><code>$(\"#left-well\").parent().css(\"background-color\", \"blue\")</code><br><br>Give the parent of the <code>#target1</code> element a background-color of red.<br><br>','function alphabeticalOrder(arr) {<br>  // Add your code below this line<br>  <br>  <br>  // Add your code above this line<br>}<br>alphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"]);<br>',0),(369,'bad87fee1348bd9aed208826','Target the Children of an Element Using jQuery','When HTML elements are placed one level below another they are called <code>children</code> of that element. For example, the button elements in this challenge with the text \"#target1\", \"#target2\", and \"#target3\" are all <code>children</code> of the <code>&#60;div class=\"well\" id=\"left-well\"&#62;</code> element.<br><br>jQuery has a function called <code>children()</code> that allows you to access the children of whichever element you\'ve selected.<br><br>Here\'s an example of how you would use the <code>children()</code> function to give the children of your <code>left-well</code> element the color <code>blue</code>:<br><br><code>$(\"#left-well\").children().css(\"color\", \"blue\")</code><br><br> <hr>Give all the children of your <code>right-well</code> element the color orange.<br><br>',' <script>   $(document).ready(function() {     $(\"#target1\").css(\"color\", \"red\");     $(\"#target1\").prop(\"disabled\", true);     $(\"#target4\").remove();     $(\"#target2\").appendTo(\"#right-well\");     $(\"#target5\").clone().appendTo(\"#left-well\");     $(\"#target1\").parent().css(\"background-color\", \"red\");    }); </script>  <!-- Only change code above this line. -->  <div class=\"container-fluid\">   <h3 class=\"text-primary text-center\">jQuery Playground</h3>   <div class=\"row\">     <div class=\"col-xs-6\">       <h4>#left-well</h4>       <div class=\"well\" id=\"left-well\">         <button class=\"btn btn-default target\" id=\"target1\">#target1</button>         <button class=\"btn btn-default target\" id=\"target2\">#target2</button>         <button class=\"btn btn-default target\" id=\"target3\">#target3</button>       </div>     </div>     <div class=\"col-xs-6\">       <h4>#right-well</h4>       <div class=\"well\" id=\"right-well\">         <button class=\"btn btn-default target\" id=\"target4\">#target4</button>         <button class=\"btn btn-default target\" id=\"target5\">#target5</button>         <button class=\"btn btn-default target\" id=\"target6\">#target6</button>       </div>     </div>   </div> </div>',0),(370,'bad87fee1348bd9aed108826','Target a Specific Child of an Element Using jQuery','You\'ve seen why id attributes are so convenient for targeting with jQuery selectors. But you won\'t always have such neat ids to work with.<br><br>Fortunately, jQuery has some other tricks for targeting the right elements.<br><br>jQuery uses CSS Selectors to target elements. The <code>target:nth-child(n)</code> CSS selector allows you to select all the nth elements with the target class or element type.<br><br>Here\'s how you would give the third element in each well the bounce class:<br><br><code>$(\".target:nth-child(3)\").addClass(\"animated bounce\");</code><br><br>Make the second child in each of your well elements bounce. You must select the elements\' children with the <code>target</code> class.<br><br>',' <script>   $(document).ready(function() {     $(\"#target1\").css(\"color\", \"red\");     $(\"#target1\").prop(\"disabled\", true);     $(\"#target4\").remove();     $(\"#target2\").appendTo(\"#right-well\");     $(\"#target5\").clone().appendTo(\"#left-well\");     $(\"#target1\").parent().css(\"background-color\", \"red\");     $(\"#right-well\").children().css(\"color\", \"orange\");    }); </script>  <!-- Only change code above this line. -->  <div class=\"container-fluid\">   <h3 class=\"text-primary text-center\">jQuery Playground</h3>   <div class=\"row\">     <div class=\"col-xs-6\">       <h4>#left-well</h4>       <div class=\"well\" id=\"left-well\">         <button class=\"btn btn-default target\" id=\"target1\">#target1</button>         <button class=\"btn btn-default target\" id=\"target2\">#target2</button>         <button class=\"btn btn-default target\" id=\"target3\">#target3</button>       </div>     </div>     <div class=\"col-xs-6\">       <h4>#right-well</h4>       <div class=\"well\" id=\"right-well\">         <button class=\"btn btn-default target\" id=\"target4\">#target4</button>         <button class=\"btn btn-default target\" id=\"target5\">#target5</button>         <button class=\"btn btn-default target\" id=\"target6\">#target6</button>       </div>     </div>   </div> </div>',0),(371,'bad87fee1348bd9aed008826','Target Even Elements Using jQuery','You can also target elements based on their positions using <code>:odd</code> or <code>:even</code> selectors.<br><br>Note that jQuery is zero-indexed which means the first element in a selection has a position of 0. This can be a little confusing as, counter-intuitively, <code>:odd</code> selects the second element (position 1), fourth element (position 3), and so on.<br><br>Here\'s how you would target all the odd elements with class <code>target</code> and give them classes:<br><br><code>$(\".target:odd\").addClass(\"animated shake\");</code><br><br>Try selecting all the even <code>target</code> elements and giving them the classes of <code>animated</code> and <code>shake</code>. Remember that <strong>even</strong> refers to the position of elements with a zero-based system in mind.<br><br>',' <script>   $(document).ready(function() {     $(\"#target1\").css(\"color\", \"red\");     $(\"#target1\").prop(\"disabled\", true);     $(\"#target4\").remove();     $(\"#target2\").appendTo(\"#right-well\");     $(\"#target5\").clone().appendTo(\"#left-well\");     $(\"#target1\").parent().css(\"background-color\", \"red\");     $(\"#right-well\").children().css(\"color\", \"orange\");     $(\"#left-well\").children().css(\"color\", \"green\");     $(\".target:nth-child(2)\").addClass(\"animated bounce\");    }); </script>  <!-- Only change code above this line. -->  <div class=\"container-fluid\">   <h3 class=\"text-primary text-center\">jQuery Playground</h3>   <div class=\"row\">     <div class=\"col-xs-6\">       <h4>#left-well</h4>       <div class=\"well\" id=\"left-well\">         <button class=\"btn btn-default target\" id=\"target1\">#target1</button>         <button class=\"btn btn-default target\" id=\"target2\">#target2</button>         <button class=\"btn btn-default target\" id=\"target3\">#target3</button>       </div>     </div>     <div class=\"col-xs-6\">       <h4>#right-well</h4>       <div class=\"well\" id=\"right-well\">         <button class=\"btn btn-default target\" id=\"target4\">#target4</button>         <button class=\"btn btn-default target\" id=\"target5\">#target5</button>         <button class=\"btn btn-default target\" id=\"target6\">#target6</button>       </div>     </div>   </div> </div>',0),(372,'bad87fee1348bd9aecb08826','Use jQuery to Modify the Entire Page','We\'re done playing with our jQuery playground. Let\'s tear it down!<br><br>jQuery can target the <code>body</code> element as well.<br><br>Here\'s how we would make the entire body fade out: <code> $(\"body\").addClass(\"animated fadeOut\");</code><br><br>But let\'s do something more dramatic. Add the classes <code>animated</code> and <code>hinge</code> to your <code>body</code> element.<br><br>',' <script>   $(document).ready(function() {     $(\"#target1\").css(\"color\", \"red\");     $(\"#target1\").prop(\"disabled\", true);     $(\"#target4\").remove();     $(\"#target2\").appendTo(\"#right-well\");     $(\"#target5\").clone().appendTo(\"#left-well\");     $(\"#target1\").parent().css(\"background-color\", \"red\");     $(\"#right-well\").children().css(\"color\", \"orange\");     $(\"#left-well\").children().css(\"color\", \"green\");     $(\".target:nth-child(2)\").addClass(\"animated bounce\");     $(\".target:even\").addClass(\"animated shake\");    }); </script>  <!-- Only change code above this line. -->  <div class=\"container-fluid\">   <h3 class=\"text-primary text-center\">jQuery Playground</h3>   <div class=\"row\">     <div class=\"col-xs-6\">       <h4>#left-well</h4>       <div class=\"well\" id=\"left-well\">         <button class=\"btn btn-default target\" id=\"target1\">#target1</button>         <button class=\"btn btn-default target\" id=\"target2\">#target2</button>         <button class=\"btn btn-default target\" id=\"target3\">#target3</button>       </div>     </div>     <div class=\"col-xs-6\">       <h4>#right-well</h4>       <div class=\"well\" id=\"right-well\">         <button class=\"btn btn-default target\" id=\"target4\">#target4</button>         <button class=\"btn btn-default target\" id=\"target5\">#target5</button>         <button class=\"btn btn-default target\" id=\"target6\">#target6</button>       </div>     </div>   </div> </div>',0);
/*!40000 ALTER TABLE `exercises` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `groups`
--

DROP TABLE IF EXISTS `groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `groups` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) NOT NULL,
  `description` varchar(100) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `groups`
--

LOCK TABLES `groups` WRITE;
/*!40000 ALTER TABLE `groups` DISABLE KEYS */;
INSERT INTO `groups` VALUES (1,'admin','Administrator'),(2,'student','Student'),(3,'teacher','Teacher of the class');
/*!40000 ALTER TABLE `groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `login_attempts`
--

DROP TABLE IF EXISTS `login_attempts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `login_attempts` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `ip_address` varchar(45) NOT NULL,
  `login` varchar(100) NOT NULL,
  `time` int(11) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `login_attempts`
--

LOCK TABLES `login_attempts` WRITE;
/*!40000 ALTER TABLE `login_attempts` DISABLE KEYS */;
/*!40000 ALTER TABLE `login_attempts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `ip_address` varchar(45) NOT NULL,
  `username` varchar(100) DEFAULT NULL,
  `password` varchar(255) NOT NULL,
  `salt` varchar(255) DEFAULT NULL,
  `email` varchar(254) NOT NULL,
  `name` varchar(250) NOT NULL,
  `activation_code` varchar(40) DEFAULT NULL,
  `forgotten_password_code` varchar(40) DEFAULT NULL,
  `forgotten_password_time` int(11) unsigned DEFAULT NULL,
  `remember_code` varchar(40) DEFAULT NULL,
  `created_on` int(11) unsigned NOT NULL,
  `last_login` int(11) unsigned DEFAULT NULL,
  `active` tinyint(1) unsigned DEFAULT NULL,
  `first_name` varchar(50) DEFAULT NULL,
  `last_name` varchar(50) DEFAULT NULL,
  `company` varchar(100) DEFAULT NULL,
  `phone` varchar(20) DEFAULT NULL,
  `batch` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'127.0.0.1','administrator','$2a$07$SeBknntpZror9uyftVopmu61qg0ms8Qv1yV6FG.kQOSM.9QhmTo36','','admin@admin.com','Admin IIDE','',NULL,NULL,NULL,1268889823,1561816096,1,'Admin','istrator','ADMIN','0',0),(5,'::1','','$2y$08$vfB1LdNPrYfUtRzQzHVp9u8qLwshOGTnOWEaMpjUMGLqqSdOkoBhG',NULL,'sudanprabjyot@gmail.com','Prabjyot Sudan',NULL,NULL,NULL,NULL,1535312902,1565198402,1,NULL,NULL,NULL,NULL,1),(8,'::1','','$2y$08$2usNn/fFlt7asz72y25i2O0jtpUHRVjwDgCHnSu9xLmy7Icgj5Pv.',NULL,'prince@gmail.com','Pritpal Sudan',NULL,NULL,NULL,NULL,1537734396,NULL,1,NULL,NULL,NULL,NULL,1),(9,'::1','','$2y$08$6WSr8mQ57HbpwPgy5nqtP.msHvvcxsjjFcT7pxqCD6SQ8128iQIXa',NULL,'jasprit@gmail.com','Jasprit Sudan',NULL,NULL,NULL,NULL,1537734450,1549980161,1,NULL,NULL,NULL,NULL,1),(10,'::1','','$2y$08$V9DPhcITt92Yir8NMu33B.ipevmIn/VwhrDA8BxLiMdKD8V0LHICS',NULL,'aman@gmail.com','Aman',NULL,NULL,NULL,NULL,1537734472,NULL,1,NULL,NULL,NULL,NULL,1),(11,'::1','','$2y$08$x1q6IxmEn6oRvuH6470iGeqT4Ws3X.kzPf6qG1hWwi3fQe14OIi.q',NULL,'sumo@gmail.com','Sumo',NULL,NULL,NULL,NULL,1537734525,1537911418,1,NULL,NULL,NULL,NULL,1),(12,'::1','','$2y$08$GwyiHlHxwSjZuXxn6wrZHOizy7ys5eCMoWUlp3utAW7QL.11a/hR6',NULL,'vandita@gmail.com','Vandita',NULL,NULL,NULL,NULL,1537778367,1537788574,1,NULL,NULL,NULL,NULL,2),(13,'::1','','$2y$08$Ap8cg5nwfx5uRewavaZJnumPzkr1dcKSIoMRhqpUACyz4a.GtYqFK',NULL,'rishabh@gmail.com','Rishabh',NULL,NULL,NULL,NULL,1537778424,1537779763,1,NULL,NULL,NULL,NULL,2),(14,'127.0.0.1','','$2y$08$4n5hV1TsHy4WqJ48Sbj70eYkHC6ZcKDQmKR2BnVMOAtC1I6TdOvni',NULL,'adityalunia25@gmail.com','Aditya Lunia',NULL,NULL,NULL,NULL,1537959644,1550729298,1,NULL,NULL,NULL,NULL,3),(15,'127.0.0.1','','$2y$08$NRrCeD9Im3gPXXza4UkmNu/gs0OhEtJ8PYsXVatzcLEMJOTlMamti',NULL,'ajinkya.hukerikar@gmail.com','Ajinkya Hukerikar',NULL,NULL,NULL,NULL,1537959699,1538403314,1,NULL,NULL,NULL,NULL,3),(16,'127.0.0.1','','$2y$08$jzOBztJBHTRaXA7koYrhw.i1DKhaxIOTrKeB4ARqcYFDfqcl9wLs6',NULL,'haideralishaikh99@gmail.com','Haider Ali Shaikh',NULL,NULL,NULL,NULL,1537959760,1539792472,1,NULL,NULL,NULL,NULL,3),(18,'127.0.0.1','','$2y$08$EqbAH738vRIssITFS3jAGel.q.WDuXHxJEvUgJaV50iKMUzQ91ICi',NULL,'revantjhalani@gmail.com','Revant Jhalani',NULL,NULL,NULL,NULL,1537959862,1539894088,1,NULL,NULL,NULL,NULL,3),(20,'127.0.0.1','','$2y$08$m0XfghVTJsD/Sqjw3GijbumNhAjYMNAW2iPhwoWVrWJLMH4zf7egW',NULL,'sam.kay007@gmail.com','Sameer Ramteke',NULL,NULL,NULL,NULL,1537959958,1540368399,1,NULL,NULL,NULL,NULL,3),(21,'127.0.0.1','','$2y$08$TiVOW3wimuvhhuw3I4bOQ.FS7V0JROaGmBqaYT9sGkIX77M2OAN0.',NULL,'shubham.butle@gmail.com','Shubham Butle',NULL,NULL,NULL,NULL,1537960088,1555878150,1,NULL,NULL,NULL,NULL,3),(22,'127.0.0.1','','$2y$08$Tfd0Rv2mFzRhPGZy4hXdV.8EHgvl9X2bCM.m02f4OL7xbo.c63beO',NULL,'taahakhan48@gmail.com','Taha Zamir Khan',NULL,NULL,NULL,NULL,1537960124,1546614627,1,NULL,NULL,NULL,NULL,3),(23,'127.0.0.1','','$2y$08$Mz12uX3yeVTDb.plx6QAVes6lJIIbvEPXKbPhNCps2ddW0hkYyDba',NULL,'yashpchahande@gmail.com','Yash Chahande',NULL,NULL,NULL,NULL,1537960249,1540563212,1,NULL,NULL,NULL,NULL,3),(24,'127.0.0.1','','$2y$08$N40KQav8Ot/QCyqHgOXefuZaIfOXxKhC0ltDdWlapyK4OhNTMUwhC',NULL,'mailakshatapalkar@gmail.com','Akshata Palkar',NULL,NULL,NULL,NULL,1537960335,1539794600,1,NULL,NULL,NULL,NULL,3),(25,'127.0.0.1','','$2y$08$6PhGMoF4rOPTvP2VwOLW8O72M7tI9rYLyCnM1keLOBS97vtc484Je',NULL,'kaustubh@vefes.in','Kaustubh Vagal',NULL,NULL,NULL,NULL,1537962398,1538152830,1,NULL,NULL,NULL,NULL,3),(27,'127.0.0.1','','$2y$08$ooEydb2a6EUov3gY8WxSl.O0dKUt8xO0DComxFSmkXhyClOJLZRCm',NULL,'saksham@gmail.com','Saksham Rathore',NULL,NULL,NULL,NULL,1537972018,1542032929,1,NULL,NULL,NULL,NULL,3),(28,'127.0.0.1','','$2y$08$2Py1J9B20rcCw8eNEf.ii.x2jtLU.V5CeH/SVQoZLpxu979wdlYYK',NULL,'adityatwd0@gmail.com','Aditya Tawade',NULL,NULL,NULL,NULL,1551953409,1563024344,1,NULL,NULL,NULL,NULL,6),(29,'127.0.0.1','','$2y$08$4RMBBsL3VdewG30nd80aweaioxhjE.3Chpm6UAVVJp9jXgFAQT9QW',NULL,'riya.rita16@rediffmail.com','Riya Rita',NULL,NULL,NULL,NULL,1551953464,1553953546,1,NULL,NULL,NULL,NULL,6),(30,'127.0.0.1','','$2y$08$amnnf9bIHCtpMtFrkAVSAerDnT6n7JBfSe5ZUI8NJcBBfpV3NylSW',NULL,'darshankothari.dk@gmail.com','Darshan Kothari',NULL,NULL,NULL,NULL,1551953502,1560070542,1,NULL,NULL,NULL,NULL,6),(31,'127.0.0.1','','$2y$08$4j3ZyLpKtQeFx.QHlkXTUuTZAyXXzoOWPrfz6veWtxrFliTvmSJRW',NULL,'arifburhan111@gmail.com','Burhanuddin Arif',NULL,NULL,NULL,NULL,1551953582,1552208734,1,NULL,NULL,NULL,NULL,6),(32,'127.0.0.1','','$2y$08$0zWhxqud/zrMJ.5OYSxgI.QkUf3lYr2e96fQo4hjnkkdymPkMvMEC',NULL,'chaitralthakur74@gmail.com','Chaitral Thakur',NULL,NULL,NULL,NULL,1551953621,1553948718,1,NULL,NULL,NULL,NULL,6),(33,'127.0.0.1','','$2y$08$TuPBayHzQPsczmSSFaEk3.jxiyR/ONB80Met0HsDLvvYj545qDTFa',NULL,'purshoattam17@gmail.com','Purshoattam Choudhary',NULL,NULL,NULL,NULL,1551953684,NULL,1,NULL,NULL,NULL,NULL,6),(34,'127.0.0.1','','$2y$08$fEcWQ14IY.GtShHXGtAB4uNfWbCF./Ei4.TRprohApsQw9MddlxXG',NULL,'salianp91599@gmail.com','Priti Salian',NULL,NULL,NULL,NULL,1551953721,1552040569,1,NULL,NULL,NULL,NULL,6),(35,'127.0.0.1','','$2y$08$jtrS4t0pnk8VsYeNsZPXreqCi0VzJhgik/HoecdKrXhBCYslddyDi',NULL,'dewangsolanki3@gmail.com','Dewang Solanki',NULL,NULL,NULL,NULL,1551953755,1565198096,1,NULL,NULL,NULL,NULL,6),(36,'127.0.0.1','','$2y$08$SHz.B4qB2EWLrFbvMhbXOexY2SmopC.swKT3XC1DDRmR0tbqYIGhS',NULL,'walaniddhi@gmail.com','Niddih Vala',NULL,NULL,NULL,NULL,1551953799,1567856676,1,NULL,NULL,NULL,'6',6),(37,'127.0.0.1','','$2y$08$9g8QhuFOIu5yIiTgc71qP.BsiFq0ZEOIlGuPG6GO5IH398aCI.EFy',NULL,'sarveshparab602@gmail.com','Sarvesh Parab',NULL,NULL,NULL,NULL,1551953836,NULL,1,NULL,NULL,NULL,NULL,6),(38,'127.0.0.1','','$2y$08$ZHeglGsvoXj3tdKMLoD0s.NtFgFmBO6.6QI7xTE2NW6Hdr1gGWhKi',NULL,'brayn003@gmail.com','rudraprasad Das',NULL,NULL,NULL,NULL,1551957920,1564150571,1,NULL,NULL,NULL,NULL,6),(39,'127.0.0.1','','$2y$08$LWufld3ffqvdI8MPDjdjM.PZwQzJPr/v62I/7bC9l8RSwIpDT4.tG',NULL,'test@gmail.com','Rudra',NULL,NULL,NULL,NULL,1559910419,1559910671,1,NULL,NULL,NULL,NULL,0);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users_groups`
--

DROP TABLE IF EXISTS `users_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users_groups` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) unsigned NOT NULL,
  `group_id` mediumint(8) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uc_users_groups` (`user_id`,`group_id`),
  KEY `fk_users_groups_users1_idx` (`user_id`),
  KEY `fk_users_groups_groups1_idx` (`group_id`),
  CONSTRAINT `fk_users_groups_groups1` FOREIGN KEY (`group_id`) REFERENCES `groups` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `fk_users_groups_users1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users_groups`
--

LOCK TABLES `users_groups` WRITE;
/*!40000 ALTER TABLE `users_groups` DISABLE KEYS */;
INSERT INTO `users_groups` VALUES (1,1,1),(5,5,2),(8,8,2),(9,9,2),(10,10,2),(11,11,3),(12,12,3),(13,13,2),(14,14,2),(15,15,2),(16,16,2),(18,18,2),(20,20,2),(21,21,2),(22,22,2),(23,23,2),(24,24,2),(25,25,2),(27,27,2),(28,28,2),(29,29,2),(30,30,2),(31,31,2),(32,32,2),(33,33,2),(34,34,2),(35,35,2),(36,36,2),(37,37,2),(38,38,2),(39,39,1);
/*!40000 ALTER TABLE `users_groups` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-12-27  9:04:24
