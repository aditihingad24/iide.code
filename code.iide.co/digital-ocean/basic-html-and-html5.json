{
  "name": "Basic HTML and HTML5",
  "order": 0,
  "time": "5 hours",
  "helpRoom": "Help",
  "challenges": [
    {
      "id": "bd7123c8c441eddfaeb5bdef",
      "title": "Say Hello to HTML Elements",
      "description": [
        "Welcome to freeCodeCamp's HTML coding challenges. These will walk you through web development step-by-step.",
        "First, you'll start by building a simple web page using HTML. You can edit <code>code</code> in your <code>code editor</code>, which is embedded into this web page.",
        "Do you see the code in your code editor that says <code>&#60;h1&#62;Hello&#60;/h1&#62;</code>? That's an HTML <code>element</code>.",
        "Most HTML elements have an <code>opening tag</code> and a <code>closing tag</code>.",
        "Opening tags look like this:",
        "<code>&#60;h1&#62;</code>",
        "Closing tags look like this:",
        "<code>&#60;/h1&#62;</code>",
        "The only difference between opening and closing tags is the forward slash after the opening bracket of a closing tag.",
        "Each challenge has tests you can run at any time by clicking the \"Run tests\" button. When you pass all tests, you'll be prompted to submit your solution and go to the next coding challenge.",
        "<hr>",
        "To pass the test on this challenge, change your <code>h1</code> element's text to say \"Hello World\"."
      ],
      "tests": [
        {
          "text": "Your <code>h1</code> element should have the text \"Hello World\".",
          "testString": "assert.isTrue((/hello(\\s)+world/gi).test($('h1').text()), 'Your <code>h1</code> element should have the text \"Hello World\".');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "Willkommen bei deiner ersten Programmier-Challenge von freeCodeCamp!",
            "Mithilfe des eingebauten <code>code editors</code> kannst du den <code>code</code> bearbeiten.",
            "Siehst du den Code <code>&#60;h1&#62;Hallo&#60;/h1&#62;</code> im Editor? Das ist ein HTML <code>element</code>",
            "Die meisten HTML Elemente haben einen <code>opening tag</code> und einen <code>closing tag</code>.",
            "Öffnende Tags sehen so aus:",
            "<code>&#60;h1&#62;</code>",
            "Schließende Tags so:",
            "<code>&#60;/h1&#62;</code>",
            "Beachte, dass der einzige Unterschied zwischen öffnenden und schließenden Tags ist, dass bei schließenden Tags ein Slash nach der sich öffnenden spitzen Klammer folgt.",
            "Jede Challenge hat Tests die du jederzeit starten kannst indem du den \"Run tests\" Button drückst. Wenn alle Tests bestehen kannst du mit der nächsten Challenge fortfahren.",
            "<hr>",
            "Um den Test dieser Challenge zu bestehen, ändere den Text deines <code>h1</code> Elements von \"Hello\" zu \"Hello World\". Klicke dann den \"Run tests\" Button."
          ]
        },
        "fr": {
          "title": "Dites bonjour aux éléments HTML",
          "description": [
            "Bienvenue au premier défi de code de freeCodeCamp.",
            "Vous pouvez modifier le <code>code</code> dans votre <code>éditeur texte</code>, lequel est disponible dans cette page.",
            "Voyez-vous le code dans l'éditeur texte qui dit <code>&#60;h1&#62;Hello&#60;/h1&#62;</code>? C'est un <code>élément</code> HTML.",
            "La plupart des éléments HTML ont une <code>balise ouvrante</code> et une <code>balise fermante</code>",
            "Les balises ouvrantes ont cette apparence :",
            "<code>&#60;h1&#62;</code>",
            "Les balises fermantes ont cette apparence :",
            "<code>&#60;/h1&#62;</code>",
            "Notez que la seule différence entre une balise ouvrante et fermante est que la balise fermante a une barre oblique après son chevron ouvrant.",
            "Chaque défi contient des tests que vous pouvez éxécuter en cliquant sur le bouton \"Run tests\". Lorsque tous les tests sont réussis, vous pouvez poursuivre avec le défi suivant.",
            "<hr>",
            "Pour réussir le test de ce défi, changez le texte de l'élément <code>h1</code> pour \"Hello World\" plutôt que \"Hello\". Cliquez ensuite sur le bouton \"Run tests\"."
          ]
        },
        "pt-br": {
          "title": "Diga oi para os elementos HTML",
          "description": [
            "Bem-vindo(a) aos desafios de programação do freeCodeCamp. Eles vão te guiar pelo desenvolvimento web passo a passo.",
            "Nós recomendamos que você os resolva em ordem, mas fique à vontade para navegar pelos desafios clicando em \"map\" no menu acima.",
            "Além disso, se você quiser salvar seu progresso, você deve entrar para nossa comunidade criando uma conta. Em apenas alguns minutos, você pode entrar na nossa sala de chat, fórum e até mesmo em um grupo de estudos da sua cidade.",
            "Primeiramente, você vai começar construindo uma página da web simples com HTML. Você pode editar o <code>código</code> no seu <code>editor de texto</code>, que está embutido nessa página.",
            "Você está vendo o código no seu editor de texto que contém <code>&#60;h1&#62;Hello&#60;/h1&#62;</code>? Esse é um <code>elemento</code> HTML.",
            "A maioria dos elementos HTML têm uma <code>tag de abertura</code> e uma <code>tag de fechamento</code>.",
            "As tags de abertura são assim:",
            "<code>&#60;h1&#62;</code>",
            "As tags de fechamento são assim:",
            "<code>&#60;/h1&#62;</code>",
            "A única diferença entre tags de abertura e fechamento é que as tags de fechamento possuem uma barra (/) depois do sinal de menor (<).",
            "Cada desafio possui testes que você pode rodar a qualquer momento clicando no botão \"Run tests\". Quando seu código passar em todos os testes, você poderá enviar sua solução e avançar para o próximo desafio.",
            "<hr>",
            "Para passar no teste desse desafio, mude o texto do seu elemento <code>h1</code> para \"Hello World\"."
          ]
        },
        "ru": {
          "title": "Скажи привет HTML-элементам",
          "description": [
            "Добро пожаловать на первое программное испытание freeCodeCamp.",
            "Вы можете редактировать <code>код</code> в вашем <code>текстовом редакторе</code>, который мы встроили в эту web-страницу.",
            "Видите этот код в вашем текстовом редакторе: <code>&#60;h1&#62;Hello&#60;/h1&#62;</code>? Это HTML <code>элемент</code>.",
            "Большинство HTML-элементов имеют <code>открывающую метку</code> <code>закрывающую метку</code>.",
            "Открывающие метки выглядят так:",
            "<code>&#60;h1&#62;</code>",
            "Закрывающие метки выглядят следующим образом:",
            "<code>&#60;/h1&#62;</code>",
            "Обратите внимание, что единственная разница между открывающими и закрывающими метками заключается в наличии косой черты после открывающей треугольной скобки.",
            "Каждое испытание имеет функцию проверки решения, которую вы можете запустить в любой момент нажатием на кнопку \"Run tests\". Как только ваше решение будет удовлетворять всем требованиям, вы сможете перейти к следующему испытанию.",
            "<hr>",
            "Для прохождения этого испытания измените текст элемента <code>h1</code> с \"Hello\" на \"Hello World\". Затем нажмите кнопку \"Run tests\"."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h1>Hello</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf0887a",
      "title": "Headline with the h2 Element",
      "description": [
        "Over the next few lessons, we'll build an HTML5 cat photo web app piece-by-piece.",
        "The <code>h2</code> element you will be adding in this step will add a level two heading to the web page.",
        "This element tells the browser about the structure of your website. <code>h1</code> elements are often used for main headings, while <code>h2</code> elements are generally used for subheadings. There are also <code>h3</code>, <code>h4</code>, <code>h5</code> and <code>h6</code> elements to indicate different levels of subheadings.",
        "<hr>",
        "Add an <code>h2</code> tag that says \"CatPhotoApp\" to create a second HTML <code>element</code> below your \"Hello World\" <code>h1</code> element."
      ],
      "tests": [
        {
          "text": "Create an <code>h2</code> element.",
          "testString": "assert(($(\"h2\").length > 0), 'Create an <code>h2</code> element.');"
        },
        {
          "text": "Make sure your <code>h2</code> element has a closing tag.",
          "testString": "assert(code.match(/<\\/h2>/g) && code.match(/<\\/h2>/g).length === code.match(/<h2>/g).length, 'Make sure your <code>h2</code> element has a closing tag.');"
        },
        {
          "text": "Your <code>h2</code> element should have the text \"CatPhotoApp\".",
          "testString": "assert.isTrue((/cat(\\s)?photo(\\s)?app/gi).test($(\"h2\").text()), 'Your <code>h2</code> element should have the text \"CatPhotoApp\".');"
        },
        {
          "text": "Your <code>h1</code> element should have the text \"Hello World\".",
          "testString": "assert.isTrue((/hello(\\s)+world/gi).test($(\"h1\").text()), 'Your <code>h1</code> element should have the text \"Hello World\".');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "In den nächsten Challenges werden wir eine HTML5 App entwickeln die ungefähr so aussehen wird:",
            "<a href=\"https://i.imgur.com/jOc1JF1.png\" target=\"_blank\" data-lightbox=\"img-enlarge\"><img class=\"img-responsive\" src=\"https://i.imgur.com/jOc1JF1.png\" title=\"Klicke zum Vergrößern\" alt=\"Ein Screenshot von unserer beendeted Katzenfoto App\"></a>",
            "Das eingetragene <code>h2</code> Element wird ein <code>h2</code> Element auf der Website erzeugen.",
            "Dieses Element sagt dem Browser, wie die Struktur deiner Website aufgebaut ist. <code>h1</code> Elemente werden oft für Hauptüberschriften verwendet, während <code>h2</code> Elemente üblicherweise für Zwischenüberschriften verwendet werden. Es gibt auch <code>h3</code>, <code>h4</code>, <code>h5</code> und <code>h6</code> Elemente die verschiedene und neue Bereiche kennzeichnen.",
            "<hr>",
            "Füge unter <code>h1</code> \"Hello World\" ein zweites HTML Element <code>h2</code> hinzu, in dem \"CatPhotoApp\" steht."
          ]
        },
        "fr": {
          "title": "Un titre avec l'élément h2",
          "description": [
            "Pour les quelques prochains défis, nous construirons une application HTML5 qui ressemblera à ceci :",
            "<a href=\"https://i.imgur.com/jOc1JF1.png\" target=\"_blank\" data-lightbox=\"img-enlarge\"><img class=\"img-responsive\" src=\"https://i.imgur.com/jOc1JF1.png\" title=\"Cliquez pour agrandir\" alt=\"Une capture écran de notre application de photo de chats\"></a>",
            "L'élément <code>h2</code> que vous entrerez créera un élément <code>h2</code> sur le site.",
            "Cet élément renseigne votre navigateur sur la structure de votre site. Les éléments <code>h1</code> sont souvent utilisés comme titre, tandis que les éléments <code>h2</code> sont généralement utilisés comme sous-titres. Il existe également les éléments <code>h3</code>, <code>h4</code>, <code>h5</code> et <code>h6</code> qui indiquent une nouvelle et différente section.",
            "<hr>",
            "Ajoutez une balise <code>h2</code> contenant \"CatPhotoApp\" pour créer un second <code>élément</code> HTML sous l'élément <code>h1</code> contenant \"Hello World\"."
          ]
        },
        "pt-br": {
          "title": "Título com o elemento h2",
          "description": [
            "Nas próximas duas seções, nós vamos construir um app HTML5 que vai ficar mais ou menos assim:",
            "<a href=\"https://i.imgur.com/jOc1JF1.png\" target=\"_blank\" data-lightbox=\"img-enlarge\"><img class=\"img-responsive\" src=\"https://i.imgur.com/jOc1JF1.png\" title=\"Clique para ampliar\" alt=\"Um screenshot do app de fotos de gatos terminado\"></a>",
            "O elemento <code>h2</code> que você vai adicionar vai criar um elemento <code>h2</code> na página.",
            "Esse elemento indica ao navegador a estrutura do seu site. Elementos <code>h1</code> são geralmente usados para os títulos principais, enquanto elementos <code>h2</code> são usados para subtítulos. Também existem os elementos <code>h3</code>, <code>h4</code>, <code>h5</code> e <code>h6</code>, que indicam seções novas e diferentes.",
            "<hr>",
            "Adicione uma tag <code>h2</code> com o texto \"CatPhotoApp\" para criar um segundo <code>elemento</code> HTML abaixo do seu elemento <code>h1</code> com o texto \"Hello World\"."
          ]
        },
        "ru": {
          "title": "Заголовок с применением элемента h2",
          "description": [
            "В результате прохождения нескольких следующих испытаний, мы построим HTML5 приложение, которое будет похоже на это:",
            "<a href=\"https://i.imgur.com/jOc1JF1.png\" target=\"_blank\" data-lightbox=\"img-enlarge\"><img class=\"img-responsive\" src=\"https://i.imgur.com/jOc1JF1.png\" title=\"Click to enlarge\" alt=\"A screen shot of our finished Cat Photo App\"></a>",
            "Вводимый вами элемент <code>h2</code> создаст соответствующий элемент <code>h2</code> на web-странице.",
            "Этот элемент сообщает браузеру о структуре вашего web-сайта. Элементы <code>h1</code> часто применяют в качестве главных заголовков, в то время как элементы <code>h2</code> обычно используют для обозначения позаголовков. Также существуют элементы <code>h3</code>, <code>h4</code>, <code>h5</code> и <code>h6</code> для обозначения отдельных секций.",
            "<hr>",
            "Добавьте метку <code>h2</code> с текстом \"CatPhotoApp\" для создания второго HTML <code>элемента</code> под вашим элементом <code>h1</code> с текстом \"Hello World\"."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h1>Hello World</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08801",
      "title": "Inform with the Paragraph Element",
      "description": [
        "<code>p</code> elements are the preferred element for paragraph text on websites. <code>p</code> is short for \"paragraph\".",
        "You can create a paragraph element like this:",
        "<code>&#60;p&#62;I'm a p tag!&#60;/p&#62;</code>",
        "<hr>",
        "Create a <code>p</code> element below your <code>h2</code> element, and give it the text \"Hello Paragraph\"."
      ],
      "tests": [
        {
          "text": "Create a <code>p</code> element.",
          "testString": "assert(($(\"p\").length > 0), 'Create a <code>p</code> element.');"
        },
        {
          "text": "Your <code>p</code> element should have the text \"Hello Paragraph\".",
          "testString": "assert.isTrue((/hello(\\s)+paragraph/gi).test($(\"p\").text()), 'Your <code>p</code> element should have the text \"Hello Paragraph\".');"
        },
        {
          "text": "Make sure your <code>p</code> element has a closing tag.",
          "testString": "assert(code.match(/<\\/p>/g) && code.match(/<\\/p>/g).length === code.match(/<p/g).length, 'Make sure your <code>p</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "<code>p</code> Elemente sind das bevorzugte Element für normale Paragraphentexte auf einer Website. P ist die Abkürzung für \"Paragraph\".",
            "Du kannst ein <code>p</code> Element so erzeugen:",
            "<code>&#60;p&#62;Ich bin ein p Element!&#60;/p&#62;</code>",
            "<hr>",
            "Erstelle ein <code>p</code> Element unter deinem <code>h2</code> Element und füge den Text \"Hello Paragraph\" ein."
          ]
        },
        "fr": {
          "title": "Informez avec l'élément paragraphe",
          "description": [
            "L'élément <code>p</code> est le préféré pour les textes de paragraphes de taille normale. P est l'acronyme de \"paragraphe\",",
            "Vous pouvez créer un élément <code>p</code> comme ceci :",
            "<code>&#60;p&#62;Je suis une balise p!&#60;/p&#62;</code>",
            "<hr>",
            "Créez un élément <code>p</code> sous votre élément <code>h2</code> et inscrivez-y le texte \"Hello Paragraph\"."
          ]
        },
        "pt-br": {
          "title": "Informe com o elemento de parágrafo",
          "description": [
            "Elementos <code>p</code> são os elementos preferenciais para parágrafos de texto de tamanho normal em sites. P é a abreviação de \"parágrafo\".",
            "Você pode criar um elemento <code>p</code> assim:",
            "<code>&#60;p&#62;Eu sou uma tag p!&#60;/p&#62;</code>",
            "<hr>",
            "Crie um elemento <code>p</code> abaixo do seu elemento <code>h2</code>, e dê a ele o texto \"Hello Paragraph\"."
          ]
        },
        "ru": {
          "title": "Проинформируйте с применением элемента p",
          "description": [
            "Элементы <code>p</code> предпочтительно использовать для обозначения параграфов с текстом нормального размера в web-сайтах. P - сокращение от \"paragraph\".",
            "Вы можете создать элемент <code>p</code> следующим образом:",
            "<code>&#60;p&#62;Я метка p!&#60;/p&#62;</code>",
            "<hr>",
            "Создайте элемент <code>p</code> под вашим элементом <code>h2</code> и присвойте ему текст \"Hello Paragraph\"."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h1>Hello World</h1>",
            "<h2>CatPhotoApp</h2>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08833",
      "title": "Fill in the Blank with Placeholder Text",
      "description": [
        "Web developers traditionally use <code>lorem ipsum text</code> as placeholder text. The 'lorem ipsum' text is randomly scraped from a famous passage by Cicero of Ancient Rome.",
        "Lorem ipsum text has been used as placeholder text by typesetters since the 16th century, and this tradition continues on the web.",
        "Well, 5 centuries is long enough. Since we're building a CatPhotoApp, let's use something called <code>kitty ipsum text</code>.",
        "<hr>",
        "Replace the text inside your <code>p</code> element with the first few words of this kitty ipsum text: <code>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</code>"
      ],
      "tests": [
        {
          "text": "Your <code>p</code> element should contain the first few words of the provided <code>kitty ipsum text</code>.",
          "testString": "assert.isTrue((/Kitty(\\s)+ipsum/gi).test($(\"p\").text()), 'Your <code>p</code> element should contain the first few words of the provided <code>kitty ipsum text</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "Webentwickler nutzen für gewöhnlich \"Lorem Ipsum Text\" als Platzhalter. Es heißt \"Lorem Ipsum\", weil es die ersten zwei Wörter aus einer bekannten Passage von Cicero des alten Roms sind.",
            "\"Lorem Ipsum\" Text wurde seit dem 16. Jahrhundert von Schriftsetzern als Platzhalter verwendet. Diese Tradition setzt sich im Web fort.",
            "Nun gut, fünf Jahrhunderte sind lange genug. Da wir eine CatPhotoApp entwickeln, lass uns stattdessen lieber <code>kitty ipsum text</code> nutzen.",
            "<hr>",
            "Ersetze den Text in deinem <code>p</code> Element mit den ersten Wörtern des \"Kitty Ipsum\" Textes: <code>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</code>"
          ]
        },
        "fr": {
          "title": "Remplissez les blancs avec du faux-texte",
          "description": [
            "Les développeurs Web utilisent traditionnellement du <code>lorem ipsum</code> comme texte de substitution. Le texte lorem ipsum provient d'un extrait de Cicero, de la Rome antique.",
            "Le texte lorem ipsum a été utilisé comme faux-texte par des typographes depuis le 16<sup>ème</sup> siècle et cette tradition se poursuit sur le Web.",
            "Enfin, 5 siècles est suffisament long. Étant donné que nous fabriquons une application de photos de chats, utilisons plutôt du texte <code>Kitty ipsum</code>.",
            "<hr>",
            "Remplacez le texte à l'intérieur des éléments <code>p</code> avec ces quelques mots du texte Kitty ipsum : <code>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</code>"
          ]
        },
        "pt-br": {
          "title": "Preencha o vazio com texto de exemplo",
          "description": [
            "Desenvolvedores web tradicionalmente usam <code>lorem ipsum</code> como texto de exemplo. Os textos 'lorem ipsum' são partes retiradas aleatoriamente de uma passagem famosa escrita por Cícero na Roma Antiga.",
            "Esses textos têm sido usados como texto de exemplo por tipógrafos desde o século 16, e essa tradição continua na web.",
            "Bem, 5 séculos é tempo suficiente. Já que estamos construindo um app de fotos de gatos, vamos usar um novo texto chamado de <code>gatinho ipsum</code>.",
            "<hr>",
            "Substitua o texto dentro do seu elemento <code>p</code> com as primeiras palavras desse gatinho ipsum: <code>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</code>"
          ]
        },
        "ru": {
          "title": "Заполните пустоты замещающим текстом",
          "description": [
            "Традиционно web-разработчики используют текст <code>lorem ipsum</code> в качестве замещающего текста. Он называется тектсом <code>lorem ipsum</code> по первым двум словам известного пассажа Цицерона из Древнего Рима.",
            "Текст <code>lorem ipsum</code> применяется в качестве замещающего текста наборщиками с 16-го века, и эта традиция продолжается в сети.",
            "5 веков довольно долгий период. Так как мы строим приложение CatPhotoApp, давайте используем нечто называемое текстом <code>kitty ipsum</code>.",
            "<hr>",
            "Замените текст внутри вашего элемента <code>p</code> первыми двумя словами текста <code>kitty ipsum</code>: <code>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</code>"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h1>Hello World</h1>",
            "",
            "<h2>CatPhotoApp</h2>",
            "",
            "<p>Hello Paragraph</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08802",
      "title": "Uncomment HTML",
      "description": [
        "Commenting is a way that you can leave comments for other developers within your code without affecting the resulting output that is displayed to the end user.",
        "Commenting is also a convenient way to make code inactive without having to delete it entirely.",
        "Comments in HTML starts with <code>&#60;!--</code>, and ends with a <code>--&#62;</code>",
        "<hr>",
        "Uncomment your <code>h1</code>, <code>h2</code> and <code>p</code> elements."
      ],
      "tests": [
        {
          "text": "Make your <code>h1</code> element visible on your page by uncommenting it.",
          "testString": "assert($(\"h1\").length > 0, 'Make your <code>h1</code> element visible on your page by uncommenting it.');"
        },
        {
          "text": "Make your <code>h2</code> element visible on your page by uncommenting it.",
          "testString": "assert($(\"h2\").length > 0, 'Make your <code>h2</code> element visible on your page by uncommenting it.');"
        },
        {
          "text": "Make your <code>p</code> element visible on your page by uncommenting it.",
          "testString": "assert($(\"p\").length > 0, 'Make your <code>p</code> element visible on your page by uncommenting it.');"
        },
        {
          "text": "Be sure to delete all trailing comment tags&#44; i.e. <code>--&#62;</code>.",
          "testString": "assert(!/[^fc]-->/gi.test(code.replace(/ *<!--[^fc]*\\n/g,'')), 'Be sure to delete all trailing comment tags&#44; i.e. <code>--&#62;</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "Kommentieren erlaubt es dir, Kommentare innerhalb des Codes zu hinterlassen, ohne diesen selbst zu beeinflussen.",
            "Dies ist auch ein guter Weg, um Code inaktiv zu machen ohne diesen komplett löschen zu müssen.",
            "Du kannst einen Kommentar mit <code>&#60;!--</code> starten und ihn mit <code>--&#62;</code> wieder beenden.",
            "<hr>",
            "Entkommentiere deine <code>h1</code>, <code>h2</code> und <code>p</code> Elemente."
          ]
        },
        "fr": {
          "title": "Décommenter du HTML",
          "description": [
            "Commenter est une façon de laisser des commentaires dans votre code sans affecter le fonctionnement du code.",
            "Commenter est aussi un moyen pratique de rendre du code inactif sans devoir le supprimer entièrement.",
            "Vous pouvez débuter un commentaire avec <code>&#60;!--</code> et le terminer avec <code>--&#62;</code>.",
            "<hr>",
            "Décommenter vos éléments <code>h1</code>, <code>h2</code> et <code>p</code>."
          ]
        },
        "pt-br": {
          "title": "Descomente o HTML",
          "description": [
            "Comentar é uma forma de deixar comentários no meio do seu código sem afetar o código em si.",
            "Comentar também é uma forma conveniente de deixar uma parte do código inativa sem ter que deletá-la completamente.",
            "Você pode começar um comentário com <code>&#60;!--</code> e terminá-lo com <code>--&#62;</code>",
            "<hr>",
            "Descomente seus elementos <code>h1</code>, <code>h2</code> e <code>p</code>."
          ]
        },
        "ru": {
          "title": "Раскомментируйте HTML",
          "description": [
            "Комментирование - способ хранения заметок по коду без воздействия на сам код.",
            "Также комментирование - неплохой метод отключения части кода без необходимости его удаления.",
            "Вы можете начать комментарий с <code>&#60;!--</code> и закончить его <code>--&#62;</code>",
            "<hr>",
            "Раскомментируйте свои элементы <code>h1</code>, <code>h2</code> и <code>p</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<!--",
            "<h1>Hello World</h1>",
            "",
            "<h2>CatPhotoApp</h2>",
            "",
            "<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>",
            "-->"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08804",
      "title": "Comment out HTML",
      "description": [
        "Remember that in order to start a comment, you need to use <code>&#60;!--</code> and to end a comment, you need to use <code>--&#62;</code>",
        "Here you'll need to end the comment before your <code>h2</code> element begins.",
        "<hr>",
        "Comment out your <code>h1</code> element and your <code>p</code> element, but not your <code>h2</code> element."
      ],
      "tests": [
        {
          "text": "Comment out your <code>h1</code> element so that it is not visible on your page.",
          "testString": "assert(($(\"h1\").length === 0), 'Comment out your <code>h1</code> element so that it is not visible on your page.');"
        },
        {
          "text": "Leave your <code>h2</code> element uncommented so that it is visible on your page.",
          "testString": "assert(($(\"h2\").length > 0), 'Leave your <code>h2</code> element uncommented so that it is visible on your page.');"
        },
        {
          "text": "Comment out your <code>p</code> element so that it is not visible on your page.",
          "testString": "assert(($(\"p\").length === 0), 'Comment out your <code>p</code> element so that it is not visible on your page.');"
        },
        {
          "text": "Be sure to close each of your comments with <code>--&#62;</code>.",
          "testString": "assert(code.match(/[^fc]-->/g).length > 1, 'Be sure to close each of your comments with <code>--&#62;</code>.');"
        },
        {
          "text": "Do not change the order of the <code>h1</code> <code>h2</code> or <code>p</code> in the code.",
          "testString": "assert((code.match(/<([a-z0-9]){1,2}>/g)[0]===\"<h1>\" && code.match(/<([a-z0-9]){1,2}>/g)[1]===\"<h2>\" && code.match(/<([a-z0-9]){1,2}>/g)[2]===\"<p>\") , 'Do not change the order of the <code>h1</code> <code>h2</code> or <code>p</code> in the code.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "Denk daran, dass ein Kommentar mit <code>&#60;!--</code> beginnt und mit <code>--&#62;</code> endet.",
            "Hier wirst du deinen Kommentar vor dem <code>h2</code> Element beenden müssen.",
            "<hr>",
            "Kommentiere die <code>h1</code> und <code>p</code> Elemente aus, aber lasse dein <code>h2</code> Element unkommentiert."
          ]
        },
        "fr": {
          "title": "Commentez du HTML",
          "description": [
            "Souvenez-vous que pour débuter un commentaire, vous devez utiliser <code>&#60;!--</code> et que pour le terminer, vous devez utiliser <code>--&#62;</code>.",
            "Ici vous devrez terminer le commentaire juste avant que l'élément <code>h2</code> commence.",
            "<hr>",
            "Commentez les éléments <code>h1</code> et <code>p</code>, mais laissez l'élément <code>h2</code> tel quel."
          ]
        },
        "pt-br": {
          "title": "Comente o HTML",
          "description": [
            "Lembre-se de que, para começar um comentário, você precisa usar <code>&#60;!--</code> e para terminá-lo, você precisa usar <code>--&#62;</code>",
            "Aqui, você vai precisar terminar o comentário antes do começo do seu elemento <code>h2</code>.",
            "<hr>",
            "Comente seus elementos <code>h1</code> e <code>p</code>, mas deixe seu elemento <code>h2</code> descomentado."
          ]
        },
        "ru": {
          "title": "Закомментируйте HTML",
          "description": [
            "Помните, что для начала комментария вам необходимо использовать <code>&#60;!--</code>, а для завершения комментария - <code>--&#62;</code>",
            "Тут вам необходимо завершить комментарий до начала вашего элемента <code>h2</code>.",
            "<hr>",
            "Закомментируйте ваши элементы <code>h1</code> и <code>p</code>, но оставьте ваш элемент <code>h2</code> раскомментированным."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<!--",
            "<h1>Hello World</h1>",
            "",
            "<h2>CatPhotoApp</h2>",
            "",
            "<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>",
            "-->"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fed1348bd9aedf08833",
      "title": "Delete HTML Elements",
      "description": [
        "Our phone doesn't have much vertical space.",
        "Let's remove the unnecessary elements so we can start building our CatPhotoApp.",
        "<hr>",
        "Delete your <code>h1</code> element so we can simplify our view."
      ],
      "tests": [
        {
          "text": "Delete your <code>h1</code> element.",
          "testString": "assert(!code.match(/<h1>/gi) && !code.match(/<\\/h1>/gi), 'Delete your <code>h1</code> element.');"
        },
        {
          "text": "Leave your <code>h2</code> element on the page.",
          "testString": "assert(code.match(/<h2>[\\w\\W]*<\\/h2>/gi), 'Leave your <code>h2</code> element on the page.');"
        },
        {
          "text": "Leave your <code>p</code> element on the page.",
          "testString": "assert(code.match(/<p>[\\w\\W]*<\\/p>/gi), 'Leave your <code>p</code> element on the page.');"
        }
      ],
      "solutions": [
        "var code = \"<h2>CatPhotoApp</h2><p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\""
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "Unser Smartphone hat nicht sehr viel vertikalen Platz.",
            "Lass uns die unwichtigen Elemente entfernen, damit wir unsere CatPhotoApp entwickeln können.",
            "<hr>",
            "Lösche die Elemente <code>h1</code>, um etwas Ordnung zu schaffen."
          ]
        },
        "fr": {
          "title": "Supprimer des éléments HTML",
          "description": [
            "Notre téléphone n'a pas beaucoup d'espace vertical.",
            "Enlevons les éléments superflus pour débuter la construction de notre application de photos de chats.",
            "<hr>",
            "Supprimez l'élément <code>h1</code> afin de simplifier l'affichage."
          ]
        },
        "pt-br": {
          "title": "Delete elementos HTML",
          "description": [
            "Nosso celular não tem muito espaço vertical.",
            "Vamos remover os elementos desnecessários para podermos começar a construir nosso app de fotos de gatinhos.",
            "<hr>",
            "Delete seu elemento <code>h1</code> para podermos simplificar nossa tela."
          ]
        },
        "ru": {
          "title": "Удалите HTML-элементы",
          "description": [
            "Наш телефон не очень большой по-вертикали.",
            "Давайте удалим некоторые ненужные элементы, чтобы мы могли приступить к созданию приложения CatPhotoApp.",
            "<hr>",
            "Удалите ваш <code>h1</code> элемент, чтобы упростить общий вид."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h1>Hello World</h1>",
            "",
            "<h2>CatPhotoApp</h2>",
            "",
            "<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aecf08801",
      "title": "Introduction to HTML5 Elements",
      "description": [
        "HTML5 introduces more descriptive HTML tags. These include <code>header</code>, <code>footer</code>, <code>nav</code>, <code>video</code>, <code>article</code>, <code>section</code> and others.",
        "These tags make your HTML easier to read, and also help with Search Engine Optimization (SEO) and accessibility.",
        "The <code>main</code> HTML5 tag helps search engines and other developers find the main content of your page.",
        "<strong>Note</strong><br>Many of the new HTML5 tags and their benefits are covered in the Applied Accessibility section.",
        "<hr>",
        "Create a second <code>p</code> element after the existing <code>p</code> element with the following kitty ipsum text: <code>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</code>",
        "Wrap the paragraphs with an opening and closing <code>main</code> tag."
      ],
      "tests": [
        {
          "text": "You need 2 <code>p</code> elements with Kitty Ipsum text.",
          "testString": "assert($(\"p\").length > 1, 'You need 2 <code>p</code> elements with Kitty Ipsum text.');"
        },
        {
          "text": "Make sure each of your <code>p</code> elements has a closing tag.",
          "testString": "assert(code.match(/<\\/p>/g) && code.match(/<\\/p>/g).length === code.match(/<p/g).length, 'Make sure each of your <code>p</code> elements has a closing tag.');"
        },
        {
          "text": "Your <code>p</code> element should contain the first few words of the provided additional <code>kitty ipsum text</code>.",
          "testString": "assert.isTrue((/Purr\\s+jump\\s+eat/gi).test($(\"p\").text()), 'Your <code>p</code> element should contain the first few words of the provided additional <code>kitty ipsum text</code>.');"
        },
        {
          "text": "Your code should have one <code>main</code> element.",
          "testString": "assert($('main').length === 1, 'Your code should have one <code>main</code> element.');"
        },
        {
          "text": "The <code>main</code> element should have two paragraph elements as children.",
          "testString": "assert($(\"main\").children(\"p\").length === 2, 'The <code>main</code> element should have two paragraph elements as children.');"
        },
        {
          "text": "The opening <code>main</code> tag should come before the first paragraph tag.",
          "testString": "assert(code.match(/<main>\\s*?<p>/g), 'The opening <code>main</code> tag should come before the first paragraph tag.');"
        },
        {
          "text": "The closing <code>main</code> tag should come after the second closing paragraph tag.",
          "testString": "assert(code.match(/<\\/p>\\s*?<\\/main>/g), 'The closing <code>main</code> tag should come after the second closing paragraph tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "pt-br": {
          "title": "Introdução aos elementos HTML5",
          "description": [
            "O HTML5 introduziu tags mais descritivas, como <code>header</code> (cabeçalho), <code>footer</code> (rodapé), <code>nav</code> (navegação), <code>video</code> (vídeo), <code>article</code> (artigo), <code>section</code> (seção), entre outras.",
            "Essas tags deixam seu HTML mais fácil de ler e também ajudam na otimização para motores de busca (SEO) e acessibilidade.",
            "A tag HTML5 <code>main</code> (principal) ajuda mecanismos de busca e outros desenvolvedores a encontrar o conteúdo principal da sua página.",
            "<strong>Nota</strong><br>Várias das novas tags HTML5 e seus benefícios são discutidos na seção de Acessibilidade aplicada.",
            "<hr>",
            "Crie um segundo elemento <code>p</code> depois dos elementos <code>p</code> existentes com o seguinte texto gatinho ipsum: <code>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</code>",
            "Coloque tags <code>main</code> de abertura e fechamento ao redor dos parágrafos."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "",
            "<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08812",
      "title": "Add Images to Your Website",
      "description": [
        "You can add images to your website by using the <code>img</code> element, and point to a specific image's URL using the <code>src</code> attribute.",
        "An example of this would be:",
        "<code>&#60img src=\"https://www.your-image-source.com/your-image.jpg\"&#62</code>",
        "Note that <code>img</code> elements are self-closing.",
        "All <code>img</code> elements <strong>must</strong> have an <code>alt</code> attribute. The text inside an <code>alt</code> attribute is used for screen readers to improve accessibility and is displayed if the image fails to load.",
        "Note: If the image is purely decorative, using an empty <code>alt</code> attribute is a best practice.",
        "Ideally the <code>alt</code> attribute should not contain special characters unless needed.",
        "Let's add an <code>alt</code> attribute to our <code>img</code> example above:",
        "<code>&#60img src=\"https://www.your-image-source.com/your-image.jpg\" alt=\"Author standing on a beach with two thumbs up.\"&#62</code>",
        "<hr>",
        "Let's try to add an image to our website:",
        "Insert an <code>img</code> tag, before the <code>h2</code> element.",
        "Now set the <code>src</code> attribute so that it points to this url:",
        "<code>https://bit.ly/fcc-relaxing-cat</code>",
        "Finally don't forget to give your image an <code>alt</code> text."
      ],
      "tests": [
        {
          "text": "Your page should have an image element.",
          "testString": "assert($(\"img\").length > 0, 'Your page should have an image element.');"
        },
        {
          "text": "Your image should have a <code>src</code> attribute that points to the kitten image.",
          "testString": "assert(new RegExp(\"\\/\\/bit.ly\\/fcc-relaxing-cat|\\/\\/s3.amazonaws.com\\/freecodecamp\\/relaxing-cat.jpg\", \"gi\").test($(\"img\").attr(\"src\")), 'Your image should have a <code>src</code> attribute that points to the kitten image.');"
        },
        {
          "text": "Your image element <strong>must</strong> have an <code>alt</code> attribute.",
          "testString": "assert(code.match(/alt\\s*?=\\s*?(\\\"|\\').*(\\\"|\\')/), 'Your image element <strong>must</strong> have an <code>alt</code> attribute.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "Du kannst <code>img</code> Elemente verwenden, um Bilder in deine Website einzubauen. Um zur URL des Bildes zu verweisen, benutzt du das <code>src</code> Attribut.",
            "Ein Beispiel dafür wäre:",
            "<code>&#60img src=\"https://www.deine-bild-quelle.com/dein-bild.jpg\"&#62</code>",
            "Beachte, dass <code>img<code> Elemente in den meisten Fällen selbstschließend sind.",
            "<hr>",
            "Versuche es mit diesem Bild:",
            "<code>https://bit.ly/fcc-relaxing-cat</code>"
          ]
        },
        "fr": {
          "title": "Ajouter des images à votre site Web",
          "description": [
            "Vous pouvez ajouter des images à votre site Web en utilisant l'élément <code>img</code> et pointer vers une URL d'image spécifique en utilisant l'attribut <code>src</code>.",
            "Un exemple de cette procédure serait :",
            "<code>&#60img src=\"https://www.your-image-source.com/your-image.jpg\"&#62</code>",
            "Note that in most cases, <code>img</code> elements are self-closing.",
            "Prenez note que dans la plupart des cas, les éléments <code>img</code> sont auto-fermants.",
            "<hr>",
            "Essayez avec cette image :",
            "<code>https://bit.ly/fcc-relaxing-cat</code>"
          ]
        },
        "pt-br": {
          "title": "Adicione imagens à sua página web",
          "description": [
            "Você pode adicionar imagens ao seu site usando o elemento <code>img</code> e apontando para a URL de uma imagem específica no atributo <code>src</code>.",
            "Um exemplo disso seria:",
            "<code>&#60img src=\"https://www.a-fonte-da-sua-imagem.com/sua-imagem.jpg\"&#62</code>",
            "Note que na maioria dos casos, elementos <code>img</code> possuem auto-fechamento (não precisam de tag de fechamento).",
            "Todos os elementos <code>img</code> <strong>devem</strong> ter um atributo <code>alt</code>. O texto do atributo <code>alt</code> é usado por leitores de tela para melhorar a acessibilidade e é mostrado no lugar da imagem se ela não puder ser carregada.",
            "Vamos adicionar um atributo <code>alt</code> ao nosso exemplo acima:",
            "<code>&#60img src=\"https://www.a-fonte-da-sua-imagem.com/sua-imagem.jpg\" alt=\"Autor numa praia fazendo joinha.\"&#62</code>",
            "<hr>",
            "Vamos tentar adicionar uma imagem ao nosso site:",
            "Insira uma tag <code>img</code>, antes do elemento <code>h2</code>.",
            "Agora coloque essa URL no seu atributo <code>src</code>:",
            "<code>https://bit.ly/fcc-relaxing-cat</code>",
            "Finalmente, não esqueça de dar à sua imagem um texto <code>alt</code>."
          ]
        },
        "ru": {
          "title": "Добавьте изображения к вашему сайту",
          "description": [
            "Вы можете добавлять изображения к вашему сайту с помощью элемента <code>img</code> и указывать ссылки определённых изображений с помощтю атрибута <code>src</code>.",
            "Примером добавления мзображения может служить:",
            "<code>&#60img src=\"https://www.your-image-source.com/your-image.jpg\"&#62</code>",
            "Обратите внимание, что в большинстве случаев элементы <code>img</code> являются самозакрывающимися.",
            "<hr>",
            "Попробуйте добавить изображение используя следующую ссылку:",
            "<code>https://bit.ly/fcc-relaxing-cat</code>"
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/add-images-to-your-website",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  ",
            "  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>",
            "  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08816",
      "title": "Link to External Pages with Anchor Elements",
      "description": [
        "You can use <code>anchor</code> elements to link to content outside of your web page.",
        "<code>anchor</code> elements need a destination web address called an <code>href</code> attribute. They also need anchor text. Here's an example:",
        "<code>&#60;a href=\"https://freecodecamp.org\">this links to freecodecamp.org&#60;/a&#62;</code>",
        "Then your browser will display the text <strong>\"this links to freecodecamp.org\"</strong> as a link you can click. And that link will take you to the web address <strong>https://www.freecodecamp.org</strong>.",
        "<hr>",
        "Create an <code>a</code> element that links to <code>http://freecatphotoapp.com</code> and has \"cat photos\" as its <code>anchor text</code>."
      ],
      "tests": [
        {
          "text": "Your <code>a</code> element should have the <code>anchor text</code> of \"cat photos\".",
          "testString": "assert((/cat photos/gi).test($(\"a\").text()), 'Your <code>a</code> element should have the <code>anchor text</code> of \"cat photos\".');"
        },
        {
          "text": "You need an <code>a</code> element that links to <code>http&#58;//freecatphotoapp<wbr>.com</code>",
          "testString": "assert(/http:\\/\\/(www\\.)?freecatphotoapp\\.com/gi.test($(\"a\").attr(\"href\")), 'You need an <code>a</code> element that links to <code>http&#58;//freecatphotoapp<wbr>.com</code>');"
        },
        {
          "text": "Make sure your <code>a</code> element has a closing tag.",
          "testString": "assert(code.match(/<\\/a>/g) && code.match(/<\\/a>/g).length === code.match(/<a/g).length, 'Make sure your <code>a</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Verlinke externe Seiten mit Anker Elementen",
          "description": [
            "<code>a</code> Elemente, auch bekannt als <code>anchor</code> (Anker) Elemente, werden verwendet um auf Inhalte außerhalb der aktuellen Seite zu verweisen.",
            "So sieht ein <code>a</code> Element aus. In diesem Fall wird es innerhalb eines Paragraphen Elements verwendet. Das bedeutet dein Link wird innerhalb des Satzes erscheinen.",
            "<a href=\"https://i.imgur.com/hviuZwe.png\" target=\"_blank\" data-lightbox=\"img-enlarge\"><img class=\"img-responsive\" title=\"Click to enlarge\" alt=\"Eine Darstellung wie man Anker Elemente mit dem gleichen Text wie in der folgenden Zeile erstellt\" src=\"https://i.imgur.com/hviuZwe.png\"></a>",
            "Hier ist ein Beispiel:",
            "<code>&#60;p&#62;Hier ist ein &#60;a href=\"http://freecodecamp.org\"&#62; Link zu freeCodeCamp&#60;/a&#62; dem du folgen kannst.&#60;/p&#62;</code>",
            "<hr>",
            "Erstelle ein <code>a</code> Element, das auf <code>http://freecatphotoapp.com</code> verweist und den \"cat photos\" als <code>anchor text</code> (Link-Text) beinhaltet."
          ]
        },
        "es": {
          "title": "Enlaza páginas externas con elementos ancla",
          "description": [
            "Los elementos <code>a</code>, también conocidos como elementos <code>ancla</code>, se utilizan para enlazar a contenido fuera de la página actual.",
            "Aquí está un diagrama de un elemento <code>a</code>. En este caso, el elemento <code>a</code> se utiliza en el medio de un elemento de párrafo, lo que significa que el enlace aparecerá en el medio de una frase. ",
            "<a href=\"https://i.imgur.com/hviuZwe.png\" target=\"_blank\" data-lightbox=\"img-enlarge\"> <img class=\"img-responsive\" title=\"Haz clic para ampliar\" alt=\"un diagrama de cómo las etiquetas de ancla se componen con el mismo texto, como en la siguiente línea\" src=\"https://i.imgur.com/hviuZwe.png\"></a> ",
            "He aquí un ejemplo:",
            "<code>&#60;p&#62;Aquí está un &#60;a href=\"https://freecodecamp.org\"&#62; enlace a freeCodeCamp&#60;/a&#62; para que lo sigas.&#60;/p&#62;</code>",
            "<hr>",
            "Crea un elemento <code>a</code> que se vincule a <code>http://freecatphotoapp.com</code> y tenga como <code>texto de ancla</code> \"cat photos\"."
          ]
        },
        "pt-br": {
          "title": "Crie links para páginas externas com elementos âncora",
          "description": [
            "Elementos <code>a</code>, também conhecidos como elementos <code>âncora</code>, são usados para criar links para conteúdo de fora da página atual.",
            "Aqui está um diagrama de um elemento <code>a</code>. Nesse caso, o elemento <code>a</code> é usado no meio de um elemento de parágrafo, o que significa que esse link vai aparecer no meio de uma frase.",
            "<a href=\"https://i.imgur.com/QSCIiNH.png\" target=\"_blank\" data-lightbox=\"img-enlarge\"><img class=\"img-responsive\" title=\"Clique para ampliar\" alt=\"um diagrama de como tags âncora são compostas com o mesmo texto assim como na linha seguinte\" src=\"https://i.imgur.com/QSCIiNH.png\"></a>",
            "Aqui está um exemplo:",
            "<code>&#60;p&#62;Aqui está um &#60;a href=\"http://freecodecamp.org\"&#62; link para o freecodecamp.org&#60;/a&#62; para você clicar.&#60;/p&#62;</code>",
            "<hr>",
            "Crie um elemento <code>a</code> que vá para <code>http://freecatphotoapp.com</code> e tenha \"cat photos\" como seu <code>texto âncora</code>."
          ]
        },
        "ru": {
          "title": "Присоедините внешние страницы с помощью якорных элементов",
          "description": [
            "Элементы <code>a</code>, также известные как <code>якорные</code> элементы, применяют для связи с содержимым вне текущей страницы.",
            "Вот диаграмма элемента <code>a</code>. В этом случае, элемент <code>a</code> использован в середине элемента параграфа, что значит, что ссылка появится в середине предложения.",
            "<a href=\"https://i.imgur.com/hviuZwe.png\" target=\"_blank\" data-lightbox=\"img-enlarge\"><img class=\"img-responsive\" title=\"Click to enlarge\" alt=\"a diagram of how anchor tags are composed with the same text as on the following line\" src=\"https://i.imgur.com/hviuZwe.png\"></a>",
            "Вот пример:",
            "<code>&#60;p&#62;Вот &#60;a href=\"http://freecodecamp.org\"&#62; ссылка на freeCodeCamp&#60;/a&#62; для перехода на ресурс.&#60;/p&#62;</code>",
            "<hr>",
            "Создайте элемент <code>a</code>, который присоединяет <code>http://freecatphotoapp.com</code> и имеет значение \"cat photos\" в качестве <code>текста якоря</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  ",
            "  ",
            "  <img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\">",
            "  ",
            "  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>",
            "  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad88fee1348bd9aedf08816",
      "title": "Link to Internal Sections of a Page with Anchor Elements",
      "description": [
        "Anchor elements can also be used to create internal links to jump to different sections within a webpage.",
        "To create an internal link, you assign a link's <code>href</code> attribute to a hash symbol <code>#</code> plus the value of the <code>id</code> attribute for the element that you want to internally link to, usually further down the page. You then need to add the same <code>id</code> attribute to the element you are linking to. An <code>id</code> is an attribute that uniquely describes an element.",
        "Below is an example of an internal anchor link and its target element:",
        "<blockquote>&lt;a href=\"#contacts-header\"&gt;Contacts&lt;/a&gt;<br>...<br>&lt;h2 id=\"contacts-header\"&gt;Contacts&lt;/h2&gt;</blockquote>",
        "When users click the Contacts link, they'll be taken to the section of the webpage with the <b>Contacts</b> header element.",
        "<hr>",
        "Change your external link to an internal link by changing the <code>href</code> attribute to \"#footer\" and the text from \"cat photos\" to \"Jump to Bottom\".",
        "Remove the <code>target=\"_blank\"</code> attribute from the anchor tag since this causes the linked document to open in a new window tab.",
        "Then add an <code>id</code> attribute with a value of \"footer\" to the <code>&lt;footer&gt;</code> element at the bottom of the page."
      ],
      "tests": [
        {
          "text": "There should be only one anchor tag on your page.",
          "testString": "assert($('a').length == 1, 'There should be only one anchor tag on your page.');"
        },
        {
          "text": "There should be only one <code>footer</code> tag on your page.",
          "testString": "assert($('footer').length == 1, 'There should be only one <code>footer</code> tag on your page.');"
        },
        {
          "text": "The <code>a</code> tag should have an <code>href</code> attribute set to \"#footer\".",
          "testString": "assert($('a').eq(0).attr('href') == \"#footer\", 'The <code>a</code> tag should have an <code>href</code> attribute set to \"#footer\".');"
        },
        {
          "text": "The <code>a</code> tag should not have a <code>target</code> attribute",
          "testString": "assert(typeof $('a').eq(0).attr('target') == typeof undefined || $('a').eq(0).attr('target') == true, 'The <code>a</code> tag should not have a <code>target</code> attribute');"
        },
        {
          "text": "The <code>a</code> text should be \"Jump to Bottom\".",
          "testString": "assert($('a').eq(0).text().match(/Jump to Bottom/gi), 'The <code>a</code> text should be \"Jump to Bottom\".');"
        },
        {
          "text": "The <code>footer</code> tag should have an <code>id</code> attribute set to \"footer\".",
          "testString": "assert($('footer').eq(0).attr('id') == \"footer\", 'The <code>footer</code> tag should have an <code>id</code> attribute set to \"footer\".');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "pt-br": {
          "title": "Crie links para seções internas de uma página com elementos âncora",
          "description": [
            "Além de criar links externos, elementos âncora também podem ser usados para criar links internos, que são links que pulam para diferentes seções dentro de uma mesma página.",
            "O formato é parecido com um link externo, só que, ao invés de uma URL no atributo <code>href</code>, você usa o símbolo <code>#</code> e uma palavra para descrever a seção para a qual você quer pular.",
            "Aqui está um exemplo:",
            "<code>&lt;a href=\"#contact\"&gt;Ir para a seção de contato&lt;/a&gt;</code>",
            "Em seguida, você precisa criar no seu HTML um elemento âncora correspondente no lugar em que você quer que seus usuários cheguem quando clicarem no seu link interno. Ao invés de usar o atributo <code>href</code>, você deve usar o atributo <code>name</code>. Aqui está um exemplo:",
            "<blockquote>&lt;h1&gt;Contato&lt;/h1&gt;<br>&lt;a name=\"contact\"&gt;&lt;/a&gt;</blockquote>",
            "Agora, quando seus usuários clicarem no link \"Ir para a seção de contato\", eles serão levados para a seção da página em que está o elemento âncora que tenha \"contact\" no seu atributo <code>name</code>.",
            "<hr>",
            "Mude seu link externo para um link interno trocando seu atributo <code>href</code> para \"#bottom\" e o texto âncora de \"cat photos\" para \"Pular para o final\".",
            "Então, adicione um elemento âncora com o atributo <code>name</code> como \"bottom\" depois do último parágrafo.",
            "<strong>Nota</strong><br>Adicionamos mais texto gatinho ipsum para os parágrafos para mostrar melhor o efeito de clicar no link interno para pular para o final da página. Além disso, essa mudança só vai se aplicar para esse desafio. O próximo desafio vai voltar a mostrar seu link externo."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"http://freecatphotoapp.com\" target=\"_blank\">cat photos</a>",
            "  ",
            "  <img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\">",
            "  ",
            "  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>",
            "  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>",
            "  <p>Meowwww loved it, hated it, loved it, hated it yet spill litter box, scratch at owner, destroy all furniture, especially couch or lay on arms while you're using the keyboard. Missing until dinner time toy mouse squeak roll over. With tail in the air lounge in doorway. Man running from cops stops to pet cats, goes to jail.</p>",
            "  <p>Intently stare at the same spot poop in the plant pot but kitten is playing with dead mouse. Get video posted to internet for chasing red dot leave fur on owners clothes meow to be let out and mesmerizing birds leave fur on owners clothes or favor packaging over toy so purr for no reason. Meow to be let out play time intently sniff hand run outside as soon as door open yet destroy couch.</p>",
            "  ",
            "</main>",
            "  ",
            "<footer>Copyright Cat Photo App</footer>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aede08817",
      "title": "Nest an Anchor Element within a Paragraph",
      "description": [
        "You can nest links within other text elements.",
        "<blockquote>&#60;p&#62;<br> Here's a &#60;a target=\"_blank\" href=\"http://freecodecamp.org\"&#62; link to freecodecamp.org&#60;/a&#62; for you to follow.<br>&#60;/p&#62;</blockquote>",
        "Let's break down the example:",
        "Normal text is wrapped in the <code>p</code> element:<br> <code>&#60;p&#62; Here's a ... for you to follow. &#60;/p&#62;</code>",
        "Next is the <code>anchor</code> element <code>&#60;a&#62;</code> (which requires a closing tag <code>&#60;/a&#62;</code>):<br>  <code>&#60;a&#62; ... &#60;/a&#62;</code>",
        "<code>target</code> is an anchor tag attribute that specifies where to open the link and the value <code>\"_blank\"</code> specifies to open the link in a new tab",
        "<code>href</code> is an anchor tag attribute that contains the URL address of the link:<br>  <code>&#60;a href=\"http://freecodecamp.org\"> ... &#60;/a&#62;</code>",
        "The text, <strong>\"link to freecodecamp.org\"</strong>, within the anchor element called <code>anchor text</code>, will display a link to click:<br>  <code>&#60;a href=\" ... \"&#62;link to freecodecamp.org&#60;/a&#62;</code>",
        "The final output of the example will look like this:<br><p>Here's a <a target=\"_blank\" href=\"http://freecodecamp.org\"> link to freecodecamp.org</a> for you to follow.</p>",
        "<hr>",
        "Now nest your existing <code>a</code> element within a new <code>p</code> element (just after the existing <code>main</code> element). The new paragraph should have text that says \"View more cat photos\", where \"cat photos\" is a link, and the rest of the text is plain text."
      ],
      "tests": [
        {
          "text": "You need an <code>a</code> element that links to \"http://freecatphotoapp.com\".",
          "testString": "assert(($(\"a[href=\\\"http://freecatphotoapp.com\\\"]\").length > 0 || $(\"a[href=\\\"http://www.freecatphotoapp.com\\\"]\").length > 0), 'You need an <code>a</code> element that links to \"http://freecatphotoapp.com\".');"
        },
        {
          "text": "Your <code>a</code> element should have the anchor text of \"cat photos\"",
          "testString": "assert($(\"a\").text().match(/cat\\sphotos/gi), 'Your <code>a</code> element should have the anchor text of \"cat photos\"');"
        },
        {
          "text": "Create a new <code>p</code> element around your <code>a</code> element. There should be at least 3 total <code>p</code> tags in your HTML code.",
          "testString": "assert($(\"p\") && $(\"p\").length > 2, 'Create a new <code>p</code> element around your <code>a</code> element. There should be at least 3 total <code>p</code> tags in your HTML code.');"
        },
        {
          "text": "Your <code>a</code> element should be nested within your new <code>p</code> element.",
          "testString": "assert(($(\"a[href=\\\"http://freecatphotoapp.com\\\"]\").parent().is(\"p\") || $(\"a[href=\\\"http://www.freecatphotoapp.com\\\"]\").parent().is(\"p\")), 'Your <code>a</code> element should be nested within your new <code>p</code> element.');"
        },
        {
          "text": "Your <code>p</code> element should have the text \"View more \" (with a space after it).",
          "testString": "assert(($(\"a[href=\\\"http://freecatphotoapp.com\\\"]\").parent().text().match(/View\\smore\\s/gi) || $(\"a[href=\\\"http://www.freecatphotoapp.com\\\"]\").parent().text().match(/View\\smore\\s/gi)), 'Your <code>p</code> element should have the text \"View more \" (with a space after it).');"
        },
        {
          "text": "Your <code>a</code> element should <em>not</em> have the text \"View more\".",
          "testString": "assert(!$(\"a\").text().match(/View\\smore/gi), 'Your <code>a</code> element should <em>not</em> have the text \"View more\".');"
        },
        {
          "text": "Make sure each of your <code>p</code> elements has a closing tag.",
          "testString": "assert(code.match(/<\\/p>/g) && code.match(/<p/g) && code.match(/<\\/p>/g).length === code.match(/<p/g).length, 'Make sure each of your <code>p</code> elements has a closing tag.');"
        },
        {
          "text": "Make sure each of your <code>a</code> elements has a closing tag.",
          "testString": "assert(code.match(/<\\/a>/g) && code.match(/<a/g) && code.match(/<\\/a>/g).length === code.match(/<a/g).length, 'Make sure each of your <code>a</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Anker Element mit einem Paragraphen umschließen",
          "description": [
            "Hier ist nochmal ein Beispiel für ein <code>a</code> Element:",
            "<a href=\"https://i.imgur.com/hviuZwe.png\" target=\"_blank\" data-lightbox=\"img-enlarge\"><img class=\"img-responsive\" title=\"Klick zum Vergrößern\" alt=\"Eine Darstellung wie Anker Elemente geschrieben werden mit dem gleichen Text wie in der folgenden Zeile\" src=\"https://i.imgur.com/hviuZwe.png\"></a>",
            "Hier ist ein Beispiel:",
            "<code>&#60;p&#62;Hier ist ein &#60;a href=\"https://freecodecamp.org\"&#62; Link zu freeCodeCamp&#60;/a&#62; dem du folgen kannst.&#60;/p&#62;</code>",
            "<code>Nesting</code> bedeutet, ein Element innerhalb eines anderen Elements zu schreiben",
            "<hr>",
            "Jetzt umschließe dein <code>a</code> Element mit einem neuen <code>p</code> Element (direkt nach dem bereits existierenden <code>main</code> Element) indem steht \"View more cat photos\", wo allerdings nur \"cat photos\" ein Link ist und der Rest normaler Text."
          ]
        },
        "es": {
          "title": "Anida un elemento de ancla dentro de un párrafo",
          "description": [
            "Una vez más, aquí está un diagrama de un elemento <code>a</code> para tu referencia:",
            "<a href=\"https://i.imgur.com/hviuZwe.png\" target=\"_blank\" data-lightbox=\"img-enlarge\"><img class=\"img-responsive\" title=\"Pulse para ampliar\" alt=\"un diagrama de como se componen las etiquetas de anclaje con el texto como en la siguiente línea\" src=\"https://i.imgur.com/hviuZwe.png\"></a>",
            "He aquí un ejemplo:",
            "<code>&#60;p&#62;Aquí hay un &#60;a href=\"https://freecodecamp.org\"&#62; enlace a freeCodeCamp&#60;/a&#62; para que lo sigas.&#60;/p&#62;</code>",
            "<code>Anidamiento</code> simplemente significa poner un elemento dentro de otro elemento.",
            "<hr>",
            "Ahora anida el elemento <code>a</code> existente dentro de un nuevo elemento <code>p</code> (justo después del elemento <code>main</code> que ya tienes) de tal forma que el párrafo que lo rodee diga \"View more cat photos\", pero que sólo \"cat photos\" sea un enlace, y el resto sea texto plano ."
          ]
        },
        "pt-br": {
          "title": "Aninhe um elemento âncora a um parágrafo",
          "description": [
            "Novamente, aqui está um diagrama de um elemento <code>a</code> para você usar como referência:",
            "<a href=\"https://i.imgur.com/QSCIiNH.png\" target=\"_blank\" data-lightbox=\"img-enlarge\"><img class=\"img-responsive\" title=\"Clique para ampliar\" alt=\"um diagrama de como tags âncora são compostas com o mesmo texto assim como na linha seguinte\" src=\"https://i.imgur.com/QSCIiNH.png\"></a>",
            "Veja um exemplo:",
            "<code>&#60;p&#62;Aqui está um &#60;a href=\"https://freecodecamp.org\"&#62; link para o freeCodeCamp&#60;/a&#62; para você clicar.&#60;/p&#62;</code>",
            "<code>Aninhar</code> significa colocar um elemento dentro de outro.",
            "<hr>",
            "Agora, aninhe seu elemento <code>a</code> existente a um novo elemento <code>p</code> (logo em seguida do elemento <code>main</code> existente), de forma que o parágrafo ao redor tenha o texto \"View more cat photos\", mas apenas a parte \"cat photos\" seja um link e o resto seja apenas texto."
          ]
        },
        "ru": {
          "title": "Создайте вложенный якорный элемент внутри параграфа",
          "description": [
            "Вот диаграмма элемента <code>a</code>:",
            "<a href=\"https://i.imgur.com/hviuZwe.png\" target=\"_blank\" data-lightbox=\"img-enlarge\"><img class=\"img-responsive\" title=\"Click to enlarge\" alt=\"a diagram of how anchor tags are composed with the same text as on the following line\" src=\"https://i.imgur.com/hviuZwe.png\"></a>",
            "Вот пример:",
            "<code>&#60;p&#62;Вот &#60;a href=\"https://freecodecamp.org\"&#62; ссылка на freeCodeCamp&#60;/a&#62; для перехода на ресурс.&#60;/p&#62;</code>",
            "<code>Вложенность</code> значит установку одного элемента внутрь друго элемента.",
            "<hr>",
            "Теперь вложите ваш существующий элемент <code>a</code> внутрь нового элемента <code>p</code> (сразу после существующего элемента <code>main</code>) таким образом, что добавляемый параграф сообщает: \"View more cat photos\", но где только \"cat photos\" является ссылкой, а остальной текст обычный."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"http://freecatphotoapp.com\" target=\"_blank\">cat photos</a>",
            "  ",
            "  <img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\">",
            "  ",
            "  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>",
            "  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08817",
      "title": "Make Dead Links Using the Hash Symbol",
      "description": [
        "Sometimes you want to add <code>a</code> elements to your website before you know where they will link.",
        "This is also handy when you're changing the behavior of a link using <code>JavaScript</code>, which we'll learn about later.",
        "<hr>",
        "The current value of the <code>href</code> attribute is a link that points to \"http://freecatphotoapp.com\". Replace the <code>href</code> attribute value with a <code>#</code>, also known as a hash symbol, to create a dead link.",
        "For example: <code>href=\"#\"</code>"
      ],
      "tests": [
        {
          "text": "Your <code>a</code> element should be a dead link with the value of the <code>href</code> attribute set to \"#\".",
          "testString": "assert($(\"a\").attr(\"href\") === \"#\", 'Your <code>a</code> element should be a dead link with the value of the <code>href</code> attribute set to \"#\".');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Erstelle tote Links mit dem Hash Symbol",
          "description": [
            "Manchmal wirst du <code>a</code> Elemente zu deiner Website hinzufügen möchten, ohne dass du das Ziel des Links kennst.",
            "Das ist auch nützlich, wenn du die Funktion eines Links mit <code>jQuery</code> verändern willst. Das werden wir später noch behandeln.",
            "<hr>",
            "Ersetze den Inhalt des <code>href</code> Attributs deines <code>a</code> Elements mit einem <code>#</code>, auch bekannt als Hash Symbol, um einen toten Link zu erzeugen."
          ]
        },
        "es": {
          "title": "Haz vínculos muertos utilizando el símbolo de numero",
          "description": [
            "A veces quieres agregar elementos <code>a</code> a tu sitio web antes de saber qué enlazarán.",
            "Esto también es útil cuando estás cambiando el comportamiento de un enlace usando <code>jQuery</code>, lo cual aprenderemos más adelante.",
            "<hr>",
            "Reemplaza el atributo <code>href</code> de tu elemento <code>a</code> con un <code>#</code>, también conocido como un símbolo de número o de <em>hash</em>, para convertirlo en un vínculo muerto."
          ]
        },
        "pt-br": {
          "title": "Crie links mortos com hashtags",
          "description": [
            "Às vezes você vai querer adicionar elementos <code>a</code> ao seu site antes de saber para onde eles vão linkar.",
            "Isso também é útil para quando você está mudando o comportamento de um link usando <code>jQuery</code>, que nós vamos aprender mais tarde.",
            "<hr>",
            "O valor atual do atributo <code>href</code> é \"http://freecatphotoapp.com\". Substitua esse valor por <code>#</code>, também conhecido como hashtag, para criar um link morto."
          ]
        },
        "ru": {
          "title": "Создайте мёртвые ссылки используя хэш-символ",
          "description": [
            "Иногда вам нужно добавить элементы <code>a</code> к вашему сайту до того, как вы знаете куда будут вести ссылки.",
            "Также это может оказаться полезно, когда вы меняете поведение ссылки используя <code>jQuery</code>, что мы изучим позже.",
            "<hr>",
            "Замените значение атрибута <code>href</code> вашего элемента <code>a</code> на <code>#</code>, известное как хэш-символ, для превращения элемента в мёртвую ссылку."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"http://freecatphotoapp.com\" target=\"_blank\">cat photos</a>.</p>",
            "  ",
            "  <img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\">",
            "  ",
            "  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>",
            "  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08820",
      "title": "Turn an Image into a Link",
      "description": [
        "You can make elements into links by nesting them within an <code>a</code> element.",
        "Nest your image within an <code>a</code> element. Here's an example:",
        "<code>&#60;a href=\"#\"&#62;&#60;img src=\"https://bit.ly/fcc-running-cats\" alt=\"Three kittens running towards the camera.\"&#62;&#60;/a&#62;</code>",
        "Remember to use <code>#</code> as your <code>a</code> element's <code>href</code> property in order to turn it into a dead link.",
        "<hr>",
        "Place the existing image element within an anchor element.",
        "Once you've done this, hover over your image with your cursor. Your cursor's normal pointer should become the link clicking pointer. The photo is now a link."
      ],
      "tests": [
        {
          "text": "Nest the existing <code>img</code> element within an <code>a</code> element.",
          "testString": "assert($(\"a\").children(\"img\").length > 0, 'Nest the existing <code>img</code> element within an <code>a</code> element.');"
        },
        {
          "text": "Your <code>a</code> element should be a dead link with a <code>href</code> attribute set to <code>#</code>.",
          "testString": "assert(new RegExp(\"#\").test($(\"a\").children(\"img\").parent().attr(\"href\")), 'Your <code>a</code> element should be a dead link with a <code>href</code> attribute set to <code>#</code>.');"
        },
        {
          "text": "Make sure each of your <code>a</code> elements has a closing tag.",
          "testString": "assert(code.match(/<\\/a>/g) && code.match(/<a/g) && code.match(/<\\/a>/g).length === code.match(/<a/g).length, 'Make sure each of your <code>a</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Verlinke ein Bild",
          "description": [
            "Du kannst jedes Element in einen Link verwandeln, indem du es mit einem <code>a</code> Element umschließt.",
            "<hr>",
            "Umschließe dein Bild mit einem <code>a</code> Element. Hier ist ein Beispiel:",
            "<code>&#60;a href=\"#\"&#62;&#60;img src=\"https://bit.ly/fcc-running-cats\"&#62;&#60;/a&#62;</code>",
            "Vergewissere dich, dass du ein <code>#</code> innerhalb des <code>href</code> Attributs des <code>a</code> Elements nutzt, um daraus einen toten Link zu machen.",
            "Sobald du das gemacht hast, kannst du mit der Maus über dein Bild fahren. Der normale Mauszeiger sollte nun zu einer Hand für Links werden. Das Bild ist jetzt ein Link."
          ]
        },
        "es": {
          "title": "Convierte una imagen en un vínculo",
          "description": [
            "Puedes convertir elementos en enlaces al anidarlos dentro de un elemento <code>a</code>.",
            "<hr>",
            "Anida tu imagen dentro de un elemento <code>a</code>. He aquí un ejemplo: ",
            "<code>&#60;a href=\"#\"&#62;&#60;img src=\"https://bit.ly/fcc-running-cats\"/&#62;&#60;/a&#62;</code>",
            "Recuerda usar <code>#</code> como atributo <code>href</code> de tu elemento <code>a</code> con el fin de convertirlo en un vínculo muerto.",
            "Una vez hayas hecho esto, coloca el cursor sobre tu imagen. El puntero normal de tu cursor debería convertirse en el puntero de enlace. La foto es ahora un vínculo ."
          ]
        },
        "pt-br": {
          "title": "Transforme uma imagem em um link",
          "description": [
            "Você pode transformar elementos em links aninhando-os a um elemento <code>a</code>.",
            "Aninhe sua imagem a um elemento <code>a</code>. Aqui está um exemplo:",
            "<code>&#60;a href=\"#\"&#62;&#60;img src=\"https://bit.ly/fcc-running-cats\" alt=\"Três gatinhos correndo em direção à câmera.\"&#62;&#60;/a&#62;</code>",
            "Lembre-se de usar <code>#</code> no atributo <code>href</code> do seu elemento <code>a</code> para que o link esteja morto.",
            "<hr>",
            "Coloque a imagem existente dentro de um elemento âncora.",
            "Depois de fazer isso, coloque o cursor do mouse sobre sua imagem. O seu cursor normal deve virar um cursor de clique. A foto agora é um link."
          ]
        },
        "ru": {
          "title": "Превратите изображение в ссылку",
          "description": [
            "Вы можете превратить элементы в ссылки путём их вложения внутрь элементов <code>a</code>.",
            "<hr>",
            "Вложите ваше изображение в элемент <code>a</code>. Вот пример:",
            "<code>&#60;a href=\"#\"&#62;&#60;img src=\"https://bit.ly/fcc-running-cats\"&#62;&#60;/a&#62;</code>",
            "Не забывайте использовать <code>#</code> в качестве значения атрибута <code>href</code> вашего элемента <code>a</code> для превращения ссылки в мёртвую.",
            "Как только вы это сделаете, наведите курсор мыши на ваше изображение. При этом курсор должен изменить вид с обычного на используемый при наведении на ссылки. Ваше фото теперь является ссылкой."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\">",
            "  ",
            "  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>",
            "  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08827",
      "title": "Create a Bulleted Unordered List",
      "description": [
        "HTML has a special element for creating <code>unordered lists</code>, or bullet point style lists.",
        "Unordered lists start with an opening <code>&#60;ul&#62;</code> element, followed by any number of <code>&#60;li&#62;</code> elements. Finally, unordered lists close with a <code>&#60;/ul&#62;</code>",
        "For example: ",
        "<blockquote>&#60;ul&#62;<br>&nbsp;&nbsp;&#60;li&#62;milk&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;cheese&#60;/li&#62;<br>&#60;/ul&#62;</blockquote>",
        "would create a bullet point style list of \"milk\" and \"cheese\".",
        "<hr>",
        "Remove the last two <code>p</code> elements and create an unordered list of three things that cats love at the bottom of the page."
      ],
      "tests": [
        {
          "text": "Create a <code>ul</code> element.",
          "testString": "assert($(\"ul\").length > 0, 'Create a <code>ul</code> element.');"
        },
        {
          "text": "You should have three <code>li</code> elements within your <code>ul</code> element.",
          "testString": "assert($(\"ul li\").length > 2, 'You should have three <code>li</code> elements within your <code>ul</code> element.');"
        },
        {
          "text": "Make sure your <code>ul</code> element has a closing tag.",
          "testString": "assert(code.match(/<\\/ul>/gi) && code.match(/<ul/gi) && code.match(/<\\/ul>/gi).length === code.match(/<ul/gi).length, 'Make sure your <code>ul</code> element has a closing tag.');"
        },
        {
          "text": "Make sure your <code>li</code> elements have closing tags.",
          "testString": "assert(code.match(/<\\/li>/gi) && code.match(/<li[\\s>]/gi) && code.match(/<\\/li>/gi).length === code.match(/<li[\\s>]/gi).length, 'Make sure your <code>li</code> elements have closing tags.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Erstelle eine ungeordnete Liste",
          "description": [
            "HTML hat ein spezielles Element zum Erstellen von <code>unordered lists</code> (ungeordneten Listen).",
            "Ungeordnete Listen starten mit einem <code>&#60;ul&#62;</code> Element. Dann beinhalten sie eine gewisse Anzahl an <code>&#60;li&#62;</code> Elementen.",
            "Zum Beispiel:",
            "<blockquote>&#60;ul&#62;<br>&nbsp;&nbsp;&#60;li&#62;Milch&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;Käse&#60;/li&#62;<br>&#60;/ul&#62;</blockquote>",
            "würde eine ungeordnete Liste für \"Milch\" und \"Käse\" erstellen.",
            "<hr>",
            "Entferne die letzten zwei <code>p</code> Elemente und erstelle eine ungeordnete Liste von drei Dingen die Katzen lieben am Ende der Seite"
          ]
        },
        "es": {
          "title": "Crea una lista no ordenada con viñetas",
          "description": [
            "HTML tiene un elemento especial para la creación de <code>listas no ordenadas</code>, o listas con estilo viñeta.",
            "Las listas no ordenadas comienzan con un elemento <code>&#60;ul&#62;</code>. A continuación contienen una cantidad de elementos <code>&#60;li&#62;.</code>",
            "Por ejemplo: ",
            "<blockquote>&#60;ul&#62;<br>&nbsp;&nbsp;&#60;li&#62;leche&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;queso&#60;/li&#62;<br>&#60;/ul&#62;</blockquote>",
            "creará una lista con viñetas y con elementos \"leche\" y \"queso\".",
            "<hr>",
            "Elimina los dos últimos elementos <code>p</code> y en la parte inferior de la página crea una lista no ordenada de tres cosas que los gatos aman."
          ]
        },
        "pt-br": {
          "title": "Crie uma lista não ordenada com marcadores",
          "description": [
            "O HTML tem um elemento especial para criar <code>listas não ordenadas</code>, ou listas com marcadores.",
            "Listas não ordenadas começam com um elemento <code>ul</code> e contêm diversos elementos <code>li</code> aninhados a ele.",
            "Por exemplo: ",
            "<blockquote>&#60;ul&#62;<br>&nbsp;&nbsp;&#60;li&#62;leite&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;queijo&#60;/li&#62;<br>&#60;/ul&#62;</blockquote>",
            "criaria uma lista com marcadores contendo \"leite\" e \"queijo\".",
            "<hr>",
            "Remova os dois últimos elementos <code>p</code> e crie no final da página uma lista não ordenada de três coisas que gatos adoram."
          ]
        },
        "ru": {
          "title": "Создайте ненумерованный неупорядоченный список",
          "description": [
            "В HTML есть специальный элемент для создания <code>неупорядоченного списка</code>, или списка с точками в виде меток элементов.",
            "Неупорядоченные списки начинаются с элемента <code>&#60;ul&#62;</code>. Затем они содержат некоторе количество элементов <code>&#60;li&#62;</code>.",
            "Например: ",
            "<blockquote>&#60;ul&#62;<br>&nbsp;&nbsp;&#60;li&#62;milk&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;cheese&#60;/li&#62;<br>&#60;/ul&#62;</blockquote>",
            "создаст ненумерованный список из \"milk\" и \"cheese\".",
            "<hr>",
            "Удалите последние два элемента <code>p</code> и создайте неупорядоченный список из трёх вещей, которые любят кошки."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>",
            "  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08828",
      "title": "Create an Ordered List",
      "description": [
        "HTML has another special element for creating <code>ordered lists</code>, or numbered lists.",
        "Ordered lists start with an opening <code>&#60;ol&#62;</code> element, followed by any number of <code>&#60;li&#62;</code> elements. Finally, ordered lists close with a <code>&#60;/ol&#62;</code>",
        "For example:",
        "<blockquote>&#60;ol&#62;<br>&nbsp;&nbsp;&#60;li&#62;Garfield&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;Sylvester&#60;/li&#62;<br>&#60;/ol&#62;</blockquote>",
        "would create a numbered list of \"Garfield\" and \"Sylvester\".",
        "<hr>",
        "Create an ordered list of the top 3 things cats hate the most."
      ],
      "tests": [
        {
          "text": "You should have an ordered list for \"Top 3 things cats hate:\"",
          "testString": "assert((/Top 3 things cats hate:/i).test($(\"ol\").prev().text()), 'You should have an ordered list for \"Top 3 things cats hate:\"');"
        },
        {
          "text": "You should have an unordered list for \"Things cats love:\"",
          "testString": "assert((/Things cats love:/i).test($(\"ul\").prev().text()), 'You should have an unordered list for \"Things cats love:\"');"
        },
        {
          "text": "You should have only one <code>ul</code> element.",
          "testString": "assert.equal($(\"ul\").length, 1, 'You should have only one <code>ul</code> element.');"
        },
        {
          "text": "You should have only one <code>ol</code> element.",
          "testString": "assert.equal($(\"ol\").length, 1, 'You should have only one <code>ol</code> element.');"
        },
        {
          "text": "You should have three <code>li</code> elements within your <code>ul</code> element.",
          "testString": "assert.equal($(\"ul li\").length, 3, 'You should have three <code>li</code> elements within your <code>ul</code> element.');"
        },
        {
          "text": "You should have three <code>li</code> elements within your <code>ol</code> element.",
          "testString": "assert.equal($(\"ol li\").length, 3, 'You should have three <code>li</code> elements within your <code>ol</code> element.');"
        },
        {
          "text": "Make sure your <code>ul</code> element has a closing tag.",
          "testString": "assert(code.match(/<\\/ul>/g) && code.match(/<\\/ul>/g).length === code.match(/<ul>/g).length, 'Make sure your <code>ul</code> element has a closing tag.');"
        },
        {
          "text": "Make sure your <code>ol</code> element has a closing tag.",
          "testString": "assert(code.match(/<\\/ol>/g) && code.match(/<\\/ol>/g).length === code.match(/<ol>/g).length, 'Make sure your <code>ol</code> element has a closing tag.');"
        },
        {
          "text": "Make sure your <code>li</code> element has a closing tag.",
          "testString": "assert(code.match(/<\\/li>/g) && code.match(/<li>/g) && code.match(/<\\/li>/g).length === code.match(/<li>/g).length, 'Make sure your <code>li</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Erstelle eine geordnete Liste",
          "description": [
            "HTML beinhaltet auch ein spezielles Element für <code>ordered lists</code> (geordnete/nummerierte Listen).",
            "Geordnete Listen starten mit einem <code>&#60;ol&#62;</code> Element. Dann enthalten sie eine gewisse Anzahl an <code>&#60;li&#62;</code> Elementen.",
            "Zum Beispiel:",
            "<blockquote>&#60;ol&#62;<br>&nbsp;&nbsp;&#60;li&#62;Garfield&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;Sylvester&#60;/li&#62;<br>&#60;/ol&#62;</blockquote>",
            "würde eine nummerierte Liste mit \"Garfield\" und \"Sylvester\" erstellen.",
            "<hr>",
            "Erstelle eine geordnete Liste von den drei Dingen, die Katzen am meisten hassen."
          ]
        },
        "es": {
          "title": "Crear una lista ordenada",
          "description": [
            "HTML tiene un elemento especial para la creación de <code>listas ordenadas</code>, o listas de estilo numerado.",
            "Las listas ordenadas comienzan con un elemento <code>&#60;ol&#62;</code>. Luego contienen un número de elementos <code>&#60;li&#62;.</code>",
            "Por ejemplo:",
            "<blockquote>&#60;ol&#62;<br>&nbsp;&nbsp;&#60;li&#62;Garfield&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;Sylvester&#60;/li&#62;<br>&#60;/ol&#62;</blockquote>",
            "creará una lista numerada con \"Garfield\" y \"Sylvester\".",
            "<hr>",
            "Crea una lista ordenada de los 3 cosas que más odian los gatos."
          ]
        },
        "pt-br": {
          "title": "Crie uma lista ordenada",
          "description": [
            "O HTML tem um elemento especial para criar <code>listas ordenadas</code>, ou listas numeradas.",
            "Listas ordenadas começam com um elemento <code>ol</code> e contêm diversos elementos <code>li</code> aninhados a ele.",
            "Por exemplo:",
            "<blockquote>&#60;ol&#62;<br>&nbsp;&nbsp;&#60;li&#62;Garfield&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;Frajola&#60;/li&#62;<br>&#60;/ol&#62;</blockquote>",
            "criaria uma lista numerada contendo \"Garfield\" e \"Frajola\".",
            "<hr>",
            "Crie uma lista ordenada com as 3 coisas que os gatos mais odeiam."
          ]
        },
        "ru": {
          "title": "Создайте упорядоченный список",
          "description": [
            "В HTML есть специальный элемент для создания <code>упорядоченных списков</code>, или списков с номерами в качестве меток элементов.",
            "Упорядоченные списки начинаются с элемента <code>&#60;ol&#62;</code>. Далее они содержат некоторое количество элементов <code>&#60;li&#62;</code>.",
            "Например:",
            "<blockquote>&#60;ol&#62;<br>&nbsp;&nbsp;&#60;li&#62;Garfield&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;Sylvester&#60;/li&#62;<br>&#60;/ol&#62;</blockquote>",
            "создаст нумерованный список из \"Garfield\" и \"Sylvester\".",
            "<hr>",
            "Создайте нумерованный список из 3-х вещей, который кошки больше всего ненавидят."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  ",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08829",
      "title": "Create a Text Field",
      "description": [
        "Now let's create a web form.",
        "Input elements are a convenient way to get input from your user.",
        "You can create a text input like this:",
        "<code>&#60;input type=\"text\"&#62;</code>",
        "Note that <code>input</code> elements are self-closing.",
        "<hr>",
        "Create an <code>input</code> element of type <code>text</code> below your lists."
      ],
      "tests": [
        {
          "text": "Your app should have an <code>input</code> element of type <code>text</code>.",
          "testString": "assert($(\"input[type=text]\").length > 0, 'Your app should have an <code>input</code> element of type <code>text</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Erstelle ein Textfeld",
          "description": [
            "Nun erstellen wir ein Web Formular.",
            "Eingabefelder sind eine bewährte Möglichkeit um Daten von Usern zu erhalten.",
            "So kannst du eines erstellen:",
            "<code>&#60;input type=\"text\"&#62;</code>",
            "Beachte, dass <code>input</code> Elemente selbstschließend sind.",
            "<hr>",
            "Erstelle ein <code>input</code> Element des Typ (\"type\") <code>text</code> unter deinen Listen."
          ]
        },
        "es": {
          "title": "Crea un campo de texto",
          "description": [
            "Ahora vamos a crear un formulario web.",
            "Los campos de texto son una manera conveniente de obtener retroalimentación de tu usuario.",
            "Puedes crear uno como este:",
            "<code>&#60;input type=\"text\"&#62;</code>",
            "Ten en cuenta que los elementos <code>input</code> son de cierre automático.",
            "<hr>",
            "Crea un elemento <code>input</code> de tipo <code>text</code> debajo de tus listas."
          ]
        },
        "pt-br": {
          "title": "Crie um campo de texto",
          "description": [
            "Agora vamos criar um formulário web.",
            "Campos de texto são uma forma conveniente de obter dados do seu usuário.",
            "Você pode criar um assim:",
            "<code>&#60;input type=\"text\"&#62;</code>",
            "Note que elementos <code>input</code> têm auto-fechamento.",
            "<hr>",
            "Crie um elemento <code>input</code> de tipo <code>text</code> abaixo das suas listas."
          ]
        },
        "ru": {
          "title": "Создайте текстовое поле",
          "description": [
            "Теперь давайте создадим web-форму.",
            "Поля текстового ввода - удобный способ получения данных от пользователя.",
            "Вы можете создать текстовое поле следующим образом:",
            "<code>&#60;input type=\"text\"&#62;</code>",
            "Обратите внимание, что элементы <code>input</code> самозакрывающиеся.",
            "<hr>",
            "Создайте элемент <code>input</code> типа <code>text</code> под вашими списками."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  ",
            "  ",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08830",
      "title": "Add Placeholder Text to a Text Field",
      "description": [
        "Placeholder text is what is displayed in your <code>input</code> element before your user has inputted anything.",
        "You can create placeholder text like so:",
        "<code>&#60;input type=\"text\" placeholder=\"this is placeholder text\"&#62;</code>",
        "<hr>",
        "Set the <code>placeholder</code> value of your text <code>input</code> to \"cat photo URL\"."
      ],
      "tests": [
        {
          "text": "Add a <code>placeholder</code> attribute to the existing text <code>input</code> element.",
          "testString": "assert($(\"input[placeholder]\").length > 0, 'Add a <code>placeholder</code> attribute to the existing text <code>input</code> element.');"
        },
        {
          "text": "Set the value of your placeholder attribute to \"cat photo URL\".",
          "testString": "assert($(\"input\") && $(\"input\").attr(\"placeholder\") && $(\"input\").attr(\"placeholder\").match(/cat\\s+photo\\s+URL/gi), 'Set the value of your placeholder attribute to \"cat photo URL\".');"
        },
        {
          "text": "The finished <code>input</code> element should have valid syntax.",
          "testString": "assert($(\"input[type=text]\").length > 0 && code.match(/<input((\\s+\\w+(\\s*=\\s*(?:\".*?\"|'.*?'|[\\^'\">\\s]+))?)+\\s*|\\s*)\\/?>/gi), 'The finished <code>input</code> element should have valid syntax.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Füge Platzhalter zu einem Textfeld hinzu",
          "description": [
            "Platzhaltertexte erscheinen in deinen <code>input</code> Feldern, bevor der Nutzer etwas eingibt.",
            "Du kannst Platzhalter auf folgende Weise erstellen:",
            "<code>&#60;input type=\"text\" placeholder=\"Das ist ein Platzhalter.\"&#62;</code>",
            "<hr>",
            "Setze bei deinem <code>input</code> Element den Wert für <code>placeholder</code> auf \"cat photo URL\"."
          ]
        },
        "es": {
          "title": "Agrega un texto de relleno a un campo de texto",
          "description": [
            "El texto de relleno es el que aparece en un campo de texto antes de que un usuario haya ingresado datos.",
            "Puedes crear un texto de relleno de esta manera:",
            "<code>&#60;input type=\"text\" placeholder=\"este es un texto de relleno\"&#62;</code>",
            "<hr>",
            "Establece el valor del <code>texto de relleno</code> de tu campo de texto como \"cat photo URL\"."
          ]
        },
        "pt-br": {
          "title": "Adicione um placeholder a um campo de texto",
          "description": [
            "O placeholder é o texto que aparece no seu <code>input</code> quando ele está vazio.",
            "Você pode adicionar um placeholder ao seu campo de texto assim:",
            "<code>&#60;input type=\"text\" placeholder=\"esse é o placeholder\"&#62;</code>",
            "<hr>",
            "Coloque o placeholder \"cat photo URL\" no seu <code>input</code> de texto."
          ]
        },
        "ru": {
          "title": "Добавьте замещающий текст к текстовому полю",
          "description": [
            "Ваш замещающий текст - это то, что отображается в виде текста внутри <code>input</code> пока пользователь не ввёл туда что-либо.",
            "Вы можете создать замещающий текст следующим образом:",
            "<code>&#60;input type=\"text\" placeholder=\"это замещающий текст\"&#62;</code>",
            "<hr>",
            "Установите значение атрибута <code>placeholder</code> вашего текстового поля <code>input</code> равными \"cat photo URL\"."
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/add-placeholder-text-to-a-text-field",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <input type=\"text\">",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aede08830",
      "title": "Create a Form Element",
      "description": [
        "You can build web forms that actually submit data to a server using nothing more than pure HTML. You can do this by specifying an action on your <code>form</code> element.",
        "For example:",
        "<code>&#60;form action=\"/url-where-you-want-to-submit-form-data\"&#62;&#60;/form&#62;</code>",
        "<hr>",
        "Nest your text field inside a <code>form</code> element, and add the <code>action=\"/submit-cat-photo\"</code> attribute to the form element."
      ],
      "tests": [
        {
          "text": "Nest your text input element within a <code>form</code> element.",
          "testString": "assert($(\"form\") && $(\"form\").children(\"input\") && $(\"form\").children(\"input\").length > 0, 'Nest your text input element within a <code>form</code> element.');"
        },
        {
          "text": "Make sure your <code>form</code> has an <code>action</code> attribute which is set to <code>/submit-cat-photo</code>",
          "testString": "assert($(\"form\").attr(\"action\") === \"/submit-cat-photo\", 'Make sure your <code>form</code> has an <code>action</code> attribute which is set to <code>/submit-cat-photo</code>');"
        },
        {
          "text": "Make sure your <code>form</code> element has well-formed open and close tags.",
          "testString": "assert(code.match(/<\\/form>/g) && code.match(/<form [^<]*>/g) && code.match(/<\\/form>/g).length === code.match(/<form [^<]*>/g).length, 'Make sure your <code>form</code> element has well-formed open and close tags.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Erstelle ein Formular",
          "description": [
            "Du kannst Web Formulare bauen, die Daten zu einem Server übertragen – und das nur mit HTML. Das wird möglich, indem du eine Aktion für dein <code>form</code> Element bestimmst.",
            "Zum Beispiel:",
            "<code>&#60;form action=\"/url-wohin-du-deine-formular-daten-senden-willst\"&#62;&#60;/form&#62;</code>",
            "<hr>",
            "Umschließe dein Textfeld mit einem <code>form</code> Element. Füge anschließend das Attribut <code>action=\"/submit-cat-photo\"</code> hinzu."
          ]
        },
        "es": {
          "title": "Crea un elemento de formulario",
          "description": [
            "Puedes construir formularios web que realmente envíen datos a un servidor usando nada más que HTML puro. Puedes hacerlo especificando una acción en tu elemento <code>form</code>.",
            "Por ejemplo:",
            "<code>&#60;form action=\"/url-al-que-quieres-enviar-los-datos-del-formulario\"&#62;&#60;/form&#62;</code>",
            "<hr>",
            "Anida tu campo de texto en un elemento <code>form</code>. Agrega el atributo <code>action=\"/submit-cat-photo\"</code> a este elemento de formulario."
          ]
        },
        "pt-br": {
          "title": "Crie um elemento de formulário",
          "description": [
            "Você pode construir formulários web que realmente enviam dados para um servidor usando nada mais que HTML puro. Para isso, você precisa especificar uma URL no atributo <code>action</code> do seu elemento <code>form</code>.",
            "Por exemplo:",
            "<code>&#60;form action=\"/url-para-onde-voce-quer-enviar-os-dados\"&#62;&#60;/form&#62;</code>",
            "<hr>",
            "Aninhe o seu campo de texto a um elemento <code>form</code>. Adicione o atributo <code>action=\"/submit-cat-photo\"</code> a esse <code>form</code>."
          ]
        },
        "ru": {
          "title": "Создайте элемент типа форма",
          "description": [
            "Вы можете строить web-формы, которые отправляют данные серверу, не ипользуя ничего кроме HTML. Вы можете достичь этого указанием действия в атрибутах элемента <code>form</code>.",
            "Например:",
            "<code>&#60;form action=\"/url-куда-вы-хотите-отправить-данные-формы\"&#62;&#60;/form&#62;</code>",
            "<hr>",
            "Вложите ваше текстовое поле в элемент <code>form</code>. Добавьте атрибут <code>action=\"/submit-cat-photo\"</code> к этому элементу формы."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <input type=\"text\" placeholder=\"cat photo URL\">",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedd08830",
      "title": "Add a Submit Button to a Form",
      "description": [
        "Let's add a <code>submit</code> button to your form. Clicking this button will send the data from your form to the URL you specified with your form's <code>action</code> attribute.",
        "Here's an example submit button:",
        "<code>&#60;button type=\"submit\"&#62;this button submits the form&#60;/button&#62;</code>",
        "<hr>",
        "Add a button as the last element of your <code>form</code> element with a type of <code>submit</code>, and \"Submit\" as its text."
      ],
      "tests": [
        {
          "text": "Your form should have a button inside it.",
          "testString": "assert($(\"form\").children(\"button\").length > 0, 'Your form should have a button inside it.');"
        },
        {
          "text": "Your submit button should have the attribute <code>type</code> set to <code>submit</code>.",
          "testString": "assert($(\"button\").attr(\"type\") === \"submit\", 'Your submit button should have the attribute <code>type</code> set to <code>submit</code>.');"
        },
        {
          "text": "Your submit button should only have the text \"Submit\".",
          "testString": "assert($(\"button\").text().match(/^\\s*submit\\s*$/gi), 'Your submit button should only have the text \"Submit\".');"
        },
        {
          "text": "Make sure your <code>button</code> element has a closing tag.",
          "testString": "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure your <code>button</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Füge einen Button zum Senden hinzu",
          "description": [
            "Lass uns nun einen <code>submit</code> Button hinzufügen. Durch einen Klick auf diesen Button werden die Daten des Formulars an die URL gesendet, welche du in dem <code>action</code> Attribut deines Formulars angegeben hast.",
            "Hier ist ein Beispiel für einen solchen Button:",
            "<code>&#60;button type=\"submit\"&#62;Dieser Button überträgt die Daten des Formulars.&#60;/button&#62;</code>",
            "<hr>",
            "Füge einen Button zum Senden mit dem Typ <code>submit</code> und \"Submit\" als Text zu deinem <code>form</code> Element hinzu."
          ]
        },
        "es": {
          "title": "Agrega un botón Enviar a un formulario",
          "description": [
            "Añadamos un elemento <code>submit</code> a tu formulario. Al hacer clic en este botón enviará los datos del formulario a la URL especificada en el atributo <code>action</code> de tu formulario. ",
            "He aquí un ejemplo de un botón de envío:",
            "<code>&#60;button type=\" submit\"&#62;este botón envía el formulario&#60;/botón&#62;</code>",
            "<hr>",
            "Agrega un botón de enviar a tu elemento <code>form</code> con el tipo <code>submit</code> y con el texto \"Submit\"."
          ]
        },
        "pt-br": {
          "title": "Adicione um botão de enviar a um formulário",
          "description": [
            "Vamos adicionar um botão de enviar (<code>submit</code>) ao seu formulário. Quando seu usuário clicar nesse botão, os dados do formulário serão enviados para a URL que você especificou no atributo <code>action</code> do seu formulário.",
            "Aqui está um botão de exemplo:",
            "<code>&#60;button type=\"submit\"&#62;esse botão envia o formulário&#60;/button&#62;</code>",
            "<hr>",
            "Adicione um botão de enviar ao seu elemento <code>form</code> com tipo <code>submit</code> e com texto \"Submit\"."
          ]
        },
        "ru": {
          "title": "Добавьте кнопку отправки к форме",
          "description": [
            "Давайте добавим кнопку отправки <code>submit</code> к вашей форме. Нажатие на эту кнопку отправит данные из вашей формы по адресу, указанному в атрибуте <code>action</code> вашей формы.",
            "Вот пример кнопки отправки:",
            "<code>&#60;button type=\"submit\"&#62;эта кнопка отправляет данные формы&#60;/button&#62;</code>",
            "<hr>",
            "Добавьте кнопку отправки к вашему элементу <code>form</code> с указанием типа <code>submit</code> и \"Submit\" в качестве отображаемого текста."
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/add-a-submit-button-to-a-form",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <input type=\"text\" placeholder=\"cat photo URL\">",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedc08830",
      "title": "Use HTML5 to Require a Field",
      "description": [
        "You can require specific form fields so that your user will not be able to submit your form until he or she has filled them out.",
        "For example, if you wanted to make a text input field required, you can just add the attribute <code>required</code> within your <code>input</code> element, like this: <code>&#60;input type=\"text\" required&#62;</code>",
        "<hr>",
        "Make your text <code>input</code> a <code>required</code> field, so that your user can't submit the form without completing this field.",
        "Then try to submit the form without inputting any text. See how your HTML5 form notifies you that the field is required?"
      ],
      "tests": [
        {
          "text": "Your text <code>input</code> element should have the <code>required</code> attribute.",
          "testString": "assert($(\"input\").prop(\"required\"), 'Your text <code>input</code> element should have the <code>required</code> attribute.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Nutze HTML5 um ein Pflichtfeld zu erstellen",
          "description": [
            "Du kannst bestimmte Felder eines Formulars zu Pflichtfeldern erklären. Damit ist es deinen Usern nicht mehr möglich, das Formular abzuschicken, ohne die Pflichtfelder auszufüllen.",
            "Um zum Beispiel ein Textfeld zum Pflichtfeld zu erklären, kannst du einfach ein <code>required</code> innerhalb deines <code>input</code> Elements hinzufügen: <code>&#60;input type=\"text\" required&#62;</code>",
            "<hr>",
            "Mache aus deinem <code>input</code> Feld ein Pflichtfeld – \"required\" – damit deine Nutzer das Formular nicht abschicken können, ohne dieses Feld auszufüllen.",
            "Probier dann dein Formular ohne einen Text abzuschicken. Siehst du wie dein HTML5 Formular dich darauf hinweißt dass das Feld verpflichtend ist?",
            "Beachte: dieses Feld funktioniert nicht in Safari."
          ]
        },
        "es": {
          "title": "Utiliza HTML5 para especificar campos obligatorios",
          "description": [
            "Puedes especificar un campo obligatorio en un formulario para que tu usuario no pueda enviar el formulario hasta que lo haya llenado.",
            "Por ejemplo, si quieres requerir obligatoriamente un campo de texto, puedes agregar la palabra <code>required</code> dentro de tu elemento <code>input</code>, usarías: <code>&#60;input type=\"text\" required&#62;</code> ",
            "<hr>",
            "Haz de tu campo de texto un campo obligatorio, de manera que tu usuario no pueda enviar el formulario sin completar este campo.",
            "Luego, intenta enviar el formulario sin ingresar texto alguno. ¿Ves cómo tu formulario HTML5 te notifica que el campo es obligatorio?",
            "Nota: Este campo no funciona en Safari."
          ]
        },
        "pt-br": {
          "title": "Use HTML5 para tornar campos obrigatórios",
          "description": [
            "Você pode tornar obrigatórios campos específicos do seu formulário, assim seu usuário não conseguirá enviar os dados sem preencher esses campos.",
            "Por exemplo, se você quiser que um campo de texto seja obrigatório, basta adicionar a palavra <code>required</code> ao seu elemento <code>input</code>, assim: <code>&#60;input type=\"text\" required&#62;</code>",
            "<hr>",
            "Torne seu campo de texto obrigatório, de forma que seu usuário não consiga enviar o formulário sem preencher esse campo.",
            "Então, tente enviar o formulário sem preencher esse campo. Viu como o formulário HTML5 avisa que o campo é obrigatório?",
            "<strong>Nota</strong><br>Esse campo não funciona no Safari."
          ]
        },
        "ru": {
          "title": "Используйте HTML5, чтобы сделать заполнение поля обязательным",
          "description": [
            "Вы можете требовать заполнения определённых полей формы, таким образом пользователь не сможет отправить данные формы до их заполнения.",
            "Например, если бы вы хотели сделать заполнение текстового поля обязательным, вы могли бы добавить слово <code>required</code> внутрь вашего элемента <code>input</code>: <code>&#60;input type=\"text\" required&#62;</code>",
            "<hr>",
            "Сделайте ваше текстовое поле <code>input</code> обязательным <code>required</code> для заполнения, чтобы пользователь не мог отправить данные формы без заполнения этого поля.",
            "Далее попробуйте отправить данные формы без ввода какого-либо текста. Видите как ваша HTML5-форма уведомляет вас о том, что поле обязательное для заполнения?",
            "Внимание: это поле не работает в Safari."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <input type=\"text\" placeholder=\"cat photo URL\">",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08834",
      "title": "Create a Set of Radio Buttons",
      "description": [
        "You can use <code>radio buttons</code> for questions where you want the user to only give you one answer out of multiple options.",
        "Radio buttons are a type of <code>input</code>.",
        "Each of your radio buttons can be nested within its own <code>label</code> element. By wrapping an <code>input</code> element inside of a <code>label</code> element it will automatically associate the radio button input with the label element surrounding it.",
        "All related radio buttons should have the same <code>name</code> attribute to create a radio button group. By creating a radio group, selecting any single radio button will automatically deselect the other buttons within the same group ensuring only one answer is provided by the user.",
        "Here's an example of a radio button:",
        "<blockquote>&#60;label&#62; <br>&nbsp;&nbsp;&#60;input type=\"radio\" name=\"indoor-outdoor\"&#62;Indoor <br>&#60;/label&#62;</blockquote>",
        "It is considered best practice to set a <code>for</code> attribute on the <code>label</code> element, with a value that matches the value of the <code>id</code> attribute of the <code>input</code> element. This allows assistive technologies to create a linked relationship between the label and the child <code>input</code> element. For example:",
        "<blockquote>&#60;label for=\"indoor\"&#62; <br>&nbsp;&nbsp;&#60;input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"&#62;Indoor <br>&#60;/label&#62;</blockquote>",
        "<hr>",
        "Add a pair of radio buttons to your form, each nested in its own label element. One should have the option of <code>indoor</code> and the other should have the option of <code>outdoor</code>. Both should share the <code>name</code> attribute of <code>indoor-outdoor</code> to create a radio group."
      ],
      "tests": [
        {
          "text": "Your page should have two radio button elements.",
          "testString": "assert($('input[type=\"radio\"]').length > 1, 'Your page should have two radio button elements.');"
        },
        {
          "text": "Give your radio buttons the <code>name</code> attribute of <code>indoor-outdoor</code>.",
          "testString": "assert($('label > input[type=\"radio\"]').filter(\"[name='indoor-outdoor']\").length > 1, 'Give your radio buttons the <code>name</code> attribute of <code>indoor-outdoor</code>.');"
        },
        {
          "text": "Each of your two radio button elements should be nested in its own <code>label</code> element.",
          "testString": "assert($('label > input[type=\"radio\"]:only-child').length > 1, 'Each of your two radio button elements should be nested in its own <code>label</code> element.');"
        },
        {
          "text": "Make sure each of your <code>label</code> elements has a closing tag.",
          "testString": "assert((code.match(/<\\/label>/g) && code.match(/<label/g) && code.match(/<\\/label>/g).length === code.match(/<label/g).length), 'Make sure each of your <code>label</code> elements has a closing tag.');"
        },
        {
          "text": "One of your radio buttons should have the label <code>indoor</code>.",
          "testString": "assert($(\"label\").text().match(/indoor/gi), 'One of your radio buttons should have the label <code>indoor</code>.');"
        },
        {
          "text": "One of your radio buttons should have the label <code>outdoor</code>.",
          "testString": "assert($(\"label\").text().match(/outdoor/gi), 'One of your radio buttons should have the label <code>outdoor</code>.');"
        },
        {
          "text": "Each of your radio button elements should be added within the <code>form</code> tag.",
          "testString": "assert($(\"label\").parent().get(0).tagName.match('FORM'), 'Each of your radio button elements should be added within the <code>form</code> tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Erstelle ein Set von Radiobuttons",
          "description": [
            "Du kannst Optionsfelder, <code>radio buttons</code>, für Fragen verwenden, auf die der Nutzer nur eine Antwort geben soll.",
            "Radiobuttons sind lediglich ein weiterer Typ von <code>input</code> Elementen.",
            "Jeder deiner Radiobuttons sollte innerhalb eines eigenen <code>label</code> Elements liegen.",
            "Alle Radiobuttons die in einem Bezug zueinander stehen sollten das gleiche <code>name</code> Attribut teilen.",
            "Ein Beispiel eines Radiobuttons:",
            "<code>&#60;label&#62;&#60;input type=\"radio\" name=\"indoor-outdoor\"&#62; Indoor&#60;/label&#62;</code>",
            "<hr>",
            "Füge ein Paar Radiobuttons zu deinem Formular hinzu. Einer sollte die Option <code>indoor</code> und der andere die Option <code>outdoor</code> haben."
          ]
        },
        "es": {
          "title": "Crea un Conjunto de botones de radio",
          "description": [
            "Puedes usar <code>botones de radio</code> para las preguntas en las que deseas que el usuario sólo pueda dar una respuesta.",
            "Los botones de radio son un tipo del elemento <code>input</code>",
            "Cada uno de los botones de radio debe estar anidado dentro de su propio elemento <code>label</code>.",
            "Todos los botones de radio relacionados deben tener el mismo atributo <code>name</code>.",
            "He aquí un ejemplo de un botón de radio:",
            "<code>&#60;label&#62;&#60;input type=\"radio\" name=\"dentro-fuera\"&#62; Dentro&#60;/label&#62;</code>",
            "<hr>",
            "Agrega un par de botones de radio a tu formulario. Uno debe tener la opción de <code>indoor</code> y el otro debe tener la opción <code>outdoor</code>. "
          ]
        },
        "pt-br": {
          "title": "Crie um conjunto de botões de opção",
          "description": [
            "Você pode usar <code>botões de opção</code> (botões de rádio) para perguntas em que você quer dar opções ao usuário, mas quer que ele escolha apenas uma.",
            "Botões de opção são um tipo de <code>input</code>.",
            "Cada um dos botões de opção deve ser aninhado ao seu elemento <code>label</code>.",
            "Todos os botões de opção relacionados devem ter o mesmo atributo <code>name</code>.",
            "Aqui está um exemplo de um botão de opção:",
            "<code>&#60;label&#62;&#60;input type=\"radio\" name=\"indoor-outdoor\"&#62; Indoor&#60;/label&#62;</code>",
            "<hr>",
            "Adicione um par de botões de opção ao seu formulário. Um deles deve ser a opção <code>indoor</code> e o outro deve ser a opção <code>outdoor</code>. Ambos devem ter o atributo <code>name</code> de <code>indoor-outdoor</code>."
          ]
        },
        "ru": {
          "title": "Создайте набор радио-кнопок",
          "description": [
            "Вы можете использовать <code>радио кнопки</code> для вопросов, которые требуют выбора одного варианта ответа из множества.",
            "Радио-кнопки относятся к типу <code>input</code>",
            "Каждая из ваших радио-кнопок должна быть вложена внутрь своего собственного элемента <code>label</code>.",
            "Все относящиеся друг к другу, формирующие группу, радио-кнопки должны иметь один и тот же атрибут <code>name</code>.",
            "Вот пример радио-кнопки:",
            "<code>&#60;label&#62;&#60;input type=\"radio\" name=\"indoor-outdoor\"&#62; Indoor&#60;/label&#62;</code>",
            "<hr>",
            "Добавьте пару радио-кнопок к вашей форме. Одна должна соответствовать варианту <code>indoor</code>, а другая - <code>outdoor</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08835",
      "title": "Create a Set of Checkboxes",
      "description": [
        "Forms commonly use <code>checkboxes</code> for questions that may have more than one answer.",
        "Checkboxes are a type of <code>input</code>",
        "Each of your checkboxes can be nested within its own <code>label</code> element. By wrapping an <code>input</code> element inside of a <code>label</code> element it will automatically associate the checkbox input with the label element surrounding it.",
        "All related checkbox inputs should have the same <code>name</code> attribute.",
        "It is considered best practice to explicitly define the relationship between a checkbox <code>input</code> and its corresponding <code>label</code> by setting the <code>for</code> attribute on the <code>label</code> element to match the <code>id</code> attribute of the associated <code>input</code> element.",
        "Here's an example of a checkbox:",
        "<code>&#60;label for=\"loving\"&#62;&#60;input id=\"loving\" type=\"checkbox\" name=\"personality\"&#62; Loving&#60;/label&#62;</code>",
        "<hr>",
        "Add to your form a set of three checkboxes. Each checkbox should be nested within its own <code>label</code> element. All three should share the <code>name</code> attribute of <code>personality</code>."
      ],
      "tests": [
        {
          "text": "Your page should have three checkbox elements.",
          "testString": "assert($('input[type=\"checkbox\"]').length > 2, 'Your page should have three checkbox elements.');"
        },
        {
          "text": "Each of your three checkbox elements should be nested in its own <code>label</code> element.",
          "testString": "assert($('label > input[type=\"checkbox\"]:only-child').length > 2, 'Each of your three checkbox elements should be nested in its own <code>label</code> element.');"
        },
        {
          "text": "Make sure each of your <code>label</code> elements has a closing tag.",
          "testString": "assert(code.match(/<\\/label>/g) && code.match(/<label/g) && code.match(/<\\/label>/g).length === code.match(/<label/g).length, 'Make sure each of your <code>label</code> elements has a closing tag.');"
        },
        {
          "text": "Give your checkboxes the <code>name</code> attribute of <code>personality</code>.",
          "testString": "assert($('label > input[type=\"checkbox\"]').filter(\"[name='personality']\").length > 2, 'Give your checkboxes the <code>name</code> attribute of <code>personality</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Erstelle ein paar Checkboxen",
          "description": [
            "Formulare nutzen Kontrollkästchen, <code>checkboxes</code> meistens für Fragen, die mehrerer Antworten bedürfen.",
            "Checkboxen sind eine Art von <code>input</code> Elementen",
            "Jedes deiner Checkboxen sollte innerhalb eines eigenen <code>label</code> Elements liegen.",
            "Alle zusammengehörende Checkboxes sollten das gleiche <code>name</code> Attribut haben.",
            "Hier ist ein Beispiel für eine Checkbox:",
            "<code>&#60;label&#62;&#60;input type=\"checkbox\" name=\"personality\"&#62; Loving&#60;/label&#62;</code>",
            "<hr>",
            "Füge deinem Formular drei Checkboxen hinzu. Jedes dieser Elemente sollte innerhalb seines eigenen <code>label</code> Elements liegen. Alle sollten das gleiche <code>name</code> Attribut <code>personality</code> teilen."
          ]
        },
        "es": {
          "title": "Crea un conjunto de casillas de verificación",
          "description": [
            "Los formularios suelen usar <code>casillas de verificación</code> para preguntas que pueden tener más de una respuesta.",
            "Las casillas de verificación son un tipo del elemento <code>input</code>",
            "Cada una de tus casillas de verificación debe ser anidada dentro de su propio elemento <code>label</code>.",
            "Todas las entradas de casillas de verificación relacionadas deben tener el mismo atributo <code>name</code>.",
            "He aquí un ejemplo de una casilla de verificación:",
            "<code>&#60;label&#62;&#60;input type=\"checkbox\" name=\"personalidad\"&#62; Cariñoso&#60;/label&#62;</code>",
            "<hr>",
            "Añade a tu formulario un conjunto de tres casillas de verificación. Cada casilla de verificación debe estar anidada dentro de su propio elemento <code>label</code>. Las tres deben tener <code>personality</code> como su atributo <code>name</code>."
          ]
        },
        "pt-br": {
          "title": "Crie um conjunto de caixas de seleção",
          "description": [
            "Formulários geralmente usam <code>caixas de seleção</code> (checkboxes) para perguntas que podem ter mais de uma resposta.",
            "Caixas de seleção são um tipo de <code>input</code>.",
            "Cada uma das suas caixas de seleção deve estar aninhada a seu próprio elemento <code>label</code>.",
            "Todas as caixas de seleção relacionadas devem ter o mesmo atributo <code>name</code>.",
            "Aqui está um exemplo de uma caixa de seleção: ",
            "<code>&#60;label&#62;&#60;input type=\"checkbox\" name=\"personality\"&#62; Amável&#60;/label&#62;</code>",
            "<hr>",
            "Adicione ao seu formulário um conjunto de três caixas de seleção. Cada caixa deve estar aninhada a seu próprio elemento <code>label</code>. Todas elas devem ter o mesmo atributo <code>name</code> de <code>personality</code>."
          ]
        },
        "ru": {
          "title": "Создайте набор флаговых кнопок",
          "description": [
            "Обычно формы используют <code>флаги (флаговые кнопки)</code> для вопросов, к которым может относиться несколько вариантов ответов.",
            "Флаги относятся к типу <code>input</code>",
            "Каждый из ваших флагов должен быть вложен в собственный элемент <code>label</code>.",
            "Все относящиеся друг к другу флаги должны иметь одинаковый атрибут <code>name</code>.",
            "Вот пример флаговой кнопки:",
            "<code>&#60;label&#62;&#60;input type=\"checkbox\" name=\"personality\"&#62; Loving&#60;/label&#62;</code>",
            "<hr>",
            "Добавьте набор из трёх флаговых кнопок к вашей форме. Каждый флаг должен быть вложен внутрь собственного элемента <code>label</code>. Все три флага должны иметь одинаковый атрибут <code>name</code>, значение которго равно <code>personality</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedd08835",
      "title": "Check Radio Buttons and Checkboxes by Default",
      "description": [
        "You can set a checkbox or radio button to be checked by default using the <code>checked</code> attribute.",
        "To do this, just add the word \"checked\" to the inside of an input element. For example:",
        "<code>&#60;input type=\"radio\" name=\"test-name\" checked&#62;</code>",
        "<hr>",
        "Set the first of your <code>radio buttons</code> and the first of your <code>checkboxes</code> to both be checked by default."
      ],
      "tests": [
        {
          "text": "Your first radio button on your form should be checked by default.",
          "testString": "assert($('input[type=\"radio\"]').prop(\"checked\"), 'Your first radio button on your form should be checked by default.');"
        },
        {
          "text": "Your first checkbox on your form should be checked by default.",
          "testString": "assert($('input[type=\"checkbox\"]').prop(\"checked\"), 'Your first checkbox on your form should be checked by default.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Standardmäßig ausgewählte Radiobuttons und Checkboxen",
          "description": [
            "Du kannst Checkboxen und Radiobuttons standardmäßig markieren, indem du das <code>checked</code> Attribut verwendest.",
            "Das kannst du erreichen, indem du das Word \"checked\" innerhalb des Inputelements einfügst. Zum Beispiel so:",
            "<code>&#60;input type=\"radio\" name=\"test-name\" checked&#62;</code>",
            "<hr>",
            "Stelle sicher, dass jeweils dein erster Radiobutton und deine erste Checkbox standardmäßig markiert sind."
          ]
        },
        "es": {
          "title": "Marca botones de radio y casillas de verificación por omisión",
          "description": [
            "Puedes marcar por omisión una casilla de verificación o un botón de radio usando el atributo <code>checked</code>.",
            "Para ello, sólo tienes que añadir la palabra \"checked\" en el interior de un elemento <code>input</code>. Por ejemplo:",
            "<code>&#60;input type=\"radio\" name=\"nombre-de-prueba\" checked&#62;</code>",
            "<hr>",
            "Establece como marcados por omisión el primero de tus <code>botones de radio</code> y la primera <code>casilla de verificación</code>."
          ]
        },
        "pt-br": {
          "title": "Faça botões de opção e caixas de seleção estarem marcados por padrão",
          "description": [
            "Você pode fazer uma caixa de seleção ou botão de opção estar marcado por padrão usando o atributo <code>checked</code>.",
            "Para fazer isso, apenas insira a palavra \"checked\" em um elemento <code>input</code>. Por exemplo:",
            "<code>&#60;input type=\"radio\" name=\"test-name\" checked&#62;</code>",
            "<hr>",
            "Faça o primeiro dos seus <code>botões de opção</code> e a primeira das suas <code>caixas de seleção</code> estarem ambos marcados por padrão."
          ]
        },
        "ru": {
          "title": "Отметьте радио-кнопки и флаговые кнопки по-умолчанию",
          "description": [
            "Вы можете установить флаг или радио-кнопку отмеченной по-умолчанию с помощью атрибута <code>checked</code>.",
            "Для этого добавьте слово \"checked\" в качестве атрибута элемента input. Например:",
            "<code>&#60;input type=\"radio\" name=\"test-name\" checked&#62;</code>",
            "<hr>",
            "Установите первую <code>радио-кнопку</code> и первый <code>флаг</code> из наборов отмеченными по-умолчанию."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aede08835",
      "title": "Nest Many Elements within a Single div Element",
      "description": [
        "The <code>div</code> element, also known as a division element, is a general purpose container for other elements.",
        "The <code>div</code> element is probably the most commonly used HTML element of all.",
        "Just like any other non-self-closing element, you can open a <code>div</code> element with <code>&#60;div&#62;</code> and close it on another line with <code>&#60;/div&#62;</code>.",
        "<hr>",
        "Nest your \"Things cats love\" and \"Things cats hate\" lists all within a single <code>div</code> element.",
        "Hint: Try putting your opening <code>div</code> tag above your \"Things cats love\" <code>p</code> element and your closing <code>div</code> tag after your closing <code>ol</code> tag so that both of your lists are within one <code>div</code>."
      ],
      "tests": [
        {
          "text": "Nest your <code>p</code> elements inside your <code>div</code> element.",
          "testString": "assert($(\"div\").children(\"p\").length > 1, 'Nest your <code>p</code> elements inside your <code>div</code> element.');"
        },
        {
          "text": "Nest your <code>ul</code> element inside your <code>div</code> element.",
          "testString": "assert($(\"div\").children(\"ul\").length > 0, 'Nest your <code>ul</code> element inside your <code>div</code> element.');"
        },
        {
          "text": "Nest your <code>ol</code> element inside your <code>div</code> element.",
          "testString": "assert($(\"div\").children(\"ol\").length > 0, 'Nest your <code>ol</code> element inside your <code>div</code> element.');"
        },
        {
          "text": "Make sure your <code>div</code> element has a closing tag.",
          "testString": "assert(code.match(/<\\/div>/g) && code.match(/<\\/div>/g).length === code.match(/<div>/g).length, 'Make sure your <code>div</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Umschließe viele Elemente mit einem einzigen div Element",
          "description": [
            "Das <code>div</code> Element oder \"Division\" ist ein allgemeiner Container für andere Elemente.",
            "Das <code>div</code> Element ist wahrscheinlich das am häufigsten verwendete HTML Element.",
            "Wie jedes andere Element – das sich nicht selbst schließt –  kannst du ein <code>div</code> Element mit <code>&#60;div&#62;</code> öffnen und mit <code>&#60;/div&#62;</code> wieder schließen.",
            "<hr>",
            "Versuche dein öffnendes <code>div</code> Element überhalb des <code>p</code> Elements von  \"Things cats love\" und das schließende <code>div</code> unterhalb des schließenden <code>ol</code> Elements zu platzieren. Damit befinden sich beide Listen innerhalb eines <code>div</code>",
            "Umschließe deine \"Things cats love\" und \"Things cats hate\" Listen mit einem einzelnen <code>div</code> Element."
          ]
        },
        "es": {
          "title": "Anida muchos elementos dentro de una sólo elemento div",
          "description": [
            "El elemento <code>div</code>, también conocido como un elemento de división, es un contenedor de propósito general para otros elementos.",
            "El elemento <code>div</code> es probablemente el elemento HTML más utilizado.",
            "Al igual que cualquier otro elemento sin cierre automático, puedes abrir una etiqueta <code>div</code> con <code>&#60;div&#62;</code> y cerrarla en otra línea con <code>&#60;/div&#62;</code> .",
            "<hr>",
            "Trata de poner tu etiqueta de apertura <code>div</code> por encima de elemento <code>p</code> \"Things cat love\", y tu etiqueta de cierre de <code>div</code> después de tu etiqueta de cierre de <code>ol</code>, para que cada una de tus listas estén dentro de un <code>div</code>. ",
            "Anida tus listas \"Things cats love\" y \"Things cats hate\" dentro de un solo elemento <code>div</code>."
          ]
        },
        "pt-br": {
          "title": "Aninhe diversos elementos a um único elemento div",
          "description": [
            "O elemento <code>div</code>, também conhecido como elemento de divisão, é um contâiner de propósito geral para outros elementos.",
            "O elemento <code>div</code> provavelmente é o elemento HTML mais usado de todos.",
            "Da mesma forma que qualquer outro elemento que não tem auto-fechamento, você pode abrir um elemento <code>div</code> com <code>&#60;div&#62;</code> e fechá-lo em outra linha com <code>&#60;/div&#62;</code>.",
            "<hr>",
            "Tente colocar sua tag <code>div</code> de abertura acima do seu elemento <code>p</code> \"Things cats love\" e sua tag <code>div</code> de fechamento depois da sua tag <code>ol</code> de fechamento, de forma que ambas as suas listas estejam dentro da mesma <code>div</code>.",
            "Aninhe as listas \"Things cats love\" e \"Things cats hate\" dentro do mesmo elemento <code>div</code>."
          ]
        },
        "ru": {
          "title": "Вложите множество элементов внутрь одного элемента div",
          "description": [
            "Элемент <code>div</code>, известный как элемент раздела, является контейнером общего назначения для других элементов.",
            "Элемент <code>div</code> возможно наиболее широко используемый HTML элемент из всех возможных.",
            "Как и с любым другим несамозакрывающимся элементом, вы можете открыть элемент <code>div</code> меткой <code>&#60;div&#62;</code> и закрыть на следующей строке меткой <code>&#60;/div&#62;</code>.",
            "<hr>",
            "Попробуйте разместить открывающую метку <code>div</code> над вашим элементом <code>p</code> с текстом \"Things cats love\", а закрывающую метку <code>div</code> после закрытия элемента <code>ol</code>, таким образом оба ваших списка оказываются внутри одного элемента <code>div</code>.",
            "Вложите ваши списки \"Things cats love\" и \"Things cats hate\" внутрь одного элемента <code>div</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78aa367417b2b2512aed",
      "title": "Declare the Doctype of an HTML Document",
      "description": [
        "The challenges so far have covered specific HTML elements and their uses. However, there are a few elements that give overall structure to your page, and should be included in every HTML document.",
        "At the top of your document, you need to tell the browser which version of HTML your page is using. HTML is an evolving language, and is updated regularly. Most major browsers support the latest specification, which is HTML5. However, older web pages may use previous versions of the language.",
        "You tell the browser this information by adding the <code>&lt;!DOCTYPE ...&gt;</code> tag on the first line, where the \"<code>...</code>\" part is the version of HTML. For HTML5, you use <code>&lt;!DOCTYPE html&gt;</code>.",
        "The <code>!</code> and uppercase <code>DOCTYPE</code> is important, especially for older browsers. The <code>html</code> is not case sensitive.",
        "Next, the rest of your HTML code needs to be wrapped in <code>html</code> tags. The opening <code>&lt;html&gt;</code> goes directly below the <code>&lt;!DOCTYPE html&gt;</code> line, and the closing <code>&lt;/html&gt;</code> goes at the end of the page.",
        "Here's an example of the page structure:",
        "<blockquote>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&nbsp;&nbsp;&lt;!-- Your HTML code goes here --&gt;<br>&lt;/html&gt;</blockquote>",
        "<hr>",
        "Add a <code>DOCTYPE</code> tag for HTML5 to the top of the blank HTML document in the code editor. Under it, add opening and closing <code>html</code> tags, which wrap around an <code>h1</code> element. The heading can include any text."
      ],
      "tests": [
        {
          "text": "Your code should include a <code>&lt;!DOCTYPE html&gt;</code> tag.",
          "testString": "assert(code.match(/<!DOCTYPE\\s+?html\\s*?>/gi), 'Your code should include a <code>&lt;!DOCTYPE html&gt;</code> tag.');"
        },
        {
          "text": "There should be one <code>html</code> element.",
          "testString": "assert($('html').length == 1, 'There should be one <code>html</code> element.');"
        },
        {
          "text": "The <code>html</code> tags should wrap around one <code>h1</code> element.",
          "testString": "assert(code.match(/<html>\\s*?<h1>\\s*?.*?\\s*?<\\/h1>\\s*?<\\/html>/gi), 'The <code>html</code> tags should wrap around one <code>h1</code> element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "pt-br": {
          "title": "Declare o DOCTYPE de um documento HTML",
          "description": [
            "Os desafios até agora trataram de tags HTML específicas e seus usos. No entanto, há alguns elementos que determinam a estrutura geral da sua página e devem ser incluídos em todos os documentos HTML.",
            "No começo do seu documento, você precisa dizer ao navegador qual versão do HTML sua página está usando. O HTML é uma linguagem em evolução e é atualizado regularmente. A maioria dos navegadores mais populares suporta a última especificação, que é o HTML5. No entanto, páginas mais antigas podem estar usando versões anteriores da linguagem.",
            "Você pode dar ao navegador essa informação adicionando a tag <code>&lt;!DOCTYPE ...&gt;</code> na primeira linha, onde a parte \"<code>...</code>\" é a versão do HTML. Para o HTML5, o código é <code>&lt;!DOCTYPE html&gt;</code>.",
            "O <code>!</code> e o <code>DOCTYPE</code> todo em maiúsculas são importantes, especialmente para navegadores mais velhos. O <code>html</code> não é sensível a maiúsculas e minúsculas.",
            "Em seguida, o resto do seu código HTML deve estar delimitado por tags <code>html</code>. A tag <code>&lt;html&gt;</code> vai diretamente abaixo da linha <code>&lt;!DOCTYPE html&gt;</code>, e a tag <code>&lt;/html&gt;</code> vai no final da página.",
            "Aqui está um exemplo da estrutura de uma página:",
            "<blockquote>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&nbsp;&nbsp;&lt;!-- Seu código HTML vai aqui --&gt;<br>&lt;/html&gt;</blockquote>",
            "<hr>",
            "Adicione uma tag <code>DOCTYPE</code> para HTML5 no topo do documento HTML em branco no editor de texto. Abaixo dela, adicione tags <code>html</code> de abertura e fechamento, ao redor de um elemento <code>h1</code>. O texto do <code>h1</code> pode ser qualquer um."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78aa367417b2b2512aec",
      "title": "Define the Head and Body of an HTML Document",
      "description": [
        "You can add another level of organization in your HTML document within the <code>html</code> tags with the <code>head</code> and <code>body</code> elements. Any markup with information about your page would go into the <code>head</code> tag. Then any markup with the content of the page (what displays for a user) would go into the <code>body</code> tag.",
        "Metadata elements, such as <code>link</code>, <code>meta</code>, <code>title</code>, and <code>style</code>, typically go inside the <code>head</code> element.",
        "Here's an example of a page's layout:",
        "<blockquote>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&nbsp;&nbsp;&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!-- metadata elements --&gt;<br>&nbsp;&nbsp;&lt;/head&gt;<br>&nbsp;&nbsp;&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!-- page contents --&gt;<br>&nbsp;&nbsp;&lt;/body&gt;<br>&lt;/html&gt;</blockquote>",
        "<hr>",
        "Edit the markup so there's a <code>head</code> and a <code>body</code>. The <code>head</code> element should only include the <code>title</code>, and the <code>body</code> element should only include the <code>h1</code> and <code>p</code>."
      ],
      "tests": [
        {
          "text": "There should be only one <code>head</code> element on the page.",
          "testString": "assert($('head').length == 1, 'There should be only one <code>head</code> element on the page.');"
        },
        {
          "text": "There should be only one <code>body</code> element on the page.",
          "testString": "assert($('body').length == 1, 'There should be only one <code>body</code> element on the page.');"
        },
        {
          "text": "The <code>head</code> element should be a child of the <code>html</code> element.",
          "testString": "assert($('html').children('head').length == 1, 'The <code>head</code> element should be a child of the <code>html</code> element.');"
        },
        {
          "text": "The <code>body</code> element should be a child of the <code>html</code> element.",
          "testString": "assert($('html').children('body').length == 1, 'The <code>body</code> element should be a child of the <code>html</code> element.');"
        },
        {
          "text": "The <code>head</code> element should wrap around the <code>title</code> element.",
          "testString": "assert(code.match(/<head>\\s*?<title>\\s*?.*?\\s*?<\\/title>\\s*?<\\/head>/gi), 'The <code>head</code> element should wrap around the <code>title</code> element.');"
        },
        {
          "text": "The <code>body</code> element should wrap around both the <code>h1</code> and <code>p</code> elements.",
          "testString": "assert($('body').children('h1').length == 1 && $('body').children('p').length == 1, 'The <code>body</code> element should wrap around both the <code>h1</code> and <code>p</code> elements.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "pt-br": {
          "title": "Defina cabeça e corpo de um documento HTML",
          "description": [
            "Você pode adicionar mais um nível de organização ao seu documento HTML dentro da tag <code>html</code> com os elementos <code>head</code> (cabeça) e <code>body</code> (corpo). Qualquer código com informações sobre a sua página deve estar dentro da tag <code>head</code>. Assim, qualquer código com o conteúdo da sua página (o que aparece para o usuário) deve estar dentro da tag <code>body</code>.",
            "Elementos de metadados, como <code>link</code>, <code>meta</code>, <code>title</code> e <code>style</code>, tipicamente aparecem dentro do elemento <code>head</code>.",
            "Aqui está um exemplo da estrutura de uma página:",
            "<blockquote>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&nbsp;&nbsp;&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!-- elementos de metadados --&gt;<br>&nbsp;&nbsp;&lt;/head&gt;<br>&nbsp;&nbsp;&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!-- conteúdo da página --&gt;<br>&nbsp;&nbsp;&lt;/body&gt;<br>&lt;/html&gt;</blockquote>",
            "<hr>",
            "Edite o código para que tenha uma <code>head</code> e um <code>body</code>. O elemento <code>head</code> deve incluir apenas o <code>title</code>, e o elemento <code>body</code> deve conter apenas o <code>h1</code> e o <code>p</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<!DOCTYPE html>",
            "<html>",
            "  <title>The best page ever</title>",
            "  ",
            "  <h1>The best page ever</h1>",
            "  <p>Cat ipsum dolor sit amet, jump launch to pounce upon little yarn mouse, bare fangs at toy run hide in litter box until treats are fed. Go into a room to decide you didn't want to be in there anyway. I like big cats and i can not lie kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Meow i could pee on this if i had the energy for slap owner's face at 5am until human fills food dish yet scamper. Knock dish off table head butt cant eat out of my own dish scratch the furniture. Make meme, make cute face. Sleep in the bathroom sink chase laser but pee in the shoe. Paw at your fat belly licks your face and eat grass, throw it back up kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>",
            "  ",
            "</html>  "
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08803",
      "title": "Change the Color of Text",
      "description": [
        "Now let's change the color of some of our text.",
        "We can do this by changing the <code>style</code> of your <code>h2</code> element.",
        "The property that is responsible for the color of an element's text is the <code>color</code> style property.",
        "Here's how you would set your <code>h2</code> element's text color to blue:",
        "<code>&#60;h2 style=\"color: blue;\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
        "Note that it is a good practice to end inline <code>style</code> declarations with a <code>;</code> .",
        "<hr>",
        "Change your <code>h2</code> element's style so that its text color is red."
      ],
      "tests": [
        {
          "text": "Your <code>h2</code> element should be red.",
          "testString": "assert($(\"h2\").css(\"color\") === \"rgb(255, 0, 0)\", 'Your <code>h2</code> element should be red.');"
        },
        {
          "text": "Your <code>style</code> declaration should end with a <code>;</code> .",
          "testString": "assert(code.match(/<h2\\s+style\\s*=\\s*(\\'|\")\\s*color\\s*:\\s*(?:rgb\\(\\s*255\\s*,\\s*0\\s*,\\s*0\\s*\\)|rgb\\(\\s*100%\\s*,\\s*0%\\s*,\\s*0%\\s*\\)|red|#ff0000|#f00|hsl\\(\\s*0\\s*,\\s*100%\\s*,\\s*50%\\s*\\))\\s*\\;(\\'|\")>\\s*CatPhotoApp\\s*<\\/h2>/),' Your <code>style</code> declaration should end with a <code>;</code> .');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "Lass uns jetzt die Farbe von unserem Text ändern.",
            "Wir können das bewerkstelligen, indem wir den <code>style</code> des <code>h2</code> Elements ändern.",
            "Der Style, der zuständig für die Textfarbe eines Elements ist, ist der \"color\" Style.",
            "So könntest du die Textfarbe des <code>h2</code> Elements in Blau ändern:",
            "<code>&#60;h2 style=\"color: blue\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
            "<hr>",
            "Ändere den Style des <code>h2</code> Elements, damit die Textfarbe rot (\"red\") ist."
          ]
        },
        "fr": {
          "title": "Changer la couleur du texte",
          "description": [
            "Changeons maintenant la couleur de quelques-uns de nos textes.",
            "Nous pouvons le faire en changeant le <code>style</code> de votre élément <code>h2</code>.",
            "Le style responsable de la couleur de texte d'un élément est \"color\".",
            "Voici comment changer en bleu la couleur du texte de votre élément <code>h2</code> :",
            "<code>&#60;h2 style=\"color: blue\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
            "<hr>",
            "Changez le style de votre élément <code>h2</code> pour que son texte soit de couleur rouge."
          ]
        },
        "pt-br": {
          "title": "Substitua a Cor do Texto",
          "description": [
            "Agora vamos substituir a cor de parte do nosso texto.",
            "Podemos fazer isso mudando o <code>style</code> do elemento <code>h2</code>.",
            "A propriedade de estilo responsável pela cor do texto se chama \"color\".",
            "Você pode mudar a cor do texto de seu elemento <code>h2</code> para azul assim:",
            "<code>&#60;h2 style=\"color: blue\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
            "<hr>",
            "Mude o estilo do elemento <code>h2</code> para que seu texto fique com a cor vermelha."
          ]
        },
        "ru": {
          "title": "Измените цвет текста",
          "description": [
            "Теперь давайте изменим цвет части нашего текста.",
            "Мы можем сделать это изменив <code>style</code> нашего элемента <code>h2</code>.",
            "Параметр стиля, отвечающий за цвет текста внутри элемента - \"color\".",
            "Вот как вы могли бы установить цвет текста вашего элемента <code>h2</code> синим:",
            "<code>&#60;h2 style=\"color: blue\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
            "<hr>",
            "Измените стиль вашего элемента <code>h2</code> таким образом, чтобы текст элемента стал красным."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div>",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08805",
      "title": "Use CSS Selectors to Style Elements",
      "description": [
        "With CSS, there are hundreds of CSS <code>properties</code> that you can use to change the way an element looks on your page.",
        "When you entered <code>&#60;h2 style=\"color: red\"&#62;CatPhotoApp&#60;/h2&#62;</code>, you were styling that individual <code>h2</code> element with <code>inline CSS</code>, which stands for <code>Cascading Style Sheets</code>.",
        "That's one way to specify the style of an element, but there's a better way to apply <code>CSS</code>.",
        "At the top of your code, create a <code>style</code> block like this:",
        "<blockquote>&#60;style&#62;<br>&#60;/style&#62;</blockquote>",
        "Inside that style block, you can create a <code>CSS selector</code> for all <code>h2</code> elements. For example, if you wanted all <code>h2</code> elements to be red, you would add a style rule that looks like this:",
        "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;h2 {color: red;}<br>&#60;/style&#62;</blockquote>",
        "Note that it's important to have both opening and closing curly braces (<code>{</code> and <code>}</code>) around each element's style rule(s). You also need to make sure that your element's style definition is between the opening and closing style tags. Finally, be sure to add a semicolon to the end of each of your element's style rules.",
        "<hr>",
        "Delete your <code>h2</code> element's style attribute, and instead create a CSS <code>style</code> block. Add the necessary CSS to turn all <code>h2</code> elements blue."
      ],
      "tests": [
        {
          "text": "Remove the style attribute from your <code>h2</code> element.",
          "testString": "assert(!$(\"h2\").attr(\"style\"), 'Remove the style attribute from your <code>h2</code> element.');"
        },
        {
          "text": "Create a <code>style</code> element.",
          "testString": "assert($(\"style\") && $(\"style\").length >= 1, 'Create a <code>style</code> element.');"
        },
        {
          "text": "Your <code>h2</code> element should be blue.",
          "testString": "assert($(\"h2\").css(\"color\") === \"rgb(0, 0, 255)\", 'Your <code>h2</code> element should be blue.');"
        },
        {
          "text": "Ensure that your stylesheet <code>h2</code> declaration is valid with a semicolon and closing brace.",
          "testString": "assert(code.match(/h2\\s*\\{\\s*color\\s*:.*;\\s*\\}/g), 'Ensure that your stylesheet <code>h2</code> declaration is valid with a semicolon and closing brace.');"
        },
        {
          "text": "Make sure all your <code>style</code> elements are valid and have a closing tag.",
          "testString": "assert(code.match(/<\\/style>/g) && code.match(/<\\/style>/g).length === (code.match(/<style((\\s)*((type|media|scoped|title|disabled)=\"[^\"]*\")?(\\s)*)*>/g) || []).length, 'Make sure all your <code>style</code> elements are valid and have a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "CSS liefert dir hunderte Attribute oder <code>properties</code> um HTML Elemente auf deiner Seite zu gestalten.",
            "Mit <code>&#60;h2 style=\"color: red\"&#62;CatPhotoApp&#60;/h2&#62;</code> hast du dem einzelnen <code>h2</code> Element einen sogenannten <code>inline style</code> gegeben.",
            "Das ist ein Weg, um Elemente zu gestalten. Es ist aber besser <code>CSS</code>, was für <code>Cascading Style Sheets</code> steht, zu benutzen.",
            "Erstelle über deinem Code ein <code>style</code> Element:",
            "<blockquote>&#60;style&#62;<br>&#60;/style&#62;</blockquote>",
            "Innerhalb des Style Elements kannst du einen <code>CSS selector</code> für alle <code>h2</code> Elemente erstellen. Wenn du zum Beispiel alle <code>h2</code> Elemente rot färben willst, schreibst du:",
            "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;h2 {color: red;}<br>&#60;/style&#62;</blockquote>",
            "Beachte, dass du öffnende und schließende geschwungene Klammern (<code>{</code> und <code>}</code>) um jeden Style setzen musst. Außerdem musst du sichergehen, dass deine Styles innerhalb dieser Klammern stehen. Zum Schluss benötigst du am Ende jedes Styles ein Semikolon.",
            "<hr>",
            "Lösche das Style Attribute deines <code>h2</code> Elements und erstelle stattdessen ein CSS <code>style</code> Element. Füge das notwendige CSS hinzu, um alle <code>h2</code> Elemente Blau zu färben."
          ]
        },
        "fr": {
          "title": "Utiliser les sélecteurs CSS pour styliser des éléments",
          "description": [
            "Avec CSS, il y a des centaines de <code>propriétés</code> que vous pouvez utliser pour changer l'apparence d'un élément dans votre page.",
            "Quand vous avez entré <code>&#60;h2 style=\"color: red\"&#62;CatPhotoApp&#60;/h2&#62;</code>, vous donniez à cet élément <code>h2</code> uniquement, un style <code>inline</code>.",
            "C'est une des façons d'ajouter un style à un élément, mais une meilleure approche est d'utiliser <code>CSS</code>, acronyme de <code>Cascading Style Sheets</code>.",
            "Au sommet de votre code, créez un élément <code>style</code> comme ceci :",
            "<blockquote>&#60;style&#62;<br>&#60;/style&#62;</blockquote>",
            "À l'intérieur de cet élément style, vous pouvez créer des <code>sélecteurs CSS</code> pour tous les éléments <code>h2</code>. Par exemple, si vous voulez que tous les éléments <code>h2</code> soient en rouge, votre élément style ressemblerait à ceci :",
            "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;h2 {color: red;}<br>&#60;/style&#62;</blockquote>",
            "Prenez note qu'il est important d'avoir les accolades ouvrantes et fermantes (<code>{</code> and <code>}</code>) autour de chaque élément de style. Vous devez aussi vous assurer que vos styles se retrouvent entre une balise style ouvrante et fermante. Finalement, assurez-vous d'ajouter un point-virgule â la fin de chacun des styles d'éléments.",
            "<hr>",
            "Supprimez les attributs de styles de votre élément <code>h2</code> et créez plutôt un élément de <code>style</code> CSS. Ajoutez le CSS nécessaire pour rendre tous vos éléments <code>h2</code> de couleur bleu."
          ]
        },
        "pt-br": {
          "title": "Use Seletores CSS para Estilizar Elementos",
          "description": [
            "Com o CSS, existem centenas de <code>propriedades</code> que você pode utilizar para modificar a forma de como um elemento pode ser visto em uma página da internet.",
            "Quando você usou o <code>&#60;h2 style=\"color: red\"&#62;CatPhotoApp&#60;h2&#62;</code>, você deu ao elemento <code>h2</code> um <code>estilo inline</code>.",
            "Essa é uma forma de adicionar estilos a um elemento, mas o jeito recomendado para isso é utilizar <code>Folhas de Estilo em Cascata (Cascading Style Sheets, CSS)</code>.",
            "Acima de seu código, crie um elemento <code>style</code> como esse: <code>&#60;style&#62;&#60;/style&#62;</code>",
            "Dentro do elemento style, é possível criar um <code>seletor CSS</code> para todos os elementos <code>h2</code>. Por exemplo, se você quiser que todos os elementos <code>h2</code> tenham a cor vermelha, seu elemento style será assim:",
            "<code>&#60;style&#62;</code>",
            "&nbsp;&nbsp;<code>h2 {color: red;}</code>",
            "<code>&#60;/style&#62;</code>",
            "Observe que é importante utilizar as chaves de abertura e de fechamento (<code>{</code> e <code>}</code>) ao redor do estilo de cada elemento. Também é necessário que o estilo de seu elemento esteja entre as tags de abertura e fechamento. Por fim, não se esqueça de adicionar o ponto-e-vírgula no final de cada um dos estilos de seu elemento.",
            "<hr>",
            "Apague o atributo <code>style</code> de seu elemento <code>h2</code> e então crie um elemento <code>style</code> CSS. Adicione o CSS necessário para fazer com que todos os elementos <code>h2</code> tenham a cor azul."
          ]
        },
        "ru": {
          "title": "Используйте CSS-селекторы для стилизации элементов",
          "description": [
            "В CSS существуют сотни CSS-<code>свойств</code>, которые вы можете использовать для изменения внешнего вида элементов вашей страницы.",
            "Когда вы вводите <code>&#60;h2 style=\"color: red\"&#62;CatPhotoApp&#60;/h2&#62;</code>, вы присваиваете определённому <code>h2</code> элементу <code>встроенный стиль</code>.",
            "Это один из способов добавления стиля к элементу, но лучший способ - использование <code>CSS</code>, который является сокращением от <code>Cascading Style Sheets (Каскадные таблицы стилей)</code>.",
            "Вверху вашего кода создайте элемент <code>style</code> следующим образом:",
            "<blockquote>&#60;style&#62;<br>&#60;/style&#62;</blockquote>",
            "Внутри этого элемента <code>style</code> вы можете создать <code>CSS-селектор</code> для всех элементов <code>h2</code> в документе. Например, если бы вы хотели, чтобы все элементы <code>h2</code> были красными, ваш элемент <code>style</code> выглядел бы следующим образом:",
            "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;h2 {color: red;}<br>&#60;/style&#62;</blockquote>",
            "Обратите внимание, что важно наличие открывающих и закрывающих фигурных скобок (<code>{</code> и <code>}</code>) вокруг стиля каждого элемента. Также вам необходимо убедиться в том, что стиль элемента присвоен внутри элемента <code>style</code>. В завершении, убедитесь, что строка объявления каждого элемента стиля должна заканчиваться точкой с запятой.",
            "<hr>",
            "Удалите атрибут стиль вашего элемента <code>h2</code> и взамен создайте CSS-элемент <code>style</code>. Добавьте необходимый CSS, чтобы все элементы <code>h2</code> стали синими."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2 style=\"color: red\">CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div>",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aecf08806",
      "title": "Use a CSS Class to Style an Element",
      "description": [
        "Classes are reusable styles that can be added to HTML elements.",
        "Here's an example CSS class declaration:",
        "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.blue-text {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: blue;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
        "You can see that we've created a CSS class called <code>blue-text</code> within the <code>&#60;style&#62;</code> tag.",
        "You can apply a class to an HTML element like this:",
        "<code>&#60;h2 class=\"blue-text\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
        "Note that in your CSS <code>style</code> element, class names start with a period. In your HTML elements' class attribute, the class name does not include the period.",
        "<hr>",
        "Inside your <code>style</code> element, change the <code>h2</code> selector to <code>.red-text</code> and update the color's value from <code>blue</code> to <code>red</code>.",
        "Give your <code>h2</code> element the <code>class</code> attribute with a value of <code>'red-text'</code>."
      ],
      "tests": [
        {
          "text": "Your <code>h2</code> element should have the class <code>red-text</code>.",
          "testString": "assert($(\"h2\").hasClass(\"red-text\"), 'Your <code>h2</code> element should have the class <code>red-text</code>.');"
        },
        {
          "text": "Do not use inline style declarations like <code>style=\"color&#58; red\"</code> in your <code>h2</code> element.",
          "testString": "assert($(\"h2\").attr(\"style\") === undefined, 'Do not use inline style declarations like <code>style=\"color&#58; red\"</code> in your <code>h2</code> element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "Klassen sind wiederverwendbare Styles, die HTML Elementen zugewiesen werden können.",
            "So sieht eine CSS Klasse aus:",
            "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.blue-text {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: blue;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
            "Du siehst, dass wir die CSS Klasse <code>blue-text</code> innerhalb von <code>&#60;style&#62;</code> geschrieben haben.",
            "Du kannst eine Klasse folgendermaßen einem HTML Element beifügen:",
            "<code>&#60;h2 class=\"blue-text\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
            "Beachte, dass Klassen in deinem CSS <code>style</code> Element mit einem Punkt beginnen sollten. In deinen Klassen-Deklarationen von HTML Elementen sollten diese nicht mit einem Punkt beginnen.",
            "<hr>",
            "Ändere deinen <code>h2</code> Selektor innerhalb deines <code>style</code> Elements zu <code>.red-text</code> und ändere den Farbwert von <code>blue</code> zu <code>red</code>.",
            "Gib deinem <code>h2</code> Element das <code>class</code> Attribut mit dem Wert <code>'red-text'</code>."
          ]
        },
        "fr": {
          "title": "Utiliser les classes CSS pour styler un élément",
          "description": [
            "Les classes sont des styles réutilisables qui peuvent être ajoutées à des éléments HTML.",
            "Voici un exemple de déclaration de classe CSS :",
            "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.blue-text {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: blue;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
            "Remarquez que nous avons créer une classe CSS nommée <code>blue-text</code> à l'intérieur de notre balise <code>&#60;style&#62;</code>.",
            "Vous pouvez appliquer une classe à un élément HTML comme ceci :",
            "<code>&#60;h2 class=\"blue-text\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
            "Prenez note que que dans votre élément CSS <code>style</code>, les classes doivent débuter par un point. Dans les déclarations de classes à l'intérieur des éléments HTML, on doit omettre le point du début.",
            "<hr>",
            "À l'intérieur de votre élément <code>style</code>, changez le sélecteur du <code>h2</code> pour <code>.red-text</code> et changez la couleur, passant de <code>blue</code> à <code>red</code>.",
            "Donnez à votre élément <code>h2</code> l'attribut de classe la valeur de <code>red-text</code>."
          ]
        },
        "pt-br": {
          "title": "Use Classes CSS para Estilizar Elementos",
          "description": [
            "As classes são estilos reutilizáveis que podem ser adicionadas a elementos HTML.",
            "Aqui está um exemplo de como declarar uma classe com CSS:",
            "<code>&#60;style&#62;</code>",
            "<code>&nbsp;&nbsp;.blue-text {</code>",
            "<code>&nbsp;&nbsp;&nbsp;&nbsp;color: blue;</code>",
            "<code>&nbsp;&nbsp;}</code>",
            "<code>&#60;/style&#62;</code>",
            "Veja que criamos uma classe CSS chamada \"blue-text\" no interior da tag <code>&#60;style&#62;</code>.",
            "Você pode aplicar uma classe a um elemento HTML assim:",
            "<code>&#60;h2 class=\"blue-text\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
            "Note que em seu elemento <code>style</code> CSS, as classes devem começar com um ponto. Já nos elementos HTML, as declarações de classes não devem começar com o ponto.",
            "<hr>",
            "Ao invés de criar um novo elemento <code>style</code>, tente eliminar a declaração de estilo de <code>h2</code> dos elementos de estilo existentes, e troque ela pela declaração de classe <code>.red-text</code>.",
            "Crie uma classe CSS chamada <code>red-text</code> e então a aplique em seu elemento <code>h2</code>."
          ]
        },
        "ru": {
          "title": "Используйте CSS-класс для стилизации элемента",
          "description": [
            "Классы являются повторно применяемыми стилями, которые могут быть добавлены к HTML-элементам.",
            "Вот пример объявления CSS-класса:",
            "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.blue-text {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: blue;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
            "Вы можете увидеть, что мы создали CSS-класс названный <code>blue-text</code> внутри элемента <code>&#60;style&#62;</code>.",
            "Вы можете применить класс к HTML-элементу следующим образом:",
            "<code>&#60;h2 class=\"blue-text\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
            "Обратите внимание, что в вашем CSS-элементе <code>style</code> названию классов следует начинаться с точки. При присваивании классов HTML-элементам названия классов не должны начинаться с точки.",
            "<hr>",
            "Внутри вашего элемента <code>style</code>, замените селектор <code>h2</code> на <code>.red-text</code> и измените значение цвета с <code>blue</code> на <code>red</code>.",
            "Присвойте вашему элементу <code>h2</code> атрибут <code>class</code> со значением <code>'red-text'</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h2 {",
            "    color: blue;",
            "  }",
            "</style>",
            "",
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div>",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aefe08806",
      "title": "Style Multiple Elements with a CSS Class",
      "description": [
        "Classes allow you to use the same CSS styles on multiple HTML elements. You can see this by applying your <code>red-text</code> class to the first <code>p</code> element."
      ],
      "tests": [
        {
          "text": "Your <code>h2</code> element should be red.",
          "testString": "assert($(\"h2\").css(\"color\") === \"rgb(255, 0, 0)\", 'Your <code>h2</code> element should be red.');"
        },
        {
          "text": "Your <code>h2</code> element should have the class <code>red-text</code>.",
          "testString": "assert($(\"h2\").hasClass(\"red-text\"), 'Your <code>h2</code> element should have the class <code>red-text</code>.');"
        },
        {
          "text": "Your first <code>p</code> element should be red.",
          "testString": "assert($(\"p:eq(0)\").css(\"color\") === \"rgb(255, 0, 0)\", 'Your first <code>p</code> element should be red.');"
        },
        {
          "text": "Your second and third <code>p</code> elements should not be red.",
          "testString": "assert(!($(\"p:eq(1)\").css(\"color\") === \"rgb(255, 0, 0)\") && !($(\"p:eq(2)\").css(\"color\") === \"rgb(255, 0, 0)\"), 'Your second and third <code>p</code> elements should not be red.');"
        },
        {
          "text": "Your first <code>p</code> element should have the class <code>red-text</code>.",
          "testString": "assert($(\"p:eq(0)\").hasClass(\"red-text\"), 'Your first <code>p</code> element should have the class <code>red-text</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "Du kannst Klassen zu HTML Elementen hinzufügen, indem du zum Beispiel <code>class=\"deine-klasse\"</code> innerhalb des öffnenden Tags schreibst.",
            "Vergiss nicht dass CSS Klassenselektoren einen Punkt am Anfang brauchen:",
            "<blockquote>.blue-text {<br>&nbsp;&nbsp;color: blue;<br>}</blockquote>",
            "Aber Klassen-Deklarationen brauchen keinen Punkt:",
            "<code>&#60;h2 class=\"blue-text\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
            "<hr>",
            "Füge die <code>red-text</code> Klasse dem ersten <code>p</code> Element hinzu."
          ]
        },
        "fr": {
          "title": "Stylez plusieurs éléments avec une classe CSS",
          "description": [
            "Souvenez-vous que vous pouvez ajouter des classes aux éléments HTML en utilisant <code>class=\"votre-classe-ici\"</code> à l'intérieur de la balise ouvrante correspondante.",
            "Souvenez-vous que les sélecteurs CSS nécessitent un point au début comme ceci :",
            "<blockquote>.blue-text {<br>&nbsp;&nbsp;color: blue;<br>}</blockquote>",
            "Rappelez-vous également que les déclarations de classes n'ont pas de point, comme ceci :",
            "<code>&#60;h2 class=\"blue-text\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
            "<hr>",
            "Appliquez la classe <code>red-text</code> à votre premier élément <code>p</code>."
          ]
        },
        "pt-br": {
          "title": "Estilize Múltiplos Elementos com uma Classe CSS",
          "description": [
            "Lembre-se que é possível adicionar classes a elementos HTML ao utilizar <code>class=\"sua-classe-aqui\"</code> dentro da tag de abertura do elemento.",
            "Relembre também que os seletores de classes CSS exigem um ponto em seu início, assim:",
            "<code>.blue-text {</code>",
            "<code>&nbsp;&nbsp;color: blue;</code>",
            "<code>}</code>",
            "Contudo, não se esqueça que as declarações de classes em elementos não utilizam ponto, assim:",
            "<code>&#60;h2 class=\"blue-text\"&#62;CatPhotoApp&#60;h2&#62;</code>",
            "<hr>",
            "Adicione a classe <code>red-text</code> ao seu primeiro elemento <code>p</code>."
          ]
        },
        "ru": {
          "title": "Стилизуйте множество элементов с помощью CSS-класса",
          "description": [
            "Помните, что вы можете присваивать классы HTML-элементам используя <code>class=\"ваш-класс-тут\"</code> внутри открывающей метки соответствующего элемента.",
            "Помните, что селекторы CSS-классов должны начинаться с точки, например:",
            "<blockquote>.blue-text {<br>&nbsp;&nbsp;color: blue;<br>}</blockquote>",
            "Но также не забывайте, что присваивание классов не использует точку, например:",
            "<code>&#60;h2 class=\"blue-text\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
            "<hr>",
            "Примените класс <code>red-text</code> к вашим элемент первые <code>p</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div>",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08806",
      "title": "Change the Font Size of an Element",
      "description": [
        "Font size is controlled by the <code>font-size</code> CSS property, like this:",
        "<blockquote>h1 {<br>&nbsp;&nbsp;font-size: 30px;<br>}</blockquote>",
        "<hr>",
        "Inside the same <code>&#60;style&#62;</code> tag that contains your <code>red-text</code> class, create an entry for <code>p</code> elements and set the <code>font-size</code> to 16 pixels (<code>16px</code>)."
      ],
      "tests": [
        {
          "text": "Between the <code>style</code> tags, give the <code>p</code> elements <code>font-size</code> of <code>16px</code>. Browser and Text zoom should be at 100%.",
          "testString": "assert(code.match(/p\\s*{\\s*font-size\\s*:\\s*16\\s*px\\s*;\\s*}/i), 'Between the <code>style</code> tags, give the <code>p</code> elements <code>font-size</code> of <code>16px</code>. Browser and Text zoom should be at 100%.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "Schriftgröße wird von dem CSS Attribut <code>font-size</code> kontrolliert:",
            "<blockquote>h1 {<br>&nbsp;&nbsp;font-size: 30px;<br>}</blockquote>",
            "<hr>",
            "Erstelle dann innerhalb deines <code>&#60;style&#62;</code> Elements, das auch deine <code>red-text</code> Klasse enthält, einen Eintrag für <code>p</code> Elemente und setzte <code>font-size</code> auf 16 Pixel (<code>16px</code>)."
          ]
        },
        "fr": {
          "title": "Changez la taille de police d'un élément",
          "description": [
            "La taille de police est contrôlée par la propriété CSS <code>font-size</code>, comme ceci :",
            "<blockquote>h1 {<br>&nbsp;&nbsp;font-size: 30px;<br>}</blockquote>",
            "<hr>",
            "À l'intérieur de la même balise <code>&#60;style&#62;</code> qui contiens votre classe <code>.red-text</code>, créez une nouvelle entrée pour les éléments <code>p</code> et paramétrer le <code>font-size</code> à 16 pixels (<code>16px</code>)."
          ]
        },
        "pt-br": {
          "title": "Mude o Tamanho da Fonte de um Elemento",
          "description": [
            "O tamanho da fonte é controlado pela propriedade CSS \"font-size\", como aqui:",
            "<code>h1 {</code>",
            "<code>&nbsp;&nbsp;font-size: 30px;</code>",
            "<code>}</code>",
            "<hr>",
            "Dentro da mesma tag <code>&#60;style&#62;</code> que criamos para sua classe <code>red-text</code>, modifique o <code>font-size</code> dos elementos <code>p</code> para que tenha um tamanho de 16 pixels (<code>16px</code>)."
          ]
        },
        "ru": {
          "title": "Измените размер шрифта элемента",
          "description": [
            "Размером шрифта управляют с помощтю CSS-своайства <code>font-size</code>, например:",
            "<blockquote>h1 {<br>&nbsp;&nbsp;font-size: 30px;<br>}</blockquote>",
            "<hr>",
            "Внутри того же элемента <code>&#60;style&#62;</code>, который содержит ваш класс <code>red-text</code>, создайте вхождение для элементов <code>p</code> и установите свойство <code>font-size</code> равным 16 пикселей (<code>16px</code>)."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div>",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aede08807",
      "title": "Set the Font Family of an Element",
      "description": [
        "You can set which font an element should use, by using the <code>font-family</code> property.",
        "For example, if you wanted to set your <code>h2</code> element's font to <code>sans-serif</code>, you would use the following CSS:",
        "<blockquote>h2 {<br>&nbsp;&nbsp;font-family: sans-serif;<br>}</blockquote>",
        "<hr>",
        "Make all of your <code>p</code> elements use the <code>monospace</code> font."
      ],
      "tests": [
        {
          "text": "Your <code>p</code> elements should use the font <code>monospace</code>.",
          "testString": "assert($(\"p\").not(\".red-text\").css(\"font-family\").match(/monospace/i), 'Your <code>p</code> elements should use the font <code>monospace</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "Du kannst einem Element mit <code>font-family</code> eine Schriftart zuweisen.",
            "Wenn du zum Beispiel deinem <code>h2</code> Element die Schriftart <code>sans-serif</code> zuweisen willst, kannst du das mit dem folgenden CSS tun:",
            "<blockquote>h2 {<br>&nbsp;&nbsp;font-family: sans-serif;<br>}</blockquote>",
            "<hr>",
            "Definiere für alle <code>p</code> Elemente die Schriftart <code>monospace</code>."
          ]
        },
        "fr": {
          "title": "Paramétrer la famille de police d'un élément",
          "description": [
            "Vous pouvez paramétrer la police d'un élément en utilisant la propriété <code>font-family</code>.",
            "Par exemple, si vous voulez paramétrer la police de votre élément <code>h2</code> à <code>sans-serif</code>, vous devez utiliser le CSS suivant :",
            "<blockquote>h2 {<br>&nbsp;&nbsp;font-family: sans-serif;<br>}</blockquote>",
            "<hr>",
            "Faites en sorte que tous vos éléments <code>p</code> aient la police <code>monospace</code>."
          ]
        },
        "pt-br": {
          "title": "Defina a Fonte para um Elemento",
          "description": [
            "Você pode estabelecer o estilo de fonte para um elemento ao utilizar a propriedade <code>font-family</code>.",
            "Por exemplo, se você quiser estabelecer o estilo de fonte de seu elemento <code>h2</code> como <code>sans-serif</code>, você poderá utilizar o seguinte código em CSS:",
            "<code>h2 {</code>",
            "<code>&nbsp;&nbsp;font-family: sans-serif;</code>",
            "<code>}</code>",
            "<hr>",
            "Faça com que todos os elementos <code>p</code> utilizem o estilo de fonte <code>monospace</code>."
          ]
        },
        "ru": {
          "title": "Установите семейство шрифтов для элемента",
          "description": [
            "Вы можете установить семейство шрифтов для элемента используя свойство <code>font-family</code>.",
            "Например, если бы вы хотели установить семейство шрифтов <code>sans-serif</code> для вашего элемента <code>h2</code>, вы бы использовали следующий CSS:",
            "<blockquote>h2 {<br>&nbsp;&nbsp;font-family: sans-serif;<br>}</blockquote>",
            "<hr>",
            "Присвойте шрифт <code>monospace</code> всем вашим элементам <code>p</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div>",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08807",
      "title": "Import a Google Font",
      "description": [
        "In addition to specifying common fonts that are found on most operating systems, we can also specify non-standard, custom web fonts for use on our website. There are various sources for web fonts on the internet but, for this example we will focus on the Google Fonts library.",
        "<a href='https://fonts.google.com/' target='_blank'>Google Fonts</a> is a free library of web fonts that you can use in your CSS by referencing the font's URL.",
        "So, let's go ahead and import and apply a Google font (note that if Google is blocked in your country, you will need to skip this challenge).",
        "To import a Google Font, you can copy the font(s) URL from the Google Fonts library and then paste it in your HTML. For this challenge, we'll import the <code>Lobster</code> font. To do this, copy the following code snippet and paste it into the top of your code editor(before the opening <code>style</code> element):",
        "<code>&#60;link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"&#62;</code>",
        "Now you can use the <code>Lobster</code> font in your CSS by using <code>Lobster</code> as the FAMILY_NAME as in the following example:<br><code>font-family: FAMILY_NAME, GENERIC_NAME;</code>.",
        "The GENERIC_NAME is optional, and is a fallback font in case the other specified font is not available. This is covered in the next challenge.",
        "Family names are case-sensitive and need to be wrapped in quotes if there is a space in the name. For example, you need quotes to use the <code>\"Open Sans\"</code> font, but not to use the <code>Lobster</code> font.",
        "<hr>",
        "Create a <code>font-family</code> CSS rule that uses the <code>Lobster</code> font, and ensure that it will be applied to your <code>h2</code> element."
      ],
      "tests": [
        {
          "text": "Import the <code>Lobster</code> font.",
          "testString": "assert(new RegExp(\"googleapis\", \"gi\").test(code), 'Import the <code>Lobster</code> font.');"
        },
        {
          "text": "Your <code>h2</code> element should use the font <code>Lobster</code>.",
          "testString": "assert($(\"h2\").css(\"font-family\").match(/lobster/i), 'Your <code>h2</code> element should use the font <code>Lobster</code>.');"
        },
        {
          "text": "Use an <code>h2</code> CSS selector to change the font.",
          "testString": "assert(/\\s*h2\\s*\\{\\s*font-family\\:\\s*(\\'|\")?Lobster(\\'|\")?\\s*;\\s*\\}/gi.test(code), 'Use an <code>h2</code> CSS selector to change the font.');"
        },
        {
          "text": "Your <code>p</code> element should still use the font <code>monospace</code>.",
          "testString": "assert($(\"p\").css(\"font-family\").match(/monospace/i), 'Your <code>p</code> element should still use the font <code>monospace</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "Lass uns jetzt eine Google Font importieren und verwenden. (Beachte dass du diese Challenge überspringen musst, falls Google in deinem Land blockiert wird)",
            "Zuerst musst du einen <code>call</code> (Anfrage) an Google machen um um auf <code>Lobster</code> zugreifen und in dein HMTL einbinden zu können.",
            "Kopiere den folgenden Code und füge diesen in deinen Editor oben ein:",
            "<code>&#60;link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"&#62;</code>",
            "Jetzt kannst du \"Lobster\" als font-family Attribut zu deinem <code>h2</code> Element hinzufügen.",
            "<hr>",
            "Füge dem <code>h2</code> Element die Schriftart oder <code>font-family</code> <code>Lobster</code> hinzu."
          ]
        },
        "fr": {
          "title": "Importer une police de Google",
          "description": [
            "Maintenant, importons et appliquons une police de Google (prenez note que si Google est interdit d'accès dans votre pays, vous devrez omettre ce défi).",
            "Premièrement, vous devrez faire un <code>appel</code> vers Google pour prendre la police <code>Lobster</code> et la charger dans votre HTML.",
            "Copier l'extrait de code suivant et coller le dans le haut de votre éditeur de code :",
            "Maintenant vous pouvez paramétrer <code>Lobster</code> comme valeur de police de votre élément <code>h2</code>.",
            "<hr>",
            "Appliquer la valeur <code>Lobster</code> à la <code>font-family</code> de votre élément <code>h2</code>."
          ]
        },
        "pt-br": {
          "title": "Importe uma Fonte a Partir do Google Fonts",
          "description": [
            "Agora, vamos importar e aplicar um estilo de fonte por meio do Google Fonts.",
            "Primeiro, faça um <code>chamado</code> ao Google Fonts para poder utilizar a fonte chamada <code>Lobster</code> e carregá-la em seu HTML.",
            "Para fazer isso, copie o código abaixo e insira-o na parte superior de seu editor de texto:",
            "<code>&#60;link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"&#62;</code>",
            "<hr>",
            "Agora, estableça <code>Lobster</code> como o valor para font-family em seu elemento <code>h2</code>."
          ]
        },
        "ru": {
          "title": "Импортируйте шрифт Google",
          "description": [
            "Теперь давайте импортируем и применим шрифт Google (обратите внимание, что если Google заблокирован в ваней стране, вам нужно будет пропустить это испытание).",
            "Сначала вам понадобится сделать <code>запрос</code> к Google для получения шрифта <code>Lobster</code> и загрузить его в ваш HTML.",
            "Скопируйте следующй кусок кода и вставьте его в самый верх вашего редактора кода:",
            "<code>&#60;link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"&#62;</code>",
            "Теперь вы можете установить шрифт <code>Lobster</code> в качестве значения семейства шрифтов для вашего <code>h2</code>.",
            "<hr>",
            "Примените свойство <code>font-family</code> со значением <code>Lobster</code> к вашему элементу <code>h2</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div>",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08808",
      "title": "Specify How Fonts Should Degrade",
      "description": [
        "There are several default fonts that are available in all browsers. These generic font families include <code>monospace</code>, <code>serif</code> and <code>sans-serif</code>",
        "When one font isn't available, you can tell the browser to \"degrade\" to another font.",
        "For example, if you wanted an element to use the <code>Helvetica</code> font, but degrade to the <code>sans-serif</code> font when <code>Helvetica</code> wasn't available, you will specify it as follows:",
        "<blockquote>p {<br>&nbsp;&nbsp;font-family: Helvetica, sans-serif;<br>}</blockquote>",
        "Generic font family names are not case-sensitive. Also, they do not need quotes because they are CSS keywords.",
        "<hr>",
        "To begin with, apply the <code>monospace</code> font to the <code>h2</code> element, so that it now has two fonts - <code>Lobster</code> and <code>monospace</code>.",
        "In the last challenge, you imported the <code>Lobster</code> font using the <code>link</code> tag. Now comment out that import of the <code>Lobster</code> font(using the HTML comments you learned before) from Google Fonts so that it isn't available anymore. Notice how your <code>h2</code> element degrades to the <code>monospace</code> font.",
        "<strong>Note</strong><br>If you have the Lobster font installed on your computer, you won't see the degradation because your browser is able to find the font."
      ],
      "tests": [
        {
          "text": "Your h2 element should use the font <code>Lobster</code>.",
          "testString": "assert($(\"h2\").css(\"font-family\").match(/^\"?lobster/i), 'Your h2 element should use the font <code>Lobster</code>.');"
        },
        {
          "text": "Your h2 element should degrade to the font <code>monospace</code> when <code>Lobster</code> is not available.",
          "testString": "assert(/\\s*h2\\s*\\{\\s*font-family\\:\\s*(\\'|\")?Lobster(\\'|\")?,\\s*monospace\\s*;\\s*\\}/gi.test(code), 'Your h2 element should degrade to the font <code>monospace</code> when <code>Lobster</code> is not available.');"
        },
        {
          "text": "Comment out your call to Google for the <code>Lobster</code> font by putting <code>&#60!--</code> in front of it.",
          "testString": "assert(new RegExp(\"<!--[^fc]\", \"gi\").test(code), 'Comment out your call to Google for the <code>Lobster</code> font by putting <code>&#60!--</code> in front of it.');"
        },
        {
          "text": "Be sure to close your comment by adding <code>--&#62;</code>.",
          "testString": "assert(new RegExp(\"[^fc]-->\", \"gi\").test(code), 'Be sure to close your comment by adding <code>--&#62;</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "Es gibt verschiedene Schriftarten, die jedem Browser standardmäßig zur Verfügung stehen. Das sind unter anderem <code>monospace</code>, <code>serif</code> und <code>sans-serif</code>.",
            "Falls eine Font nicht verfügbar ist kannst du dem Browser sagen was er stattdessen verwenden soll.",
            "Wenn du zum Beispiel einem Element die Schriftart <code>Helvetica</code> geben möchtest, aber gleichzeitig als Alertnative die Schrift <code>sans-serif</code> laden willst, falls <code>Helvetica</code> nicht verfügbar ist, kannst du diesen CSS Style verwenden:",
            "<blockquote>p {<br>&nbsp;&nbsp;font-family: Helvetica, sans-serif;<br>}</blockquote>",
            "<hr>",
            "Kommentiere jetzt den Aufruf an Google Fonts aus, sodass <code>Lobster</code> nicht zur Verfügung steht. Beachte, wie nun alternativ die Schriftart <code>monospace</code> geladen wird."
          ]
        },
        "fr": {
          "title": "Spécifier comment vos polices devraient dégrader",
          "description": [
            "Il y a plusieurs polices par défaut qui sont disponible dans tous les navigateurs Web. Ceci comprend <code>monospace</code>, <code>serif</code> et <code>sans-serif</code>.",
            "Quand une police n'est pas disponible, vous pouvez demander au navigateur de \"dégrader\" vers une autre police.",
            "Par exemple, si vous voulez qu'un élément utilise la police <code>Helvetica</code>, mais également dégrader vers <code>sans-serif</code> lorsque la police <code>Helvetica</code> n'est pas disponible, vous pouvez utiliser le style CSS suivant :",
            "<blockquote>p {<br>&nbsp;&nbsp;font-family: Helvetica, sans-serif;<br>}</blockquote>",
            "<hr>",
            "Maintenant, commenter votre appel vers les polices de Google, pour que la police <code>Lobster</code> ne soit pas disponible. Regardez comment la police se dégrade vers <code>monospace</code>."
          ]
        },
        "pt-br": {
          "title": "Especifique como as Fontes Devem se Degradar",
          "description": [
            "Existem diversas fontes que estão disponíveis por padrão nos navegadores de internet, incluindo <code>monospace</code>, <code>serif</code> e <code>sans-serif</code>.",
            "No entanto, quando uma fonte não está disponível, podemos dizer ao navegador que \"degrade\" a outro tipo de fonte.",
            "Por exemplo, se você deseja que um elemento use a fonte <code>Helvetica</code>, e que degrade para a fonte <code>sans-serif</code> quando a <code>Helvetica</code> não estiver disponível, você pode utilizar o seguinte CSS:",
            "<code>p {</code>",
            "<code>&nbsp;&nbsp;font-family: Helvetica, sans-serif;</code>",
            "<code>}</code>",
            "<hr>",
            "Agora, comente o seu chamado para a fonte do Google, para que a fonte <code>Lobster</code> não esteja disponível. Note como a fonte degrada para <code>monospace</code>."
          ]
        },
        "ru": {
          "title": "Укажите порядок деградации шрифтов",
          "description": [
            "Существует несколько стандартных шрифтов, которые доступны во всех браузерах. Среди них <code>monospace</code>, <code>serif</code> и <code>sans-serif</code>",
            "Когда один шрифт недоступен, вы можете сообщить браузеру \"деградировать\" до другого шрифта.",
            "Например, если бы вы хотели, чтобы элемент использовал шрифт <code>Helvetica</code>, но также деградировал до шрифта <code>sans-serif</code>, когда <code>Helvetica</code> недоступен, вы могли бы использовать этот CSS-стиль:",
            "<blockquote>p {<br>&nbsp;&nbsp;font-family: Helvetica, sans-serif;<br>}</blockquote>",
            "<hr>",
            "Теперь закомментируйте ваш запрос к Google Fonts, таким образом шрифт <code>Lobster</code> становится недоступен. Обратите внимание как происходит деградация до шрифта <code>monospace</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div>",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9acdf08812",
      "title": "Size Your Images",
      "description": [
        "CSS has a property called <code>width</code> that controls an element's width. Just like with fonts, we'll use <code>px</code> (pixels) to specify the image's width.",
        "For example, if we wanted to create a CSS class called <code>larger-image</code> that gave HTML elements a width of 500 pixels, we'd use:",
        "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.larger-image {<br>&nbsp;&nbsp;&nbsp;&nbsp;width: 500px;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
        "<hr>",
        "Create a class called <code>smaller-image</code> and use it to resize the image so that it's only 100 pixels wide.",
        "<strong>Note</strong><br>Due to browser implementation differences, you may need to be at 100% zoom to pass the tests on this challenge."
      ],
      "tests": [
        {
          "text": "Your <code>img</code> element should have the class <code>smaller-image</code>.",
          "testString": "assert($(\"img[src='https://bit.ly/fcc-relaxing-cat']\").attr('class') === \"smaller-image\", 'Your <code>img</code> element should have the class <code>smaller-image</code>.');"
        },
        {
          "text": "Your image should be 100 pixels wide. Browser zoom should be at 100%.",
          "testString": "assert($(\"img\").width() === 100, 'Your image should be 100 pixels wide. Browser zoom should be at 100%.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "Die Breite eines Elements wird mit dem CSS Attribut <code>width</code> kontrolliert. Wie bei Schriftarten verwenden wir Pixel <code>px</code> um die Größe zu definieren.",
            "Wenn wir also die CSS Klasse <code>larger-image</code> erstellen wollen, um HTML Elementen eine Breite von 500 Pixeln zu verleihen, verwenden wir:",
            "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.larger-image {<br>&nbsp;&nbsp;&nbsp;&nbsp;width: 500px;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
            "<hr>",
            "Erstelle eine Klasse mit dem Namen <code>smaller-image</code> und verwende sie, um dein Bild auf 100 Pixel zu skalieren.",
            "<strong>Notiz</strong><br>Aufgrund verschiedener Brower Implementierungen, könnte es sein dass du auf 100% Zoom sein musst um die Tests zu bestehen."
          ]
        },
        "fr": {
          "title": "Redimensionner vos images",
          "description": [
            "Le CSS a une propriété nommé <code>width</code> qui contrôle la largeur d'un élément. Comme pour les polices, nous utiliserons <code>px</code> (pixels) pour déterminer la largeur d'une image.",
            "Par exemple, si nous voulons créer une classe CSS nommée <code>larger-image</code> qui donnne aux éléments une largeur de 500 pixels, nous utilisons :",
            "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.larger-image {<br>&nbsp;&nbsp;&nbsp;&nbsp;width: 500px;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
            "<hr>",
            "Créez une classe nommée <code>smaller-image</code> et utilisez la pour redimensionner l'image pour qu'elle ai 100 pixels de large.",
            "<strong>Prenez note</strong><br>Dû aux différences entre les navigateurs Web, votre niveau de zoom devrait être à 100% pour passer les tests de ce défi."
          ]
        },
        "pt-br": {
          "title": "Dê um Tamanho para suas Imagens",
          "description": [
            "O CSS possui uma propriedade chamada <code>width</code>, que controla a largura de um elemento. Da mesma forma que com as fontes, vamos utilizar <code>px</code> (pixels) como medida para especificar a largura de nossa imagem.",
            "Por exemplo, se queremos criar uma classe CSS chamada <code>larger-image</code> que dê aos elementos HTML uma largura de 500px, vamos usar:",
            "<code>&#60;estilo&#62;</code>",
            "<code>&nbsp;&nbsp;.larger-image{</code>",
            "<code>&nbsp;&nbsp;&nbsp;&nbsp;width: 500px;</code>",
            "<code>&nbsp;&nbsp;}</code>",
            "<code>&#60;/style&#62;</code>",
            "<hr>",
            "Crie uma classe chamada <code>smaller-image</code> e a utilize para mudar o tamanho da imagem para que ela tenha apenas 100 pixels de largura."
          ]
        },
        "ru": {
          "title": "Установите размер ваших изображений",
          "description": [
            "В CSS есть свойтсво, называемое <code>width</code>, которе управляет шириной элемента. По аналогии со шрифтами, мы используем <code>px</code> (пиксели) для указания ширины изображения.",
            "Например, если бы мы хотели создать CSS-класс <code>larger-image</code>, который присваивал бы HTML-эементам ширину равную 500 пикселей, мы бы использовали:",
            "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.larger-image {<br>&nbsp;&nbsp;&nbsp;&nbsp;width: 500px;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
            "<hr>",
            "Создайте класс <code>smaller-image</code> и используйте его для изменения размера изображений до 100 пикселей в ширину.",
            "<strong>Внимание</strong><br>По причине разницы в реализации браузеров, вам может понадобиться установить 100% масштаб окна браузера для прохождения этого испытания."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div>",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9bedf08813",
      "title": "Add Borders Around Your Elements",
      "description": [
        "CSS borders have properties like <code>style</code>, <code>color</code> and <code>width</code>",
        "For example, if we wanted to create a red, 5 pixel border around an HTML element, we could use this class:",
        "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.thin-red-border {<br>&nbsp;&nbsp;&nbsp;&nbsp;border-color: red;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-width: 5px;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-style: solid;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
        "<hr>",
        "Create a class called <code>thick-green-border</code>. This class should add a 10px, solid, green border around an HTML element. Apply the class to your cat photo.",
        "Remember that you can apply multiple classes to an element using its <code>class</code> attribute, by separating each class name with a space. For example:",
        "<code>&lt;img class=\"class1 class2\"&gt;</code>"
      ],
      "tests": [
        {
          "text": "Your <code>img</code> element should have the class <code>smaller-image</code>.",
          "testString": "assert($(\"img\").hasClass(\"smaller-image\"), 'Your <code>img</code> element should have the class <code>smaller-image</code>.');"
        },
        {
          "text": "Your <code>img</code> element should have the class <code>thick-green-border</code>.",
          "testString": "assert($(\"img\").hasClass(\"thick-green-border\"), 'Your <code>img</code> element should have the class <code>thick-green-border</code>.');"
        },
        {
          "text": "Give your image a border width of <code>10px</code>.",
          "testString": "assert($(\"img\").hasClass(\"thick-green-border\") && parseInt($(\"img\").css(\"border-top-width\"), 10) >= 8 && parseInt($(\"img\").css(\"border-top-width\"), 10) <= 12, 'Give your image a border width of <code>10px</code>.');"
        },
        {
          "text": "Give your image a border style of <code>solid</code>.",
          "testString": "assert($(\"img\").css(\"border-right-style\") === \"solid\", 'Give your image a border style of <code>solid</code>.');"
        },
        {
          "text": "The border around your <code>img</code> element should be green.",
          "testString": "assert($(\"img\").css(\"border-left-color\") === \"rgb(0, 128, 0)\", 'The border around your <code>img</code> element should be green.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "description": [
            "CSS Rahmen haben Attribute wie <code>style</code>, <code>color</code> und <code>width</code>",
            "Wenn wir nun einen roten, 5 Pixel dicken Rahmen um ein HTML Element setzen wollen, könnten wir diese Klasse verwenden:",
            "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.thin-red-border {<br>&nbsp;&nbsp;&nbsp;&nbsp;border-color: red;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-width: 5px;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-style: solid;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
            "<hr>",
            "Erstelle die Klasse <code>thick-green-border</code>, welche einen 10 Pixel dicken, grünen Rahmen mit dem Style <code>solid</code> um ein HTML Element setzt. Füge diese Klasse deinem Katzenfoto hinzu.",
            "Vergiss nicht, dass du einem Element mehrere Klassen geben kannst indem du jede Klasse mit einem Leerzeichen im <code>class</code> Attribut trennst. Zum Beispiel:",
            "<code>&lt;img class=\"class1 class2\"&gt;</code>"
          ]
        },
        "fr": {
          "title": "Ajouter des bordures autour de vos éléments",
          "description": [
            "Les bordures CSS ont des propriétés comme <code>style</code>, <code>color</code> et <code>width</code>",
            "Par exemple, si nous voulons créer une bordure de 5 pixel rouge autour d'un élément HTML, nous pouvons utiliser cette classe :",
            "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.thin-red-border {<br>&nbsp;&nbsp;&nbsp;&nbsp;border-color: red;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-width: 5px;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-style: solid;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
            "<hr>",
            "Créer une classe nommée <code>thick-green-border</code> qui ajoute une bordure verte de 10 pixel avec un style <code>solid</code> autour d'un élément HTML. Appliquez ensuite cette classe sur votre photo de chat.",
            "Souvenez-vous que vous pouvez appliquer plus d'une classe sur un élément en les séparant par un espace, le tout dans l'attribut <code>class</code> de l'élément. Par exemple :",
            "<code>&lt;img class=\"class1 class2\"&gt;</code>"
          ]
        },
        "pt-br": {
          "title": "Adicione Bordas ao Redor de seus Elementos",
          "description": [
            "As bordas em CSS possuem propriedades como <code>style</code>, <code>color</code> e <code>width</code>",
            "Por exemplo, se queremos criar uma borda com tamanho de 5 pixels de cor vermelha ao redor de um elemento HTML, podemos utilizar esta classe:",
            "<code>&#60;style&#62;</code>",
            "<code>&nbsp;&nbsp;.thin-red-border {</code>",
            "<code>&nbsp;&nbsp;&nbsp;&nbsp;border-color: red;</code>",
            "<code>&nbsp;&nbsp;&nbsp;&nbsp;border-width: 5px;</code>",
            "<code>&nbsp;&nbsp;&nbsp;&nbsp;border-style: solid;</code>",
            "<code>&nbsp;&nbsp;}</code>",
            "<code>&#60;/style&#62;</code>",
            "<hr>",
            "Crie uma classe chamada <code>thick-green-border</code> que insira uma borda verde de 10 pixels de largura com um estilo <code>solid</code> ao redor de um elemento HTML, e então adicione essa classe em sua foto com o gato.",
            "Lembre que você pode aplicar diversas classes a um elemento separando cada uma das classes com um espaço, dentro do atributo <code>class</code>. Por exemplo:",
            "<code>&lt;img class=\"clase1 clase2\"&gt;</code>"
          ]
        },
        "ru": {
          "title": "Дбавьте границы вокруг ваших элементов",
          "description": [
            "CSS-границы имеют свойства: <code>style</code>, <code>color</code> и <code>width</code>",
            "Например, если бы мы хотели создать красную границу шириной в 5 пикселей вокруг HTML-элемента, мы могли бы использовать этот класс:",
            "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.thin-red-border {<br>&nbsp;&nbsp;&nbsp;&nbsp;border-color: red;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-width: 5px;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-style: solid;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
            "<hr>",
            "Создайте класс <code>thick-green-border</code>, который добавляет зелёную границу шириной в 10 пикселей со стилем <code>solid</code> вокруг HTML-элемента и примените этот класс к вашему фото кота.",
            "Помните, что вы можете может применить множество классов к одному элементу путём разделения их с помощью пробела внутри атрибута <code>class</code>. Например:",
            "<code>&lt;img class=\"class1 class2\"&gt;</code>"
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/add-borders-around-your-elements",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img class=\"smaller-image\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div>",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08814",
      "title": "Add Rounded Corners with border-radius",
      "description": [
        "Your cat photo currently has sharp corners. We can round out those corners with a CSS property called <code>border-radius</code>.",
        "<hr>",
        "You can specify a <code>border-radius</code> with pixels. Give your cat photo a <code>border-radius</code> of <code>10px</code>.",
        "Note: this challenge allows for multiple possible solutions. For example, you may add <code>border-radius</code> to either the <code>.thick-green-border</code> class or the <code>.smaller-image</code> class."
      ],
      "tests": [
        {
          "text": "Your image element should have the class \"thick-green-border\".",
          "testString": "assert($(\"img\").hasClass(\"thick-green-border\"), 'Your image element should have the class \"thick-green-border\".');"
        },
        {
          "text": "Your image should have a border radius of <code>10px</code>",
          "testString": "assert(parseInt($(\"img\").css(\"border-top-left-radius\")) > 8, 'Your image should have a border radius of <code>10px</code>');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Füge abgerundete Ecken mit border-radius hinzu",
          "description": [
            "Dein Katzenfoto hat momentan spitze Ecken. Wir können diese Ecken mit dem CSS Attribut <code>border-radius</code> abrunden.",
            "<hr>",
            "Du kannst einen <code>border-radius</code> mit Pixeln deklarieren. Gib deinem Katzenfoto einen <code>border-radius</code> von <code>10px</code>.",
            "Beachte dass es für diese Challenge verschiedene mögliche Lösungsansätze gibt. Zum Beispiel könntest du einen <code>border-radius</code> zu der <code>.thick-green-border</code> oder <code>.smaller-image</code> Klasse hinzufügen."
          ]
        },
        "es": {
          "title": "Agrega esquinas redondeadas usando border-radius",
          "description": [
            "Tu foto del gato tiene actualmente esquinas angulares. Podemos redondear esas esquinas con una propiedad CSS llamada <code>border-radius</code>.",
            "<hr>",
            "Puedes especificar <code>border-radius</code> usando pixeles. Dale a tu foto del gato un <code>border-radius</code> de <code>10px</code>.",
            "Nota: este desafío acepta múltiples soluciones. Por ejemplo, puedes agregar <code>border-radius</code> ya sea a la clase <code>.thick-green-border</code> o a la clase <code>.smaller-image</code>."
          ]
        },
        "pt-br": {
          "title": "Insira Bordas Arredondadas com o border-radius",
          "description": [
            "Sua foto com o gato possui cantos pontiagudos. Podemos arredondar os cantos com uma propriedade CSS chamado <code>border-radius</code>.",
            "<hr>",
            "Você pode especificar um <code>border-radius</code> com pixels. Adicione um <code>border-radius</code> de <code>10px</code> para a sua foto.",
            "Nota: Este desafio permite várias soluções possíveis. Por exemplo, você pode adicionar o <code>border-radius</code> tanto para a classe <code>.thick-green-border</code> como para a classe <code>.smaller-image</code>."
          ]
        },
        "ru": {
          "title": "Добавьте скруглённые углы с помощью радиуса границы",
          "description": [
            "У вашего фото кота сейчас острые углы. Мы можем скруглить углы используя CSS-свойство <code>border-radius</code>.",
            "<hr>",
            "Вы можете указать значения <code>border-radius</code> в пикселях. Присвойте вашему фото кота свойство <code>border-radius</code> со значением <code>10px</code>.",
            "Внимание: это задание подразумевает наличие нескольких возможных решений. Например, вы можете добавить <code>border-radius</code> как к классу <code>.thick-green-border</code>, так и к классу <code>.smaller-image</code>."
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/add-rounded-corners-a-border-radius",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div>",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08815",
      "title": "Make Circular Images with a border-radius",
      "description": [
        "In addition to pixels, you can also specify the <code>border-radius</code> using a percentage.",
        "<hr>",
        "Give your cat photo a <code>border-radius</code> of <code>50%</code>."
      ],
      "tests": [
        {
          "text": "Your image should have a border radius of <code>50%</code>, making it perfectly circular.",
          "testString": "assert(parseInt($(\"img\").css(\"border-top-left-radius\")) > 48, 'Your image should have a border radius of <code>50%</code>, making it perfectly circular.');"
        },
        {
          "text": "Be sure to use a percentage value of <code>50%</code>.",
          "testString": "assert(code.match(/50%/g), 'Be sure to use a percentage value of <code>50%</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Erstelle runde Bilder mit einem border-radius",
          "description": [
            "Du kannst einem <code>border-radius</code> neben Pixeln auch Prozentwerte zuweisen.",
            "<hr>",
            "Gib deinem Katzenfoto einen <code>border-radius</code> von <code>50%</code>."
          ]
        },
        "es": {
          "title": "Crea imágenes circulares usando border-radius",
          "description": [
            "Además de pixeles, puedes especificar un <code>border-radius</code> usando porcentajes.",
            "<hr>",
            "Dale a tu foto del gato un <code>border-radius</code> de <code>50%</code>."
          ]
        },
        "pt-br": {
          "title": "Deixe as Imagens Circulares com o border-radius",
          "description": [
            "Assim como pixels, você também pode usar o <code>border-radius</code> com porcentagens.",
            "<hr>",
            "Dê para a sua foto de gato um <code>border-radius</code> de <code>50%</code>."
          ]
        },
        "ru": {
          "title": "Сделайте круглые изображения с помощью радиуса границы",
          "description": [
            "В дополнение к пикселям, вы также может использовать проценты для указания значения свойства <code>border-radius</code>.",
            "<hr>",
            "Присвойте вашему фото кота свойство <code>border-radius</code> со значением <code>50%</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 10px;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div>",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fed1348bd9aede07836",
      "title": "Give a Background Color to a div Element",
      "description": [
        "You can set an element's background color with the <code>background-color</code> property.",
        "For example, if you wanted an element's background color to be <code>green</code>, you'd put this within your <code>style</code> element:",
        "<blockquote>.green-background {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote>",
        "<hr>",
        "Create a class called <code>silver-background</code> with the <code>background-color</code> of silver. Assign this class to your <code>div</code> element."
      ],
      "tests": [
        {
          "text": "Give your <code>div</code> element the class <code>silver-background</code>.",
          "testString": "assert($(\"div\").hasClass(\"silver-background\"), 'Give your <code>div</code> element the class <code>silver-background</code>.');"
        },
        {
          "text": "Your <code>div</code> element should have a silver background.",
          "testString": "assert($(\"div\").css(\"background-color\") === \"rgb(192, 192, 192)\", 'Your <code>div</code> element should have a silver background.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Gib einem div Element eine Hintergrundfarbe",
          "description": [
            "Du kannst die Hintergrundfarbe von einem Element mit dem <code>background-color</code> Attribut setzen",
            "Wenn du zum Beispiel die Hintergrundfarbe von einem Element <code>green</code> machen willst, schreibe dies in dein <code>style</code> Element:",
            "<blockquote>.green-background {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote>",
            "<hr>",
            "Erstelle eine Klasse namens <code>silver-background</code> mit der <code>background-color</code> grau (silver). Füge diese Klasse deinem <code>div</code> Element hinzu"
          ]
        },
        "es": {
          "title": "Da un color de fondo a un elemento div",
          "description": [
            "Puedes fijar el color de fondo de un elemento con la propiedad <code>background-color</code>.",
            "Por ejemplo, si quieres que el color de fondo de un elemento sea verde (<code>green</code>), dentro de tu elemento <code>style</code> pondrías:",
            "<blockquote>.green-background {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote>",
            "<hr>",
            "Crea una clase llamada <code>silver-background</code> con la propiedad <code>background-color</code> en gris (<code>silver</code>). Asigna esta clase a tu elemento <code>div</code> ."
          ]
        },
        "pt-br": {
          "title": "Dê uma Cor de Fundo a um Elemento div",
          "description": [
            "Você pode acrescentar uma cor de fundo de um elemento com a propriedade <code>background-color</code>.",
            "Por exemplo, se você quiser que a cor de fundo de um elemento seja verde (<code>green</code>), dentro de seu elemento <code>style</code> seria assim:",
            "<code>.green-background {</code>",
            "<code>&nbsp;&nbsp;background-color: green;</code>",
            "<code>}</code>",
            "<hr>",
            "Crie uma classe chamada <code>silver-background</code> com a propriedade <code>background-color</code> em cinza (<code>silver</code>). Depois, adicione essa classe ao seu elemento <code>div</code>."
          ]
        },
        "ru": {
          "title": "Присвойте цвет фона элементу div",
          "description": [
            "Вы можете установить цвет фона элемента с помощью свойства <code>background-color</code>.",
            "Например, если бы вы хотели установить цвет фона элемента <code>зелёным</code>, вы бы использовали следующий стиль внутри вашего элемента <code>style</code>:",
            "<blockquote>.green-background {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote>",
            "<hr>",
            "Создайте класс <code>silver-background</code> со значением свойства <code>background-color</code> равным <code>silver</code>. Назначьте этот класс вашему элементу <code>div</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div>",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87eee1348bd9aede07836",
      "title": "Set the id of an Element",
      "description": [
        "In addition to classes, each HTML element can also have an <code>id</code> attribute.",
        "There are several benefits to using <code>id</code> attributes: You can use an <code>id</code> to style a single element and later you'll learn that you can use them to select and modify specific elements with JavaScript.",
        "<code>id</code> attributes should be unique. Browsers won't enforce this, but it is a widely agreed upon best practice. So please don't give more than one element the same <code>id</code> attribute.",
        "Here's an example of how you give your <code>h2</code> element the id of <code>cat-photo-app</code>:",
        "<code>&#60;h2 id=\"cat-photo-app\"></code>",
        "<hr>",
        "Give your <code>form</code> element the id <code>cat-photo-form</code>."
      ],
      "tests": [
        {
          "text": "Give your <code>form</code> element the id of <code>cat-photo-form</code>.",
          "testString": "assert($(\"form\").attr(\"id\") === \"cat-photo-form\", 'Give your <code>form</code> element the id of <code>cat-photo-form</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Setze die ID von einem Element",
          "description": [
            "Zusätzlich zu Klassen, kann jedes HTML Element auch ein <code>id</code> Attribut haben.",
            "Es hat mehrere Vorteile <code>id</code> Attribute zu verwenden und du wirst mehr über diese erfahren wenn du anfängst mit jQuery zu arbeiten.",
            "<code>id</code> Attribute sollten eindeutig sein. Browser werden das nicht durchsetzen, aber es ist eine weit verbreitete und erprobte Herangehensweise. Also gib bitte nie mehr als einem Element das gleiche <code>id</code> Attribut.",
            "Hier ist ein Beispiel wie du deinem <code>h2</code> Element die Id <code>cat-photo-app</code> gibst:",
            "<code>&#60;h2 id=\"cat-photo-app\"></code>",
            "<hr>",
            "Gib deinem <code>form</code> Element die Id <code>cat-photo-form</code>."
          ]
        },
        "es": {
          "title": "Establecer el ID de un elemento",
          "description": [
            "Además de las clases, cada elemento HTML también puede tener un atributo de identificación <code>id</code>.",
            "Hay varias ventajas al usar atributos <code>id</code>, y aprenderás más sobre estas cuando comiences a usar jQuery.",
            "Los atributos <code>id</code> deben ser únicos. Los navegadores no obligarán esto, pero es ampliamente reconocido como una de las mejores prácticas. Así que por favor no le des a más de un elemento un mismo atributo <code>id</code>. ",
            "He aquí un ejemplo de cómo le das la identificación <code>cat-photo-app</code> a tu elemento <code>h2</code>:",
            "<code>&#60;h2 id=\"cat-photo-app\"></code>",
            "<hr>",
            "Dale a tu elemento <code>form</code> la id <code>cat-photo-form</code>."
          ]
        },
        "pt-br": {
          "title": "Estabeleça a ID de um Elemento",
          "description": [
            "Além das classes, cada elemento HTML também pode ter um atributo de identificação chamado <code>id</code>.",
            "Existem várias vantagens ao utilizar atributos <code>id</code>, e você aprenderá mais sobre elas quando começar a utilizar jQuery.",
            "Os atributos <code>id</code> devem ser únicos. Os navegadores não o obrigarão a isso, mas isso é amplamente reconhecido como uma boa prática. Assim, não dê um mesmo atributo <code>id</code> a mais de um elemento.",
            "Veja aqui um exemplo de como dar a id <code>cat-photo-app</code> ao seu elemento code>h2</code>:",
            "<code>&#60;h2 id=\"cat-photo-app\"></code>",
            "<hr>",
            "Dê ao seu elemento <code>form</code> a id <code>cat-photo-form</code>."
          ]
        },
        "ru": {
          "title": "Установите id элемента",
          "description": [
            "В дополнение к классам, каждый HTML-элемент может также иметь атрибут <code>id</code>.",
            "Есть некоторые преимущества использования атрибутов <code>id</code>, вы узнаете о них больше, когда начнёте использовать jQuery.",
            "Атрибутам <code>id</code> следует быть уникальными. Браузеры не принуждают к этому, но широкой общественностью это признано лучшей практикой. Поэтому, пожалуйста, не присваивайте множеству элементов одинаковое значение атрибута <code>id</code>.",
            "Вот пример того, как вы можете присвоить вашему элементу <code>h2</code> значение атрибута <code>id</code> равное <code>cat-photo-app</code>:",
            "<code>&#60;h2 id=\"cat-photo-app\"></code>",
            "<hr>",
            "Присвойте вашему элементу <code>form</code> атрибут <code>id</code> со значением <code>cat-photo-form</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "",
            "  .silver-background {",
            "    background-color: silver;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div class=\"silver-background\">",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87dee1348bd9aede07836",
      "title": "Use an id Attribute to Style an Element",
      "description": [
        "One cool thing about <code>id</code> attributes is that, like classes, you can style them using CSS.",
        "However, an <code>id</code> is not reusable and should only be applied to one element. An <code>id</code> also has a higher specificity (importance) than a class so if both are applied to the same element and have conflicting styles, the styles of the <code>id</code> will be applied.",
        "Here's an example of how you can take your element with the <code>id</code> attribute of <code>cat-photo-element</code> and give it the background color of green. In your <code>style</code> element:",
        "<blockquote>#cat-photo-element {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote>",
        "Note that inside your <code>style</code> element, you always reference classes by putting a <code>.</code> in front of their names. You always reference ids by putting a <code>#</code> in front of their names.",
        "<hr>",
        "Try giving your form, which now has the <code>id</code> attribute of <code>cat-photo-form</code>, a green background."
      ],
      "tests": [
        {
          "text": "Give your <code>form</code> element the id of <code>cat-photo-form</code>.",
          "testString": "assert($(\"form\").attr(\"id\") === \"cat-photo-form\", 'Give your <code>form</code> element the id of <code>cat-photo-form</code>.');"
        },
        {
          "text": "Your <code>form</code> element should have the <code>background-color</code> of green.",
          "testString": "assert($(\"#cat-photo-form\").css(\"background-color\") === \"rgb(0, 128, 0)\", 'Your <code>form</code> element should have the <code>background-color</code> of green.');"
        },
        {
          "text": "Make sure your <code>form</code> element has an <code>id</code> attribute.",
          "testString": "assert(code.match(/<form.*cat-photo-form.*>/gi) && code.match(/<form.*cat-photo-form.*>/gi).length > 0, 'Make sure your <code>form</code> element has an <code>id</code> attribute.');"
        },
        {
          "text": "Do not give your <code>form</code> any <code>class</code> or <code>style</code> attributes.",
          "testString": "assert(!code.match(/<form.*style.*>/gi) && !code.match(/<form.*class.*>/gi), 'Do not give your <code>form</code> any <code>class</code> or <code>style</code> attributes.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Benutze ein ID Attribute um ein Element zu stylen",
          "description": [
            "Eine coole Eigenschaft von <code>id</code> Attributen ist, dass du sie, genauso wie Klassen, mit CSS stylen kannst.",
            "Hier ist ein Beispiel wie du einem Element mit dem <code>id</code> Attribut <code>cat-photo-element</code> eine grüne Hintergrundfarbe geben kannst. In deinem <code>style</code> Element:",
            "<blockquote>#cat-photo-element {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote>",
            "Beachte, dass du in deinem <code>style</code> Element Klassen immer mit einem <code>.</code> vor deren Namen ansprichst. Ids sprichst du immer mit <code>#</code> vor deren Namen an.",
            "<hr>",
            "Versuche deinem Formular, das jetzt das <code>id</code> Attribut <code>cat-photo-form</code> hat, einen grünen Hintergrund zu geben."
          ]
        },
        "es": {
          "title": "Usa un atributo ID para dar estilo a un elemento",
          "description": [
            "Una cosa buena sobre los atributos <code>id</code> es que, al igual que con clases, puedes darles estilo usando CSS.",
            "He aquí un ejemplo de cómo puedes tomar tu elemento con atributo <code>id</code> de <code>cat-photo-element</code> y ponerle el color de fondo verde. En tu elemento <code>style</code>: ",
            "<blockquote>#cat-photo-element {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote>",
            "Ten en cuenta que dentro de tu elemento <code>style</code>, siempre referencias clases poniendo un <code>.</code> en frente de sus nombres. Y siempre referencias identificaciones poniendo un <code>#</code> frente a sus nombres. ",
            "<hr>",
            "Trata de darle a tu formulario, que ahora tiene el atributo <code>id</code> en <code>cat-photo-form</code>, un fondo verde."
          ]
        },
        "pt-br": {
          "title": "Use um Atributo ID para Estilizar um Elemento",
          "description": [
            "Algo interessante sobre os atributos <code>id</code> é que, da mesma forma que com as classes, é possível dar estilos a eles usando CSS.",
            "Aqui está um exemplo de como você pode usar seu elemento com atributo <code>id</code> em <code>cat-photo-element</code> e dar a ele a cor de fundo verde.",
            "<code>#cat-photo-element {</code>",
            "<code>&nbsp;&nbsp;background-color: green;</code>",
            "<code>}</code>",
            "Note que dentro de seu elemento <code>style</code>, você deve sempre referenciar uma classe colocando um <code>.</code> logo antes de seu nome. Já com uma id, você deve referenciar colocando um <code>#</code> antes de seu nome.",
            "<hr>",
            "Dê ao seu formulário, que agora possui o atributo code>id</code> em <code>cat-photo-form</code>, um fundo verde."
          ]
        },
        "ru": {
          "title": "Используйте атрибут id для стилизации элемента",
          "description": [
            "Одной из замечательных вещей в отношении атрибута <code>id</code> является то, что, как и с классами, вы можете стилизовать их с помощью CSS.",
            "Вот пример того как вы можете присвоить вашему элементу со значением атрибута <code>id</code> равным <code>cat-photo-element</code> зелёный цвет фона. В вашем элементе <code>style</code>:",
            "<blockquote>#cat-photo-element {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote>",
            "Обратите внимание, что внутри вашего элемента <code>style</code> вы ссылаетесь на классы используя <code>.</code> перед их именами. При этом вы всегда ссылаетесь на идентификаторы вставляя <code>#</code> перед их именами.",
            "<hr>",
            "Попробуйте установить для своей формы, которая теперь имеет атрибут <code>id</code> равный <code>cat-photo-form</code>, зелёный в качестве цвета фона."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "",
            "  .silver-background {",
            "    background-color: silver;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div class=\"silver-background\">",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\" id=\"cat-photo-form\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad88fee1348bd9aedf08825",
      "title": "Adjust the Padding of an Element",
      "description": [
        "Now let's put our Cat Photo App away for a little while and learn more about styling HTML.",
        "You may have already noticed this, but all HTML elements are essentially little rectangles.",
        "Three important properties control the space that surrounds each HTML element: <code>padding</code>, <code>margin</code>, and <code>border</code>.",
        "An element's <code>padding</code> controls the amount of space between the element's content and its <code>border</code>.",
        "Here, we can see that the blue box and the red box are nested within the yellow box. Note that the red box has more <code>padding</code> than the blue box.",
        "When you increase the blue box's <code>padding</code>, it will increase the distance(<code>padding</code>) between the text and the border around it.",
        "<hr>",
        "Change the <code>padding</code> of your blue box to match that of your red box."
      ],
      "tests": [
        {
          "text": "Your <code>blue-box</code> class should give elements <code>20px</code> of <code>padding</code>.",
          "testString": "assert($(\".blue-box\").css(\"padding-top\") === \"20px\", 'Your <code>blue-box</code> class should give elements <code>20px</code> of <code>padding</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Justiere den Innenabstand eines Elements",
          "description": [
            "Lass uns jetzt mal unsere Katzenfoto App kurz beiseite legen um mehr über HTML Styling zu lernen",
            "Du hast vielleicht schon bemerkt, dass alle HTML Elemente im Prinzip kleine Rechtecke sind.",
            "Drei wichtige CSS-Eigenschaften beeinflussen den Platz den jedes HTML Element umgibt: <code>padding</code>, <code>margin</code> und <code>border</code>.",
            "<code>padding</code> kontrolliert den Raum oder Abstand zwischen dem Inhalt eines Elements und dessen Rahmen – <code>border</code>",
            "Wir sehen in diesem Beispiel, dass sich die blaue Box und die rote Box innerhalb der gelben Box befinden. Beachte, dass die rote Box mehr <code>padding</code> hat als die blaue Box.",
            "<hr>",
            "Ändere das <code>padding</code> der blauen Box um es an die rote Box anzugleichen."
          ]
        },
        "es": {
          "title": "Ajusta el relleno de un elemento",
          "description": [
            "Ahora vamos a dejar de lado nuestra aplicación de fotos de gatos por un tiempo, y aprenderemos más sobre dar estilo a HTML",
            "Ya habrás notado esto, pero todos los elementos HTML son esencialmente pequeños rectángulos.",
            "Tres propiedades importantes controlan el espacio que rodea a cada elemento HTML: relleno (<code>padding</code>), margen (<code>margin</code>) y borde (<code>border</code>)",
            "El relleno (<code>padding</code>) de un elemento controla la cantidad de espacio entre el elemento y su borde (<code>border</code>).",
            "Aquí, podemos ver que el cuadro verde y el cuadro rojo se anidan dentro del cuadro amarillo. Ten en cuenta que el cuadro rojo tiene más relleno (<code>padding</code>) que el cuadro verde. ",
            "Cuando aumentes el relleno de la caja verde, aumentará la distancia entre el texto <code>padding</code> y el borde alrededor de este.",
            "<hr>",
            "Cambia el relleno (<code>padding</code>) de la caja verde para que coincida con el de tu cuadro rojo."
          ]
        },
        "pt-br": {
          "title": "Ajuste o Preenchimento de um Elemento",
          "description": [
            "Agora vamos deixar nosso aplicativo de fotos de gatos um pouco de lado, e aprender mais sobre dar estilos em HTML.",
            "Você provavelmente já deve ter notado, mas todos os elementos HTML são, essencialmente, pequenos retângulos.",
            "Três propriedades importantes controlam o espaço ao redor de cada elemento HTML: preenchimento (<code>padding</code>), margem (<code>margin</code>) e borda (<code>border</code>).",
            "O preenchimento (<code>padding</code>) de um elemento controla a quantidade de espaço entre o elemento e sua borda (<code>border</code>).",
            "Aqui, podemos ver que o quadro verde e o quadro vermelho se aninham dentro do quadro amarelo. Leve em conta que o quadro vermelho tem mais preenchimento (<code>padding</code>) que o quadro verde.",
            "Quando você aumenta o preenchimento da caixa verde, a distância entre o texto <code>padding</code> e a borda ao seu redor também será maior.",
            "<hr>",
            "Mude o preenchimento (<code>padding</code>) da caixa verde para que coincida com a de seu quadrado vermelho."
          ]
        },
        "ru": {
          "title": "Настройка отступа содержимого для элемента",
          "description": [
            "Теперь давайте отложим наше фото кота на некоторое время и изучим стилизацию HTML.",
            "Вы могли уже заметить это, но все HTML-элеметы в приницпе являются небольшими прямоугольниками.",
            "Пространство вокруг каждого HTML-элемента контролируют три важных свойства: <code>padding</code>, <code>margin</code>, <code>border</code>.",
            "Свойство элемента <code>padding</code> управляет размером пространства между элементом и его границей <code>border</code>.",
            "Тут мы можем видеть, что зелёный и красный прямоугольник вложены в жёлтый прямоугольник. Обратите внимание на то, что красный прямоугольник имеет больший отступ содержимого <code>padding</code>, чем зелёный прямоугольник.",
            "Когда вы увеличиваете <code>padding</code> зелёного прямоугольника, увеличивается расстояние между границей содержимого и границей самого элемента <code>border</code>.",
            "<hr>",
            "Измените значение свойства <code>padding</code> вашего зелёного прямоугольника, чтобы он был равен соответствующему значению красного прямоугольника."
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/adjust-the-padding-of-an-element",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 10px;",
            "  }",
            "  ",
            "  .red-box {",
            "    background-color: crimson;",
            "    color: #fff;",
            "    padding: 20px;",
            "  }",
            "",
            "  .blue-box {",
            "    background-color: blue;",
            "    color: #fff;",
            "    padding: 10px;",
            "  }",
            "</style>",
            "<h5 class=\"injected-text\">margin</h5>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box blue-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08822",
      "title": "Adjust the Margin of an Element",
      "description": [
        "An element's <code>margin</code> controls the amount of space between an element's <code>border</code> and surrounding elements.",
        "Here, we can see that the blue box and the red box are nested within the yellow box. Note that the red box has a bigger <code>margin</code> than the blue box, making it appear smaller.",
        "When you increase the blue box's <code>margin</code>, it will increase the distance between its border and surrounding elements.",
        "<hr>",
        "Change the <code>margin</code> of the blue box to match that of the red box."
      ],
      "tests": [
        {
          "text": "Your <code>blue-box</code> class should give elements <code>20px</code> of <code>margin</code>.",
          "testString": "assert($(\".blue-box\").css(\"margin-top\") === \"20px\", 'Your <code>blue-box</code> class should give elements <code>20px</code> of <code>margin</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Passe den Außenabstand eines Elements an",
          "description": [
            "<code>margin</code> kontrolliert den Abstand zwischen dem Rahmen - <code>border</code> - eines Elements und den benachbarten Elementen.",
            "In diesem Beispiel sehen wir die blaue und die rote Box die sich beide innerhalb der gelben Box befinden. Beachte, dass die rote Box mehr <code>margin</code> aufweist als die blaue Box, wodurch sie kleiner wirkt.",
            "Wenn du den Außenabstand – <code>margin</code> – der blauen Box erhöhst, wird sich der Abstand zwischen ihrem Rahmen und den benachbarten Elementen vergrößern.",
            "<hr>",
            "Gleiche den Außenabstand – <code>margin</code> der blauen Box dem der roten Box an."
          ]
        },
        "es": {
          "title": "Ajusta el margen de un elemento",
          "description": [
            "El margen (<code>margin</code>) de un elemento controla la cantidad de espacio entre el borde (<code>border</code>) y los elementos alrededor.",
            "Aquí, podemos ver que la caja verde y la caja roja se anidan dentro de la caja amarilla. Ten en cuenta que la caja roja tiene más margen (<code>margin</code>) que la caja verde, haciendo que parezca más pequeña. ",
            "Cuando aumentes el margen (<code>margin</code>) de la caja verde, aumentará la distancia entre su borde y los elementos que la rodean.",
            "<hr>",
            "Cambia el margen (<code>margin</code>) de la caja verde para que coincida con el de la caja roja."
          ]
        },
        "pt-br": {
          "title": "Ajuste a Margem de um Elemento",
          "description": [
            "A margem (<code>margin</code>) de um elemento controla a quantidade de espaço entre a borda (<code>border</code>) e os elementos ao seu redor.",
            "Aqui, podemos ver que a caixa verde e a caixa vermelha se aninham dentro da caixa amarela. Note que a caixa vermelha possui a margem maior que a caixa verde, fazendo com que ela pareça menor.",
            "Quando você aumenta a margem (<code>margin</code>) da caixa verde, a distância entre a borda e os elementos ao seu redor também aumentará.",
            "<hr>",
            "Mude a margem (<code>margin</code>) da caixa verde para que coincida com a margem da caixa vermelha."
          ]
        },
        "ru": {
          "title": "Настройка отступа элемента",
          "description": [
            "Значение свойства <code>margin</code> контролирует размер отступа между границей <code>border</code> элемента и его окружением.",
            "Тут мы можем видеть, что зелёный прямоугольник и красный прямоугольник вложены в жёлтый прямоугольник. Обратите внимание на то, что красный прямоугольник имеет больший отступ <code>margin</code>, чем зелёный прямоугольник, что делает его визуально меньше.",
            "Когда вы увеличиваете отступ <code>margin</code> зелёного прямоугольника, увеличивается расстояние между его границей и окружающими элементами.",
            "<hr>",
            "Измените значение отступа <code>margin</code> зелёного прямоугольника так, чтобы оно равнялось соответствующему значению красного прямоугольника."
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/adjust-the-margin-of-an-element",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 10px;",
            "  }",
            "  ",
            "  .red-box {",
            "    background-color: crimson;",
            "    color: #fff;",
            "    padding: 20px;",
            "    margin: 20px;",
            "  }",
            "",
            "  .blue-box {",
            "    background-color: blue;",
            "    color: #fff;",
            "    padding: 20px;",
            "    margin: 10px;",
            "  }",
            "</style>",
            "<h5 class=\"injected-text\">margin</h5>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box blue-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08823",
      "title": "Add a Negative Margin to an Element",
      "description": [
        "An element's <code>margin</code> controls the amount of space between an element's <code>border</code> and surrounding elements.",
        "If you set an element's <code>margin</code> to a negative value, the element will grow larger.",
        "<hr>",
        "Try to set the <code>margin</code> to a negative value like the one for the red box.",
        "Change the <code>margin</code> of the blue box to <code>-15px</code>, so it fills the entire horizontal width of the yellow box around it."
      ],
      "tests": [
        {
          "text": "Your <code>blue-box</code> class should give elements <code>-15px</code> of <code>margin</code>.",
          "testString": "assert($(\".blue-box\").css(\"margin-top\") === \"-15px\", 'Your <code>blue-box</code> class should give elements <code>-15px</code> of <code>margin</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Füge einem Element negativen Außenabstand hinzu",
          "description": [
            "<code>margin</code> kontrolliert den Abstand zwischen dem Rahmen - <code>border</code> - eines Elements und den benachbarten Elementen.",
            "Wenn du dem Außenabstand - <code>margin</code> - eines Elements einen negativen Wert zuweist, wird das Element größer.",
            "<hr>",
            "Versuche den Außenabstand - <code>margin</code> - auf einen negativen Wert, wie bei der roten Box, zu setzen.",
            "Ändere den Außenabstand – <code>margin</code> – der blauen Box auf <code>-15px</code>, damit sie die gelbe Box horizontal ausfüllt."
          ]
        },
        "es": {
          "title": "Agregar un margen negativo a un elemento",
          "description": [
            "El margen de un elemento controla la cantidad de espacio entre el borde del elemento y los elementos que lo rodean.",
            "Si estableces el margen de un elemento en un valor negativo, el elemento se hará más grande.",
            "<hr>",
            "Trata de establecer el margen (<code>margin</code>) a un valor negativo como el de la caja roja.",
            "Cambia el margen (<code>margin</code>) de la caja verde a <code>-15px</code>, de forma que ocupe todo el ancho horizontal de la caja amarilla que lo rodea."
          ]
        },
        "pt-br": {
          "title": "Adicione uma Margem Negativa a um Elemento",
          "description": [
            "A margem de um elemento controla a quantidade de espaço entre a borda do elemento e os elementos ao seu redor.",
            "Se você estabelece a margem de um elemento com um valor negativo, o elemento ficará maior.",
            "<hr>",
            "Tente estabelecer a margem (<code>margin</code>) a um valor negativo como o da caixa vermelha.",
            "Mude a margem (<code>margin</code>) da caixa verde para <code>-15px</code>, de forma que ocupe toda a largura horizontal da caixa amarela que a rodeia."
          ]
        },
        "ru": {
          "title": "Добавьте отрицательный отступ к элементу",
          "description": [
            "Значение свойства <code>margin</code> контролирует размер отступа между границей <code>border</code> элемента и его окружением.",
            "Если вы установите значение свойства <code>margin</code> элемента отрицательным, то элемент будет становиться больше.",
            "<hr>",
            "Попробуйте установить значение свойства <code>margin</code> зелёного прямоугольника отрицательным, по аналогии с красным прямоугольником.",
            "Измените значение свойства <code>margin</code> зелёного прямоугольника на <code>-15px</code>, таким образом он занимает всю ширину окружающего жёлтого прямоугольника."
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/add-a-negative-margin-to-an-element",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 10px;",
            "  }",
            "  ",
            "  .red-box {",
            "    background-color: crimson;",
            "    color: #fff;",
            "    padding: 20px;",
            "    margin: -15px;",
            "  }",
            "",
            "  .blue-box {",
            "    background-color: blue;",
            "    color: #fff;",
            "    padding: 20px;",
            "    margin: 20px;",
            "  }",
            "</style>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box blue-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08824",
      "title": "Add Different Padding to Each Side of an Element",
      "description": [
        "Sometimes you will want to customize an element so that it has different amounts of <code>padding</code> on each of its sides.",
        "CSS allows you to control the <code>padding</code> of all four individual sides of an element with the <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code> properties.",
        "<hr>",
        "Give the blue box a <code>padding</code> of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side."
      ],
      "tests": [
        {
          "text": "Your <code>blue-box</code> class should give the top of the elements <code>40px</code> of <code>padding</code>.",
          "testString": "assert($(\".blue-box\").css(\"padding-top\") === \"40px\", 'Your <code>blue-box</code> class should give the top of the elements <code>40px</code> of <code>padding</code>.');"
        },
        {
          "text": "Your <code>blue-box</code> class should give the right of the elements <code>20px</code> of <code>padding</code>.",
          "testString": "assert($(\".blue-box\").css(\"padding-right\") === \"20px\", 'Your <code>blue-box</code> class should give the right of the elements <code>20px</code> of <code>padding</code>.');"
        },
        {
          "text": "Your <code>blue-box</code> class should give the bottom of the elements <code>20px</code> of <code>padding</code>.",
          "testString": "assert($(\".blue-box\").css(\"padding-bottom\") === \"20px\", 'Your <code>blue-box</code> class should give the bottom of the elements <code>20px</code> of <code>padding</code>.');"
        },
        {
          "text": "Your <code>blue-box</code> class should give the left of the elements <code>40px</code> of <code>padding</code>.",
          "testString": "assert($(\".blue-box\").css(\"padding-left\") === \"40px\", 'Your <code>blue-box</code> class should give the left of the elements <code>40px</code> of <code>padding</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Gib jeder Seite eines Elements einen unterschiedlichen Innenabstand",
          "description": [
            "Manchmal wirst du einem Element auf jeder Seite unterschiedliche Innenabstände – also <code>padding</code> – geben wollen.",
            "CSS erlaubt dir den Innenabstand - <code>padding</code> - eines Elements auf allen Seiten einzeln mit den Eigenschaften <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code> und <code>padding-left</code> zu steuern.",
            "<hr>",
            "Verleihe der blauen Box einen Innenabstand – <code>padding</code> – von <code>40px</code> auf der oberen und linken Seite, aber nur <code>20px</code> auf der unteren und rechten Seite."
          ]
        },
        "es": {
          "title": "Añade relleno diferente a cada lado de un elemento",
          "description": [
            "A veces querrás personalizar un elemento para que tenga diferente relleno (<code>padding</code>) en cada uno de sus lados.",
            "CSS te permite controlar el relleno (<code>padding</code>) de un elemento en los cuatro lados superior, derecho, inferior e izquierdo con las propiedades <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code> y <code>padding-left</code>. ",
            "<hr>",
            "Da a la caja verde un relleno (<code>padding</code>) de <code>40px</code> en las partes superior e izquierda, pero sólo <code>20px</code> en sus partes inferior y derecha."
          ]
        },
        "pt-br": {
          "title": "Dê Valores Diferentes de Preenchimento a Cada Lado de um Elemento",
          "description": [
            "As vezes pode ser que você queira personalizar um elemento para que tenha um preenchimento (<code>padding</code>) diferente em cada um de seus lados.",
            "O CSS permite controlar o preenchimento (<code>padding</code>) de um elemento em todos os quatro lados: superior, direito, inferior e esquerdo, com as propriedades <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code> e <code>padding-left</code>.",
            "<hr>",
            "Dê para a caixa verde um preenchimento (<code>padding</code>) de <code>40px</code> nas partes superior e esquerda, e de apenas <code>20px</code> em suas partes inferior e direita."
          ]
        },
        "ru": {
          "title": "Добавьте разный отступ содердимого с каждой стороны элемента",
          "description": [
            "Иногда вам может потребоваться изменить элемент таким образом, чтобы отступ содержимого <code>padding</code> с каждой из сторон был разным.",
            "CSS позволяет вам контролировать значение свойства <code>padding</code> элемента со всех сторон с помощью свойств: <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, <code>padding-left</code>.",
            "<hr>",
            "Присвойте зелёному прямоугольнику <code>padding</code> равный <code>40px</code> сверху и слева, но только <code>20px</code> снизу и справа."
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/add-different-padding-to-each-side-of-an-element",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 10px;",
            "  }",
            "  ",
            "  .red-box {",
            "    background-color: crimson;",
            "    color: #fff;",
            "    padding-top: 40px;",
            "    padding-right: 20px;",
            "    padding-bottom: 20px;",
            "    padding-left: 40px;",
            "  }",
            "",
            "  .blue-box {",
            "    background-color: blue;",
            "    color: #fff;",
            "  }",
            "</style>",
            "<h5 class=\"injected-text\">margin</h5>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box blue-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1248bd9aedf08824",
      "title": "Add Different Margins to Each Side of an Element",
      "description": [
        "Sometimes you will want to customize an element so that it has a different <code>margin</code> on each of its sides.",
        "CSS allows you to control the <code>margin</code> of all four individual sides of an element with the <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, and <code>margin-left</code> properties.",
        "<hr>",
        "Give the blue box a <code>margin</code> of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side."
      ],
      "tests": [
        {
          "text": "Your <code>blue-box</code> class should give the top of elements <code>40px</code> of <code>margin</code>.",
          "testString": "assert($(\".blue-box\").css(\"margin-top\") === \"40px\", 'Your <code>blue-box</code> class should give the top of elements <code>40px</code> of <code>margin</code>.');"
        },
        {
          "text": "Your <code>blue-box</code> class should give the right of elements <code>20px</code> of <code>margin</code>.",
          "testString": "assert($(\".blue-box\").css(\"margin-right\") === \"20px\", 'Your <code>blue-box</code> class should give the right of elements <code>20px</code> of <code>margin</code>.');"
        },
        {
          "text": "Your <code>blue-box</code> class should give the bottom of elements <code>20px</code> of <code>margin</code>.",
          "testString": "assert($(\".blue-box\").css(\"margin-bottom\") === \"20px\", 'Your <code>blue-box</code> class should give the bottom of elements <code>20px</code> of <code>margin</code>.');"
        },
        {
          "text": "Your <code>blue-box</code> class should give the left of elements <code>40px</code> of <code>margin</code>.",
          "testString": "assert($(\".blue-box\").css(\"margin-left\") === \"40px\", 'Your <code>blue-box</code> class should give the left of elements <code>40px</code> of <code>margin</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Füge jeder Seite eines Elements einen unterschiedlichen Außenabstand hinzu",
          "description": [
            "Manchmal wirst du einem Element auf jeder Seite einen unterschiedlichen Außenabstand - <code>margin</code> - geben wollen.",
            "CSS erlaubt dir ebenfalls den Außenabstand - <code>margin</code> - eines Elements auf jeder Seite einzeln mit den Eigenschaften <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code> und <code>margin-left</code> zu steuern.",
            "<hr>",
            "Gib der blauen Box einen Außenabstand – <code>margin</code> – von <code>40px</code> auf der oberen und linken Seite, aber nur <code>20px</code> auf der unteren und rechten Seite."
          ]
        },
        "es": {
          "title": "Añade márgenes diferentes a cada lado de un elemento",
          "description": [
            "A veces querrás personalizar un elemento para que tenga un margen (<code>margin</code>) diferente en cada uno de sus lados.",
            "CSS te permite controlar el margen de un elemento en los cuatro lados superior, derecho, inferior e izquierdo con las propiedades <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code> y <code>margin-left</code>. ",
            "<hr>",
            "Da a la caja verde un margen (<code>margin</code>) de <code>40px</code> en las partes superior e izquierda, pero sólo <code>20px</code> en su parte inferior y al lado derecho."
          ]
        },
        "pt-br": {
          "title": "Dê Valores Diferentes de Margem a Cada Lado de um Elemento",
          "description": [
            "Talvez você queira personalizar um elemento para que possua uma margem (<code>margin</code>) diferente em cada um de seus lados.",
            "O CSS permite controlar a margem de um elemento em todos os seus quatro lados: superior, direito, inferior e esquerdo, com as propriedades <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code> e <code>margin-left</code>.",
            "<hr>",
            "Dê para a caixa verde uma margem (<code>margin</code>) de <code>40px</code> nas partes superior e esquerda, e de apenas <code>20px</code> nas partes inferior e direita."
          ]
        },
        "ru": {
          "title": "Добавьте разный отступ для элемента",
          "description": [
            "Иногда вам может потребоваться изменить элемент, установив разный отступ <code>margin</code> с каждой из его сторон.",
            "CSS позволяет вам контролировать отступ <code>margin</code> элемента с каждой из его сторон с помощью свойств: <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, <code>margin-left</code>.",
            "<hr>",
            "Присвойте красному прямоугольнику значение <code>margin</code> равное <code>40px</code> сверху и слева, но только <code>20px</code> снизу и справа."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 10px;",
            "  }",
            "  ",
            "  .red-box {",
            "    background-color: crimson;",
            "    color: #fff;",
            "    margin-top: 40px;",
            "    margin-right: 20px;",
            "    margin-bottom: 20px;",
            "    margin-left: 40px;",
            "  }",
            "",
            "  .blue-box {",
            "    background-color: blue;",
            "    color: #fff;",
            "  }",
            "</style>",
            "<h5 class=\"injected-text\">margin</h5>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box blue-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08826",
      "title": "Use Clockwise Notation to Specify the Padding of an Element",
      "description": [
        "Instead of specifying an element's <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code> properties individually, you can specify them all in one line, like this:",
        "<code>padding: 10px 20px 10px 20px;</code>",
        "These four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific padding instructions.",
        "<hr>",
        "Use Clockwise Notation to give the \".blue-box\" class a <code>padding</code> of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side."
      ],
      "tests": [
        {
          "text": "Your <code>blue-box</code> class should give the top of elements <code>40px</code> of <code>padding</code>.",
          "testString": "assert($(\".blue-box\").css(\"padding-top\") === \"40px\", 'Your <code>blue-box</code> class should give the top of elements <code>40px</code> of <code>padding</code>.');"
        },
        {
          "text": "Your <code>blue-box</code> class should give the right of elements <code>20px</code> of <code>padding</code>.",
          "testString": "assert($(\".blue-box\").css(\"padding-right\") === \"20px\", 'Your <code>blue-box</code> class should give the right of elements <code>20px</code> of <code>padding</code>.');"
        },
        {
          "text": "Your <code>blue-box</code> class should give the bottom of elements <code>20px</code> of <code>padding</code>.",
          "testString": "assert($(\".blue-box\").css(\"padding-bottom\") === \"20px\", 'Your <code>blue-box</code> class should give the bottom of elements <code>20px</code> of <code>padding</code>.');"
        },
        {
          "text": "Your <code>blue-box</code> class should give the left of elements <code>40px</code> of <code>padding</code>.",
          "testString": "assert($(\".blue-box\").css(\"padding-left\") === \"40px\", 'Your <code>blue-box</code> class should give the left of elements <code>40px</code> of <code>padding</code>.');"
        },
        {
          "text": "You should use the clockwise notation to set the padding of <code>blue-box</code> class.",
          "testString": "assert(!/padding-top|padding-right|padding-bottom|padding-left/.test(code), 'You should use the clockwise notation to set the padding of <code>blue-box</code> class.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Nutze die Notation im Uhrzeigersinn um den Innenabstand eines Elements zu bestimmen",
          "description": [
            "Anstatt die Eigenschaften <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code> und <code>padding-left</code> zu verwenden, kannst du sie alle in einer Zeile schreiben:",
            "<code>padding: 10px 20px 10px 20px;</code>",
            "Diese vier Werte funktionieren wie eine Uhr: oben, rechts, unten und links. Sie bewirken exakt dasselbe wie die seitenspezifischen Anweisungen.",
            "<hr>",
            "Gib der Klasse \".blue-box\" mit einer Notation im Uhrzeigersinn einen Innenabstand – <code>padding</code> – von <code>40px</code> auf der oberen und linken Seite, aber nur <code>20px</code> auf der unteren und rechten Seite."
          ]
        },
        "es": {
          "title": "Utiliza notación en sentido horario para especificar el relleno de un elemento",
          "description": [
            "En lugar de especificar las propiedades <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code> y <code>padding-left</code> de un elemento, puedes especificar todas en una sóla línea, así: ",
            "<code>padding: 10px 20px 10px 20px;</code>",
            "Estos cuatro valores funcionan como un reloj: arriba, derecha, abajo, izquierda, y producirán exactamente el mismo resultado de las cuatro instrucciones de relleno.",
            "<hr>",
            "Usa la notación en sentido horario para dar a la clase \"<code>.blue-box</code>\" un relleno de <code>40px</code> en las partes superior e izquierda, pero sólo <code>20px</code> en su parte inferior y al lado derecho ."
          ]
        },
        "pt-br": {
          "title": "Use Notação em Sentido Horário para Especificar o Preenchimento de um Elemento",
          "description": [
            "Ao invés de especificar as propriedades <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code> e <code>padding-left</code> de um elemento, você pode especificar todas elas em uma só linha, assim:",
            "<code>padding: 10px 20px 10px 20px;</code>",
            "Estes quatro valores funcionam como um relógio: cima, direita, baixo e esquerda, e produzirão o mesmo resultado das quatro instruções de preenchimento.",
            "<hr>",
            "Use a <code>notação em sentido horário</code> para dar para a classe \"<code>.blue-box</code>\" um preenchimento de <code>40px</code> nas partes superior e esquerda, mas de apenas <code>20px</code> em sua parte inferior e ao lado direito."
          ]
        },
        "ru": {
          "title": "Используйте систему ссылок по часовой стрелке для установки отступа содержмого элемента",
          "description": [
            "Вместо указания свойств элемента: <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, <code>padding-left</code>, вы можете указать их в строку, например:",
            "<code>padding: 10px 20px 10px 20px;</code>",
            "Установка значений работает по часовой стрелке: сверху, справа, снизу, слева, и приводит к ровно такому же результату, как и использование других инструкций.",
            "<hr>",
            "Используйте систему ссылок по часовой стрелке для установки для класса \".blue-box\" значения отступа содержимого <code>padding</code> равное <code>40px</code> сверху и слева, но только <code>20px</code> снизу и справа."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 20px 40px 20px 40px;",
            "  }",
            "  ",
            "  .red-box {",
            "    background-color: crimson;",
            "    color: #fff;",
            "    padding: 20px 40px 20px 40px;",
            "  }",
            "",
            "  .blue-box {",
            "    background-color: blue;",
            "    color: #fff;",
            "  }",
            "</style>",
            "<h5 class=\"injected-text\">margin</h5>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box blue-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9afdf08726",
      "title": "Use Clockwise Notation to Specify the Margin of an Element",
      "description": [
        "Let's try this again, but with <code>margin</code> this time.",
        "Instead of specifying an element's <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, and <code>margin-left</code> properties individually, you can specify them all in one line, like this:",
        "<code>margin: 10px 20px 10px 20px;</code>",
        "These four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific margin instructions.",
        "<hr>",
        "Use <code>Clockwise Notation</code> to give the element with the <code>blue-box</code> class a margin of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side."
      ],
      "tests": [
        {
          "text": "Your <code>blue-box</code> class should give the top of elements <code>40px</code> of <code>margin</code>.",
          "testString": "assert($(\".blue-box\").css(\"margin-top\") === \"40px\", 'Your <code>blue-box</code> class should give the top of elements <code>40px</code> of <code>margin</code>.');"
        },
        {
          "text": "Your <code>blue-box</code> class should give the right of elements <code>20px</code> of <code>margin</code>.",
          "testString": "assert($(\".blue-box\").css(\"margin-right\") === \"20px\", 'Your <code>blue-box</code> class should give the right of elements <code>20px</code> of <code>margin</code>.');"
        },
        {
          "text": "Your <code>blue-box</code> class should give the bottom of elements <code>20px</code> of <code>margin</code>.",
          "testString": "assert($(\".blue-box\").css(\"margin-bottom\") === \"20px\", 'Your <code>blue-box</code> class should give the bottom of elements <code>20px</code> of <code>margin</code>.');"
        },
        {
          "text": "Your <code>blue-box</code> class should give the left of elements <code>40px</code> of <code>margin</code>.",
          "testString": "assert($(\".blue-box\").css(\"margin-left\") === \"40px\", 'Your <code>blue-box</code> class should give the left of elements <code>40px</code> of <code>margin</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Nutze die Notation im Uhrzeigersinn um den Außenabstand eines Elements zu bestimmen",
          "description": [
            "Versuchen wir das noch einmal, aber diesmal mit dem Außenabstand – also <code>margin</code>.",
            "Anstatt die Eigenschaften <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code> und <code>margin-left</code> zu verwenden, kannst du alle in eine Zeile schreiben:",
            "<code>margin: 10px 20px 10px 20px;</code>",
            "Diese vier Werte funktionieren wieder wie eine Uhr: oben, rechts, unten und links. Sie bewirken exakt das Gleiche wie die seitenspezifischen Anweisungen.",
            "<hr>",
            "Nutze die Notation im Uhrzeigersinn – auch <code>Clockwise Notation</code> genannt – um dem Element mit der Klasse <code>blue-box</code> <code>40px</code> Außenabstand auf der oberen und linken Seite, aber nur <code>20px</code> auf der unteren und rechten Seite zu verleihen."
          ]
        },
        "es": {
          "title": "Utiliza notación en sentido horario para especificar el margen de un elemento",
          "description": [
            "Vamos a intentar esto de nuevo, pero esta vez con el margen (<code>margin</code>).",
            "En lugar de especificar las propiedades <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, y <code>margin-left</code> de un elemento, puedes especificarlas en una sóla línea así: ",
            "<code>margin: 10px 20px 10px 20px;</code>",
            "Estos cuatro valores funcionan como un reloj: arriba, derecha, abajo, izquierda, y producirán exactamente el mismo resultado de las cuatro instrucciones que especifican el margen.",
            "<hr>",
            "Usa <code>notación en sentido horario</code> para dar al elemento con la clase <code>blue-box</code> un margen de <code>40px</code> en las partes superior e izquierda, pero sólo <code>20px</code> en su parte inferior y al lado derecho ."
          ]
        },
        "pt-br": {
          "title": "Use Notação em Sentido Horário para Especificar a Margem de um Elemento",
          "description": [
            "Vamos praticar isso outra vez, mas desta vez será com a margem (<code>margin</code>).",
            "Ao invés de especificar as propriedades <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, e <code>margin-left</code> de um elemento, você pode especificar todas elas em apenas uma linha assim:",
            "<code>margin: 10px 20px 10px 20px;</code>",
            "Estes quatro valores funcionam como um relógio: cima, direita, baixo e esquerda, e produzirão o mesmo resultado das quatro instruções de margem.",
            "<hr>",
            "Use a <code>notação em sentido horário</code> para dar para a classe \"<code>.blue-box</code>\" uma margem de <code>40px</code> nas partes superior e esquerda, mas de apenas <code>20px</code> em sua parte inferior e ao lado direito."
          ]
        },
        "ru": {
          "title": "Используйте систему ссылок по часовой стрелке для установки отступа элемента",
          "description": [
            "Давайте попробуем то же самое, но со свойством <code>margin</code> на этот раз.",
            "Вмето указания свойств элемента: <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, <code>margin-left</code>, вы можете указать их в строку, например:",
            "<code>margin: 10px 20px 10px 20px;</code>",
            "Установка значений работает по часовой стрелке: сверху, справа, снизу, слева, и приводит к ровно такому же результату, как и использование других инструкций.",
            "<hr>",
            "Используйте систему ссылок по часовой стрелке для установки для класса <code>blue-box</code> значения отступа <code>margin</code> равное <code>40px</code> сверху и слева, но только <code>20px</code> снизу и справа."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 20px 40px 20px 40px;",
            "  }",
            "  ",
            "  .red-box {",
            "    background-color: crimson;",
            "    color: #fff;",
            "    margin: 20px 40px 20px 40px;",
            "  }",
            "",
            "  .blue-box {",
            "    background-color: blue;",
            "    color: #fff;",
            "  }",
            "</style>",
            "<h5 class=\"injected-text\">margin</h5>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box blue-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "58c383d33e2e3259241f3076",
      "title": "Use Attribute Selectors to Style Elements",
      "description": [
        "You have been giving <code>id</code> or <code>class</code> attributes to elements that you wish to specifically style. These are known as ID and class selectors. There are other CSS Selectors you can use to select custom groups of elements to style.",
        "Let's bring out CatPhotoApp again to practice using CSS Selectors.",
        "For this challenge, you will use the <code>[attr=value]</code> attribute selector to style the checkboxes in CatPhotoApp. This selector matches and styles elements with a specific attribute value. For example, the below code changes the margins of all elements with the attribute <code>type</code> and a corresponding value of <code>radio</code>:",
        "<blockquote>[type='radio'] {<br>&nbsp;&nbsp;margin: 20px 0px 20px 0px;<br>}</blockquote>",
        "<hr>",
        "Using the <code>type</code> attribute selector, try to give the checkboxes in CatPhotoApp a top margin of 10px and a bottom margin of 15px."
      ],
      "tests": [
        {
          "text": "The <code>type</code> attribute selector should be used to select the checkboxes.",
          "testString": "assert(code.match(/<style>[\\s\\S]*?\\[type=(\"|')checkbox\\1\\]\\s*?{[\\s\\S]*?}[\\s\\S]*?<\\/style>/gi),'The <code>type</code> attribute selector should be used to select the checkboxes.');"
        },
        {
          "text": "The top margins of the checkboxes should be 10px.",
          "testString": "assert((function() {var count=0; $(\"[type='checkbox']\").each(function() { if($(this).css('marginTop') === '10px') {count++;}});return (count===3)}()),'The top margins of the checkboxes should be 10px.');"
        },
        {
          "text": "The bottom margins of the checkboxes should be 15px.",
          "testString": "assert((function() {var count=0; $(\"[type='checkbox']\").each(function() { if($(this).css('marginBottom') === '15px') {count++;}});return (count===3)}()),'The bottom margins of the checkboxes should be 15px.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "",
            "  .silver-background {",
            "    background-color: silver;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>",
            "  ",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "  ",
            "  <div class=\"silver-background\">",
            "    <p>Things cats love:</p>",
            "    <ul>",
            "      <li>cat nip</li>",
            "      <li>laser pointers</li>",
            "      <li>lasagna</li>",
            "    </ul>",
            "    <p>Top 3 things cats hate:</p>",
            "    <ol>",
            "      <li>flea treatment</li>",
            "      <li>thunder</li>",
            "      <li>other cats</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\" id=\"cat-photo-form\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad82fee1322bd9aedf08721",
      "title": "Understand Absolute versus Relative Units",
      "description": [
        "The last several challenges all set an element's margin or padding with pixels (<code>px</code>). Pixels are a type of length unit, which is what tells the browser how to size or space an item. In addition to <code>px</code>, CSS has a number of different length unit options that you can use.",
        "The two main types of length units are absolute and relative. Absolute units tie to physical units of length. For example, <code>in</code> and <code>mm</code> refer to inches and millimeters, respectively. Absolute length units approximate the actual measurement on a screen, but there are some differences depending on a screen's resolution.",
        "Relative units, such as <code>em</code> or <code>rem</code>, are relative to another length value. For example, <code>em</code> is based on the size of an element's font. If you use it to set the <code>font-size</code> property itself, it's relative to the parent's <code>font-size</code>.",
        "<strong>Note</strong><br>There are several relative unit options that are tied to the size of the viewport. They are covered in the Responsive Web Design Principles section.",
        "<hr>",
        "Add a <code>padding</code> property to the element with class <code>red-box</code> and set it to <code>1.5em</code>."
      ],
      "tests": [
        {
          "text": "Your <code>red-box</code> class should have a <code>padding</code> property.",
          "testString": "assert($('.red-box').css('padding-top') != '0px' && $('.red-box').css('padding-right') != '0px' && $('.red-box').css('padding-bottom') != '0px' && $('.red-box').css('padding-left') != '0px', 'Your <code>red-box</code> class should have a <code>padding</code> property.');"
        },
        {
          "text": "Your <code>red-box</code> class should give elements 1.5em of <code>padding</code>.",
          "testString": "assert(code.match(/\\.red-box\\s*?{\\s*?.*?\\s*?.*?\\s*?padding:\\s*?1\\.5em/gi), 'Your <code>red-box</code> class should give elements 1.5em of <code>padding</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 20px 40px 20px 40px;",
            "  }",
            "",
            "  .red-box {",
            "    background-color: red;",
            "    margin: 20px 40px 20px 40px;",
            "    ",
            "  }",
            "",
            "  .green-box {",
            "    background-color: green;",
            "    margin: 40px 20px 20px 40px;",
            "  }",
            "</style>",
            "<h5 class=\"injected-text\">margin</h5>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box green-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08736",
      "title": "Style the HTML Body Element",
      "description": [
        "Now let's start fresh and talk about CSS inheritance.",
        "Every HTML page has a <code>body</code> element.",
        "<hr>",
        "We can prove that the <code>body</code> element exists here by giving it a <code>background-color</code> of black.",
        "We can do this by adding the following to our <code>style</code> element:",
        "<blockquote>body {<br>&nbsp;&nbsp;background-color: black;<br>}</blockquote>"
      ],
      "tests": [
        {
          "text": "Give your <code>body</code> element the <code>background-color</code> of black.",
          "testString": "assert($(\"body\").css(\"background-color\") === \"rgb(0, 0, 0)\", 'Give your <code>body</code> element the <code>background-color</code> of black.');"
        },
        {
          "text": "Make sure your CSS rule is properly formatted with both opening and closing curly brackets.",
          "testString": "assert(code.match(/<style>\\s*body\\s*\\{\\s*background.*\\s*:\\s*.*;\\s*\\}\\s*<\\/style>/i), 'Make sure your CSS rule is properly formatted with both opening and closing curly brackets.');"
        },
        {
          "text": "Make sure your CSS rule ends with a semi-colon.",
          "testString": "assert(code.match(/<style>\\s*body\\s*\\{\\s*background.*\\s*:\\s*.*;\\s*\\}\\s*<\\/style>/i), 'Make sure your CSS rule ends with a semi-colon.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Style das HTML Body Element",
          "description": [
            "Lass uns jetzt frisch beginnen und über CSS Vererbung reden.",
            "Jede HTML Seite hat ein <code>body</code> Element.",
            "<hr>",
            "Wir können sehen dass es das <code>body</code> Element gibt wenn wir ihm eine schwarze (black) <code>background-color</code> geben",
            "Das bewerkstelligen wir indem wir folgendes unserem <code>style</code> Element hinzufügen:",
            "<blockquote>body {<br>&nbsp;&nbsp;background-color: black;<br>}</blockquote>"
          ]
        },
        "es": {
          "title": "Da estilo en HTML al elemento cuerpo",
          "description": [
            "Ahora vamos a empezar de nuevo y hablaremos de herencia CSS.",
            "Cada página HTML tiene un cuerpo (<code>body</code>).",
            "<hr>",
            "Podemos demostrar que el elemento (<code>body</code>) existe aquí, dandole un color de fondo (<code>background-color</code>) negro.",
            "Podemos hacer esto añadiendo lo siguiente a nuestro elemento <code>style</code>:",
            "<blockquote>body {<br>&nbsp;&nbsp;background-color: black;<br>}</blockquote>"
          ]
        },
        "pt-br": {
          "title": "Dê Estilo ao Elemento Body em HTML",
          "description": [
            "Agora vamos recomeçar e falar sobre herança em CSS.",
            "Cada página HTML possui um corpo (<code>body</code>).",
            "<hr>",
            "Podemos demonstrar que o elemento (<code>body</code>) existe aqui, ao dar a ele uma cor de fundo (<code>background-color</code>) preta.",
            "Podemos fazer isso adicionando o seguinte ao nosso elemento <code>style</code>:",
            "<code>body {</code>",
            "<code>&nbsp;&nbsp;background-color: black;</code>",
            "<code>}</code>"
          ]
        },
        "ru": {
          "title": "Стилизуйте HTML-элемент body",
          "description": [
            "Теперь давайте начнём с нуля и поговорим о наследовании в CSS.",
            "Каждая HTML-страница имеет элемент <code>body</code>.",
            "<hr>",
            "Мы можем доказать существование элемента <code>body</code> тут, присвоив его свойству <code>background-color</code> значение <code>black</code>.",
            "Мы можем это сделать добавлением следующего к нашему элементу <code>style</code>:",
            "<blockquote>body {<br>&nbsp;&nbsp;background-color: black;<br>}</blockquote>"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "</style>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08746",
      "title": "Inherit Styles from the Body Element",
      "description": [
        "Now we've proven that every HTML page has a <code>body</code> element, and that its <code>body</code> element can also be styled with CSS.",
        "Remember, you can style your <code>body</code> element just like any other HTML element, and all your other elements will inherit your <code>body</code> element's styles.",
        "<hr>",
        "First, create a <code>h1</code> element with the text <code>Hello World</code>",
        "Then, let's give all elements on your page the color of <code>green</code> by adding <code>color: green;</code> to your <code>body</code> element's style declaration.",
        "Finally, give your <code>body</code> element the font-family of <code>monospace</code> by adding <code>font-family: monospace;</code> to your <code>body</code> element's style declaration."
      ],
      "tests": [
        {
          "text": "Create an <code>h1</code> element.",
          "testString": "assert(($(\"h1\").length > 0), 'Create an <code>h1</code> element.');"
        },
        {
          "text": "Your <code>h1</code> element should have the text <code>Hello World</code>.",
          "testString": "assert(($(\"h1\").length > 0 && $(\"h1\").text().match(/hello world/i)), 'Your <code>h1</code> element should have the text <code>Hello World</code>.');"
        },
        {
          "text": "Make sure your <code>h1</code> element has a closing tag.",
          "testString": "assert(code.match(/<\\/h1>/g) && code.match(/<h1/g) && code.match(/<\\/h1>/g).length === code.match(/<h1/g).length, 'Make sure your <code>h1</code> element has a closing tag.');"
        },
        {
          "text": "Give your <code>body</code> element the <code>color</code> property of <code>green</code>.",
          "testString": "assert(($(\"body\").css(\"color\") === \"rgb(0, 128, 0)\"), 'Give your <code>body</code> element the <code>color</code> property of <code>green</code>.');"
        },
        {
          "text": "Give your <code>body</code> element the <code>font-family</code> property of <code>monospace</code>.",
          "testString": "assert(($(\"body\").css(\"font-family\").match(/monospace/i)), 'Give your <code>body</code> element the <code>font-family</code> property of <code>monospace</code>.');"
        },
        {
          "text": "Your <code>h1</code> element should inherit the font <code>monospace</code> from your <code>body</code> element.",
          "testString": "assert(($(\"h1\").length > 0 && $(\"h1\").css(\"font-family\").match(/monospace/i)), 'Your <code>h1</code> element should inherit the font <code>monospace</code> from your <code>body</code> element.');"
        },
        {
          "text": "Your <code>h1</code> element should inherit the color green from your <code>body</code> element.",
          "testString": "assert(($(\"h1\").length > 0 && $(\"h1\").css(\"color\") === \"rgb(0, 128, 0)\"), 'Your <code>h1</code> element should inherit the color green from your <code>body</code> element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Erbe Styles vom Body Element",
          "description": [
            "Jetzt haben wir bewiesen dass jede HTML Seite ein <code>body</code> Element besitzt und dass dieses <code>body</code> Element ebenfalls mit CSS gestylt werden kann.",
            "Vergiss nicht, dass du dein <code>body</code> Element wie jedes andere HTML Element stylen kannst und dass alle anderen Elemente von deinem <code>body</code> Element Styles erben werden.",
            "<hr>",
            "Erstelle zuerst ein <code>h1</code> Element mit dem Text <code>Hello World</code>",
            "Dann gib allen Elementen auf deiner Seite die Farbe <code>green</code> indem du <code>color:green;</code> deinen <code>body</code> Element Styles hinzufügst.",
            "Gib deinem <code>body</code> Element abschließend die Schriftart <code>monospace</code> indem du <code>font-family: monospace;</code> deinen <code>body</code> Element Styles hinzufügst."
          ]
        },
        "es": {
          "title": "Hereda estilos del elemento cuerpo",
          "description": [
            "Ya hemos demostrado que cada página HTML tiene un cuerpo (<code>body</code>), y que puede dársele estilo CSS.",
            "Recuerda que puedes dar estilo de tu elemento <code>body</code> como a cualquier otro elemento HTML, y que todos tus otros elementos heredarán sus estilos de tu elemento <code>body</code>.",
            "<hr>",
            "En primer lugar, crea un elemento <code>h1</code> con el texto <code>Hello World</code>",
            "Después, vamos a darle a todos los elementos de tu página el color verde (<code>green</code>) añadiendo <code>color: green;</code> a la declaración de estilo de tu elemento <code>body</code>.",
            "Por último, da a tu elemento <code>body</code> el tipo de letra <code>monospace</code> añadiendo <code>font-family: monospace;</code> a la declaración del estilo de tu elemento <code>body</code>."
          ]
        },
        "pt-br": {
          "title": "Herde Estilos do Elemento Body",
          "description": [
            "Já demonstramos que cada página HTML possui um corpo (<code>body</code>), e que podemos dar estilo a ele através do CSS.",
            "Observe que você pode dar estilo ao seu elemento <code>body</code> como a qualquer outro elemento HTML, e que todos os outros elementos herdarão os estilos de seu elemento <code>body</code>.",
            "<hr>",
            "Em primeiro lugar, crie um elemento <code>h1</code> com o texto <code>Hello World</code>",
            "Depois, dê a todos os elementos de sua página uma cor verde (<code>green</code>) adicionando <code>color: green;</code> na declaração de estilo de seu elemento <code>body</code>.",
            "Por último, dê ao seu elemento <code>body</code> o tipo de fonte <code>monospace</code> adicionando <code>font-family: monospace;</code> na declaração de estilo de seu elemento <code>body</code>."
          ]
        },
        "ru": {
          "title": "Наследование стилей от элемента Body",
          "description": [
            "Мы доказали наличие у каждой HTML-страницы элемента <code>body</code> и то, что этот элемент <code>body</code> можно стилизовать с помощью CSS.",
            "Не забывайте, что вы можете стилизовать ваш элемент <code>body</code> так же как и любой другой HTML-элемент, а все остальные элементы унаследуют стили элемента <code>body</code>.",
            "<hr>",
            "Для начала, создайте элемент <code>h1</code> с текстом <code>Hello World</code>",
            "Затем присвойте всем элементам на вашей странице <code>зелёный</code> цвет путём добавления <code>color: green;</code> к свойствам, указанным в объявлении стилей для элемента <code>body</code>.",
            "В завершении, присвойте вашему элементу <code>body</code> свойство семейства шрифтов равное <code>monospace</code> путём добавления <code>font-family: monospace;</code> к свойствам, указанным в объявлении стилей для элемента <code>body</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: black;",
            "  }",
            "",
            "</style>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08756",
      "title": "Prioritize One Style Over Another",
      "description": [
        "Sometimes your HTML elements will receive multiple styles that conflict with one another.",
        "For example, your <code>h1</code> element can't be both green and pink at the same time.",
        "Let's see what happens when we create a class that makes text pink, then apply it to an element. Will our class <em>override</em> the <code>body</code> element's <code>color: green;</code> CSS property?",
        "<hr>",
        "Create a CSS class called <code>pink-text</code> that gives an element the color pink.",
        "Give your <code>h1</code> element the class of <code>pink-text</code>."
      ],
      "tests": [
        {
          "text": "Your <code>h1</code> element should have the class <code>pink-text</code>.",
          "testString": "assert($(\"h1\").hasClass(\"pink-text\"), 'Your <code>h1</code> element should have the class <code>pink-text</code>.');"
        },
        {
          "text": "Your <code>&#60;style&#62;</code> should have a <code>pink-text</code> CSS class that changes the <code>color</code>.",
          "testString": "assert(code.match(/\\.pink-text\\s*\\{\\s*color\\s*:\\s*.+\\s*;\\s*\\}/g), 'Your <code>&#60;style&#62;</code> should have a <code>pink-text</code> CSS class that changes the <code>color</code>.');"
        },
        {
          "text": "Your <code>h1</code> element should be pink.",
          "testString": "assert($(\"h1\").css(\"color\") === \"rgb(255, 192, 203)\", 'Your <code>h1</code> element should be pink.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Ziehe einen Style einem Anderen vor",
          "description": [
            "Manchmal werden deine HTML Elemente mehrere Styles erhalten die sich gegenseitig widersprechen.",
            "Zum Beispiel könnte dein <code>h1</code> Element nicht gleichzeitig grün und pink sein.",
            "<hr>",
            "Schauen wir uns an was passiert wenn wir eine Klasse erstellen die Text pink macht und dann einem Element hinzufügen. Wird unsere Klasse die <code>color:green;</code> Eigenschaft unseres <code>body</code> Elements überschreiben - <em>override</em> - ?"
          ]
        },
        "es": {
          "title": "Priorizar un estilo sobre otro",
          "description": [
            "A veces los elementos HTML recibirán múltiples estilos que entran en conflicto entre sí.",
            "Por ejemplo, el elemento <code>h1</code> no puede ser verde y rosa al mismo tiempo.",
            "Vamos a ver lo que sucede cuando creamos una clase que hace rosado el texto y luego lo aplicamos a un elemento. ¿Anulará (<em>override</em>) nuestra clase la propiedad CSS <code>color: green</code> del elemento <code>body</code>?",
            "<hr>",
            "Crea una clase CSS llamada <code>pink-text</code> que le da a un elemento el color rosado.",
            "Ponle a tu elemento <code>h1</code> la clase de <code>pink-text</code>."
          ]
        },
        "pt-br": {
          "title": "Priorize um Estilo Sobre o Outro",
          "description": [
            "As vezes os elementos HTML recebem múltiplos estilos que entram em conflito entre si.",
            "Por exemplo, o elemento <code>h1</code> não pode ser verde e rosa ao mesmo tempo.",
            "Vamos ver o que acontece quando criamos uma classe que faz com que o texto seja rosa e então o aplicamos a um elemento. Isso irá sobrepor (<em>override</em>) a propriedade CSS <code>color: green</code> do elemento <code>body</code> de nossa classe?",
            "<hr>",
            "Crie uma classe CSS chamada <code>pink-text</code>, que dê a cor rosa a um elemento.",
            "Depois, adicione a classe <code>pink-text</code> ao seu elemento <code>h1</code>."
          ]
        },
        "ru": {
          "title": "Установите приоритет одного стиля над другим",
          "description": [
            "Иногда вашим HTML-элементам будут присвоены множественные стили, конфликтующие друг с другом.",
            "Например, ваш элемент <code>h1</code> не может быть одновременно зелёным и розовым.",
            "Давайте посмотрим, что произойдёт, когда мы создадим класс, который делает текст розовым, затем присвоим его элементу. <em>Переопределит</em> ли наш класс значение CSS-свойства элемента <code>body</code> равное <code>color: green;</code>?",
            "<hr>",
            "Создайте CSS-класс <code>pink-text</code>, который назначает элементу розовый в качестве цвета.",
            "Назначьте вашему элементу <code>h1</code> класс <code>pink-text</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: black;",
            "    font-family: monospace;",
            "    color: green;",
            "  }",
            "</style>",
            "<h1>Hello World!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf04756",
      "title": "Override Styles in Subsequent CSS",
      "description": [
        "Our \"pink-text\" class overrode our <code>body</code> element's CSS declaration!",
        "We just proved that our classes will override the <code>body</code> element's CSS. So the next logical question is, what can we do to override our <code>pink-text</code> class?",
        "<hr>",
        "Create an additional CSS class called <code>blue-text</code> that gives an element the color blue. Make sure it's below your <code>pink-text</code> class declaration.",
        "Apply the <code>blue-text</code> class to your <code>h1</code> element in addition to your <code>pink-text</code> class, and let's see which one wins.",
        "Applying multiple class attributes to a HTML element is done with a space between them like this:",
        "<code>class=\"class1 class2\"</code>",
        "Note: It doesn't matter which order the classes are listed in the HTML element.",
        "However, the order of the <code>class</code> declarations in the <code>&#60;style&#62;</code> section are what is important. The second declaration will always take precedence over the first. Because <code>.blue-text</code> is declared second, it overrides the attributes of <code>.pink-text</code>"
      ],
      "tests": [
        {
          "text": "Your <code>h1</code> element should have the class <code>pink-text</code>.",
          "testString": "assert($(\"h1\").hasClass(\"pink-text\"), 'Your <code>h1</code> element should have the class <code>pink-text</code>.');"
        },
        {
          "text": "Your <code>h1</code> element should have the class <code>blue-text</code>.",
          "testString": "assert($(\"h1\").hasClass(\"blue-text\"), 'Your <code>h1</code> element should have the class <code>blue-text</code>.');"
        },
        {
          "text": "Both <code>blue-text</code> and <code>pink-text</code> should belong to the same <code>h1</code> element.",
          "testString": "assert($(\".pink-text\").hasClass(\"blue-text\"), 'Both <code>blue-text</code> and <code>pink-text</code> should belong to the same <code>h1</code> element.');"
        },
        {
          "text": "Your <code>h1</code> element should be blue.",
          "testString": "assert($(\"h1\").css(\"color\") === \"rgb(0, 0, 255)\", 'Your <code>h1</code> element should be blue.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Überschreibe Styles mit nachträglichen CSS",
          "description": [
            "Unsere \"pink-text\" Klasse hat unsere CSS Angaben des <code>body</body> Elements überschrieben!",
            "Wir haben gerade bewiesen, dass unsere Klassen das CSS des <code>body</body> Elements überschreiben. Die logische nächste Frage ist also was wir tun können um unsere <code>pink-text</code> Klasse zu überschreiben?",
            "<hr>",
            "Erstelle eine weitere CSS Klasse namens <code>blue-text</code>, die deinem Element eine blaue Farbe gibt. Stelle sicher dass sie unter deiner <code>pink-text</code> Klassen-Deklaration steht.",
            "Füge die <code>blue-text</code> Klasse deinem <code>h1</code> Element zusätzlich zur <code>pink-text</code> Klasse hinzu und schau welche gewinnt.",
            "Einem HTML Element mehrere Klassen Attribute zu geben funktioniert mit einem Leerzeichen dazwischen:",
            "<code>class=\"class1 class2\"</code>",
            "Notiz: Es ist egal in welcher Reihenfolge die Klassen in einem HTML Element angeordnet sind.",
            "Allerdings ist die Reihenfolge der <code>class</code> Deklarationen im <code>&#60;style&#62;</code> Abschnitt durchaus wichtig. Die zweite Deklaration wird immer Vorzug gegenüber der Ersten erhalten. Weil <code>.blue-text</code> als zweites deklariert wird, überschreibt es die Attribute von <code>.pink-text</code>"
          ]
        },
        "es": {
          "title": "Anula estilos con CSS posterior",
          "description": [
            "¡Nuestra clase \"pink-text\" anuló la declaración CSS de nuestro elemento <code>body</code>!",
            "Acabamos de demostrar que nuestras clases anularán el CSS del elemento <code>body</code>. Así que la siguiente pregunta lógica es: ¿qué podemos hacer para anular nuestra clase <code>pink-text</code>?",
            "<hr>",
            "Crea una clase CSS adicional llamada <code>texto-azul</code> que le de a un elemento el color azul. Asegúrate de que está debajo de tu declaración de la clase <code>pink-text</code>. ",
            "Aplica la clase <code>blue-text</code> a tu elemento <code>h1</code> además de tu clase <code>pink-text</code> y veamos cuál gana.",
            "La aplicación de múltiples atributos de clase a un elemento HTML se hace usando espacios entre ellos así:",
            "<code>class=\"clase1 clase2\"</code>",
            "Nota: No importa el orden en que las clases aparecen en el HTML.",
            "Sin embargo, el orden de las declaraciones <code>class</code> en la sección <code>&#60;style&#62;</code> sí son importantes. La segunda declaración siempre precederá a la primera. Debido a que <code>.blue-text</code> es declarada después, esta anula los atributos de <code>.pink-text</code>"
          ]
        },
        "pt-br": {
          "title": "Sobreponha Estilos com CSS Posterior",
          "description": [
            "Nossa classe \"pink-text\" anulou a declaração CSS de nosso elemento <code>body</code>!",
            "Acabamos de demonstrar que nossas classes irão sobrepor o CSS do elemento <code>body</code>. Sendo assim, nossa seguinte pergunta lógica é: O que podemos fazer para sobrepor a nossa classe <code>pink-text</code>?",
            "<hr>",
            "Crie uma classe tradicional com CSS chamada <code>texto-azul</code>, que possa dar a um elemento a cor azul. Tenha a certeza de deixá-la abaixo de sua declaração da classe <code>pink-text</code>.",
            "Aplique a classe <code>blue-text</code> ao seu elemento <code>h1</code>, além da classe <code>pink-text</code>, e vamos ver qual delas ganhará.",
            "Lembre que a adição de vários atributos de classe a um elemento HTML se faz utilizando espaços entre ambos, assim:",
            "<code>class=\"class1 class2\"</code>",
            "Nota: A ordem em que as classes são listadas em HTML não tem importância.",
            "Contudo, a ordem de declarações de <code>classe</code> no <code>&#60;style&#62;</code> é importante. A segunda declaração sempre terá precedência pela primeira. Já que <code>.blue-text</code> é declarado depois, ele irá sobrepor os atributos de <code>.pink-text</code>."
          ]
        },
        "ru": {
          "title": "Преопределите стили последующим CSS",
          "description": [
            "Наш класс \"pink-text\" переопределил объявленное CSS-свойство элемента <code>body</code>!",
            "Мы только что доказали, что наши классы переопределяют CSS-свойства, обявленные в элементе <code>body</code>. Следующим вопросом по логике дожно быть: можем ли мы переопределить наш класс <code>pink-text</code> class?",
            "<hr>",
            "Создайте дополнительный CSS-класс <code>blue-text</code>, который присваивает элементу синий цвет. Убедитесь, что он расположен ниже объявления вашего класса <code>pink-text</code>.",
            "Примените класс <code>blue-text</code> к вашему элементу <code>h1</code> в дополнение к вашему классу <code>pink-text</code>, и давайте посмотрим какой выиграет.",
            "Применение множественных классов к атрибуту <code>class</code> HTML-элемента осуществляется через пробел:",
            "<code>class=\"class1 class2\"</code>",
            "Внимание: порядок, в котором указаны классы HTML-элемента неважен.",
            "Однако, порядок, в котором <code>классы</code> указаны в элементе <code>&#60;style&#62;</code> важен. Последующее объявление будет всегда иметь приоритет над предшествующим. Поскольку <code>.blue-text</code> объявлен последним, он переопрпделяет значения заданные атрибутом <code>.pink-text</code>"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: black;",
            "    font-family: monospace;",
            "    color: green;",
            "  }",
            "  .pink-text {",
            "    color: pink;",
            "  }",
            "</style>",
            "<h1 class=\"pink-text\">Hello World!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd8aedf06756",
      "title": "Override Class Declarations by Styling ID Attributes",
      "description": [
        "We just proved that browsers read CSS from top to bottom. That means that, in the event of a conflict, the browser will use whichever CSS declaration came last.",
        "But we're not done yet. There are other ways that you can override CSS. Do you remember id attributes?",
        "Let's override your <code>pink-text</code> and <code>blue-text</code> classes, and make your <code>h1</code> element orange, by giving the <code>h1</code> element an id and then styling that id.",
        "<hr>",
        "Give your <code>h1</code> element the <code>id</code> attribute of <code>orange-text</code>. Remember, id styles look like this:",
        "<code>&#60;h1 id=\"orange-text\"&#62;</code>",
        "Leave the <code>blue-text</code> and <code>pink-text</code> classes on your <code>h1</code> element.",
        "Create a CSS declaration for your <code>orange-text</code> id in your <code>style</code> element. Here's an example of what this looks like:",
        "<blockquote>#brown-text {<br>&nbsp;&nbsp;color: brown;<br>}</blockquote>",
        "Note: It doesn't matter whether you declare this CSS above or below pink-text class, since id attribute will always take precedence."
      ],
      "tests": [
        {
          "text": "Your <code>h1</code> element should have the class <code>pink-text</code>.",
          "testString": "assert($(\"h1\").hasClass(\"pink-text\"), 'Your <code>h1</code> element should have the class <code>pink-text</code>.');"
        },
        {
          "text": "Your <code>h1</code> element should have the class <code>blue-text</code>.",
          "testString": "assert($(\"h1\").hasClass(\"blue-text\"), 'Your <code>h1</code> element should have the class <code>blue-text</code>.');"
        },
        {
          "text": "Give your <code>h1</code> element the id of <code>orange-text</code>.",
          "testString": "assert($(\"h1\").attr(\"id\") === \"orange-text\", 'Give your <code>h1</code> element the id of <code>orange-text</code>.');"
        },
        {
          "text": "There should be only one <code>h1</code> element.",
          "testString": "assert(($(\"h1\").length === 1), 'There should be only one <code>h1</code> element.');"
        },
        {
          "text": "Create a CSS declaration for your <code>orange-text</code> id",
          "testString": "assert(code.match(/#orange-text\\s*{/gi), 'Create a CSS declaration for your <code>orange-text</code> id');"
        },
        {
          "text": "Do not give your <code>h1</code> any <code>style</code> attributes.",
          "testString": "assert(!code.match(/<h1.*style.*>/gi), 'Do not give your <code>h1</code> any <code>style</code> attributes.');"
        },
        {
          "text": "Your <code>h1</code> element should be orange.",
          "testString": "assert($(\"h1\").css(\"color\") === \"rgb(255, 165, 0)\", 'Your <code>h1</code> element should be orange.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Überschreibe Klassen Deklarationen mit Styling von ID Attributen",
          "description": [
            "Wir haben gerade bewiesen, dass der Browser CSS von oben nach unten liest. Das bedeuted, dass im Falle eines Konflikts der Browser immer die letzte CSS Deklaration verwenden wird.",
            "Aber damit sind wir noch nicht fertig. Es gibt andere Wege um CSS zu überschreiben. Erinnerst du dich an Id Attribute?",
            "Überschreiben wir jetzt unsere <code>pink-text</code> und <code>blue-text</code> Klasse und machen unser <code>h1</code> Element orange, indem wir dem <code>h1</code> Element eine Id geben und diese dann stylen.",
            "<hr>",
            "Gib deinem <code>h1</code> Element das <code>id</code> Attribute <code>orange-text</code>. Vergiss nicht, Id Styles sehen so aus:",
            "<code>&#60;h1 id=\"orange-text\"&#62;</code>",
            "Erstelle eine CSS Deklaration für deine <code>orange-text</code> Id in deinem <code>style</code> Element. Hier siehst du ein Beispiel wie sowas aussieht:",
            "<blockquote>#brown-text {<br>&nbsp;&nbsp;color: brown;<br>}</blockquote>",
            "Notiz: Es ist egal ob du dies vor oder nach deiner \"pink-text\" Klasse schreibst, da Id Attribute immer bevorzugt werden."
          ]
        },
        "es": {
          "title": "Anula la declaración de clases dando estilo a los atributos ID",
          "description": [
            "Acabamos de demostrar que los navegadores leen CSS de arriba hacia abajo. Eso significa que, en el caso de un conflicto, el navegador utilizará la última declaración CSS. ",
            "Pero no hemos terminado todavía. Hay otras maneras con las que puedes anular CSS. ¿Te acuerdas de los atributos id?",
            "Anulemos tus clases <code>pink-text</code> y <code>blue-text</code>, y pongamos anaranjado tu elemento <code>h1</code>, dándole una identificación al elemento <code>h1</code> y poniéndole estilo a esa identificación (<code>id</code>).",
            "<hr>",
            "Dale a tu elemento <code>h1</code> el atributo <code>id</code> con valor <code>orange-text</code>. Recuerda, los atributos id se ven así: ",
            "<code>&#60;h1 id=\"orange-text\"&#62;</code>",
            "Deja las clases <code>blue-text</code> y <code>pink-text</code> de tu elemento <code>h1</code>.",
            "Crea una declaración CSS para tu identificación <code>orange-text</code> en tu elemento <code>style</code>. He aquí un ejemplo de como se ve esto: ",
            "<blockquote>#brown-text {<br>&nbsp;&nbsp;color: brown;<br>}</blockquote>",
            "Nota: No importa si usted declara este CSS encima o debajo de la clase de texto de color rosa, ya atributo id siempre tendrá prioridad."
          ]
        },
        "pt-br": {
          "title": "Sobreponha a Declaração de Classes Estilizando Atributos ID",
          "description": [
            "Acabamos de demonstrar que os navegadores fazem a leitura do CSS de cima para baixo. Isso significa que, em caso de um conflito, o navegador utilizará a última declaração CSS.",
            "Mas ainda não terminamos, pois existem outras formas para sobrepor CSS. Você se lembra dos atributos <code>id</code>?",
            "Vamos sobrepor suas classes <code>pink-text</code> e <code>blue-text</code>, e fazer com que seu elemento <code>h1</code> seja laranja. Faremos isso aplicando uma <code>id</code> para o elemento <code>h1</code> e então estilizando essa <code>id</code>.",
            "<hr>",
            "Dê ao seu elemento <code>h1</code> o atributo <code>id</code> de nome <code>orange-text</code>. Relembre que os atributos id são assim:",
            "<code>#brown-text {</code>",
            "<code>&nbsp;&nbsp;color: brown;</code>",
            "<code>}</code>",
            "Nota: Não importa se você declara este CSS acima ou abaixo da classe de texto cor de rosa, já que atributos id sempre terão prioridade."
          ]
        },
        "ru": {
          "title": "Переопределите значения свойств классов стилизацией атрибутов id",
          "description": [
            "Мы только что доказали, что браузеры читают CSS сверху-вниз. Это значит, что в случае конфликта значений будет установлено то, которое было объявлено в последнюю очередь.",
            "Но мы ещё не закончилил. Есть и другие способы переопределения CSS. Помните атрибуты id?",
            "Давайте переопределим ваши классы <code>pink-text</code> и <code>blue-text</code>, и сделаем ваш элемент <code>h1</code> оранжевым, назначив элементу <code>h1</code> зна��ение атрибута <code>id</code> и его последующей стилизацией.",
            "<hr>",
            "Назначьте вашему элементу <code>h1</code> значение атрибута <code>id</code> равное <code>orange-text</code>. Помните, что стилизация атрибута <code>id</code> выглядит так:",
            "<code>&#60;h1 id=\"orange-text\"&#62;</code>",
            "Оставьте классы <code>blue-text</code> и <code>pink-text</code> присвоенными вашему элементу <code>h1</code>.",
            "Объявите свойства вашего атрибута <code>id</code> с названием <code>orange-text</code> в вашем элементе <code>style</code>. Вот пример того, как это выглядит:",
            "<blockquote>#brown-text {<br>&nbsp;&nbsp;color: brown;<br>}</blockquote>",
            "Внимание: Не имеет значения объявите ли вы стиль выше или ниже класса <code>pink-text</code>, так как атрибут <code>id</code> всегда имеет приоритет."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: black;",
            "    font-family: monospace;",
            "    color: green;",
            "  }",
            "  .pink-text {",
            "    color: pink;",
            "  }",
            "  .blue-text {",
            "    color: blue;",
            "  }",
            "</style>",
            "<h1 class=\"pink-text blue-text\">Hello World!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf06756",
      "title": "Override Class Declarations with Inline Styles",
      "description": [
        "So we've proven that id declarations override class declarations, regardless of where they are declared in your <code>style</code> element CSS.",
        "There are other ways that you can override CSS. Do you remember inline styles?",
        "<hr>",
        "Use an <code>inline style</code> to try to make our <code>h1</code> element white. Remember, in line styles look like this:",
        "<code>&#60;h1 style=\"color: green\"&#62;</code>",
        "Leave the <code>blue-text</code> and <code>pink-text</code> classes on your <code>h1</code> element."
      ],
      "tests": [
        {
          "text": "Your <code>h1</code> element should have the class <code>pink-text</code>.",
          "testString": "assert($(\"h1\").hasClass(\"pink-text\"), 'Your <code>h1</code> element should have the class <code>pink-text</code>.');"
        },
        {
          "text": "Your <code>h1</code> element should have the class <code>blue-text</code>.",
          "testString": "assert($(\"h1\").hasClass(\"blue-text\"), 'Your <code>h1</code> element should have the class <code>blue-text</code>.');"
        },
        {
          "text": "Your <code>h1</code> element should have the id of <code>orange-text</code>.",
          "testString": "assert($(\"h1\").attr(\"id\") === \"orange-text\", 'Your <code>h1</code> element should have the id of <code>orange-text</code>.');"
        },
        {
          "text": "Give your <code>h1</code> element an inline style.",
          "testString": "assert(document.querySelector('h1[style]'), 'Give your <code>h1</code> element an inline style.');"
        },
        {
          "text": "Your <code>h1</code> element should be white.",
          "testString": "assert($(\"h1\").css(\"color\") === \"rgb(255, 255, 255)\", 'Your <code>h1</code> element should be white.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Überschreibe deine Klassen Deklarationen mit Inline Styles",
          "description": [
            "Wir haben also gesehen dass Id Deklarationen die von Klassen überschreiben, egal wo sie in deinem <code>style</code> Element CSS stehen.",
            "Es gibt noch andere Wege CSS zu überschreiben. Erinnerst du dich an Inline Styles?",
            "<hr>",
            "Benutze <code>inline style</code> um dein <code>h1</code> Element weiß zu machen. Vergiss nicht, Inline Styles sehen so aus:",
            "<code>&#60;h1 style=\"color: green\"&#62;</code>",
            "Lasse die <code>blue-text</code> und <code>pink-text</code> Klassen auf deinem <code>h1</code> Element."
          ]
        },
        "es": {
          "title": "Anula declaraciones de clase con estilos en línea",
          "description": [
            "Así que hemos demostrado que las declaraciones de identificadores anulan las declaraciones de clase, independientemente del lugar donde se declaran en tu elemento de estilo CSS <code>style</code>.",
            "Hay otras maneras en las que puedes anular CSS. ¿Te acuerdas de los estilos en línea?",
            "<hr>",
            "Utiliza un <code>estilo en línea</code> para tratar de hacer blanco nuestro elemento <code>h1</code>. Recuerda, los estilos en línea se ven así: ",
            "<code>&#60;h1 style=\"color: green\"&#62;</code>",
            "Deja las clases <code>blue-text</code> y <code>pink-text</code> en tu elemento <code>h1</code>."
          ]
        },
        "pt-br": {
          "title": "Sobreponha a Declaração de Classes com Estilos Inline",
          "description": [
            "Certo, nós demonstramos que declarações de id sobrepoem as declarações de classe, independente do lugar onde são declarados em seu elemento <code>style</code> no CSS.",
            "Existem outras formas em que você pode sobrepor CSS. Você se lembra de estilos inline?",
            "<hr>",
            "Use um estilo <code>inline</code> para tentar fazer com que nosso elemento <code>h1</code> tenha a cor branca. Relembre que estilos inline são assim:",
            "<code>&#60;h1 style=\"color: green\"&#62;</code>",
            "Deixe as classes <code>blue-text</code> e <code>pink-text</code> em seu elemento <code>h1</code>."
          ]
        },
        "ru": {
          "title": "Переопределите значения свойств классов встроенными стилями",
          "description": [
            "Итак, мы доказали, что объявление атрибута <code>id</code> переопределяет значения свойств, определённые в значениях атрибута <code>class</code>, независимо от того, были ли они объявлены в вашем элементе <code>style</code>.",
            "Есть и другие способы переопределения CSS. Помните встроенные стили?",
            "<hr>",
            "Используйте <code>встроенный стиль</code>, чтобы попробовать сделать наш элемент <code>h1</code> белым. Помните, что встроенные стили выглядят следующим образом:",
            "<code>&#60;h1 style=\"color: green\"&#62;</code>",
            "Оставьте классы <code>blue-text</code> и <code>pink-text</code> назначенными вашему элементу <code>h1</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: black;",
            "    font-family: monospace;",
            "    color: green;",
            "  }",
            "  #orange-text {",
            "    color: orange;",
            "  }",
            "  .pink-text {",
            "    color: pink;",
            "  }",
            "  .blue-text {",
            "    color: blue;",
            "  }",
            "</style>",
            "<h1 id=\"orange-text\" class=\"pink-text blue-text\">Hello World!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf07756",
      "title": "Override All Other Styles by using Important",
      "description": [
        "Yay! We just proved that inline styles will override all the CSS declarations in your <code>style</code> element.",
        "But wait. There's one last way to override CSS. This is the most powerful method of all. But before we do it, let's talk about why you would ever want to override CSS.",
        "In many situations, you will use CSS libraries. These may accidentally override your own CSS. So when you absolutely need to be sure that an element has specific CSS, you can use <code>!important</code>",
        "Let's go all the way back to our <code>pink-text</code> class declaration. Remember that our <code>pink-text</code> class was overridden by subsequent class declarations, id declarations, and inline styles.",
        "<hr>",
        "Let's add the keyword <code>!important</code> to your pink-text element's color declaration to make 100% sure that your <code>h1</code> element will be pink.",
        "An example of how to do this is:",
        "<code>color: red !important;</code>"
      ],
      "tests": [
        {
          "text": "Your <code>h1</code> element should have the class <code>pink-text</code>.",
          "testString": "assert($(\"h1\").hasClass(\"pink-text\"), 'Your <code>h1</code> element should have the class <code>pink-text</code>.');"
        },
        {
          "text": "Your <code>h1</code> element should have the class <code>blue-text</code>.",
          "testString": "assert($(\"h1\").hasClass(\"blue-text\"), 'Your <code>h1</code> element should have the class <code>blue-text</code>.');"
        },
        {
          "text": "Your <code>h1</code> element should have the id of <code>orange-text</code>.",
          "testString": "assert($(\"h1\").attr(\"id\") === \"orange-text\", 'Your <code>h1</code> element should have the id of <code>orange-text</code>.');"
        },
        {
          "text": "Your <code>h1</code> element should have the inline style of <code>color&#58; white</code>.",
          "testString": "assert(code.match(/<h1.*style/gi) && code.match(/<h1.*style.*color\\s*?:/gi), 'Your <code>h1</code> element should have the inline style of <code>color&#58; white</code>.');"
        },
        {
          "text": "Your <code>pink-text</code> class declaration should have the <code>!important</code> keyword to override all other declarations.",
          "testString": "assert(code.match(/\\.pink-text\\s*?\\{[\\s\\S]*?color:.*pink.*!important\\s*;?[^\\.]*\\}/g), 'Your <code>pink-text</code> class declaration should have the <code>!important</code> keyword to override all other declarations.');"
        },
        {
          "text": "Your <code>h1</code> element should be pink.",
          "testString": "assert($(\"h1\").css(\"color\") === \"rgb(255, 192, 203)\", 'Your <code>h1</code> element should be pink.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Überschreibe alle anderen Styles mit Important",
          "description": [
            "Juhu! Wir haben bewiesen dass Inline Styles alle CSS Deklarationen aus deinem <code>style</code> Element überschreiben.",
            "Aber warte. Es gibt eine letzte Art CSS zu überschreiben. Dabei handelt es sich um die mächtigste Methode von allen. Aber bevor wir dazu kommen, sehen wir uns an warum du überhaupt CSS überschreiben wollen würdest.",
            "In vielen Situationen wirst du sogenannte \"CSS libraries\" (CSS Bibliotheken) verwenden. Diese könnten versehentlich dein eigenes CSS überschreiben. Wenn du also absolut sicher sein musst dass ein Element einen bestimmten Style hat, kannst du <code>!important</code> verwenden.",
            "Gehen wir zurück zu unserer <code>pink-text</code> Klassendeklaration. Wie du dich vielleicht erinnerst wurde unsere <code>pink-text</code> Klasse von darauffolgenden Klassen, Ids und Inline Styles überschrieben.",
            "<hr>",
            "Füge das Schlüsselwort <code>!important</code> zu der Farbe deines \"pink-text\" Elements hinzu um 100% sicher zu gehen dass das <code>h1</code> Element pink ist.",
            "Hier ist ein Beispiel wie man das macht:",
            "<code>color: red !important;</code>"
          ]
        },
        "es": {
          "title": "Anula todos los demás estilos utilizando Important",
          "description": [
            "¡Hurra! Demostramos que los estilos en línea anularán todas las declaraciones CSS de tu elemento <code>style</code>. ",
            "¡Pero espera! Hay una última forma de anular CSS. Este es el método más poderoso de todos. Pero antes de hacerlo, vamos a hablar de por qué puedes querer anular CSS. ",
            "En muchas situaciones, usarás bibliotecas CSS. Estas pueden anular accidentalmente tu propio CSS. Por eso, cuando necesitas estar seguro de que un elemento tiene un CSS específico puedes usar <code>!important</code>",
            "Regresemos a nuestra declaración de clase <code>pink-text</code>. Recuerda que nuestra clase <code>pink-text</code> fue anulada por declaraciones de clases posteriores, declaraciones id, y estilos en línea. ",
            "<hr>",
            "Vamos a añadir la palabra clave <code>!important</code> a tu declaración del color de <code>pink-text</code> para estar 100% seguros que tu elemento <code>h1</code> será rosado.",
            "Un ejemplo de cómo hacer esto es:",
            "<code>color: red !important;</code>"
          ]
        },
        "pt-br": {
          "title": "Sobreponha Todos os Outros Elementos Utilizando Important",
          "description": [
            "Isso! Demonstramos que os estilos inline irão sobrepor todas as declarações CSS de seu elemento <code>style</code>.",
            "Mas, espere! Há uma última forma de sobrepor com CSS. Este é o método mais poderoso de todos. Contudo, antes de colocá-lo em prática, vamos falar sobre os motivos que podem fazer você querer sobrepor CSS.",
            "Em diversas situações, você usará bibliotecas CSS. Pode ser que essas bibliotecas sobreponham acidentalmente o seu próprio CSS. Por isso, quando você precisar estar seguro de que um elemento possui um CSS específico, você poderá utilizar <code>!important</code>.",
            "Certo, vamos voltar para a nossa declaração de classe <code>pink-text</code>. Relembre que nossa classe <code>pink-text</code> foi sobreposta pelas declarações de classe posteriores, por declarações id e por estilos inline.",
            "<hr>",
            "Vamos adicionar nossa palavra-clave <code>!important</code> para sua declaração de cor de <code>pink-text</code> para que possamos estar 100% seguros que seu elemento <code>h1</code> será sempre cor de rosa.",
            "Um exemplo para fazer isso é:",
            "<code>color: red !important;</code>"
          ]
        },
        "ru": {
          "title": "Переопределите все другие стили применив important",
          "description": [
            "Ура! Мы только что доказали, что встроенные стили переопределяют все другие объявления CSS-свойств в вашем элементе <code>style</code>.",
            "Но подождите. Есть ещё один последний способ переопределения CSS. Это наиболее существенный способ из всех. Но перед тем, как мы его попробует, давайте поговорим о том, зачем вам может понадобиться переопрелить CSS.",
            "Во множестве ситуаций вы будете использовать CSS-библиотеки. Это может переопределить ваш собственный CSS. Таким образом, когда вам требуется быть абсолютно уверенными в том, что элемент будет обладать определёнными CSS-свойствами, вы можете использовать <code>!important</code>",
            "Давайте вернёмся к объявлению нашего класса <code>pink-text</code>. Помните, что наш класс <code>pink-text</code> был переопределён последующим классом, стилизацией атрибута <code>id</code>, встроенным стилем.",
            "<hr>",
            "Давайте добавим ключевое слово <code>!important</code> к вашему объявлению текста розовым, чтобы убедиться на 100%, что ваш элемент <code>h1</code> будет розовый.",
            "Пример того, как это можено сделать:",
            "<code>color: red !important;</code>"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: black;",
            "    font-family: monospace;",
            "    color: green;",
            "  }",
            "  #orange-text {",
            "    color: orange;",
            "  }",
            "  .pink-text {",
            "    color: pink;",
            "  }",
            "  .blue-text {",
            "    color: blue;",
            "  }",
            "</style>",
            "<h1 id=\"orange-text\" class=\"pink-text blue-text\" style=\"color: white\">Hello World!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08726",
      "title": "Use Hex Code for Specific Colors",
      "description": [
        "Did you know there are other ways to represent colors in CSS? One of these ways is called hexadecimal code, or <code>hex code</code> for short.",
        "We usually use <code>decimals</code>, or base 10 numbers, which use the symbols 0 to 9 for each digit. <code>Hexadecimals</code> (or <code>hex</code>) are base 16 numbers. This means it uses sixteen distinct symbols. Like decimals, the symbols 0-9 represent the values zero to nine. Then A,B,C,D,E,F represent the values ten to fifteen. Altogether, 0 to F can represent a digit in <code>hexadecimal</code>, giving us 16 total possible values. You can find more information about <a target='_blank' href='https://en.wikipedia.org/wiki/Hexadecimal'>hexadecimal numbers here</a>.",
        "In CSS, we can use 6 hexadecimal digits to represent colors, two each for the red (R), green (G), and blue (B) components. For example, <code>#000000</code> is black and is also the lowest possible value. You can find more information about the <a target='_blank' href='https://en.wikipedia.org/wiki/RGB_color_model'>RGB color system here</a>.",
        "<blockquote>body {<br>&nbsp;&nbsp;color: #000000;<br>}</blockquote>",
        "<hr>",
        "Replace the word <code>black</code> in our <code>body</code> element's background-color with its <code>hex code</code> representation, <code>#000000</code>."
      ],
      "tests": [
        {
          "text": "Give your <code>body</code> element the background-color of black.",
          "testString": "assert($(\"body\").css(\"background-color\") === \"rgb(0, 0, 0)\", 'Give your <code>body</code> element the background-color of black.');"
        },
        {
          "text": "Use the <code>hex code</code> for the color black instead of the word <code>black</code>.",
          "testString": "assert(code.match(/body\\s*{(([\\s\\S]*;\\s*?)|\\s*?)background.*\\s*:\\s*?#000(000)?((\\s*})|(;[\\s\\S]*?}))/gi), 'Use the <code>hex code</code> for the color black instead of the word <code>black</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Verwende hexadezimal Code für spezifische Farben",
          "description": [
            "Wusstest du dass es andere Möglichkeiten gibt Farben in CSS darzustellen? Eine dieser Möglichkeiten ist \"Hexadezimal Code\" genannt, oder kurz <code>hex code</code>.",
            "Wir verwenden üblicherweise <code>decimals</code> (Dezimalen), oder Zehnersystem, das für jede Ziffer eine Symbol von 0 bis 9 verwendet. <code>Hexadecimals</code> (Hexadezimalzahlen oder <code>hex</code>) beruhen auf einer 16er Basis. Das bedeuted dass sie 16 verschiedene Symbole verwenden. Wie auch Dezimalzahlen, repräsentiern die Symbole \"0\"-\"9\" Null bis Neun. Dann allerdings geht es weiter mit A,B,C,D,E,F für die Zahlen 10-15. Alles in Allem kann eine einzige Ziffer, mit 0 bis F, in <code>hexadecimal</code> 16 mögliche Werte ausdrücken. Mehr Informationen über das Hexadezimalsystem kannst du <a target='_blank' href='https://de.wikipedia.org/wiki/Hexadezimalsystem'>hier</a> finden.",
            "In CSS können wir 6 Hexadezimalziffern verwenden um eine Farbe auszudrücken, je zwei für den Rot- (R), Grün (G)- und Blauanteil (B). <code>#000000</code> ist zum Beispiel schwarz und der niedrigst mögliche Wert. Mehr Information über den RGB Farbraum findest du <a target:'_blank' href='https://de.wikipedia.org/wiki/RGB-Farbraum'>hier</a>.",
            "<hr>",
            "Ersetzte das Wort <code>black</code> in der Hintergrundfarbe deines <code>body</code> Elements mit dem <code>hex code</code> <code>#000000</code>."
          ]
        },
        "es": {
          "title": "Usa el código hexadecimal para especificar colores",
          "description": [
            "¿Sabías que hay otras maneras de representar los colores en CSS? Una de estas formas es llamada código hexadecimal o <code>código hex</code> para abreviar. ",
            "El sistema <code>Decimal</code> se refiere al que nos permite representar cantidades empleando los dígitos del cero al nueve - los números que la gente usa en la vida cotidiana. El sistema <code>Hexadecimal</code> incluye estos 10 dígitos más las letras A, B, C, D, E y F. Esto significa que Hexadecimal tiene un total de 16 dígitos posibles, en lugar de las 10 posibles que nos da nuestro sistema numérico normal en base 10. ",
            "Con CSS, utilizamos 6 dígitos hexadecimales para representar los colores. Por ejemplo, <code>#000000</code> es el valor más bajo posible, y representa el color negro. ",
            "<hr>",
            "Reemplaza la palabra <code>black</code> en el color de fondo (<code>background-color</code>) de nuestro elemento <code>body</code> por su representación hexadecimal <code>#000000</code>"
          ]
        },
        "pt-br": {
          "title": "Use Código Hexadecimal para Especificar Cores",
          "description": [
            "Você sabia que existem outras formas para representar as cores em CSS? Uma dessas formas é com o que chamamos de código hexadecimal, ou <code>código hex</code> para abreviar.",
            "O sistema <code>Decimal</code> nos permite representar quantidades numéricas com os dígitos de zero a nove - assim como nós os utilizamos durante o nosso dia a dia. Já o sistema <code>Hexadecimal</code> inclui estes 10 dígitos e também as letras A, B, C, D, E e F. Isso significa que o Hexadecimal possui um total de 16 dígitos possíveis, ao invés dos 10 possíveis que podemos usar com nosso sistema numérico normal de base 10.",
            "No CSS, utilizamos 6 dígitos hexadecimais para representar as cores. Por exemplo, <code>#000000</code> é o valor mais baixo possível, e representa a cor preta.",
            "<hr>",
            "Substitua a palavra <code>black</code> na cor de fundo (<code>background-color</code>) de nosso elemento <code>body</code> pela sua representação hexadecimal <code>#000000</code>."
          ]
        },
        "ru": {
          "title": "Используйте hex-цвета для выбора определённых цветов",
          "description": [
            "Знали ли вы, что существуют другие способы представления цветов в CSS? Одним из этих способов является шестнадцатиричный код, <code>hex-код</code>, если короче.",
            "Обычно мы используем <code>десятки</code>, или десятичную систему счисления, в основе которой лежит число 10, которая использует символы от 0 до 9 для каждого числа. В основе <code>Шестнадцатиричной</code> системы лежит число 16. Это значит, что она использует шестнадцать различных символов. Как в десятичной, символы 0-9 соответствуют значениям от нуля до девяти. Далее A,B,C,D,E,F соответствуют значениям от десяти до пятнадцати. Вместе, от 0 до F, с их помощью можно представить число в <code>шестнадцатиричной</code> системе счисления, что даёт нам в целом 16 возможных значений. Вы можете найти больше информации о <a target='_blank' href='https://ru.wikipedia.org/wiki/%D0%A8%D0%B5%D1%81%D1%82%D0%BD%D0%B0%D0%B4%D1%86%D0%B0%D1%82%D0%B5%D1%80%D0%B8%D1%87%D0%BD%D0%B0%D1%8F_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%81%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F'>шестнадцатиричной системе счисления тут</a>.",
            "В CSS, мы можем использовать 6 шестнадцатиричных чисел для представления цвета, по два на каждый компонент: красный (R), зелёный (G), синий (B). Например, <code>#000000</code> - черный цвет и минимальное значение. Вы можете найти больше информации о <a target='_blank' href='https://ru.wikipedia.org/wiki/RGB'>цветовой модели RGB</a>.",
            "<hr>",
            "Замените слово <code>black</code> в свойстве <code>background-color</code> нашего элемента <code>body</code> на представление в виде <code>hex-кода</code>, <code>#000000</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: black;",
            "  }",
            "</style>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08721",
      "title": "Use Hex Code to Mix Colors",
      "description": [
        "To review, hex codes use 6 hexadecimal digits to represent colors, two each for red (R), green (G), and blue (B) components.",
        "From these three pure colors (red, green, and blue), we can vary the amounts of each to create over 16 million other colors!",
        "For example, orange is pure red, mixed with some green, and no blue. In hex code, this translates to being <code>#FFA500</code>.",
        "The digit <code>0</code> is the lowest number in hex code, and represents a complete absence of color.",
        "The digit <code>F</code> is the highest number in hex code, and represents the maximum possible brightness.",
        "<hr>",
        "Replace the color words in our <code>style</code> element with their correct hex codes.",
        "<table class='table table-striped'><tr><th>Color</th><th>Hex Code</th></tr><tr><td>Dodger Blue</td><td><code>#1E90FF</code></td></tr><tr><td>Green</td><td><code>#00FF00</code></td></tr><tr><td>Orange</td><td><code>#FFA500</code></td></tr><tr><td>Red</td><td><code>#FF0000</code></td></tr></table>"
      ],
      "tests": [
        {
          "text": "Give your <code>h1</code> element with the text <code>I am red!</code> the <code>color</code> red.",
          "testString": "assert($('.red-text').css('color') === 'rgb(255, 0, 0)', 'Give your <code>h1</code> element with the text <code>I am red!</code> the <code>color</code> red.');"
        },
        {
          "text": "Use the <code>hex code</code> for the color red instead of the word <code>red</code>.",
          "testString": "assert(code.match(/\\.red-text\\s*?{\\s*?color:\\s*?#FF0000\\s*?;\\s*?}/gi), 'Use the <code>hex code</code> for the color red instead of the word <code>red</code>.');"
        },
        {
          "text": "Give your <code>h1</code> element with the text <code>I am green!</code> the <code>color</code> green.",
          "testString": "assert($('.green-text').css('color') === 'rgb(0, 255, 0)', 'Give your <code>h1</code> element with the text <code>I am green!</code> the <code>color</code> green.');"
        },
        {
          "text": "Use the <code>hex code</code> for the color green instead of the word <code>green</code>.",
          "testString": "assert(code.match(/\\.green-text\\s*?{\\s*?color:\\s*?#00FF00\\s*?;\\s*?}/gi), 'Use the <code>hex code</code> for the color green instead of the word <code>green</code>.');"
        },
        {
          "text": "Give your <code>h1</code> element with the text <code>I am dodger blue!</code> the <code>color</code> dodger blue.",
          "testString": "assert($('.dodger-blue-text').css('color') === 'rgb(30, 144, 255)', 'Give your <code>h1</code> element with the text <code>I am dodger blue!</code> the <code>color</code> dodger blue.');"
        },
        {
          "text": "Use the <code>hex code</code> for the color dodger blue instead of the word <code>dodgerblue</code>.",
          "testString": "assert(code.match(/\\.dodger-blue-text\\s*?{\\s*?color:\\s*?#1E90FF\\s*?;\\s*?}/gi), 'Use the <code>hex code</code> for the color dodger blue instead of the word <code>dodgerblue</code>.');"
        },
        {
          "text": "Give your <code>h1</code> element with the text <code>I am orange!</code> the <code>color</code> orange.",
          "testString": "assert($('.orange-text').css('color') === 'rgb(255, 165, 0)', 'Give your <code>h1</code> element with the text <code>I am orange!</code> the <code>color</code> orange.');"
        },
        {
          "text": "Use the <code>hex code</code> for the color orange instead of the word <code>orange</code>.",
          "testString": "assert(code.match(/\\.orange-text\\s*?{\\s*?color:\\s*?#FFA500\\s*?;\\s*?}/gi), 'Use the <code>hex code</code> for the color orange instead of the word <code>orange</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Verwende Hexadezimal Code um Farben zu mischen",
          "description": [
            "Mit diesen drei puren Farben (Rot, Grün und Blau) können wir 16 Millionen andere Farben erzeugen.",
            "Orange, zum Beispiel, ist pures Rot, gemischt mit ein bisschen Grün und keinem Blau",
            "<hr>",
            "Gib dem <code>body</code> Element eine orange Hintergrundfarbe indem du den Hexadezimal Code <code>#FFA500</code> verwendest."
          ]
        },
        "es": {
          "title": "Usa código hex para mezclar colores",
          "description": [
            "A partir de estos tres colores puros (rojo, verde y azul), podemos crear 16 millones de colores.",
            "Por ejemplo, el naranja es rojo puro, mezclado con un poco de verde, y sin azul.",
            "<hr>",
            "Haz que el color de fondo del elemento <code>body</code> sea anaranjado, dándole el código hexadecimal <code>#FFA500</code>"
          ]
        },
        "pt-br": {
          "title": "Use Código Hexadecimal para Misturar Cores",
          "description": [
            "A partir dessas três cores puras (vermelho, verde e azul), podemos criar 16 milhões de cores.",
            "Por exemplo, o laranja é vermelho puro misturado com um pouco de verde, e sem nada de azul.",
            "<hr>",
            "Faça com que a cor de fundo do elemento <code>body</code> seja alaranjada, usando o código hexadecimal <code>#FFA500</code>."
          ]
        },
        "ru": {
          "title": "Используйте hex-код, чтобы смешивать цвета",
          "description": [
            "Из этих трёх чистых цветов (красного, зелёного и синего), мы можем создать 16 миллионов других цветов.",
            "Например, оранжевый - смесь чистого красного с примесью зелёного, но без синего.",
            "<hr>",
            "Сделайте цвет фона элемента <code>body</code> оранжевым, присвоив его соответствующему свойству значение hex-кода равное <code>#FFA500</code>"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .red-text {",
            "    color: black;",
            "  }",
            "  .green-text {",
            "    color: black;",
            "  }",
            "  .dodger-blue-text {",
            "    color: black;",
            "  }",
            "  .orange-text {",
            "    color: black;",
            "  }",
            "</style>",
            "",
            "<h1 class=\"red-text\">I am red!</h1>",
            "",
            "<h1 class=\"green-text\">I am green!</h1>",
            "",
            "<h1 class=\"dodger-blue-text\">I am dodger blue!</h1>",
            "",
            "<h1 class=\"orange-text\">I am orange!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08719",
      "title": "Use Abbreviated Hex Code",
      "description": [
        "Many people feel overwhelmed by the possibilities of more than 16 million colors. And it's difficult to remember hex code. Fortunately, you can shorten it.",
        "For example, red's hex code <code>#FF0000</code> can be shortened to <code>#F00</code>. This shortened form gives one digit for red, one digit for green, and one digit for blue.",
        "This reduces the total number of possible colors to around 4,000. But browsers will interpret <code>#FF0000</code> and <code>#F00</code> as exactly the same color.",
        "<hr>",
        "Go ahead, try using the abbreviated hex codes to color the correct elements.",
        "<table class='table table-striped'><tr><th>Color</th><th>Short Hex Code</th></tr><tr><td>Cyan</td><td><code>#0FF</code></td></tr><tr><td>Green</td><td><code>#0F0</code></td></tr><tr><td>Red</td><td><code>#F00</code></td></tr><tr><td>Fuchsia</td><td><code>#F0F</code></td></tr></table>"
      ],
      "tests": [
        {
          "text": "Give your <code>h1</code> element with the text <code>I am red!</code> the <code>color</code> red.",
          "testString": "assert($('.red-text').css('color') === 'rgb(255, 0, 0)', 'Give your <code>h1</code> element with the text <code>I am red!</code> the <code>color</code> red.');"
        },
        {
          "text": "Use the abbreviate <code>hex code</code> for the color red instead of the hex code <code>#FF0000</code>.",
          "testString": "assert(code.match(/\\.red-text\\s*?{\\s*?color:\\s*?#F00\\s*?;\\s*?}/gi), 'Use the abbreviate <code>hex code</code> for the color red instead of the hex code <code>#FF0000</code>.');"
        },
        {
          "text": "Give your <code>h1</code> element with the text <code>I am green!</code> the <code>color</code> green.",
          "testString": "assert($('.green-text').css('color') === 'rgb(0, 255, 0)', 'Give your <code>h1</code> element with the text <code>I am green!</code> the <code>color</code> green.');"
        },
        {
          "text": "Use the abbreviated <code>hex code</code> for the color green instead of the hex code <code>#00FF00</code>.",
          "testString": "assert(code.match(/\\.green-text\\s*?{\\s*?color:\\s*?#0F0\\s*?;\\s*?}/gi), 'Use the abbreviated <code>hex code</code> for the color green instead of the hex code <code>#00FF00</code>.');"
        },
        {
          "text": "Give your <code>h1</code> element with the text <code>I am cyan!</code> the <code>color</code> cyan.",
          "testString": "assert($('.cyan-text').css('color') === 'rgb(0, 255, 255)', 'Give your <code>h1</code> element with the text <code>I am cyan!</code> the <code>color</code> cyan.');"
        },
        {
          "text": "Use the abbreviated <code>hex code</code> for the color cyan instead of the hex code <code>#00FFFF</code>.",
          "testString": "assert(code.match(/\\.cyan-text\\s*?{\\s*?color:\\s*?#0FF\\s*?;\\s*?}/gi), 'Use the abbreviated <code>hex code</code> for the color cyan instead of the hex code <code>#00FFFF</code>.');"
        },
        {
          "text": "Give your <code>h1</code> element with the text <code>I am fuchsia!</code> the <code>color</code> fuchsia.",
          "testString": "assert($('.fuchsia-text').css('color') === 'rgb(255, 0, 255)', 'Give your <code>h1</code> element with the text <code>I am fuchsia!</code> the <code>color</code> fuchsia.');"
        },
        {
          "text": "Use the abbreviated <code>hex code</code> for the color fuchsia instead of the hex code <code>#FF00FF</code>.",
          "testString": "assert(code.match(/\\.fuchsia-text\\s*?{\\s*?color:\\s*?#F0F\\s*?;\\s*?}/gi), 'Use the abbreviated <code>hex code</code> for the color fuchsia instead of the hex code <code>#FF00FF</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Verwende abgekürzten Hexadezimal Code",
          "description": [
            "Viele Leute fühlen sich mit der Auswahl aus über 16 Millionen Farben überfordert. Außerdem ist es schwierig sich Hexadezimal Codes zu merken. Zum Glück kannst du sie abkürzen.",
            "Rot, zum Beispiel, mit dem Hexadezimal Code von <code>#FF0000</code> kannst du mit <code>#F00</code> abkürzen. Das bedeuted eine Ziffer für Rot, eine für Grün und eine für Blau",
            "Das reduziert die Gesamtsumme an möglichen Farben auf ungefähr 4.000. Aber Browser interpretieren <code>#FF0000</code> und <code>#F00</code> als exakt die gleiche Farbe.",
            "<hr>",
            "Probiere <code>#F00</code> aus um die Hintergrundfarbe des <code>body</code> Elements rot zu färben."
          ]
        },
        "es": {
          "title": "Uso código hex abreviado",
          "description": [
            "Mucha gente se siente abrumada por las posibilidades de más de 16 millones de colores. Y es difícil recordar el código hexadecimal. Afortunadamente puedes acortarlo. ",
            "Por ejemplo, el rojo, que es <code>#FF0000</code> en código hexadecimal, se puede abreviar a <code>#F00</code>. Es decir, un dígito para el rojo, un dígito para el verde, un dígito para el azul. ",
            "Esto reduce el número total de posibles colores a alrededor de 4.000. Pero los navegadores interpretarán <code>#FF0000</code> y <code>#F00</code> como exactamente el mismo color. ",
            "<hr>",
            "Adelante, intenta usar <code>#F00</code> para volver rojo el color de fondo del elemento <code>body</code>."
          ]
        },
        "pt-br": {
          "title": "Use Código Hexadecimal Abreviado",
          "description": [
            "Muitas pessoas se sentem confusas com as possibilidades de mais de 16 milhões de cores. Além disso, é difícil lembrar de códigos hexadecimais. Por sorte, podemos abreviá-lo.",
            "Por exemplo, o vermelho que é <code>#FF0000</code> em código hexadecimal pode ser abreviado a <code>#F00</code>. Isso quer dizer que podemos usar um dígito para vermelho, um dígito para verde e um dígito para azul.",
            "Fazer isso reduz o número total de possíveis cores para ao redor de 4.000. Apesar disso, os navegadores interpretarão <code>#FF0000</code> e <code>#F00</code> exatamente como a mesma cor.",
            "<hr>",
            "Continue, tente usar <code>#F00</code> para fazer com que a cor de fundo do elemento <code>body</code> seja vermelha."
          ]
        },
        "ru": {
          "title": "Используйте аббревиатуры hex-кода",
          "description": [
            "Множество людей обременяет возможность применения более 16-ти миллионов цветов. И hex-коды достаточно сложно запоминать. К счастью, вы можете использовать укороченные выражения.",
            "Например, красный, который имеет значение <code>#FF0000</code> в виде hex-кода, может быть укорочен до <code>#F00</code>. В укороченном виде: одна цифра представляет красный, одна - зелёный, одна - синий.",
            "Это уменьшает общее количество возможных цветов до порядка 4,000. Но браузеры будут интерпретировать <code>#FF0000</code> и <code>#F00</code> как один и тот же цвет.",
            "<hr>",
            "Вперёд, попробуйте применить значение <code>#F00</code>, чтобы сделать цвет фона элемента <code>body</code> красным."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .red-text {",
            "    color: #000000;",
            "  }",
            "  .fuchsia-text {",
            "    color: #000000;",
            "  }",
            "  .cyan-text {",
            "    color: #000000;",
            "  }",
            "  .green-text {",
            "    color: #000000;",
            "  }",
            "</style>",
            "",
            "<h1 class=\"red-text\">I am red!</h1>",
            "",
            "<h1 class=\"fuchsia-text\">I am fuchsia!</h1>",
            "",
            "<h1 class=\"cyan-text\">I am cyan!</h1>",
            "",
            "<h1 class=\"green-text\">I am green!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aede08718",
      "title": "Use RGB values to Color Elements",
      "description": [
        "Another way you can represent colors in CSS is by using <code>RGB</code> values.",
        "The RGB value for black looks like this:",
        "<code>rgb(0, 0, 0)</code>",
        "The RGB value for white looks like this:",
        "<code>rgb(255, 255, 255)</code>",
        "Instead of using six hexadecimal digits like you do with hex code, with <code>RGB</code> you specify the brightness of each color with a number between 0 and 255.",
        "If you do the math, the two digits for one color equal 16 times 16, which gives us 256 total values. So <code>RGB</code>, which starts counting from zero, has the exact same number of possible values as hex code.",
        "Here's an example of how you'd change the body background to orange using its RGB code.",
        "<blockquote>body {<br>&nbsp;&nbsp;background-color: rgb(255, 165, 0);<br>}</blockquote>",
        "<hr>",
        "Let's replace the hex code in our <code>body</code> element's background color with the RGB value for black: <code>rgb(0, 0, 0)</code>"
      ],
      "tests": [
        {
          "text": "Your <code>body</code> element should have a black background.",
          "testString": "assert($(\"body\").css(\"background-color\") === \"rgb(0, 0, 0)\", 'Your <code>body</code> element should have a black background.');"
        },
        {
          "text": "Use <code>rgb</code> to give your <code>body</code> element a color of black.",
          "testString": "assert(code.match(/rgb\\s*\\(\\s*0\\s*,\\s*0\\s*,\\s*0\\s*\\)/ig), 'Use <code>rgb</code> to give your <code>body</code> element a color of black.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Verwende RGB Werte um Elemente zu färben",
          "description": [
            "Ein anderer Weg um Farben in CSS darzustellen ist <code>rgb</code> Werte zu verwenden.",
            "Der RGB Wert für Schwarz sieht so aus:",
            "<code>rgb(0, 0, 0)</code>",
            "Der RGB Wert für Weiß sieht so aus:",
            "<code>rgb(255, 255, 255)</code>",
            "Anstatt sechs Hexadezimalziffern zu verwenden, legst du mit <code>rgb</code> die Helligkeit jeder einzelner Farbe mit einer Zahl zwischen 0 und 255 fest.",
            "Wenn du nachrechnest, 16 mal 16 ist 256 Werte. Also hat <code>rgb</code>, das mit Null hochzuzählen beginnt, die gleiche Anzahl an möglichen Farben wie Hexadezimal Code.",
            "<hr>",
            "Ersetzte jetzt den Hexadezimal Code der Hintergrundfarbe deines <code>body</code> Elements mit dem RGB Wert für Schwarz: <code>rgb(0, 0, 0)</code>"
          ]
        },
        "es": {
          "title": "Usa RGB para colorear elementos",
          "description": [
            "Otra forma en la que puedes representar colores en CSS es usando valores <code>rgb</code>.",
            "El valor RGB para el negro, luce así:",
            "<code>rgb(0, 0, 0)</code>",
            "El valor RGB para el blanco, se ve así:",
            "<code>rgb(255, 255, 255)</code>",
            "En lugar de utilizar seis dígitos hexadecimales, con <code>rgb</code> especificas el brillo de cada color con un número entre 0 y 255.",
            "Si haces la matemática, 16 veces 16 es 256 valores totales.  Así que <code>rgb</code>, que comienza a contar desde cero, tiene exactamente el mismo número de valores posibles que el código hexadecimal.",
            "<hr>",
            "Remplacemos el código hexadecimal del color de fondo de nuestro elemento <code>body</code> por el valor RGB para el negro: <code>rgb(0, 0, 0)</code>"
          ]
        },
        "pt-br": {
          "title": "Use Valores RBG para Colorir Elementos",
          "description": [
            "Outra forma em que você pode representar cores em CSS é utilizando valores <code>rgb</code>.",
            "O valor RGB para preto é assim:",
            "<code>rgb(0, 0, 0)</code>",
            "O valor RGB para branco é assim:",
            "<code>rgb(255, 255, 255)</code>",
            "Ao invés de utilizar 6 dígitos hexadecimais, com <code>rgb</code> você especifica o brilho de cada cor com um número entre 0 e 255.",
            "Se você fizer a matemática, 16 vezes 16 é igual a 256 valores totais. Sendo assim, o <code>rgb</code>, que começa a contar desde zero, tem exatamente o mesmo número de valores possíveis que o código hexadecimal.",
            "<hr>",
            "Vamos substituir o código hexadecimal da cor de fundo do nosso elemento <code>body</code> pelo valor RGB para preto: <code>rgb(0, 0, 0)</code>."
          ]
        },
        "ru": {
          "title": "Используйте формат RGB для придания цвета элементам",
          "description": [
            "Другим способом представления цветов в CSS является применение значений <code>rgb</code>.",
            "Значение RGB для чёрного цвета выглядит следующим образом:",
            "<code>rgb(0, 0, 0)</code>",
            "Значение RGB для белого выглядит так:",
            "<code>rgb(255, 255, 255)</code>",
            "Вместо использования шести шестнадцатиразрядных цифр, как вы делаете, когда применяете hex-код, применяя <code>rgb</code> вы указываете значение яркости каждого цвета в диапазоне от 0 до 255.",
            "Если вы посчитаете, 16 раз по 16 - это 256 различных значений. Таким образом <code>rgb</code>, где счёт начинается с нуля, имеет ровно то же число возможных значений, что и hex-код.",
            "<hr>",
            "Давайте заменим hex-код в цвете фона нашего элемента <code>body</code> на значение в формате RGB для получения чёрного: <code>rgb(0, 0, 0)</code>"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: #F00;",
            "  }",
            "</style>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad82fee1348bd9aedf08721",
      "title": "Use RGB to Mix Colors",
      "description": [
        "Just like with hex code, you can mix colors in RGB by using combinations of different values.",
        "<hr>",
        "Replace the hex codes in our <code>style</code> element with their correct RGB values.",
        "<table class='table table-striped'><tr><th>Color</th><th>RGB</th></tr><tr><td>Blue</td><td><code>rgb(0, 0, 255)</code></td></tr><tr><td>Red</td><td><code>rgb(255, 0, 0)</code></td></tr><tr><td>Orchid</td><td><code>rgb(218, 112, 214)</code></td></tr><tr><td>Sienna</td><td><code>rgb(160, 82, 45)</code></td></tr></table>"
      ],
      "tests": [
        {
          "text": "Give your <code>h1</code> element with the text <code>I am red!</code> the <code>color</code> red.",
          "testString": "assert($('.red-text').css('color') === 'rgb(255, 0, 0)', 'Give your <code>h1</code> element with the text <code>I am red!</code> the <code>color</code> red.');"
        },
        {
          "text": "Use <code>rgb</code> for the color red.",
          "testString": "assert(code.match(/\\.red-text\\s*?{\\s*?color:\\s*?rgb\\(\\s*?255\\s*?,\\s*?0\\s*?,\\s*?0\\s*?\\)\\s*?;\\s*?}/gi), 'Use <code>rgb</code> for the color red.');"
        },
        {
          "text": "Give your <code>h1</code> element with the text <code>I am orchid!</code> the <code>color</code> orchid.",
          "testString": "assert($('.orchid-text').css('color') === 'rgb(218, 112, 214)', 'Give your <code>h1</code> element with the text <code>I am orchid!</code> the <code>color</code> orchid.');"
        },
        {
          "text": "Use <code>rgb</code> for the color orchid.",
          "testString": "assert(code.match(/\\.orchid-text\\s*?{\\s*?color:\\s*?rgb\\(\\s*?218\\s*?,\\s*?112\\s*?,\\s*?214\\s*?\\)\\s*?;\\s*?}/gi), 'Use <code>rgb</code> for the color orchid.');"
        },
        {
          "text": "Give your <code>h1</code> element with the text <code>I am blue!</code> the <code>color</code> blue.",
          "testString": "assert($('.blue-text').css('color') === 'rgb(0, 0, 255)', 'Give your <code>h1</code> element with the text <code>I am blue!</code> the <code>color</code> blue.');"
        },
        {
          "text": "Use <code>rgb</code> for the color blue.",
          "testString": "assert(code.match(/\\.blue-text\\s*?{\\s*?color:\\s*?rgb\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?255\\s*?\\)\\s*?;\\s*?}/gi), 'Use <code>rgb</code> for the color blue.');"
        },
        {
          "text": "Give your <code>h1</code> element with the text <code>I am sienna!</code> the <code>color</code> sienna.",
          "testString": "assert($('.sienna-text').css('color') === 'rgb(160, 82, 45)', 'Give your <code>h1</code> element with the text <code>I am sienna!</code> the <code>color</code> sienna.');"
        },
        {
          "text": "Use <code>rgb</code> for the color sienna.",
          "testString": "assert(code.match(/\\.sienna-text\\s*?{\\s*?color:\\s*?rgb\\(\\s*?160\\s*?,\\s*?82\\s*?,\\s*?45\\s*?\\)\\s*?;\\s*?}/gi), 'Use <code>rgb</code> for the color sienna.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Verwende RGB um Farben zu mischen",
          "description": [
            "Wie auch mit Hexadezimal Code, kannst du Farben in RGB mischen indem du Kombination von verschiedenen Werten nimmst.",
            "<hr>",
            "Ändere die Hintergrundfarbe des <code>body</code> Elements zum RGB Wert von Orange: <code>rgb(255, 165, 0)</code>"
          ]
        },
        "es": {
          "title": "Usa RGB para mezclar colores",
          "description": [
            "Al igual que con el código hexadecimal, puedes mezclar los colores en RGB mediante el uso de combinaciones de diferentes valores.",
            "<hr>",
            "Cambia el color de fondo del elemento <code>body</code> a anaranjado usando su valor RGB: <code>rgb(255, 165, 0)</code>"
          ]
        },
        "pt-br": {
          "title": "Use Valores RBG para Misturar Cores",
          "description": [
            "Assim como com código hexadecimal, você pode misturar as cores com RGB através do uso de combinações de valores diferentes.",
            "<hr>",
            "Mude a cor de fundo do elemento <code>body</code> para alaranjado usando seu valor RGB: <code>rgb(255, 165, 0)</code>."
          ]
        },
        "ru": {
          "title": "Используйте формат RGB, чтобы смешивать цвета",
          "description": [
            "Так же как и с hex-кодом, вы можете смешивать цвета в формате RGB, используя комбинации различных значений.",
            "<hr>",
            "Измените цвет фона элемента <code>body</code> на значение в формате RGB соответствующее оранжевому: <code>rgb(255, 165, 0)</code>"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .red-text {",
            "    color: #000000;",
            "  }",
            "  .orchid-text {",
            "    color: #000000;",
            "  }",
            "  .sienna-text {",
            "    color: #000000;",
            "  }",
            "  .blue-text {",
            "    color: #000000;",
            "  }",
            "</style>",
            "",
            "<h1 class=\"red-text\">I am red!</h1>",
            "",
            "<h1 class=\"orchid-text\">I am orchid!</h1>",
            "",
            "<h1 class=\"sienna-text\">I am sienna!</h1>",
            "",
            "<h1 class=\"blue-text\">I am blue!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a9d725e424fe3d0e10cad10",
      "title": "Use CSS Variables to change several elements at once",
      "description": [
        "<dfn>CSS Variables</dfn> are a powerful way to change many CSS style properties at once by changing only one value.",
        "Follow the instructions below to see how changing just three values can change the styling of many elements.",
        "<hr>",
        "In the <code>penguin</code> class, change the <code>black</code> value to <code>gray</code>, the <code>gray</code> value to <code>white</code>, and the <code>yellow</code> value to <code>orange</code>."
      ],
      "tests": [
        {
          "text": "<code>penguin</code> class should declare the <code>--penguin-skin</code> variable and assign it to <code>gray</code>.",
          "testString": "assert(code.match(/.penguin\\s*?{[\\s\\S]*--penguin-skin\\s*?:\\s*?gray\\s*?;[\\s\\S]*}/gi), '<code>penguin</code> class should declare the <code>--penguin-skin</code> variable and assign it to <code>gray</code>.');"
        },
        {
          "text": "<code>penguin</code> class should declare the <code>--penguin-belly</code> variable and assign it to <code>white</code>.",
          "testString": "assert(code.match(/.penguin\\s*?{[\\s\\S]*--penguin-belly\\s*?:\\s*?white\\s*?;[\\s\\S]*}/gi), '<code>penguin</code> class should declare the <code>--penguin-belly</code> variable and assign it to <code>white</code>.');"
        },
        {
          "text": "<code>penguin</code> class should declare the <code>--penguin-beak</code> variable and assign it to <code>orange</code>.",
          "testString": "assert(code.match(/.penguin\\s*?{[\\s\\S]*--penguin-beak\\s*?:\\s*?orange\\s*?;[\\s\\S]*}/gi), '<code>penguin</code> class should declare the <code>--penguin-beak</code> variable and assign it to <code>orange</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Mar 15, 2018",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .penguin {",
            "    ",
            "    /* change code below */",
            "    --penguin-skin: black;",
            "    --penguin-belly: gray;",
            "    --penguin-beak: yellow;",
            "    /* change code above */",
            "    ",
            "    position: relative;",
            "    margin: auto;",
            "    display: block;",
            "    margin-top: 5%;",
            "    width: 300px;",
            "    height: 300px;",
            "  }",
            "  ",
            "  .penguin-top {",
            "    top: 10%;",
            "    left: 25%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 50%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .penguin-bottom {",
            "    top: 40%;",
            "    left: 23.5%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 53%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 100% 100%;",
            "  }",
            "  ",
            "  .right-hand {",
            "    top: 0%;",
            "    left: -5%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 120% 30%;",
            "    transform: rotate(45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .left-hand {",
            "    top: 0%;",
            "    left: 75%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 30% 120%;",
            "    transform: rotate(-45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .right-cheek {",
            "    top: 15%;",
            "    left: 35%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .left-cheek {",
            "    top: 15%;",
            "    left: 5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .belly {",
            "    top: 60%;",
            "    left: 2.5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 95%;",
            "    height: 100%;",
            "    border-radius: 120% 120% 100% 100%;",
            "  }",
            "  ",
            "  .right-feet {",
            "    top: 85%;",
            "    left: 60%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(-80deg);",
            "    z-index: -2222;  ",
            "  }",
            "  ",
            "  .left-feet {",
            "    top: 85%;",
            "    left: 25%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(80deg);",
            "    z-index: -2222;  ",
            "  }",
            "  ",
            "  .right-eye {",
            "    top: 45%;",
            "    left: 60%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%; ",
            "  }",
            "  ",
            "  .left-eye {",
            "    top: 45%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .sparkle {",
            "    top: 25%;",
            "    left: 15%;",
            "    background: white;",
            "    width: 35%;",
            "    height: 35%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .blush-right {",
            "    top: 65%;",
            "    left: 15%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .blush-left {",
            "    top: 65%;",
            "    left: 70%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .beak-top {",
            "    top: 60%;",
            "    left: 40%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 20%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .beak-bottom {",
            "    top: 65%;",
            "    left: 42%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 16%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  body {",
            "    background:#c6faf1;",
            "  }",
            "  ",
            "  .penguin * {",
            "    position: absolute;",
            "  }",
            "</style>",
            "<div class=\"penguin\">",
            "  <div class=\"penguin-bottom\">",
            "    <div class=\"right-hand\"></div>",
            "    <div class=\"left-hand\"></div>",
            "    <div class=\"right-feet\"></div>",
            "    <div class=\"left-feet\"></div>",
            "  </div>",
            "  <div class=\"penguin-top\">",
            "    <div class=\"right-cheek\"></div>",
            "    <div class=\"left-cheek\"></div>",
            "    <div class=\"belly\"></div>",
            "    <div class=\"right-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"left-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"blush-right\"></div>",
            "    <div class=\"blush-left\"></div>",
            "    <div class=\"beak-top\"></div>",
            "    <div class=\"beak-bottom\"></div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a9d726c424fe3d0e10cad11",
      "title": "Create a custom CSS Variable",
      "description": [
        "To create a CSS Variable, you just need to give it a <code>name</code> with <code>two dashes</code> in front of it and assign it a <code>value</code> like this:",
        "<blockquote>--penguin-skin: gray;</blockquote>",
        "This will create a variable named <code>--penguin-skin</code> and assign it the value of <code>gray</code>.",
        "Now you can use that variable elsewhere in your CSS to change the value of other elements to gray.",
        "<hr>",
        "In the <code>penguin</code> class, create a variable name <code>--penguin-skin</code> and give it a value of <code>gray</code>"
      ],
      "tests": [
        {
          "text": "<code>penguin</code> class should declare the <code>--penguin-skin</code> variable and assign it to <code>gray</code>.",
          "testString": "assert(code.match(/.penguin\\s*?{[\\s\\S]*--penguin-skin\\s*?:\\s*?gray\\s*?;[\\s\\S]*}/gi), '<code>penguin</code> class should declare the <code>--penguin-skin</code> variable and assign it to <code>gray</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Mar 15, 2018",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .penguin {",
            "    ",
            "    /* add code below */",
            "    ",
            "    /* add code above */",
            "    position: relative;",
            "    margin: auto;",
            "    display: block;",
            "    margin-top: 5%;",
            "    width: 300px;",
            "    height: 300px;",
            "  }",
            "  ",
            "  .penguin-top {",
            "    top: 10%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 50%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .penguin-bottom {",
            "    top: 40%;",
            "    left: 23.5%;",
            "    background: black;",
            "    width: 53%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 100% 100%;",
            "  }",
            "  ",
            "  .right-hand {",
            "    top: 0%;",
            "    left: -5%;",
            "    background: black;",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 120% 30%;",
            "    transform: rotate(45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .left-hand {",
            "    top: 0%;",
            "    left: 75%;",
            "    background: black;",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 30% 120%;",
            "    transform: rotate(-45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .right-cheek {",
            "    top: 15%;",
            "    left: 35%;",
            "    background: white;",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .left-cheek {",
            "    top: 15%;",
            "    left: 5%;",
            "    background: white;",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .belly {",
            "    top: 60%;",
            "    left: 2.5%;",
            "    background: white;",
            "    width: 95%;",
            "    height: 100%;",
            "    border-radius: 120% 120% 100% 100%;",
            "  }",
            "  ",
            "  .right-feet {",
            "    top: 85%;",
            "    left: 60%;",
            "    background: orange;",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(-80deg);",
            "    z-index: -2222;  ",
            "  }",
            "  ",
            "  .left-feet {",
            "    top: 85%;",
            "    left: 25%;",
            "    background: orange;",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(80deg);",
            "    z-index: -2222;  ",
            "  }",
            "  ",
            "  .right-eye {",
            "    top: 45%;",
            "    left: 60%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%; ",
            "  }",
            "  ",
            "  .left-eye {",
            "    top: 45%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .sparkle {",
            "    top: 25%;",
            "    left: 15%;",
            "    background: white;",
            "    width: 35%;",
            "    height: 35%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .blush-right {",
            "    top: 65%;",
            "    left: 15%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .blush-left {",
            "    top: 65%;",
            "    left: 70%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .beak-top {",
            "    top: 60%;",
            "    left: 40%;",
            "    background: orange;",
            "    width: 20%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .beak-bottom {",
            "    top: 65%;",
            "    left: 42%;",
            "    background: orange;",
            "    width: 16%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  body {",
            "    background:#c6faf1;",
            "  }",
            "  ",
            "  .penguin * {",
            "    position: absolute;",
            "  }",
            "</style>",
            "<div class=\"penguin\">",
            "  <div class=\"penguin-bottom\">",
            "    <div class=\"right-hand\"></div>",
            "    <div class=\"left-hand\"></div>",
            "    <div class=\"right-feet\"></div>",
            "    <div class=\"left-feet\"></div>",
            "  </div>",
            "  <div class=\"penguin-top\">",
            "    <div class=\"right-cheek\"></div>",
            "    <div class=\"left-cheek\"></div>",
            "    <div class=\"belly\"></div>",
            "    <div class=\"right-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"left-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"blush-right\"></div>",
            "    <div class=\"blush-left\"></div>",
            "    <div class=\"beak-top\"></div>",
            "    <div class=\"beak-bottom\"></div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a9d727a424fe3d0e10cad12",
      "title": "Use a custom CSS Variable",
      "description": [
        "After you create your variable, you can assign its value to other CSS properties by referencing the name you gave it.",
        "<blockquote>background: var(--penguin-skin);</blockquote>",
        "This will change the background of whatever element you are targeting to gray because that is the value of the <code>--penguin-skin</code> variable.",
        "Note that styles will not be applied unless the variable names are an exact match.",
        "<hr>",
        "Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>penguin-top</code>, <code>penguin-bottom</code>, <code>right-hand</code> and <code>left-hand</code> classes."
      ],
      "tests": [
        {
          "text": "Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>penguin-top</code> class.",
          "testString": "assert(code.match(/.penguin-top\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.penguin-bottom\\s{/gi), 'Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>penguin-top</code> class.');"
        },
        {
          "text": "Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>penguin-bottom</code> class.",
          "testString": "assert(code.match(/.penguin-bottom\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.right-hand\\s{/gi), 'Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>penguin-bottom</code> class.');"
        },
        {
          "text": "Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>right-hand</code> class.",
          "testString": "assert(code.match(/.right-hand\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.left-hand\\s{/gi), 'Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>right-hand</code> class.');"
        },
        {
          "text": "Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>left-hand</code> class.",
          "testString": "assert(code.match(/.left-hand\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}/gi), 'Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>left-hand</code> class.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Mar 15, 2018",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .penguin {",
            "    --penguin-skin: gray;",
            "    position: relative;",
            "    margin: auto;",
            "    display: block;",
            "    margin-top: 5%;",
            "    width: 300px;",
            "    height: 300px;",
            "  }",
            "  ",
            "  .penguin-top {",
            "    top: 10%;",
            "    left: 25%;",
            "    ",
            "    /* change code below */",
            "    background: black;",
            "    /* change code above */",
            "    ",
            "    width: 50%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .penguin-bottom {",
            "    top: 40%;",
            "    left: 23.5%;",
            "    ",
            "    /* change code below */",
            "    background: black;",
            "    /* change code above */",
            "    ",
            "    width: 53%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 100% 100%;",
            "  }",
            "  ",
            "  .right-hand {",
            "    top: 0%;",
            "    left: -5%;",
            "    ",
            "    /* change code below */",
            "    background: black;",
            "    /* change code above */",
            "    ",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 120% 30%;",
            "    transform: rotate(45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .left-hand {",
            "    top: 0%;",
            "    left: 75%;",
            "    ",
            "    /* change code below */",
            "    background: black;",
            "    /* change code above */",
            "    ",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 30% 120%;",
            "    transform: rotate(-45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .right-cheek {",
            "    top: 15%;",
            "    left: 35%;",
            "    background: white;",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .left-cheek {",
            "    top: 15%;",
            "    left: 5%;",
            "    background: white;",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .belly {",
            "    top: 60%;",
            "    left: 2.5%;",
            "    background: white;",
            "    width: 95%;",
            "    height: 100%;",
            "    border-radius: 120% 120% 100% 100%;",
            "  }",
            "  ",
            "  .right-feet {",
            "    top: 85%;",
            "    left: 60%;",
            "    background: orange;",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(-80deg);",
            "    z-index: -2222;  ",
            "  }",
            "  ",
            "  .left-feet {",
            "    top: 85%;",
            "    left: 25%;",
            "    background: orange;",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(80deg);",
            "    z-index: -2222;  ",
            "  }",
            "  ",
            "  .right-eye {",
            "    top: 45%;",
            "    left: 60%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%; ",
            "  }",
            "  ",
            "  .left-eye {",
            "    top: 45%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .sparkle {",
            "    top: 25%;",
            "    left: 15%;",
            "    background: white;",
            "    width: 35%;",
            "    height: 35%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-right {",
            "    top: 65%;",
            "    left: 15%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-left {",
            "    top: 65%;",
            "    left: 70%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-top {",
            "    top: 60%;",
            "    left: 40%;",
            "    background: orange;",
            "    width: 20%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-bottom {",
            "    top: 65%;",
            "    left: 42%;",
            "    background: orange;",
            "    width: 16%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  body {",
            "    background:#c6faf1;",
            "  }",
            "  ",
            "  .penguin * {",
            "    position: absolute;",
            "  }",
            "</style>",
            "<div class=\"penguin\">",
            "  <div class=\"penguin-bottom\">",
            "    <div class=\"right-hand\"></div>",
            "    <div class=\"left-hand\"></div>",
            "    <div class=\"right-feet\"></div>",
            "    <div class=\"left-feet\"></div>",
            "  </div>",
            "  <div class=\"penguin-top\">",
            "    <div class=\"right-cheek\"></div>",
            "    <div class=\"left-cheek\"></div>",
            "    <div class=\"belly\"></div>",
            "    <div class=\"right-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"left-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"blush-right\"></div>",
            "    <div class=\"blush-left\"></div>",
            "    <div class=\"beak-top\"></div>",
            "    <div class=\"beak-bottom\"></div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a9d7286424fe3d0e10cad13",
      "title": "Attach a Fallback value to a CSS Variable",
      "description": [
        "When using your variable as a CSS property value, you can attach a fallback value that your page will revert to if for some reason it can't get your variable to work.",
        "It could be that someone is using an older browser that hasn't yet adopted CSS Variables, or perhaps their device doesn't support the value you gave the variable. Here's how you do it:",
        "<blockquote>background: var(--penguin-skin, black);</blockquote>",
        "This will set background to black if there is a problem with your variable.",
        "Note that this can be useful for debugging.",
        "<hr>",
        "Add a fallback value of <code>black</code> to the <code>background</code> property of <code>penguin-top</code> and <code>penguin-bottom</code> classes.",
        "<strong>Note</strong>: The above style will be applied because of a typo in the CSS variable name."
      ],
      "tests": [
        {
          "text": "Apply the fallback value of <code>black</code> to the <code>background</code> property of the <code>penguin-top</code> class.",
          "testString": "assert(code.match(/.penguin-top\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\(\\s*?--pengiun-skin\\s*?,\\s*?black\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.penguin-bottom\\s{/gi), 'Apply the fallback value of <code>black</code> to the <code>background</code> property of the <code>penguin-top</code> class.');"
        },
        {
          "text": "Apply the fallback value of <code>black</code> to the <code>background</code> property of the <code>penguin-bottom</code> class.",
          "testString": "assert(code.match(/.penguin-bottom\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\(\\s*?--pengiun-skin\\s*?,\\s*?black\\s*?\\)\\s*?;[\\s\\S]*}/gi), 'Apply the fallback value of <code>black</code> to the <code>background</code> property of the <code>penguin-bottom</code> class.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Mar 15, 2018",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .penguin {",
            "    --penguin-skin: black;",
            "    --penguin-belly: gray;",
            "    --penguin-beak: yellow;",
            "    position: relative;",
            "    margin: auto;",
            "    display: block;",
            "    margin-top: 5%;",
            "    width: 300px;",
            "    height: 300px;",
            "  }",
            "  ",
            "  .penguin-top {",
            "    top: 10%;",
            "    left: 25%;",
            "  ",
            "    /* change code below */",
            "    background: var(--pengiun-skin);",
            "    /* change code above */",
            "  ",
            "    width: 50%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .penguin-bottom {",
            "    top: 40%;",
            "    left: 23.5%;",
            "  ",
            "    /* change code below */",
            "    background: var(--pengiun-skin);",
            "    /* change code above */",
            "  ",
            "    width: 53%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 100% 100%;",
            "  }",
            "  ",
            "  .right-hand {",
            "    top: 0%;",
            "    left: -5%;",
            "    background: var(--penguin-skin, black);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 120% 30%;",
            "    transform: rotate(45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .left-hand {",
            "    top: 0%;",
            "    left: 75%;",
            "    background: var(--penguin-skin, black);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 30% 120%;",
            "    transform: rotate(-45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .right-cheek {",
            "    top: 15%;",
            "    left: 35%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .left-cheek {",
            "    top: 15%;",
            "    left: 5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .belly {",
            "    top: 60%;",
            "    left: 2.5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 95%;",
            "    height: 100%;",
            "    border-radius: 120% 120% 100% 100%;",
            "  }",
            "  ",
            "  .right-feet {",
            "    top: 85%;",
            "    left: 60%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(-80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .left-feet {",
            "    top: 85%;",
            "    left: 25%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .right-eye {",
            "    top: 45%;",
            "    left: 60%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .left-eye {",
            "    top: 45%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .sparkle {",
            "    top: 25%;",
            "    left: 15%;",
            "    background: white;",
            "    width: 35%;",
            "    height: 35%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-right {",
            "    top: 65%;",
            "    left: 15%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-left {",
            "    top: 65%;",
            "    left: 70%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-top {",
            "    top: 60%;",
            "    left: 40%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 20%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-bottom {",
            "    top: 65%;",
            "    left: 42%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 16%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  body {",
            "    background:#c6faf1;",
            "  }",
            "  ",
            "  .penguin * {",
            "    position: absolute;",
            "  }",
            "</style>",
            "<div class=\"penguin\">",
            "  <div class=\"penguin-bottom\">",
            "    <div class=\"right-hand\"></div>",
            "    <div class=\"left-hand\"></div>",
            "    <div class=\"right-feet\"></div>",
            "    <div class=\"left-feet\"></div>",
            "  </div>",
            "  <div class=\"penguin-top\">",
            "    <div class=\"right-cheek\"></div>",
            "    <div class=\"left-cheek\"></div>",
            "    <div class=\"belly\"></div>",
            "    <div class=\"right-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"left-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"blush-right\"></div>",
            "    <div class=\"blush-left\"></div>",
            "    <div class=\"beak-top\"></div>",
            "    <div class=\"beak-bottom\"></div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a9d7295424fe3d0e10cad14",
      "title": "Cascading CSS variables",
      "description": [
        "When you create a variable, it becomes available for you to use inside the element in which you create it. It also becomes available within any elements nested within it. This effect is known as <dfn>cascading</dfn>.",
        "Because of cascading, CSS variables are often defined in the <dfn>:root</dfn> element.",
        "You can think of the <code>:root</code> element as a container for your entire HTML document, in the same way that an <code>html</code> element is a container for the <code>body</code> element.",
        "By creating your variables in <code>:root</code>, they will be available throughout the whole web page.",
        "<hr>",
        "Define a variable named <code>--penguin-belly</code> in the <code>:root</code> selector and give it the value of <code>pink</code>. You can then see how the value will cascade down to change the value to pink, anywhere that variable is used."
      ],
      "tests": [
        {
          "text": "declare the <code>--penguin-belly</code> variable in the <code>:root</code> and assign it to <code>pink</code>.",
          "testString": "assert(code.match(/:root\\s*?{[\\s\\S]*--penguin-belly\\s*?:\\s*?pink\\s*?;[\\s\\S]*}/gi), 'declare the <code>--penguin-belly</code> variable in the <code>:root</code> and assign it to <code>pink</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Mar 15, 2018",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  :root {",
            "    ",
            "    /* add code below */",
            "    ",
            "    /* add code above */",
            "  }",
            "  ",
            "  body {",
            "    background: var(--penguin-belly, #c6faf1);",
            "  }",
            "  ",
            "  .penguin {",
            "    --penguin-skin: gray;",
            "    --penguin-beak: orange;",
            "    position: relative;",
            "    margin: auto;",
            "    display: block;",
            "    margin-top: 5%;",
            "    width: 300px;",
            "    height: 300px;",
            "  }",
            "  ",
            "  .right-cheek {",
            "    top: 15%;",
            "    left: 35%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .left-cheek {",
            "    top: 15%;",
            "    left: 5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .belly {",
            "    top: 60%;",
            "    left: 2.5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 95%;",
            "    height: 100%;",
            "    border-radius: 120% 120% 100% 100%;",
            "  }",
            "  ",
            "  .penguin-top {",
            "    top: 10%;",
            "    left: 25%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 50%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .penguin-bottom {",
            "    top: 40%;",
            "    left: 23.5%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 53%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 100% 100%;",
            "  }",
            "  ",
            "  .right-hand {",
            "    top: 0%;",
            "    left: -5%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 120% 30%;",
            "    transform: rotate(45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .left-hand {",
            "    top: 0%;",
            "    left: 75%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 30% 120%;",
            "    transform: rotate(-45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .right-feet {",
            "    top: 85%;",
            "    left: 60%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(-80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .left-feet {",
            "    top: 85%;",
            "    left: 25%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .right-eye {",
            "    top: 45%;",
            "    left: 60%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .left-eye {",
            "    top: 45%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .sparkle {",
            "    top: 25%;",
            "    left: 15%;",
            "    background: white;",
            "    width: 35%;",
            "    height: 35%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-right {",
            "    top: 65%;",
            "    left: 15%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-left {",
            "    top: 65%;",
            "    left: 70%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-top {",
            "    top: 60%;",
            "    left: 40%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 20%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-bottom {",
            "    top: 65%;",
            "    left: 42%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 16%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .penguin * {",
            "    position: absolute;",
            "  }",
            "</style>",
            "<div class=\"penguin\">",
            "  <div class=\"penguin-bottom\">",
            "    <div class=\"right-hand\"></div>",
            "    <div class=\"left-hand\"></div>",
            "    <div class=\"right-feet\"></div>",
            "    <div class=\"left-feet\"></div>",
            "  </div>",
            "  <div class=\"penguin-top\">",
            "    <div class=\"right-cheek\"></div>",
            "    <div class=\"left-cheek\"></div>",
            "    <div class=\"belly\"></div>",
            "    <div class=\"right-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"left-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"blush-right\"></div>",
            "    <div class=\"blush-left\"></div>",
            "    <div class=\"beak-top\"></div>",
            "    <div class=\"beak-bottom\"></div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a9d72a1424fe3d0e10cad15",
      "title": "Change a variable for a specific area",
      "description": [
        "When you create your variables in <code>:root</code> they will set the value of that variable for the whole page.",
        "You can then over-write these variables by setting them again within a specific element.",
        "<hr>",
        "Change the value of <code>--penguin-belly</code> to <code>white</code> in the <code>penguin</code> class."
      ],
      "tests": [
        {
          "text": "The <code>penguin</code> class should reassign the <code>--penguin-belly</code> variable to <code>white</code>.",
          "testString": "assert(code.match(/.penguin\\s*?{[\\s\\S]*--penguin-belly\\s*?:\\s*?white\\s*?;[\\s\\S]*}/gi), 'The <code>penguin</code> class should reassign the <code>--penguin-belly</code> variable to <code>white</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Mar 15, 2018",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  :root {",
            "    --penguin-skin: gray;",
            "    --penguin-belly: pink;",
            "    --penguin-beak: orange;",
            "  }",
            "  ",
            "  body {",
            "    background: var(--penguin-belly, #c6faf1);",
            "  }",
            "  ",
            "  .penguin {",
            "    ",
            "    /* add code below */",
            "    ",
            "    /* add code above */",
            "    ",
            "    position: relative;",
            "    margin: auto;",
            "    display: block;",
            "    margin-top: 5%;",
            "    width: 300px;",
            "    height: 300px;",
            "  }",
            "  ",
            "  .right-cheek {",
            "    top: 15%;",
            "    left: 35%;",
            "    background: var(--penguin-belly, pink);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .left-cheek {",
            "    top: 15%;",
            "    left: 5%;",
            "    background: var(--penguin-belly, pink);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .belly {",
            "    top: 60%;",
            "    left: 2.5%;",
            "    background: var(--penguin-belly, pink);",
            "    width: 95%;",
            "    height: 100%;",
            "    border-radius: 120% 120% 100% 100%;",
            "  }",
            "  ",
            "  .penguin-top {",
            "    top: 10%;",
            "    left: 25%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 50%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .penguin-bottom {",
            "    top: 40%;",
            "    left: 23.5%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 53%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 100% 100%;",
            "  }",
            "  ",
            "  .right-hand {",
            "    top: 0%;",
            "    left: -5%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 120% 30%;",
            "    transform: rotate(45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .left-hand {",
            "    top: 0%;",
            "    left: 75%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 30% 120%;",
            "    transform: rotate(-45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .right-feet {",
            "    top: 85%;",
            "    left: 60%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(-80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .left-feet {",
            "    top: 85%;",
            "    left: 25%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .right-eye {",
            "    top: 45%;",
            "    left: 60%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .left-eye {",
            "    top: 45%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .sparkle {",
            "    top: 25%;",
            "    left: 15%;",
            "    background: white;",
            "    width: 35%;",
            "    height: 35%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-right {",
            "    top: 65%;",
            "    left: 15%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-left {",
            "    top: 65%;",
            "    left: 70%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-top {",
            "    top: 60%;",
            "    left: 40%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 20%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-bottom {",
            "    top: 65%;",
            "    left: 42%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 16%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .penguin * {",
            "    position: absolute;",
            "  }",
            "</style>",
            "<div class=\"penguin\">",
            "  <div class=\"penguin-bottom\">",
            "    <div class=\"right-hand\"></div>",
            "    <div class=\"left-hand\"></div>",
            "    <div class=\"right-feet\"></div>",
            "    <div class=\"left-feet\"></div>",
            "  </div>",
            "  <div class=\"penguin-top\">",
            "    <div class=\"right-cheek\"></div>",
            "    <div class=\"left-cheek\"></div>",
            "    <div class=\"belly\"></div>",
            "    <div class=\"right-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"left-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"blush-right\"></div>",
            "    <div class=\"blush-left\"></div>",
            "    <div class=\"beak-top\"></div>",
            "    <div class=\"beak-bottom\"></div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a9d72ad424fe3d0e10cad16",
      "title": "Use a media query to change a variable",
      "description": [
        "CSS Variables can simplify the way you use media queries.",
        "For instance, when your screen is smaller or larger than your media query break point, you can change the value of a variable, and it will apply its style wherever it is used.",
        "<hr>",
        "In the <code>:root</code> selector of the <code>media query</code>, change it so <code>--penguin-size</code> is redefined and given a value of <code>200px</code>. Also, redefine <code>--penguin-skin</code> and give it a value of <code>black</code>. Then resize the preview to see this change in action."
      ],
      "tests": [
        {
          "text": "<code>:root</code> should reassign the <code>--penguin-size</code> variable to <code>200px</code>.",
          "testString": "assert(code.match(/media\\s*?\\(\\s*?max-width\\s*?:\\s*?350px\\s*?\\)\\s*?{[\\s\\S]*:root\\s*?{[\\s\\S]*--penguin-size\\s*?:\\s*?200px\\s*?;[\\s\\S]*}[\\s\\S]*}/gi), '<code>:root</code> should reassign the <code>--penguin-size</code> variable to <code>200px</code>.');"
        },
        {
          "text": "<code>:root</code> should reassign the <code>--penguin-skin</code> variable to <code>black</code>.",
          "testString": "assert(code.match(/media\\s*?\\(\\s*?max-width\\s*?:\\s*?350px\\s*?\\)\\s*?{[\\s\\S]*:root\\s*?{[\\s\\S]*--penguin-skin\\s*?:\\s*?black\\s*?;[\\s\\S]*}[\\s\\S]*}/gi), '<code>:root</code> should reassign the <code>--penguin-skin</code> variable to <code>black</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Mar 15, 2018",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  :root {",
            "    --penguin-size: 300px;",
            "    --penguin-skin: gray;",
            "    --penguin-belly: white;",
            "    --penguin-beak: orange;",
            "  }",
            "  ",
            "  @media (max-width: 350px) {",
            "    :root {",
            "      ",
            "      /* add code below */",
            "      ",
            "      /* add code above */",
            "      ",
            "    }",
            "  }",
            "  ",
            "  .penguin {",
            "    position: relative;",
            "    margin: auto;",
            "    display: block;",
            "    margin-top: 5%;",
            "    width: var(--penguin-size, 300px);",
            "    height: var(--penguin-size, 300px);",
            "  }",
            "  ",
            "  .right-cheek {",
            "    top: 15%;",
            "    left: 35%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .left-cheek {",
            "    top: 15%;",
            "    left: 5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .belly {",
            "    top: 60%;",
            "    left: 2.5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 95%;",
            "    height: 100%;",
            "    border-radius: 120% 120% 100% 100%;",
            "  }",
            "  ",
            "  .penguin-top {",
            "    top: 10%;",
            "    left: 25%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 50%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .penguin-bottom {",
            "    top: 40%;",
            "    left: 23.5%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 53%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 100% 100%;",
            "  }",
            "  ",
            "  .right-hand {",
            "    top: 5%;",
            "    left: 25%;",
            "    background: var(--penguin-skin, black);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 120% 30%;",
            "    transform: rotate(130deg);",
            "    z-index: -1;",
            "    animation-duration: 3s;",
            "    animation-name: wave;",
            "    animation-iteration-count: infinite;",
            "    transform-origin:0% 0%;",
            "    animation-timing-function: linear;",
            "  }",
            "  ",
            "  @keyframes wave {",
            "      10% {",
            "        transform: rotate(110deg);",
            "      }",
            "      20% {",
            "        transform: rotate(130deg);",
            "      }",
            "      30% {",
            "        transform: rotate(110deg);",
            "      } ",
            "      40% {",
            "        transform: rotate(130deg);",
            "      }  ",
            "    }",
            "  ",
            "  .left-hand {",
            "    top: 0%;",
            "    left: 75%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 30% 120%;",
            "    transform: rotate(-45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .right-feet {",
            "    top: 85%;",
            "    left: 60%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(-80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .left-feet {",
            "    top: 85%;",
            "    left: 25%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .right-eye {",
            "    top: 45%;",
            "    left: 60%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .left-eye {",
            "    top: 45%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .sparkle {",
            "    top: 25%;",
            "    left:-23%;",
            "    background: white;",
            "    width: 150%;",
            "    height: 100%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-right {",
            "    top: 65%;",
            "    left: 15%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-left {",
            "    top: 65%;",
            "    left: 70%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-top {",
            "    top: 60%;",
            "    left: 40%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 20%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-bottom {",
            "    top: 65%;",
            "    left: 42%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 16%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  body {",
            "    background:#c6faf1;",
            "  }",
            "  ",
            "  .penguin * {",
            "    position: absolute;",
            "  }",
            "</style>",
            "<div class=\"penguin\">",
            "  <div class=\"penguin-bottom\">",
            "    <div class=\"right-hand\"></div>",
            "    <div class=\"left-hand\"></div>",
            "    <div class=\"right-feet\"></div>",
            "    <div class=\"left-feet\"></div>",
            "  </div>",
            "  <div class=\"penguin-top\">",
            "    <div class=\"right-cheek\"></div>",
            "    <div class=\"left-cheek\"></div>",
            "    <div class=\"belly\"></div>",
            "    <div class=\"right-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"left-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"blush-right\"></div>",
            "    <div class=\"blush-left\"></div>",
            "    <div class=\"beak-top\"></div>",
            "    <div class=\"beak-bottom\"></div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbd367417b2b2512bb4",
      "title": "Store Data with Sass Variables",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "One feature of Sass that's different than CSS is it uses variables. They are declared and set to store data, similar to JavaScript.",
        "In JavaScript, variables are defined using the <code>let</code> and <code>const</code> keywords. In Sass, variables start with a <code>$</code> followed by the variable name.",
        "Here are a couple examples:",
        "<blockquote>$main-fonts: Arial, sans-serif;<br>$headings-color: green;<br><br>//To use variables:<br>h1 {<br>&nbsp;&nbsp;font-family: $main-fonts;<br>&nbsp;&nbsp;color: $headings-color;<br>}</blockquote>",
        "One example where variables are useful is when a number of elements need to be the same color. If that color is changed, the only place to edit the code is the variable value.",
        "<hr>",
        "Create a variable <code>$text-color</code> and set it to red. Then change the value of the <code>color</code> property for the <code>.blog-post</code> and <code>h2</code> to the <code>$text-color</code> variable."
      ],
      "tests": [
        {
          "text": "Your code should have a Sass variable declared for <code>$text-color</code> with a value of red.",
          "testString": "assert(code.match(/\\$text-color:\\s*?red;/g), 'Your code should have a Sass variable declared for <code>$text-color</code> with a value of red.');"
        },
        {
          "text": "Your code should use the <code>$text-color</code> variable to change the <code>color</code> for the <code>.blog-post</code> and <code>h2</code> items.",
          "testString": "assert(code.match(/color:\\s*?\\$text-color;/g), 'Your code should use the <code>$text-color</code> variable to change the <code>color</code> for the <code>.blog-post</code> and <code>h2</code> items.');"
        },
        {
          "text": "Your <code>.blog-post</code> element should have a </code>color</code> of red.",
          "testString": "assert($('.blog-post').css('color') == 'rgb(255, 0, 0)', 'Your <code>.blog-post</code> element should have a </code>color</code> of red.');"
        },
        {
          "text": "Your <code>h2</code> elements should have a </code>color</code> of red.",
          "testString": "assert($('h2').css('color') == 'rgb(255, 0, 0)', 'Your <code>h2</code> elements should have a </code>color</code> of red.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  .header{",
            "    text-align: center;",
            "  }",
            "  .blog-post, h2 {",
            "    color: red;",
            "  }",
            "</style>",
            "",
            "<h1 class=\"header\">Learn Sass</h1>",
            "<div class=\"blog-post\">",
            "  <h2>Some random title</h2>",
            "  <p>This is a paragraph with some random text in it</p>",
            "</div>",
            "<div class=\"blog-post\">",
            "  <h2>Header #2</h2>",
            "  <p>Here is some more random text.</p>",
            "</div>",
            "<div class=\"blog-post\">",
            "  <h2>Here is another header</h2>",
            "  <p>Even more random text within a paragraph</p>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbd367417b2b2512bb5",
      "title": "Nest CSS with Sass",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass allows <code>nesting</code> of CSS rules, which is a useful way of organizing a style sheet.",
        "Normally, each element is targeted on a different line to style it, like so:",
        "<blockquote>nav {<br>&nbsp;&nbsp;background-color: red;<br>}<br><br>nav ul {<br>&nbsp;&nbsp;list-style: none;<br>}<br><br>nav ul li {<br>&nbsp;&nbsp;display: inline-block;<br>}</blockquote>",
        "For a large project, the CSS file will have many lines and rules. This is where <code>nesting</code> can help organize your code by placing child style rules within the respective parent elements:",
        "<blockquote>nav {<br>&nbsp;&nbsp;background-color: red;<br><br>&nbsp;&nbsp;ul {<br>&nbsp;&nbsp;&nbsp;&nbsp;list-style: none;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;li {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display: inline-block;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br></blockquote>",
        "<hr>",
        "Use the <code>nesting</code> technique shown above to re-organize the CSS rules for both children of <code>.blog-post</code> element. For testing purposes, the <code>h1</code> should come before the <code>p</code> element."
      ],
      "tests": [
        {
          "text": "Your code should re-organize the CSS rules so the <code>h1</code> and <code>p</code> are nested in the <code>.blog-post</code> parent element.",
          "testString": "assert(code.match(/\\.blog-post\\s*?{\\s*?h1\\s*?{\\s*?text-align:\\s*?center;\\s*?color:\\s*?blue;\\s*?}\\s*?p\\s*?{\\s*?font-size:\\s*?20px;\\s*?}\\s*?}/gi), 'Your code should re-organize the CSS rules so the <code>h1</code> and <code>p</code> are nested in the <code>.blog-post</code> parent element.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  .blog-post {",
            "    ",
            "  }",
            "  h1 {",
            "    text-align: center;",
            "    color: blue;",
            "  }",
            "  p {",
            "    font-size: 20px;",
            "  }",
            "</style>",
            "",
            "<div class=\"blog-post\">",
            "  <h1>Blog Title</h1>",
            "  <p>This is a paragraph</p>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbd367417b2b2512bb6",
      "title": "Create Reusable CSS with Mixins",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "In Sass, a <code>mixin</code> is a group of CSS declarations that can be reused throughout the style sheet.",
        "Newer CSS features take time before they are fully adopted and ready to use in all browsers. As features are added to browsers, CSS rules using them may need vendor prefixes. Consider \"box-shadow\":",
        "<blockquote>div {<br>&nbsp;&nbsp;-webkit-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;-moz-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;-ms-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;box-shadow: 0px 0px 4px #fff;<br>}</blockquote>",
        "It's a lot of typing to re-write this rule for all the elements that have a <code>box-shadow</code>, or to change each value to test different effects.",
        "<code>Mixins</code> are like functions for CSS. Here is how to write one:",
        "<blockquote>@mixin box-shadow($x, $y, $blur, $c){ <br>&nbsp;&nbsp;-webkit-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;-moz-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;-ms-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;box-shadow: $x, $y, $blur, $c;<br>}</blockquote>",
        "The definition starts with <code>@mixin</code> followed by a custom name. The parameters (the <code>$x</code>, <code>$y</code>, <code>$blur</code>, and <code>$c</code> in the example above) are optional.",
        "Now any time a <code>box-shadow</code> rule is needed, only a single line calling the <code>mixin</code> replaces having to type all the vendor prefixes. A <code>mixin</code> is called with the <code>@include</code> directive:",
        "<blockquote>div {<br>&nbsp;&nbsp;@include box-shadow(0px, 0px, 4px, #fff);<br>}</blockquote>",
        "<hr>",
        "Write a <code>mixin</code> for <code>border-radius</code> and give it a <code>$radius</code> parameter. It should use all the vendor prefixes from the example. Then use the <code>border-radius</code> <code>mixin</code> to give the <code>#awesome</code> element a border radius of 15px."
      ],
      "tests": [
        {
          "text": "Your code should declare a <code>mixin</code> named <code>border-radius</code> which has a parameter named <code>$radius</code>.",
          "testString": "assert(code.match(/@mixin\\s+?border-radius\\s*?\\(\\s*?\\$radius\\s*?\\)\\s*?{/gi), 'Your code should declare a <code>mixin</code> named <code>border-radius</code> which has a parameter named <code>$radius</code>.');"
        },
        {
          "text": "Your code should include the <code>-webkit-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.",
          "testString": "assert(code.match(/-webkit-border-radius:\\s*?\\$radius;/gi), 'Your code should include the <code>-webkit-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.');"
        },
        {
          "text": "Your code should include the <code>-moz-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.",
          "testString": "assert(code.match(/-moz-border-radius:\\s*?\\$radius;/gi), 'Your code should include the <code>-moz-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.');"
        },
        {
          "text": "Your code should include the <code>-ms-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.",
          "testString": "assert(code.match(/-ms-border-radius:\\s*?\\$radius;/gi), 'Your code should include the <code>-ms-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.');"
        },
        {
          "text": "Your code should include the general <code>border-radius</code> rule that uses the <code>$radius</code> parameter.",
          "testString": "assert(code.match(/border-radius:\\s*?\\$radius;/gi).length == 4, 'Your code should include the general <code>border-radius</code> rule that uses the <code>$radius</code> parameter.');"
        },
        {
          "text": "Your code should call the <code>border-radius mixin</code> using the <code>@include</code> keyword, setting it to 15px.",
          "testString": "assert(code.match(/@include\\s+?border-radius\\(\\s*?15px\\s*?\\);/gi), 'Your code should call the <code>border-radius mixin</code> using the <code>@include</code> keyword, setting it to 15px.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "  #awesome {",
            "    width: 150px;",
            "    height: 150px;",
            "    background-color: green;",
            "    ",
            "  }",
            "</style>",
            "",
            "<div id=\"awesome\"></div>",
            "  "
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbe367417b2b2512bb8",
      "title": "Use @if and @else to Add Logic To Your Styles",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "The <code>@if</code> directive in Sass is useful to test for a specific case - it works just like the <code>if</code> statement in JavaScript</code>.",
        "<blockquote>@mixin make-bold($bool) {<br>&nbsp;&nbsp;@if $bool == true {<br>&nbsp;&nbsp;&nbsp;&nbsp;font-weight: bold;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "And just like in JavaScript, <code>@else if</code> and <code>@else</code> test for more conditions:",
        "<blockquote>@mixin text-effect($val) {<br>&nbsp;&nbsp;@if $val == danger {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: red;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else if $val == alert {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: yellow;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else if $val == success {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: green;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: black;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "<hr>",
        "Create a <code>mixin</code> called <code>border-stroke</code> that takes a parameter <code>$val</code>. The <code>mixin</code> should check for the following conditions using <code>@if</code>, <code>@else if</code>, and <code>@else</code>:",
        "<blockquote>light - 1px solid black<br>medium - 3px solid black<br>heavy - 6px solid black<br>none - no border</blockquote>"
      ],
      "tests": [
        {
          "text": "Your code should declare a <code>mixin</code> named <code>border-stroke</code> which has a parameter named <code>$val</code>.",
          "testString": "assert(code.match(/@mixin\\s+?border-stroke\\s*?\\(\\s*?\\$val\\s*?\\)\\s*?{/gi), 'Your code should declare a <code>mixin</code> named <code>border-stroke</code> which has a parameter named <code>$val</code>.');"
        },
        {
          "text": "Your <code>mixin</code> should have an <code>@if</code> statement to check if <code>$val</code> is light, and to set the <code>border</code> to 1px solid black.",
          "testString": "assert(code.match(/@if\\s+?\\$val\\s*?===?\\s*?light\\s*?{\\s*?border\\s*?:\\s*?1px\\s+?solid\\s+?black\\s*?;\\s*?}/gi), 'Your <code>mixin</code> should have an <code>@if</code> statement to check if <code>$val</code> is light, and to set the <code>border</code> to 1px solid black.');"
        },
        {
          "text": "Your <code>mixin</code> should have an <code>@else if</code> statement to check if <code>$val</code> is medium, and to set the <code>border</code> to 3px solid black.",
          "testString": "assert(code.match(/@else\\s+?if\\s+?\\$val\\s*?===?\\s*?medium\\s*?{\\s*?border\\s*?:\\s*?3px\\s+?solid\\s+?black\\s*?;\\s*?}/gi), 'Your <code>mixin</code> should have an <code>@else if</code> statement to check if <code>$val</code> is medium, and to set the <code>border</code> to 3px solid black.');"
        },
        {
          "text": "Your <code>mixin</code> should have an <code>@else if</code> statement to check if <code>$val</code> is heavy, and to set the <code>border</code> to 6px solid black.",
          "testString": "assert(code.match(/@else\\s+?if\\s+?\\$val\\s*?===?\\s*?heavy\\s*?{\\s*?border\\s*?:\\s*?6px\\s+?solid\\s+?black\\s*?;\\s*?}/gi), 'Your <code>mixin</code> should have an <code>@else if</code> statement to check if <code>$val</code> is heavy, and to set the <code>border</code> to 6px solid black.');"
        },
        {
          "text": "Your <code>mixin</code> should have an <code>@else</code> statement to set the <code>border</code> to none.",
          "testString": "assert(code.match(/@else\\s*?{\\s*?border\\s*?:\\s*?none\\s*?;\\s*?}/gi), 'Your <code>mixin</code> should have an <code>@else</code> statement to set the <code>border</code> to none.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "  #box {",
            "    width: 150px;",
            "    height: 150px;",
            "    background-color: red;",
            "    @include border-stroke(medium);",
            "  }  ",
            "</style>",
            "",
            "<div id=\"box\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbe367417b2b2512bb9",
      "title": "Use @for to Create a Sass Loop",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "The <code>@for</code> directive adds styles in a loop, very similar to a <code>for</code> loop in JavaScript.",
        "<code>@for</code> is used in two ways: \"start through end\" or \"start to end\". The main difference is that \"start to end\" <em>excludes</em> the end number, and \"start through end\" <em>includes</em> the end number.",
        "Here's a start <b>through</b> end example:",
        "<blockquote>@for $i from 1 through 12 {<br>&nbsp;&nbsp;.col-#{$i} { width: 100%/12 * $i; }<br>}</blockquote>",
        "The <code>#{$i}</code> part is the syntax to combine a variable (<code>i</code>) with text to make a string. When the Sass file is converted to CSS, it looks like this:",
        "<blockquote>.col-1 {<br>&nbsp;&nbsp;width: 8.33333%;<br>}<br><br>.col-2 {<br>&nbsp;&nbsp;width: 16.66667%;<br>}<br><br>...<br><br>.col-12 {<br>&nbsp;&nbsp;width: 100%;<br>}</blockquote>",
        "This is a powerful way to create a grid layout. Now you have twelve options for column widths available as CSS classes.",
        "<hr>",
        "Write a <code>@for</code> directive that takes a variable <code>$j</code> that goes from 1 <b>to</b> 6.",
        "It should create 5 classes called <code>.text-1</code> to <code>.text-5</code> where each has a <code>font-size</code> set to 10px multiplied by the index."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>@for</code> directive.",
          "testString": "assert(code.match(/@for /g), 'Your code should use the <code>@for</code> directive.');"
        },
        {
          "text": "Your <code>.text-1</code> class should have a <code>font-size</code> of 10px.",
          "testString": "assert($('.text-1').css('font-size') == '10px', 'Your <code>.text-1</code> class should have a <code>font-size</code> of 10px.');"
        },
        {
          "text": "Your <code>.text-2</code> class should have a <code>font-size</code> of 20px.",
          "testString": "assert($('.text-2').css('font-size') == '20px', 'Your <code>.text-2</code> class should have a <code>font-size</code> of 20px.');"
        },
        {
          "text": "Your <code>.text-3</code> class should have a <code>font-size</code> of 30px.",
          "testString": "assert($('.text-3').css('font-size') == '30px', 'Your <code>.text-3</code> class should have a <code>font-size</code> of 30px.');"
        },
        {
          "text": "Your <code>.text-4</code> class should have a <code>font-size</code> of 40px.",
          "testString": "assert($('.text-4').css('font-size') == '40px', 'Your <code>.text-4</code> class should have a <code>font-size</code> of 40px.');"
        },
        {
          "text": "Your <code>.text-5</code> class should have a <code>font-size</code> of 50px.",
          "testString": "assert($('.text-5').css('font-size') == '50px', 'Your <code>.text-5</code> class should have a <code>font-size</code> of 50px.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "</style>",
            "",
            "<p class=\"text-1\">Hello</p>",
            "<p class=\"text-2\">Hello</p>",
            "<p class=\"text-3\">Hello</p>",
            "<p class=\"text-4\">Hello</p>",
            "<p class=\"text-5\">Hello</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbf367417b2b2512bba",
      "title": "Use @each to Map Over Items in a List",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "The last challenge showed how the <code>@for</code> directive uses a starting and ending value to loop a certain number of times. Sass also offers the <code>@each</code> directive which loops over each item in a list or map.",
        "On each iteration, the variable gets assigned to the current value from the list or map.",
        "<blockquote>@each $color in blue, red, green {<br>&nbsp;&nbsp;.#{$color}-text {color: $color;}<br>}</blockquote>",
        "A map has slightly different syntax. Here's an example:",
        "<blockquote>$colors: (color1: blue, color2: red, color3: green);<br><br>@each $key, $color in $colors {<br>&nbsp;&nbsp;.#{$color}-text {color: $color;}<br>}</blockquote>",
        "Note that the <code>$key</code> variable is needed to reference the keys in the map. Otherwise, the compiled CSS would have <code>color1</code>, <code>color2</code>... in it.",
        "Both of the above code examples are converted into the following CSS:",
        "<blockquote>.blue-text {<br>&nbsp;&nbsp;color: blue;<br>}<br><br>.red-text {<br>&nbsp;&nbsp;color: red;<br>}<br><br>.green-text {<br>&nbsp;&nbsp;color: green;<br>}</blockquote>",
        "<hr>",
        "Write an <code>@each</code> directive that goes through a list: <code>blue, black, red</code> and assigns each variable to a <code>.color-bg</code> class, where the \"color\" part changes for each item.",
        "Each class should set the <code>background-color</code> the respective color."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>@each</code> directive.",
          "testString": "assert(code.match(/@each /g), 'Your code should use the <code>@each</code> directive.');"
        },
        {
          "text": "Your <code>.blue-bg</code> class should have a <code>background-color</code> of blue.",
          "testString": "assert($('.blue-bg').css('background-color') == 'rgb(0, 0, 255)', 'Your <code>.blue-bg</code> class should have a <code>background-color</code> of blue.');"
        },
        {
          "text": "Your <code>.black-bg</code> class should have a <code>background-color</code> of black.",
          "testString": "assert($('.black-bg').css('background-color') == 'rgb(0, 0, 0)', 'Your <code>.black-bg</code> class should have a <code>background-color</code> of black.');"
        },
        {
          "text": "Your <code>.red-bg</code> class should have a <code>background-color</code> of red.",
          "testString": "assert($('.red-bg').css('background-color') == 'rgb(255, 0, 0)', 'Your <code>.red-bg</code> class should have a <code>background-color</code> of red.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "  div {",
            "    height: 200px;",
            "    width: 200px;",
            "  }",
            "</style>",
            "",
            "<div class=\"blue-bg\"></div>",
            "<div class=\"black-bg\"></div>",
            "<div class=\"red-bg\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbf367417b2b2512bbb",
      "title": "Apply a Style Until a Condition is Met with @while",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "The <code>@while</code> directive is an option with similar functionality to the JavaScript <code>while</code> loop. It creates CSS rules until a condition is met.",
        "The <code>@for</code> challenge gave an example to create a simple grid system. This can also work with <code>@while</code>.",
        "<blockquote>$x: 1;<br>@while $x < 13 {<br>&nbsp;&nbsp;.col-#{$x} { width: 100%/12 * $x;}<br>&nbsp;&nbsp;$x: $x + 1;<br>}</blockquote>",
        "First, define a variable <code>$x</code> and set it to 1. Next, use the <code>@while</code> directive to create the grid system <i>while</i> <code>$x</code> is less than 13.",
        "After setting the CSS rule for <code>width</code>, <code>$x</code> is incremented by 1 to avoid an infinite loop.",
        "<hr>",
        "Use <code>@while</code> to create a series of classes with different <code>font-sizes</code>.",
        "There should be 10 different classes from <code>text-1</code> to <code>text-10</code>. Then set <code>font-size</code> to 5px multiplied by the current index number. Make sure to avoid an infinite loop!"
      ],
      "tests": [
        {
          "text": "Your code should use the <code>@while</code> directive.",
          "testString": "assert(code.match(/@while /g), 'Your code should use the <code>@while</code> directive.');"
        },
        {
          "text": "Your code should set an index variable to 1 to start.",
          "testString": "assert(code.match(/\\$.*:\\s*?1;/gi), 'Your code should set an index variable to 1 to start.');"
        },
        {
          "text": "Your code should increment the counter variable.",
          "testString": "assert(code.match(/\\$(.*):\\s*?\\$\\1\\s*?\\+\\s*?1;/gi), 'Your code should increment the counter variable.');"
        },
        {
          "text": "Your <code>.text-1</code> class should have a <code>font-size</code> of 5px.",
          "testString": "assert($('.text-1').css('font-size') == '5px', 'Your <code>.text-1</code> class should have a <code>font-size</code> of 5px.');"
        },
        {
          "text": "Your <code>.text-2</code> class should have a <code>font-size</code> of 10px.",
          "testString": "assert($('.text-2').css('font-size') == '10px', 'Your <code>.text-2</code> class should have a <code>font-size</code> of 10px.');"
        },
        {
          "text": "Your <code>.text-3</code> class should have a <code>font-size</code> of 15px.",
          "testString": "assert($('.text-3').css('font-size') == '15px', 'Your <code>.text-3</code> class should have a <code>font-size</code> of 15px.');"
        },
        {
          "text": "Your <code>.text-4</code> class should have a <code>font-size</code> of 20px.",
          "testString": "assert($('.text-4').css('font-size') == '20px', 'Your <code>.text-4</code> class should have a <code>font-size</code> of 20px.');"
        },
        {
          "text": "Your <code>.text-5</code> class should have a <code>font-size</code> of 25px.",
          "testString": "assert($('.text-5').css('font-size') == '25px', 'Your <code>.text-5</code> class should have a <code>font-size</code> of 25px.');"
        },
        {
          "text": "Your <code>.text-6</code> class should have a <code>font-size</code> of 30px.",
          "testString": "assert($('.text-6').css('font-size') == '30px', 'Your <code>.text-6</code> class should have a <code>font-size</code> of 30px.');"
        },
        {
          "text": "Your <code>.text-7</code> class should have a <code>font-size</code> of 35px.",
          "testString": "assert($('.text-7').css('font-size') == '35px', 'Your <code>.text-7</code> class should have a <code>font-size</code> of 35px.');"
        },
        {
          "text": "Your <code>.text-8</code> class should have a <code>font-size</code> of 40px.",
          "testString": "assert($('.text-8').css('font-size') == '40px', 'Your <code>.text-8</code> class should have a <code>font-size</code> of 40px.');"
        },
        {
          "text": "Your <code>.text-9</code> class should have a <code>font-size</code> of 45px.",
          "testString": "assert($('.text-9').css('font-size') == '45px', 'Your <code>.text-9</code> class should have a <code>font-size</code> of 45px.');"
        },
        {
          "text": "Your <code>.text-10</code> class should have a <code>font-size</code> of 50px.",
          "testString": "assert($('.text-10').css('font-size') == '50px', 'Your <code>.text-10</code> class should have a <code>font-size</code> of 50px.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "</style>",
            "",
            "<p class=\"text-1\">Hello</p>",
            "<p class=\"text-2\">Hello</p>",
            "<p class=\"text-3\">Hello</p>",
            "<p class=\"text-4\">Hello</p>",
            "<p class=\"text-5\">Hello</p>",
            "<p class=\"text-6\">Hello</p>",
            "<p class=\"text-7\">Hello</p>",
            "<p class=\"text-8\">Hello</p>",
            "<p class=\"text-9\">Hello</p>",
            "<p class=\"text-10\">Hello</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbf367417b2b2512bbc",
      "title": "Split Your Styles into Smaller Chunks with Partials",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "<code>Partials</code> in Sass are separate files that hold segments of CSS code. These are imported and used in other Sass files. This is a great way to group similar code into a module to keep it organized.",
        "Names for <code>partials</code> start with the underscore (<code>_</code>) character, which tells Sass it is a small segment of CSS and not to convert it into a CSS file. Also, Sass files end with the <code>.scss</code> file extension. To bring the code in the <code>partial</code> into another Sass file, use the <code>@import</code> directive.",
        "For example, if all your <code>mixins</code> are saved in a <code>partial</code> named \"_mixins.scss\", and they are needed in the \"main.scss\" file, this is how to use them in the main file:",
        "<blockquote>// In the main.scss file<br><br>@import 'mixins'</blockquote>",
        "Note that the underscore is not needed in the <code>import</code> statement - Sass understands it is a <code>partial</code>. Once a <code>partial</code> is imported into a file, all variables, <code>mixins</code>, and other code are available to use.",
        "<hr>",
        "Write an <code>@import</code> statement to import a <code>partial</code> named <code>_variables.scss</code> into the main.scss file."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>@import</code> directive, and should not include the underscore in the file name.",
          "testString": "assert(code.match(/@import\\s+?('|\")variables\\1/gi), 'Your code should use the <code>@import</code> directive, and should not include the underscore in the file name.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "// The main.scss file",
            "",
            "",
            "",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7fa5367417b2b2512bbd",
      "title": "Extend One Set of CSS Styles to Another Element",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass has a feature called <code>extend</code> that makes it easy to borrow the CSS rules from one element and build upon them in another.",
        "For example, the below block of CSS rules style a <code>.panel</code> class. It has a <code>background-color</code>, <code>height</code> and <code>border</code>.",
        "<blockquote>.panel{<br>&nbsp;&nbsp;background-color: red;<br>&nbsp;&nbsp;height: 70px;<br>&nbsp;&nbsp;border: 2px solid green;<br>}</blockquote>",
        "Now you want another panel called <code>.big-panel</code>. It has the same base properties as <code>.panel</code>, but also needs a <code>width</code> and <code>font-size</code>.",
        "It's possible to copy and paste the initial CSS rules from <code>.panel</code>, but the code becomes repetitive as you add more types of panels.",
        "The <code>extend</code> directive is a simple way to reuse the rules written for one element, then add more for another:",
        "<blockquote>.big-panel{<br>&nbsp;&nbsp;@extend .panel;<br>&nbsp;&nbsp;width: 150px;<br>&nbsp;&nbsp;font-size: 2em;<br>}</blockquote>",
        "The <code>.big-panel</code> will have the same properties as <code>.panel</code> in addition to the new styles.",
        "<hr>",
        "Make a class <code>.info-important</code> that extends <code>.info</code> and also has a <code>background-color</code> set to magenta."
      ],
      "tests": [
        {
          "text": "Your <code>info-important</code> class should have a <code>background-color</code> set to <code>magenta</code>.",
          "testString": "assert(code.match(/\\.info-important\\s*?{[\\s\\S]*background-color\\s*?:\\s*?magenta\\s*?;[\\s\\S]*}/gi), 'Your <code>info-important</code> class should have a <code>background-color</code> set to <code>magenta</code>.');"
        },
        {
          "text": "Your <code>info-important</code> class should use <code>@extend</code> to inherit the styling from the <code>info</code> class.",
          "testString": "assert(code.match(/\\.info-important\\s*?{[\\s\\S]*@extend\\s*?.info\\s*?;[\\s\\S]*/gi), 'Your <code>info-important</code> class should use <code>@extend</code> to inherit the styling from the <code>info</code> class.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  h3{",
            "    text-align: center;",
            "  }",
            "  .info{",
            "    width: 200px;",
            "    border: 1px solid black;",
            "    margin: 0 auto;",
            "  }",
            "  ",
            "  ",
            "  ",
            "  ",
            "</style>",
            "<h3>Posts</h3>",
            "<div class=\"info-important\">",
            "  <p>This is an important post. It should extend the class \".info\" and have its own CSS styles.</p>",
            "</div>",
            "",
            "<div class=\"info\">",
            "  <p>This is a simple post. It has basic styling and can be extended for other uses.</p>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7791367417b2b2512ab3",
      "title": "Create Visual Balance Using the text-align Property",
      "description": [
        "This section of the curriculum focuses on Applied Visual Design. The first group of challenges build on the given card layout to show a number of core principles.",
        "Text is often a large part of web content. CSS has several options for how to align it with the <code>text-align</code> property.",
        "<code>text-align: justify;</code> causes all lines of text except the last line to meet the left and right edges of the line box.",
        "<code>text-align: center;</code> centers the text",
        "<code>text-align: right;</code> right-aligns the text",
        "And <code>text-align: left;</code> (the default) left-aligns the text.",
        "<hr>",
        "Align the <code>h4</code> tag's text, which says \"Google\", to the center. Then justify the paragraph tag which contains information about how Google was founded."
      ],
      "tests": [
        {
          "text": "Your code should use the text-align property on the <code>h4</code> tag to set it to center.",
          "testString": "assert($('h4').css('text-align') == 'center', 'Your code should use the text-align property on the <code>h4</code> tag to set it to center.');"
        },
        {
          "text": "Your code should use the text-align property on the <code>p</code> tag to set it to justify.",
          "testString": "assert($('p').css('text-align') == 'justify', 'Your code should use the text-align property on the <code>p</code> tag to set it to justify.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    ",
            "  }",
            "  p {",
            "    ",
            "  }",
            "  .links {",
            "    margin-right: 20px;",
            "    ",
            "  }",
            "  .fullCard {",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7791367417b2b2512ab4",
      "title": "Adjust the Width of an Element Using the width Property",
      "description": [
        "You can specify the width of an element using the <code>width</code> property in CSS. Values can be given in relative length units (such as em), absolute length units (such as px), or as a percentage of its containing parent element. Here's an example that changes the width of an image to 220px:",
        "<blockquote>img {<br>&nbsp;&nbsp;width: 220px;<br>}</blockquote>",
        "<hr>",
        "Add a <code>width</code> property to the entire card and set it to an absolute value of 245px. Use the <code>fullCard</code> class to select the element."
      ],
      "tests": [
        {
          "text": "Your code should change the <code>width</code> property of the card to 245 pixels by using the <code>fullCard</code> class selector.",
          "testString": "assert(code.match(/.fullCard\\s*{[\\s\\S][^}]*\\n*^\\s*width\\s*:\\s*245px\\s*;/gm), 'Your code should change the <code>width</code> property of the card to 245 pixels by using the <code>fullCard</code> class selector.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    margin-right: 20px;",
            "    text-align: left;",
            "  }",
            "  .fullCard {",
            "    ",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7791367417b2b2512ab5",
      "title": "Adjust the Height of an Element Using the height Property",
      "description": [
        "You can specify the height of an element using the <code>height</code> property in CSS, similar to the <code>width</code> property. Here's an example that changes the height of an image to 20px:",
        "<blockquote>img {<br>&nbsp;&nbsp;height: 20px;<br>}</blockquote>",
        "<hr>",
        "Add a <code>height</code> property to the <code>h4</code> tag and set it to 25px."
      ],
      "tests": [
        {
          "text": "Your code should change the <code>h4</code> <code>height</code> property to a value of 25 pixels.",
          "testString": "assert($('h4').css('height') == '25px', 'Your code should change the <code>h4</code> <code>height</code> property to a value of 25 pixels.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    ",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    margin-right: 20px;",
            "    text-align: left;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781a367417b2b2512ab7",
      "title": "Use the strong Tag to Make Text Bold",
      "description": [
        "To make text bold, you can use the <code>strong</code> tag. This is often used to draw attention to text and symbolize that it is important. With the <code>strong</code> tag, the browser applies the CSS of <code>font-weight: bold;</code> to the element.",
        "<hr>",
        "Wrap a <code>strong</code> tag around \"Stanford University\" inside the <code>p</code> tag."
      ],
      "tests": [
        {
          "text": "Your code should add one <code>strong</code> tag to the markup.",
          "testString": "assert($('strong').length == 1, 'Your code should add one <code>strong</code> tag to the markup.');"
        },
        {
          "text": "The <code>strong</code> tag should be inside the <code>p</code> tag.",
          "testString": "assert($('p').children('strong').length == 1, 'The <code>strong</code> tag should be inside the <code>p</code> tag.');"
        },
        {
          "text": "The <code>strong</code> tag should wrap around the words \"Stanford University\".",
          "testString": "assert($('strong').text().match(/^Stanford University$/gi), 'The <code>strong</code> tag should wrap around the words \"Stanford University\".');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781a367417b2b2512ab8",
      "title": "Use the u Tag to Underline Text",
      "description": [
        "To underline text, you can use the <code>u</code> tag. This is often used to signify that a section of text is important, or something to remember. With the <code>u</code> tag, the browser applies the CSS of <code>text-decoration: underline;</code> to the element.",
        "<hr>",
        "Wrap the <code>u</code> tag around the text \"Ph.D. students\". It should not include the parent <code>div</code> that has the class of <code>cardText</code>.",
        "<strong>Note</strong><br>Try to avoid using the <code>u</code> tag when it could be confused for a link. Anchor tags also have a default underlined formatting."
      ],
      "tests": [
        {
          "text": "Your code should add a <code>u</code> tag to the markup.",
          "testString": "assert($('u').length === 1, 'Your code should add a <code>u</code> tag to the markup.');"
        },
        {
          "text": "The <code>u</code> tag should wrap around the text \"Ph.D. students\".",
          "testString": "assert($('u').text() === 'Ph.D. students', 'The <code>u</code> tag should wrap around the text \"Ph.D. students\".');"
        },
        {
          "text": "The <code>u</code> tag should not wrap around the parent <code>div</code> tag.",
          "testString": "assert($('u').children('div').length === 0, 'The <code>u</code> tag should not wrap around the parent <code>div</code> tag.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at <strong>Stanford University</strong>.</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781a367417b2b2512ab9",
      "title": "Use the em Tag to Italicize Text",
      "description": [
        "To emphasize text, you can use the <code>em</code> tag. This displays text as italicized, as the browser applies the CSS of <code>font-style: italic;</code> to the element.",
        "<hr>",
        "Wrap an <code>em</code> tag around the contents of the paragraph tag to give it emphasis."
      ],
      "tests": [
        {
          "text": "Your code should add an <code>em</code> tag to the markup.",
          "testString": "assert($('em').length == 1, 'Your code should add an <code>em</code> tag to the markup.');"
        },
        {
          "text": "The <code>em</code> tag should wrap around the contents of the <code>p</code> tag but not the <code>p</code> tag itself.",
          "testString": "assert($('p').children().length == 1 && $('em').children().length == 2, 'The <code>em</code> tag should wrap around the contents of the <code>p</code> tag but not the <code>p</code> tag itself.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781b367417b2b2512aba",
      "title": "Use the s Tag to Strikethrough Text",
      "description": [
        "To strikethrough text, which is when a horizontal line cuts across the characters, you can use the <code>s</code> tag. It shows that a section of text is no longer valid. With the <code>s</code> tag, the browser applies the CSS of <code>text-decoration: line-through;</code> to the element.",
        "<hr>",
        "Wrap the <code>s</code> tag around \"Google\" inside the <code>h4</code> tag and then add the word Alphabet beside it, which should not have the strikethrough formatting."
      ],
      "tests": [
        {
          "text": "Your code should add one <code>s</code> tag to the markup.",
          "testString": "assert($('s').length == 1, 'Your code should add one <code>s</code> tag to the markup.');"
        },
        {
          "text": "A <code>s</code> tag should wrap around the Google text in the <code>h4</code> tag. It should not contain the word Alphabet.",
          "testString": "assert($('s').text().match(/Google/gi) && !$('s').text().match(/Alphabet/gi), 'A <code>s</code> tag should wrap around the Google text in the <code>h4</code> tag. It should not contain the word Alphabet.');"
        },
        {
          "text": "Include the word Alphabet in the <code>h4</code> tag, without strikethrough formatting.",
          "testString": "assert($('h4').html().match(/Alphabet/gi), 'Include the word Alphabet in the <code>h4</code> tag, without strikethrough formatting.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781b367417b2b2512abb",
      "title": "Create a Horizontal Line Using the hr Element",
      "description": [
        "You can use the <code>hr</code> tag to add a horizontal line across the width of its containing element. This can be used to define a change in topic or to visually separate groups of content.",
        "<hr>",
        "Add an <code>hr</code> tag underneath the <code>h4</code> which contains the card title.",
        "<strong>Note</strong><br>In HTML, <code>hr</code> is a self-closing tag, and therefore doesn't need a separate closing tag."
      ],
      "tests": [
        {
          "text": "Your code should add an <code>hr</code> tag to the markup.",
          "testString": "assert($('hr').length == 1, 'Your code should add an <code>hr</code> tag to the markup.');"
        },
        {
          "text": "The <code>hr</code> tag should come between the title and the paragraph.",
          "testString": "assert(code.match(/<\\/h4>\\s*?<hr(>|\\s*?\\/>)\\s*?<em>/gi), 'The <code>hr</code> tag should come between the title and the paragraph.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4><s>Google</s>Alphabet</h4>",
            "      ",
            "      <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781b367417b2b2512abc",
      "title": "Adjust the background-color Property of Text",
      "description": [
        "Instead of adjusting your overall background or the color of the text to make the foreground easily readable, you can add a <code>background-color</code> to the element holding the text you want to emphasize. This challenge uses <code>rgba()</code> instead of <code>hex</code> codes or normal <code>rgb()</code>.",
        "<blockquote>rgba stands for:<br>&nbsp;&nbsp;r = red<br>&nbsp;&nbsp;g = green<br>&nbsp;&nbsp;b = blue<br>&nbsp;&nbsp;a = alpha/level of opacity</blockquote>",
        "The RGB values can range from 0 to 255. The alpha value can range from 1, which is fully opaque or a solid color, to 0, which is fully transparent or clear. <code>rgba()</code> is great to use in this case, as it allows you to adjust the opacity. This means you don't have to completely block out the background.",
        "You'll use <code>background-color: rgba(45, 45, 45, 0.1)</code> for this challenge. It produces a dark gray color that is nearly transparent given the low opacity value of 0.1.",
        "<hr>",
        "To make the text stand out more, adjust the <code>background-color</code> of the <code>h4</code> element to the given <code>rgba()</code> value.",
        "Also for the <code>h4</code>, remove the <code>height</code> property and add <code>padding</code> of 10px."
      ],
      "tests": [
        {
          "text": "Your code should add a <code>background-color</code> property to the <code>h4</code> element set to <code>rgba(45, 45, 45, 0.1)</code>.",
          "testString": "assert(code.match(/background-color:\\s*?rgba\\(\\s*?45\\s*?,\\s*?45\\s*?,\\s*?45\\s*?,\\s*?0?\\.1\\s*?\\)/gi), 'Your code should add a <code>background-color</code> property to the <code>h4</code> element set to <code>rgba(45, 45, 45, 0.1)</code>.');"
        },
        {
          "text": "Your code should add a <code>padding</code> property to the <code>h4</code> element and set it to 10 pixels.",
          "testString": "assert($('h4').css('padding-top') == '10px' && $('h4').css('padding-right') == '10px' && $('h4').css('padding-bottom') == '10px' && $('h4').css('padding-left') == '10px', 'Your code should add a <code>padding</code> property to the <code>h4</code> element and set it to 10 pixels.');"
        },
        {
          "text": "The <code>height</code> property on the <code>h4</code> element should be removed.",
          "testString": "assert(!($('h4').css('height') == '25px'), 'The <code>height</code> property on the <code>h4</code> element should be removed.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "    ",
            "    ",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Alphabet</h4>",
            "      <hr>",
            "      <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781b367417b2b2512abd",
      "title": "Adjust the Size of a Header Versus a Paragraph Tag",
      "description": [
        "The font size of header tags (<code>h1</code> through <code>h6</code>) should generally be larger than the font size of paragraph tags. This makes it easier for the user to visually understand the layout and level of importance of everything on the page. You use the <code>font-size</code> property to adjust the size of the text in an element.",
        "<hr>",
        "To make the heading significantly larger than the paragraph, change the <code>font-size</code> of the <code>h4</code> tag to 27 pixels."
      ],
      "tests": [
        {
          "text": "Your code should add a <code>font-size</code> property to the <code>h4</code> element set to 27 pixels.",
          "testString": "assert($('h4').css('font-size') == '27px', 'Your code should add a <code>font-size</code> property to the <code>h4</code> element set to 27 pixels.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    background-color: rgba(45, 45, 45, 0.1);",
            "    padding: 10px;",
            "    ",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Alphabet</h4>",
            "      <hr>",
            "      <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781b367417b2b2512abe",
      "title": "Add a box-shadow to a Card-like Element",
      "description": [
        "The <code>box-shadow</code> property applies one or more shadows to an element.",
        "The <code>box-shadow</code> property takes values for <code>offset-x</code> (how far to push the shadow horizontally from the element), <code>offset-y</code> (how far to push the shadow vertically from the element), <code>blur-radius</code>, <code>spread-radius</code> and a color value, in that order. The <code>blur-radius</code> and <code>spread-radius</code> values are optional.",
        "Here's an example of the CSS to create multiple shadows with some blur, at mostly-transparent black colors:",
        "<blockquote>box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);</blockquote>",
        "<hr>",
        "The element now has an id of <code>thumbnail</code>. With this selector, use the example CSS values above to place a <code>box-shadow</code> on the card."
      ],
      "tests": [
        {
          "text": "Your code should add a <code>box-shadow</code> property for the <code>thumbnail</code> id.",
          "testString": "assert(code.match(/#thumbnail\\s*?{\\s*?box-shadow/g), 'Your code should add a <code>box-shadow</code> property for the <code>thumbnail</code> id.');"
        },
        {
          "text": "You should use the given CSS for the <code>box-shadow</code> value.",
          "testString": "assert(code.match(/box-shadow:\\s*?0\\s+?10px\\s+?20px\\s+?rgba\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0?\\.19\\),\\s*?0\\s+?6px\\s+?6px\\s+?rgba\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0?\\.23\\)/gi), 'You should use the given CSS for the <code>box-shadow</code> value.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    background-color: rgba(45, 45, 45, 0.1);",
            "    padding: 10px;",
            "    font-size: 27px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  ",
            "  ",
            "  ",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\" id=\"thumbnail\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Alphabet</h4>",
            "      <hr>",
            "      <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781c367417b2b2512abf",
      "title": "Decrease the Opacity of an Element",
      "description": [
        "The <code>opacity</code> property in CSS is used to adjust the opacity, or conversely, the transparency for an item.",
        "<blockquote>A value of 1 is opaque, which isn't transparent at all.<br>A value of 0.5 is half see-through.<br>A value of 0 is completely transparent.</blockquote>",
        "The value given will apply to the entire element, whether that's an image with some transparency, or the foreground and background colors for a block of text.",
        "<hr>",
        "Set the <code>opacity</code> of the anchor tags to 0.7 using <code>links</code> class to select them."
      ],
      "tests": [
        {
          "text": "Your code should set the <code>opacity</code> property to 0.7 on the anchor tags by selecting the class of <code>links</code>.",
          "testString": "assert.approximately(parseFloat($('.links').css('opacity')), 0.7, 0.1, 'Your code should set the <code>opacity</code> property to 0.7 on the anchor tags by selecting the class of <code>links</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    background-color: rgba(45, 45, 45, 0.1);",
            "    padding: 10px;",
            "    font-size: 27px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "    ",
            "  }",
            "  #thumbnail {",
            "    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\" id=\"thumbnail\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Alphabet</h4>",
            "      <hr>",
            "      <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781c367417b2b2512ac0",
      "title": "Use the text-transform Property to Make Text Uppercase",
      "description": [
        "The <code>text-transform</code> property in CSS is used to change the appearance of text. It's a convenient way to make sure text on a webpage appears consistently, without having to change the text content of the actual HTML elements.",
        "The following table shows how the different <code>text-transform</code>values change the example text \"Transform me\".",
        "<table class=\"table table-striped\"><thead><th>Value<th>Result<tbody><tr><td><code>lowercase</code><td>\"transform me\"<tr><td><code>uppercase</code><td>\"TRANSFORM ME\"<tr><td><code>capitalize</code><td>\"Transform Me\"<tr><td><code>initial</code><td>Use the default value<tr><td><code>inherit</code><td>Use the <code>text-transform</code> value from the parent element<tr><td><code>none</code><td><strong>Default:</strong> Use the original text</td></table>",
        "<hr>",
        "Transform the text of the <code>h4</code> to be uppercase using the <code>text-transform</code> property."
      ],
      "tests": [
        {
          "text": "The <code>h4</code> text should be uppercase.",
          "testString": "assert($('h4').css('text-transform') === 'uppercase', 'The <code>h4</code> text should be uppercase.');"
        },
        {
          "text": "The original text of the h4 should not be changed.",
          "testString": "assert(($('h4').text() !== $('h4').text().toUpperCase()), 'The original text of the h4 should not be changed.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    background-color: rgba(45, 45, 45, 0.1);",
            "    padding: 10px;",
            "    font-size: 27px;",
            "    ",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "    opacity: 0.7;",
            "  }",
            "  #thumbnail {",
            "    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\" id=\"thumbnail\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Alphabet</h4>",
            "      <hr>",
            "      <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781c367417b2b2512ac2",
      "title": "Set the font-size for Multiple Heading Elements",
      "description": [
        "The <code>font-size</code> property is used to specify how large the text is in a given element. This rule can be used for multiple elements to create visual consistency of text on a page. In this challenge, you'll set the values for all <code>h1</code> through <code>h6</code> tags to balance the heading sizes.",
        "<hr>",
        "<ul><li>Set the <code>font-size</code> of the <code>h1</code> tag to 68px.</li><li>Set the <code>font-size</code> of the <code>h2</code> tag to 52px.</li><li>Set the <code>font-size</code> of the <code>h3</code> tag to 40px.</li><li>Set the <code>font-size</code> of the <code>h4</code> tag to 32px.</li><li>Set the <code>font-size</code> of the <code>h5</code> tag to 21px.</li><li>Set the <code>font-size</code> of the <code>h6</code> tag to 14px.</li></ul>"
      ],
      "tests": [
        {
          "text": "Your code should set the <code>font-size</code> property for the <code>h1</code> tag to 68 pixels.",
          "testString": "assert($('h1').css('font-size') == '68px', 'Your code should set the <code>font-size</code> property for the <code>h1</code> tag to 68 pixels.');"
        },
        {
          "text": "Your code should set the <code>font-size</code> property for the <code>h2</code> tag to 52 pixels.",
          "testString": "assert($('h2').css('font-size') == '52px', 'Your code should set the <code>font-size</code> property for the <code>h2</code> tag to 52 pixels.');"
        },
        {
          "text": "Your code should set the <code>font-size</code> property for the <code>h3</code> tag to 40 pixels.",
          "testString": "assert($('h3').css('font-size') == '40px', 'Your code should set the <code>font-size</code> property for the <code>h3</code> tag to 40 pixels.');"
        },
        {
          "text": "Your code should set the <code>font-size</code> property for the <code>h4</code> tag to 32 pixels.",
          "testString": "assert($('h4').css('font-size') == '32px', 'Your code should set the <code>font-size</code> property for the <code>h4</code> tag to 32 pixels.');"
        },
        {
          "text": "Your code should set the <code>font-size</code> property for the <code>h5</code> tag to 21 pixels.",
          "testString": "assert($('h5').css('font-size') == '21px', 'Your code should set the <code>font-size</code> property for the <code>h5</code> tag to 21 pixels.');"
        },
        {
          "text": "Your code should set the <code>font-size</code> property for the <code>h6</code> tag to 14 pixels.",
          "testString": "assert($('h6').css('font-size') == '14px', 'Your code should set the <code>font-size</code> property for the <code>h6</code> tag to 14 pixels.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  ",
            "  ",
            "  ",
            "  ",
            "  ",
            "  ",
            "</style>",
            "<h1>This is h1 text</h1>",
            "<h2>This is h2 text</h2>",
            "<h3>This is h3 text</h3>",
            "<h4>This is h4 text</h4>",
            "<h5>This is h5 text</h5>",
            "<h6>This is h6 text</h6>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781c367417b2b2512ac3",
      "title": "Set the font-weight for Multiple Heading Elements",
      "description": [
        "You set the <code>font-size</code> of each heading tag in the last challenge, here you'll adjust the <code>font-weight</code>.",
        "The <code>font-weight</code> property sets how thick or thin characters are in a section of text.",
        "<hr>",
        "<ul><li>Set the <code>font-weight</code> of the <code>h1</code> tag to 800.</li><li>Set the <code>font-weight</code> of the <code>h2</code> tag to 600.</li><li>Set the <code>font-weight</code> of the <code>h3</code> tag to 500.</li><li>Set the <code>font-weight</code> of the <code>h4</code> tag to 400.</li><li>Set the <code>font-weight</code> of the <code>h5</code> tag to 300.</li><li>Set the <code>font-weight</code> of the <code>h6</code> tag to 200.</li></ul>"
      ],
      "tests": [
        {
          "text": "Your code should set the <code>font-weight</code> property for the <code>h1</code> tag to 800.",
          "testString": "assert($('h1').css('font-weight') == '800', 'Your code should set the <code>font-weight</code> property for the <code>h1</code> tag to 800.');"
        },
        {
          "text": "Your code should set the <code>font-weight</code> property for the <code>h2</code> tag to 600.",
          "testString": "assert($('h2').css('font-weight') == '600', 'Your code should set the <code>font-weight</code> property for the <code>h2</code> tag to 600.');"
        },
        {
          "text": "Your code should set the <code>font-weight</code> property for the <code>h3</code> tag to 500.",
          "testString": "assert($('h3').css('font-weight') == '500', 'Your code should set the <code>font-weight</code> property for the <code>h3</code> tag to 500.');"
        },
        {
          "text": "Your code should set the <code>font-weight</code> property for the <code>h4</code> tag to 400.",
          "testString": "assert($('h4').css('font-weight') == '400', 'Your code should set the <code>font-weight</code> property for the <code>h4</code> tag to 400.');"
        },
        {
          "text": "Your code should set the <code>font-weight</code> property for the <code>h5</code> tag to 300.",
          "testString": "assert($('h5').css('font-weight') == '300', 'Your code should set the <code>font-weight</code> property for the <code>h5</code> tag to 300.');"
        },
        {
          "text": "Your code should set the <code>font-weight</code> property for the <code>h6</code> tag to 200.",
          "testString": "assert($('h6').css('font-weight') == '200', 'Your code should set the <code>font-weight</code> property for the <code>h6</code> tag to 200.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h1 {",
            "    font-size: 68px;",
            "    ",
            "  }",
            "  h2 {",
            "    font-size: 52px;",
            "    ",
            "  }",
            "  h3 {",
            "    font-size: 40px;",
            "    ",
            "  }",
            "  h4 {",
            "    font-size: 32px;",
            "    ",
            "  }",
            "  h5 {",
            "    font-size: 21px;",
            "    ",
            "  }",
            "  h6 {",
            "    font-size: 14px;",
            "    ",
            "  }",
            "</style>",
            "<h1>This is h1 text</h1>",
            "<h2>This is h2 text</h2>",
            "<h3>This is h3 text</h3>",
            "<h4>This is h4 text</h4>",
            "<h5>This is h5 text</h5>",
            "<h6>This is h6 text</h6>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781c367417b2b2512ac4",
      "title": "Set the font-size of Paragraph Text",
      "description": [
        "The <code>font-size</code> property in CSS is not limited to headings, it can be applied to any element containing text.",
        "<hr>",
        "Change the value of the <code>font-size</code> property for the paragraph to 16px to make it more visible."
      ],
      "tests": [
        {
          "text": "Your <code>p</code> tag should have a <code>font-size</code> of 16 pixels.",
          "testString": "assert($('p').css('font-size') == '16px', 'Your <code>p</code> tag should have a <code>font-size</code> of 16 pixels.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  p {",
            "    font-size: 10px;",
            "  }",
            "</style>",
            "<p>",
            "  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.",
            "</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781d367417b2b2512ac5",
      "title": "Set the line-height of Paragraphs",
      "description": [
        "CSS offers the <code>line-height</code> property to change the height of each line in a block of text. As the name suggests, it changes the amount of vertical space that each line of text gets.",
        "<hr>",
        "Add a <code>line-height</code> property to the <code>p</code> tag and set it to 25px."
      ],
      "tests": [
        {
          "text": "Your code should set the <code>line-height</code> of the <code>p</code> tag to 25 pixels.",
          "testString": "assert($('p').css('line-height') == '25px', 'Your code should set the <code>line-height</code> of the <code>p</code> tag to 25 pixels.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  p {",
            "    font-size: 16px;",
            "    ",
            "  }",
            "</style>",
            "<p>",
            "  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.",
            "</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781d367417b2b2512ac8",
      "title": "Adjust the Hover State of an Anchor Tag",
      "description": [
        "This challenge will touch on the usage of pseudo-classes. A pseudo-class is a keyword that can be added to selectors, in order to select a specific state of the element.",
        "For example, the styling of an anchor tag can be changed for its hover state using the <code>:hover</code> pseudo-class selector. Here's the CSS to change the <code>color</code> of the anchor tag to red during its hover state:",
        "<blockquote>a:hover {<br>&nbsp;&nbsp;color: red;<br>}</blockquote>",
        "<hr>",
        "The code editor has a CSS rule to style all <code>a</code> tags black. Add a rule so that when the user hovers over the <code>a</code> tag, the <code>color</code> is blue."
      ],
      "tests": [
        {
          "text": "The anchor tag <code>color</code> should remain black, only add CSS rules for the <code>:hover</code> state.",
          "testString": "assert($('a').css('color') == 'rgb(0, 0, 0)', 'The anchor tag <code>color</code> should remain black, only add CSS rules for the <code>:hover</code> state.');"
        },
        {
          "text": "The anchor tag should have a <code>color</code> of blue on hover.",
          "testString": "assert(code.match(/a:hover\\s*?{\\s*?color:\\s*?blue;\\s*?}/gi), 'The anchor tag should have a <code>color</code> of blue on hover.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  a {",
            "    color: #000;",
            "  }",
            "  ",
            "  ",
            "  ",
            "</style>",
            "<a href=\"http://freecatphotoapp.com/\" target=\"_blank\">CatPhotoApp</a>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781e367417b2b2512ac9",
      "title": "Change an Element's Relative Position",
      "description": [
        "CSS treats each HTML element as its own box, which is usually referred to as the <code>CSS Box Model</code>. Block-level items automatically start on a new line (think headings, paragraphs, and divs) while inline items sit within surrounding content (like images or spans). The default layout of elements in this way is called the <code>normal flow</code> of a document, but CSS offers the position property to override it.",
        "When the position of an element is set to <code>relative</code>, it allows you to specify how CSS should move it <i>relative</i> to its current position in the normal flow of the page. It pairs with the CSS offset properties of <code>left</code> or <code>right</code>, and <code>top</code> or <code>bottom</code>. These say how many pixels, percentages, or ems to move the item <i>away</i> from where it is normally positioned. The following example moves the paragraph 10 pixels away from the bottom:",
        "<blockquote>p {<br>&nbsp;&nbsp;position: relative;<br>&nbsp;&nbsp;bottom: 10px;<br>}</blockquote>",
        "Changing an element's position to relative does not remove it from the normal flow - other elements around it still behave as if that item were in its default position.",
        "<strong>Note</strong><br>Positioning gives you a lot of flexibility and power over the visual layout of a page. It's good to remember that no matter the position of elements, the underlying HTML markup should be organized and make sense when read from top to bottom. This is how users with visual impairments (who rely on assistive devices like screen readers) access your content.",
        "<hr>",
        "Change the <code>position</code> of the <code>h2</code> to <code>relative</code>, and use a CSS offset to move it 15 pixels away from the <code>top</code> of where it sits in the normal flow. Notice there is no impact on the positions of the surrounding h1 and p elements."
      ],
      "tests": [
        {
          "text": "The <code>h2</code> element should have a <code>position</code> property set to <code>relative</code>.",
          "testString": "assert($('h2').css('position') == 'relative', 'The <code>h2</code> element should have a <code>position</code> property set to <code>relative</code>.');"
        },
        {
          "text": "Your code should use a CSS offset to relatively position the <code>h2</code> 15px away from the <code>top</code> of where it normally sits.",
          "testString": "assert($('h2').css('top') == '15px', 'Your code should use a CSS offset to relatively position the <code>h2</code> 15px away from the <code>top</code> of where it normally sits.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h2 {",
            "    ",
            "    ",
            "  }",
            "</style>",
            "<body>",
            "  <h1>On Being Well-Positioned</h1>",
            "  <h2>Move me!</h2>",
            "  <p>I still think the h2 is where it normally sits.</p>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781e367417b2b2512aca",
      "title": "Move a Relatively Positioned Element with CSS Offsets",
      "description": [
        "The CSS offsets of <code>top</code> or <code>bottom</code>, and <code>left</code> or <code>right</code> tell the browser how far to offset an item relative to where it would sit in the normal flow of the document. You're offsetting an element away from a given spot, which moves the element away from the referenced side (effectively, the opposite direction). As you saw in the last challenge, using the top offset moved the <code>h2</code> downwards. Likewise, using a left offset moves an item to the right.",
        "<img src='https://i.imgur.com/eWWi3gZ.gif' alt='' />",
        "<hr>",
        "Use CSS offsets to move the <code>h2</code> 15 pixels to the right and 10 pixels up."
      ],
      "tests": [
        {
          "text": "Your code should use a CSS offset to relatively position the <code>h2</code> 10px upwards. In other words, move it 10px away from the <code>bottom</code> of where it normally sits.",
          "testString": "assert($('h2').css('bottom') == '10px', 'Your code should use a CSS offset to relatively position the <code>h2</code> 10px upwards. In other words, move it 10px away from the <code>bottom</code> of where it normally sits.');"
        },
        {
          "text": "Your code should use a CSS offset to relatively position the <code>h2</code> 15px towards the right. In other words, move it 15px away from the <code>left</code> of where it normally sits.",
          "testString": "assert($('h2').css('left') == '15px', 'Your code should use a CSS offset to relatively position the <code>h2</code> 15px towards the right. In other words, move it 15px away from the <code>left</code> of where it normally sits.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<head>",
            "<style>",
            "  h2 {",
            "    position: relative;",
            "    ",
            "    ",
            "  }",
            "</style>",
            "</head>",
            "<body>",
            "  <h1>On Being Well-Positioned</h1>",
            "  <h2>Move me!</h2>",
            "  <p>I still think the h2 is where it normally sits.</p>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781e367417b2b2512acb",
      "title": "Lock an Element to its Parent with Absolute Positioning",
      "description": [
        "The next option for the CSS <code>position</code> property is <code>absolute</code>, which locks the element in place relative to its parent container. Unlike the <code>relative</code> position, this removes the element from the normal flow of the document, so surrounding items ignore it. The CSS offset properties (top or bottom and left or right) are used to adjust the position.",
        "One nuance with absolute positioning is that it will be locked relative to its closest <em>positioned</em> ancestor. If you forget to add a position rule to the parent item, (this is typically done using <code>position: relative;</code>), the browser will keep looking up the chain and ultimately default to the body tag.",
        "<hr>",
        "Lock the <code>#searchbar</code> element to the top-right of its <code>section</code> parent by declaring its <code>position</code> as <code>absolute</code>. Give it <code>top</code> and <code>right</code> offsets of 50 pixels each."
      ],
      "tests": [
        {
          "text": "The <code>#searchbar</code> element should have a <code>position</code> set to <code>absolute</code>.",
          "testString": "assert($('#searchbar').css('position') == 'absolute', 'The <code>#searchbar</code> element should have a <code>position</code> set to <code>absolute</code>.');"
        },
        {
          "text": "Your code should use the <code>top</code> CSS offset of 50 pixels on the <code>#searchbar</code> element.",
          "testString": "assert($('#searchbar').css('top') == '50px', 'Your code should use the <code>top</code> CSS offset of 50 pixels on the <code>#searchbar</code> element.');"
        },
        {
          "text": "Your code should use the <code>right</code> CSS offset of 50 pixels on the <code>#searchbar</code> element.",
          "testString": "assert($('#searchbar').css('right') == '50px', 'Your code should use the <code>right</code> CSS offset of 50 pixels on the <code>#searchbar</code> element.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  #searchbar {",
            "    ",
            "    ",
            "    ",
            "  }",
            "  section {",
            "    position: relative;",
            "  }",
            "</style>",
            "<body>",
            "  <h1>Welcome!</h1>",
            "  <section>",
            "    <form id=\"searchbar\">",
            "      <label for=\"search\">Search:</label>",
            "      <input type=\"search\" id=\"search\" name=\"search\">",
            "      <input type=\"submit\" name=\"submit\" value=\"Go!\">",
            "    </form>",
            "  </section>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781e367417b2b2512acc",
      "title": "Lock an Element to the Browser Window with Fixed Positioning",
      "description": [
        "The next layout scheme that CSS offers is the <code>fixed</code> position, which is a type of absolute positioning that locks an element relative to the browser window. Similar to absolute positioning, it's used with the CSS offset properties and also removes the element from the normal flow of the document. Other items no longer \"realize\" where it is positioned, which may require some layout adjustments elsewhere.",
        "One key difference from the <code>absolute</code> position is that the element won't move when the user scrolls.",
        "<hr>",
        "The navigation bar in the code is labeled with an id of <code>navbar</code>. Change its <code>position</code> to <code>fixed</code>, and offset it 0 pixels from the <code>top</code> and 0 pixels from the <code>left</code>. Notice the (lack of) impact to the <code>h1</code> position, it hasn't been pushed down to accommodate the navigation bar and would need to be adjusted separately."
      ],
      "tests": [
        {
          "text": "The <code>#navbar</code> element should have a <code>position</code> set to <code>fixed</code>.",
          "testString": "assert($('#navbar').css('position') == 'fixed', 'The <code>#navbar</code> element should have a <code>position</code> set to <code>fixed</code>.');"
        },
        {
          "text": "Your code should use the <code>top</code> CSS offset of 0 pixels on the <code>#navbar</code> element.",
          "testString": "assert($('#navbar').css('top') == '0px', 'Your code should use the <code>top</code> CSS offset of 0 pixels on the <code>#navbar</code> element.');"
        },
        {
          "text": "Your code should use the <code>left</code> CSS offset of 0 pixels on the <code>#navbar</code> element.",
          "testString": "assert($('#navbar').css('left') == '0px', 'Your code should use the <code>left</code> CSS offset of 0 pixels on the <code>#navbar</code> element.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  #navbar {",
            "    ",
            "    ",
            "    ",
            "    width: 100%;",
            "    background-color: #767676;",
            "  }",
            "  nav ul {",
            "    margin: 0px;",
            "    padding: 5px 0px 5px 30px;",
            "  }",
            "  nav li {",
            "    display: inline;",
            "    margin-right: 20px;",
            "  }",
            "  a {",
            "    text-decoration: none;",
            "  }",
            "</style>",
            "<body>",
            "  <header>",
            "    <h1>Welcome!</h1>",
            "    <nav id=\"navbar\">",
            "      <ul>",
            "        <li><a href=\"\">Home</a></li>",
            "        <li><a href=\"\">Contact</a></li>",
            "      </ul>",
            "    </nav>",
            "  </header>",
            "  <p>I shift up when the #navbar is fixed to the browser window.</p>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a3367417b2b2512ace",
      "title": "Push Elements Left or Right with the float Property",
      "description": [
        "The next positioning tool does not actually use <code>position</code>, but sets the <code>float</code> property of an element. Floating elements are removed from the normal flow of a document and pushed to either the <code>left</code> or <code>right</code> of their containing parent element. It's commonly used with the <code>width</code> property to specify how much horizontal space the floated element requires.",
        "<hr>",
        "The given markup would work well as a two-column layout, with the <code>section</code> and <code>aside</code> elements next to each other. Give the <code>#left</code> item a <code>float</code> of <code>left</code> and the <code>#right</code> item a <code>float</code> of <code>right</code>."
      ],
      "tests": [
        {
          "text": "The element with id <code>left</code> should have a <code>float</code> value of <code>left</code>.",
          "testString": "assert($('#left').css('float') == 'left', 'The element with id <code>left</code> should have a <code>float</code> value of <code>left</code>.');"
        },
        {
          "text": "The element with id <code>right</code> should have a <code>float</code> value of <code>right</code>.",
          "testString": "assert($('#right').css('float') == 'right', 'The element with id <code>right</code> should have a <code>float</code> value of <code>right</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<head>",
            "  <style>",
            "  #left {",
            "    ",
            "    width: 50%;",
            "  }",
            "  #right {",
            "    ",
            "    width: 40%;",
            "  }",
            "  aside, section {",
            "    padding: 2px;",
            "    background-color: #ccc;",
            "  }",
            "  </style>",
            "</head>",
            "<body>",
            "  <header>",
            "    <h1>Welcome!</h1>",
            "  </header>",
            "  <section id=\"left\">",
            "    <h2>Content</h2>",
            "    <p>Good stuff</p>",
            "  </section>",
            "  <aside id=\"right\">",
            "    <h2>Sidebar</h2>",
            "    <p>Links</p>",
            "  </aside>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a3367417b2b2512acf",
      "title": "Change the Position of Overlapping Elements with the z-index Property",
      "description": [
        "When elements are positioned to overlap, the element coming later in the HTML markup will, by default, appear on the top of the other elements. However, the <code>z-index</code> property can specify the order of how elements are stacked on top of one another. It must be an integer (i.e. a whole number and not a decimal), and higher values for the <code>z-index</code> property of an element move it higher in the stack than those with lower values.",
        "<hr>",
        "Add a <code>z-index</code> property to the element with the class name of <code>first</code> (the red rectangle) and set it to a value of 2 so it covers the other element (blue rectangle)."
      ],
      "tests": [
        {
          "text": "The element with class <code>first</code> should have a <code>z-index</code> value of 2.",
          "testString": "assert($('.first').css('z-index') == '2', 'The element with class <code>first</code> should have a <code>z-index</code> value of 2.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div {",
            "    width: 60%;",
            "    height: 200px;",
            "    margin-top: 20px;",
            "  }",
            "  ",
            "  .first {",
            "    background-color: red;",
            "    position: absolute;",
            "    ",
            "  }",
            "  .second {",
            "    background-color: blue;",
            "    position: absolute;",
            "    left: 40px;",
            "    top: 50px;",
            "    z-index: 1;",
            "  }",
            "</style>",
            "",
            "<div class=\"first\"></div>",
            "<div class=\"second\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a3367417b2b2512ad0",
      "title": "Center an Element Horizontally Using the margin Property",
      "description": [
        "Another positioning technique is to center a block element horizontally. One way to do this is to set its <code>margin</code> to a value of auto.",
        "This method works for images, too. Images are inline elements by default, but can be changed to block elements when you set the <code>display</code> property to block.",
        "<hr>",
        "Center the <code>div</code> on the page by adding a <code>margin</code> property with a value of auto."
      ],
      "tests": [
        {
          "text": "The <code>div</code> should have a <code>margin</code> set to auto.",
          "testString": "assert(code.match(/margin:\\s*?auto;/g), 'The <code>div</code> should have a <code>margin</code> set to auto.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div {",
            "    background-color: blue;",
            "    height: 100px;",
            "    width: 100px;",
            "    ",
            "  }",
            "</style>",
            "<div></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a3367417b2b2512ad1",
      "title": "Learn about Complementary Colors",
      "description": [
        "Color theory and its impact on design is a deep topic and only the basics are covered in the following challenges. On a website, color can draw attention to content, evoke emotions, or create visual harmony. Using different combinations of colors can really change the look of a website, and a lot of thought can go into picking a color palette that works with your content.",
        "The color wheel is a useful tool to visualize how colors relate to each other - it's a circle where similar hues are neighbors and different hues are farther apart. When two colors are opposite each other on the wheel, they are called complementary colors. They have the characteristic that if they are combined, they \"cancel\" each other out and create a gray color. However, when placed side-by-side, these colors appear more vibrant and produce a strong visual contrast.",
        "Some examples of complementary colors with their hex codes are:",
        "<blockquote>red (#FF0000) and cyan (#00FFFF)<br>green (#00FF00) and magenta (#FF00FF)<br>blue (#0000FF) and yellow (#FFFF00)</blockquote>",
        "There are many color picking tools available online that have an option to find the complement of a color.",
        "<strong>Note</strong><br>For all color challenges: Using color can be a powerful way to add visual interest to a page. However, color alone should not be used as the only way to convey important information because users with visual impairments may not understand that content. This issue will be covered in more detail in the Applied Accessibility challenges.",
        "<hr>",
        "Change the <code>background-color</code> property of the <code>blue</code> and <code>yellow</code> classes to their respective colors. Notice how the colors look different next to each other than they do compared against the white background."
      ],
      "tests": [
        {
          "text": "The <code>div</code> element with class <code>blue</code> should have a <code>background-color</code> of blue.",
          "testString": "assert($('.blue').css('background-color') == 'rgb(0, 0, 255)', 'The <code>div</code> element with class <code>blue</code> should have a <code>background-color</code> of blue.');"
        },
        {
          "text": "The <code>div</code> element with class <code>yellow</code> should have a <code>background-color</code> of yellow.",
          "testString": "assert($('.yellow').css('background-color') == 'rgb(255, 255, 0)', 'The <code>div</code> element with class <code>yellow</code> should have a <code>background-color</code> of yellow.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: #FFFFFF;",
            "  }",
            "  .blue {",
            "    background-color: #000000;",
            "  }",
            "  .yellow {",
            "    background-color: #000000;",
            "  }",
            "  div {",
            "    display: inline-block;",
            "    height: 100px;",
            "    width: 100px;",
            "  }",
            "</style>",
            "<div class=\"blue\"></div>",
            "<div class=\"yellow\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a4367417b2b2512ad2",
      "title": "Learn about Tertiary Colors",
      "description": [
        "Computer monitors and device screens create different colors by combining amounts of red, green, and blue light. This is known as the RGB additive color model in modern color theory. Red (R), green (G), and blue (B) are called primary colors. Mixing two primary colors creates the secondary colors cyan (G + B), magenta (R + B) and yellow (R + G). You saw these colors in the Complementary Colors challenge. These secondary colors happen to be the complement to the primary color not used in their creation, and are opposite to that primary color on the color wheel. For example, magenta is made with red and blue, and is the complement to green.",
        "Tertiary colors are the result of combining a primary color with one of its secondary color neighbors. For example, red (primary) and yellow (secondary) make orange. This adds six more colors to a simple color wheel for a total of twelve.",
        "There are various methods of selecting different colors that result in a harmonious combination in design. One example that can use tertiary colors is called the split-complementary color scheme. This scheme starts with a base color, then pairs it with the two colors that are adjacent to its complement. The three colors provide strong visual contrast in a design, but are more subtle than using two complementary colors.",
        "Here are three colors created using the split-complement scheme:",
        "<table class=\"table table-striped\"><thead><tr><th>Color</th><th>Hex Code</th></tr><thead><tbody><tr><td>orange</td><td>#FF7D00</td></tr><tr><td>cyan</td><td>#00FFFF</td></tr><tr><td>raspberry</td><td>#FF007D</td></tr></tbody></table>",
        "<hr>",
        "Change the <code>background-color</code> property of the <code>orange</code>, <code>cyan</code>, and <code>raspberry</code> classes to their respective colors. Make sure to use the hex codes as orange and raspberry are not browser-recognized color names."
      ],
      "tests": [
        {
          "text": "The <code>div</code> element with class <code>orange</code> should have a <code>background-color</code> of orange.",
          "testString": "assert($('.orange').css('background-color') == 'rgb(255, 125, 0)', 'The <code>div</code> element with class <code>orange</code> should have a <code>background-color</code> of orange.');"
        },
        {
          "text": "The <code>div</code> element with class <code>cyan</code> should have a <code>background-color</code> of cyan.",
          "testString": "assert($('.cyan').css('background-color') == 'rgb(0, 255, 255)', 'The <code>div</code> element with class <code>cyan</code> should have a <code>background-color</code> of cyan.');"
        },
        {
          "text": "The <code>div</code> element with class <code>raspberry</code> should have a <code>background-color</code> of raspberry.",
          "testString": "assert($('.raspberry').css('background-color') == 'rgb(255, 0, 125)', 'The <code>div</code> element with class <code>raspberry</code> should have a <code>background-color</code> of raspberry.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: #FFFFFF;",
            "  }",
            "  ",
            "  .orange {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  .cyan {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  .raspberry {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  div {",
            "    height: 100px;",
            "    width: 100px;",
            "    margin-bottom: 5px;",
            "  }",
            "</style>",
            "  ",
            "<div class=\"orange\"></div>",
            "<div class=\"cyan\"></div>",
            "<div class=\"raspberry\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a4367417b2b2512ad3",
      "title": "Adjust the Color of Various Elements to Complementary Colors",
      "description": [
        "The Complementary Colors challenge showed that opposite colors on the color wheel can make each other appear more vibrant when placed side-by-side. However, the strong visual contrast can be jarring if it's overused on a website, and can sometimes make text harder to read if it's placed on a complementary-colored background. In practice, one of the colors is usually dominant and the complement is used to bring visual attention to certain content on the page.",
        "<hr>",
        "This page will use a shade of teal (<code>#09A7A1</code>) as the dominant color, and its orange (<code>#FF790E</code>) complement to visually highlight the sign-up buttons. Change the <code>background-color</code> of both the <code>header</code> and <code>footer</code> from black to the teal color. Then change the <code>h2</code> text <code>color</code> to teal as well. Finally, change the <code>background-color</code> of the <code>button</code> to the orange color."
      ],
      "tests": [
        {
          "text": "The <code>header</code> element should have a <code>background-color</code> of #09A7A1.",
          "testString": "assert($('header').css('background-color') == 'rgb(9, 167, 161)', 'The <code>header</code> element should have a <code>background-color</code> of #09A7A1.');"
        },
        {
          "text": "The <code>footer</code> element should have a <code>background-color</code> of #09A7A1.",
          "testString": "assert($('footer').css('background-color') == 'rgb(9, 167, 161)', 'The <code>footer</code> element should have a <code>background-color</code> of #09A7A1.');"
        },
        {
          "text": "The <code>h2</code> element should have a <code>color</code> of #09A7A1.",
          "testString": "assert($('h2').css('color') == 'rgb(9, 167, 161)', 'The <code>h2</code> element should have a <code>color</code> of #09A7A1.');"
        },
        {
          "text": "The <code>button</code> element should have a <code>background-color</code> of #FF790E.",
          "testString": "assert($('button').css('background-color') == 'rgb(255, 121, 14)', 'The <code>button</code> element should have a <code>background-color</code> of #FF790E.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: white;",
            "  }",
            "  header {",
            "    background-color: black;",
            "    color: white;",
            "    padding: 0.25em;",
            "  }",
            "  h2 {",
            "    color: black;",
            "  }  ",
            "  button {",
            "    background-color: white;",
            "  }",
            "  footer {",
            "    background-color: black;",
            "    color: white;",
            "    padding: 0.5em;",
            "  }",
            "</style>",
            "<header>",
            "  <h1>Cooking with FCC!</h1>",
            "</header>",
            "<main>",
            "  <article>",
            "    <h2>Machine Learning in the Kitchen</h2>",
            "    <p>Join this two day workshop that walks through how to implement cutting-edge snack-getting algorithms with a command line interface. Coding usually involves writing exact instructions, but sometimes you need your computer to execute flexible commands, like <code>fetch Pringles</code>.</p>",
            "    <button>Sign Up</button>",
            "  </article>",
            "  <article>",
            "    <h2>Bisection Vegetable Chopping</h2>",
            "    <p>This week-long retreat will level-up your coding ninja skills to actual ninja skills. No longer is the humble bisection search limited to sorted arrays or coding interview questions, applying its concepts in the kitchen will have you chopping carrots in O(log n) time before you know it.</p>",
            "    <button>Sign Up</button>",
            "  </article>",
            "</main>",
            "<br>",
            "<footer>&copy;2016 FCC Kitchen</footer>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a4367417b2b2512ad4",
      "title": "Adjust the Hue of a Color",
      "description": [
        "Colors have several characteristics including hue, saturation, and lightness. CSS3 introduced the <code>hsl()</code> property as an alternative way to pick a color by directly stating these characteristics.",
        "<b>Hue</b> is what people generally think of as 'color'. If you picture a spectrum of colors starting with red on the left, moving through green in the middle, and blue on right, the hue is where a color fits along this line. In <code>hsl()</code>, hue uses a color wheel concept instead of the spectrum, where the angle of the color on the circle is given as a value between 0 and 360.",
        "<b>Saturation</b> is the amount of gray in a color. A fully saturated color has no gray in it, and a minimally saturated color is almost completely gray. This is given as a percentage with 100% being fully saturated.",
        "<b>Lightness</b> is the amount of white or black in a color. A percentage is given ranging from 0% (black) to 100% (white), where 50% is the normal color.",
        "Here are a few examples of using <code>hsl()</code> with fully-saturated, normal lightness colors:",
        "<table class=\"table table-striped\"><thead><tr><th>Color</th><th>HSL</th></tr></thead><tbody><tr><td>red</td><td>hsl(0, 100%, 50%)</td></tr><tr><td>yellow</td><td>hsl(60, 100%, 50%)</td></tr><tr><td>green</td><td>hsl(120, 100%, 50%)</td></tr><tr><td>cyan</td><td>hsl(180, 100%, 50%)</td></tr><tr><td>blue</td><td>hsl(240, 100%, 50%)</td></tr><tr><td>magenta</td><td>hsl(300, 100%, 50%)</td></tr></tbody></table>",
        "<hr>",
        "Change the <code>background-color</code> of each <code>div</code> element based on the class names (<code>green</code>, <code>cyan</code>, or <code>blue</code>) using <code>hsl()</code>. All three should have full saturation and normal lightness."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>hsl()</code> property to declare the color green.",
          "testString": "assert(code.match(/\\.green\\s*?{\\s*?background-color:\\s*?hsl/gi), 'Your code should use the <code>hsl()</code> property to declare the color green.');"
        },
        {
          "text": "Your code should use the <code>hsl()</code> property to declare the color cyan.",
          "testString": "assert(code.match(/\\.cyan\\s*?{\\s*?background-color:\\s*?hsl/gi), 'Your code should use the <code>hsl()</code> property to declare the color cyan.');"
        },
        {
          "text": "Your code should use the <code>hsl()</code> property to declare the color blue.",
          "testString": "assert(code.match(/\\.blue\\s*?{\\s*?background-color:\\s*?hsl/gi), 'Your code should use the <code>hsl()</code> property to declare the color blue.');"
        },
        {
          "text": "The <code>div</code> element with class <code>green</code> should have a <code>background-color</code> of green.",
          "testString": "assert($('.green').css('background-color') == 'rgb(0, 255, 0)', 'The <code>div</code> element with class <code>green</code> should have a <code>background-color</code> of green.');"
        },
        {
          "text": "The <code>div</code> element with class <code>cyan</code> should have a <code>background-color</code> of cyan.",
          "testString": "assert($('.cyan').css('background-color') == 'rgb(0, 255, 255)', 'The <code>div</code> element with class <code>cyan</code> should have a <code>background-color</code> of cyan.');"
        },
        {
          "text": "The <code>div</code> element with class <code>blue</code> should have a <code>background-color</code> of blue.",
          "testString": "assert($('.blue').css('background-color') == 'rgb(0, 0, 255)', 'The <code>div</code> element with class <code>blue</code> should have a <code>background-color</code> of blue.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: #FFFFFF;",
            "  }",
            "  ",
            "  .green {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  .cyan {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  .blue {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  div {",
            "    display: inline-block;",
            "    height: 100px;",
            "    width: 100px;",
            "  }",
            "</style>",
            "  ",
            "<div class=\"green\"></div>",
            "<div class=\"cyan\"></div>",
            "<div class=\"blue\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a4367417b2b2512ad5",
      "title": "Adjust the Tone of a Color",
      "description": [
        "The <code>hsl()</code> option in CSS also makes it easy to adjust the tone of a color. Mixing white with a pure hue creates a tint of that color, and adding black will make a shade. Alternatively, a tone is produced by adding gray or by both tinting and shading. Recall that the 's' and 'l' of <code>hsl()</code> stand for saturation and lightness, respectively. The saturation percent changes the amount of gray and the lightness percent determines how much white or black is in the color. This is useful when you have a base hue you like, but need different variations of it.",
        "<hr>",
        "The navigation bar on this site currently inherits its <code>background-color</code> from the <code>header</code> element. Starting with that color as a base, add a <code>background-color</code> to the <code>nav</code> element so it uses the same cyan hue, but has 80% saturation and 25% lightness values to change its tone and shade."
      ],
      "tests": [
        {
          "text": "The <code>nav</code> element should have a <code>background-color</code> of the adjusted cyan tone using the <code>hsl()</code> property.",
          "testString": "assert(code.match(/nav\\s*?{\\s*?background-color:\\s*?hsl\\(180,\\s*?80%,\\s*?25%\\)/gi), 'The <code>nav</code> element should have a <code>background-color</code> of the adjusted cyan tone using the <code>hsl()</code> property.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  header {",
            "    background-color: hsl(180, 90%, 35%);",
            "    color: #FFFFFF;",
            "  }",
            "  ",
            "  nav {",
            "  ",
            "  }",
            "  ",
            "  h1 {",
            "    text-indent: 10px;",
            "    padding-top: 10px;",
            "  }",
            "  ",
            "  nav ul {",
            "    margin: 0px;",
            "    padding: 5px 0px 5px 30px;",
            "  }",
            "  ",
            "  nav li {",
            "    display: inline;",
            "    margin-right: 20px;",
            "  }",
            "  ",
            "  a {",
            "    text-decoration: none;",
            "    color: inherit;",
            "  }",
            "</style>",
            "  ",
            "<header>",
            "  <h1>Cooking with FCC!</h1>",
            "  <nav>",
            "    <ul>",
            "      <li><a href=\"\">Home</a></li>",
            "      <li><a href=\"\">Classes</a></li>",
            "      <li><a href=\"\">Contact</a></li>",
            "    </ul>",
            "  </nav>",
            "</header>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a5367417b2b2512ad6",
      "title": "Create a Gradual CSS Linear Gradient",
      "description": [
        "Applying a color on HTML elements is not limited to one flat hue. CSS provides the ability to use color transitions, otherwise known as gradients, on elements. This is accessed through the <code>background</code> property's <code>linear-gradient()</code> function. Here is the general syntax:",
        "<code>background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);</code>",
        "The first argument specifies the direction from which color transition starts - it can be stated as a degree, where 90deg makes a vertical gradient and 45deg is angled like a backslash. The following arguments specify the order of colors used in the gradient.",
        "Example:",
        "<code>background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));</code>",
        "<hr>",
        "Use a <code>linear-gradient()</code> for the <code>div</code> element's <code>background</code>, and set it from a direction of 35 degrees to change the color from <code>#CCFFFF</code> to <code>#FFCCCC</code>.",
        "<strong>Note</strong><br>While there are other ways to specify a color value, like <code>rgb()</code> or <code>hsl()</code>, use hex values for this challenge."
      ],
      "tests": [
        {
          "text": "The <code>div</code> element should have a <code>linear-gradient</code> <code>background</code> with the specified direction and colors.",
          "testString": "assert(code.match(/background:\\s*?linear-gradient\\(35deg,\\s*?(#CCFFFF|#CFF),\\s*?(#FFCCCC|#FCC)\\);/gi), 'The <code>div</code> element should have a <code>linear-gradient</code> <code>background</code> with the specified direction and colors.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  div{ ",
            "    border-radius: 20px;",
            "    width: 70%;",
            "    height: 400px;",
            "    margin: 50px auto;",
            "    ",
            "  }",
            "",
            "</style>",
            "",
            "<div></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a5367417b2b2512ad7",
      "title": "Use a CSS Linear Gradient to Create a Striped Element",
      "description": [
        "The <code>repeating-linear-gradient()</code> function is very similar to <code>linear-gradient()</code> with the major difference that it repeats the specified gradient pattern. <code>repeating-linear-gradient()</code> accepts a variety of values, but for simplicity, you'll work with an angle value and color stop values in this challenge.",
        "The angle value is the direction of the gradient. Color stops are like width values that mark where a transition takes place, and are given with a percentage or a number of pixels.",
        "In the example demonstrated in the code editor, the gradient starts with the color <code>yellow</code> at 0 pixels which blends into the second color <code>blue</code> at 40 pixels away from the start. Since the next color stop is also at 40 pixels, the gradient immediately changes to the third color <code>green</code>, which itself blends into the fourth color value <code>red</code> as that is 80 pixels away from the beginning of the gradient.",
        "For this example, it helps to think about the color stops as pairs where every two colors blend together.",
        "<code>0px [yellow -- blend -- blue] 40px [green -- blend -- red] 80px</code>",
        "If every two color stop values are the same color, the blending isn't noticeable because it's between the same color, followed by a hard transition to the next color, so you end up with stripes.",
        "<hr>",
        "Make stripes by changing the <code>repeating-linear-gradient()</code> to use a gradient angle of <code>45deg</code>, then set the first two color stops to <code>yellow</code>, and finally the second two color stops to <code>black</code>."
      ],
      "tests": [
        {
          "text": "The angle of the <code>repeating-linear-gradient()</code> should be 45deg.",
          "testString": "assert(code.match(/background:\\s*?repeating-linear-gradient\\(\\s*?45deg/gi), 'The angle of the <code>repeating-linear-gradient()</code> should be 45deg.');"
        },
        {
          "text": "The angle of the <code>repeating-linear-gradient()</code> should no longer be 90deg",
          "testString": "assert(!code.match(/90deg/gi), 'The angle of the <code>repeating-linear-gradient()</code> should no longer be 90deg');"
        },
        {
          "text": "The color stop at 0 pixels should be <code>yellow</code>.",
          "testString": "assert(code.match(/yellow\\s+?0px/gi), 'The color stop at 0 pixels should be <code>yellow</code>.');"
        },
        {
          "text": "One color stop at 40 pixels should be <code>yellow</code>.",
          "testString": "assert(code.match(/yellow\\s+?40px/gi), 'One color stop at 40 pixels should be <code>yellow</code>.');"
        },
        {
          "text": "The second color stop at 40 pixels should be <code>black</code>.",
          "testString": "assert(code.match(/yellow\\s+?40px,\\s*?black\\s+?40px/gi), 'The second color stop at 40 pixels should be <code>black</code>.');"
        },
        {
          "text": "The last color stop at 80 pixels should be <code>black</code>.",
          "testString": "assert(code.match(/black\\s+?80px/gi), 'The last color stop at 80 pixels should be <code>black</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  div{ ",
            "    border-radius: 20px;",
            "    width: 70%;",
            "    height: 400px;",
            "    margin:  50 auto;",
            "    background: repeating-linear-gradient(",
            "      90deg,",
            "      yellow 0px,",
            "      blue 40px,",
            "      green 40px,",
            "      red 80px",
            "    );",
            "  }",
            "",
            "</style>",
            "",
            "<div></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a5367417b2b2512ad8",
      "title": "Create Texture by Adding a Subtle Pattern as a Background Image",
      "description": [
        "One way to add texture and interest to a background and have it stand out more is to add a subtle pattern. The key is balance, as you don't want the background to stand out too much, and take away from the foreground. The <code>background</code> property supports the <code>url()</code> function in order to link to an image of the chosen texture or pattern. The link address is wrapped in quotes inside the parentheses.",
        "<hr>",
        "Using the url of <code>https://i.imgur.com/MJAkxbh.png</code>, set the <code>background</code> of the whole page with the <code>body</code> selector."
      ],
      "tests": [
        {
          "text": "Your <code>body</code> element should have a <code>background</code> property set to a <code>url()</code> with the given link.",
          "testString": "assert(code.match(/background:\\s*?url\\((\"|')https:\\/\\/i\\.imgur\\.com\\/MJAkxbh\\.png(\"|')\\)/gi), 'Your <code>body</code> element should have a <code>background</code> property set to a <code>url()</code> with the given link.');"
        }
      ],
      "solutions": [],
      "hints": [
        "Remember to wrap the address in quotes within the url() function."
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    ",
            "  }",
            "</style>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a5367417b2b2512ad9",
      "title": "Use the CSS Transform scale Property to Change the Size of an Element",
      "description": [
        "To change the scale of an element, CSS has the <code>transform</code> property, along with its <code>scale()</code> function. The following code example doubles the size of all the paragraph elements on the page:",
        "<blockquote>p {<br>&nbsp;&nbsp;transform:scale(2);<br>}</blockquote>",
        "<hr>",
        "Increase the size of the element with the id of <code>ball2</code> to 1.5 times its original size."
      ],
      "tests": [
        {
          "text": "Set the <code>transform</code> property for <code>#ball2</code> to scale it 1.5 times its size.",
          "testString": "assert(code.match(/#ball2\\s*?{\\s*?left:\\s*?65%;\\s*?transform:\\s*?scale\\(1\\.5\\);\\s*?}|#ball2\\s*?{\\s*?transform:\\s*?scale\\(1\\.5\\);\\s*?left:\\s*?65%;\\s*?}/gi), 'Set the <code>transform</code> property for <code>#ball2</code> to scale it 1.5 times its size.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .ball { ",
            "    width: 40px;",
            "    height: 40px;",
            "    margin: 50 auto;",
            "    position: fixed;",
            "    background: linear-gradient(",
            "      35deg,",
            "      #ccffff,",
            "      #ffcccc",
            "    );",
            "    border-radius: 50%;",
            "  }",
            "  #ball1 {",
            "    left: 20%;",
            "  }",
            "  #ball2 {",
            "    left: 65%;",
            "    ",
            "  }",
            "",
            "",
            "</style>",
            "",
            "<div class=\"ball\" id= \"ball1\"></div>",
            "<div class=\"ball\" id= \"ball2\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a5367417b2b2512ada",
      "title": "Use the CSS Transform scale Property to Scale an Element on Hover",
      "description": [
        "The <code>transform</code> property has a variety of functions that lets you scale, move, rotate, skew, etc., your elements. When used with pseudo-classes such as <code>:hover</code> that specify a certain state of an element, the <code>transform</code> property can easily add interactivity to your elements.",
        "Here's an example to scale the paragraph elements to 2.1 times their original size when a user hovers over them:",
        "<blockquote>p:hover {<br>&nbsp;&nbsp;transform: scale(2.1);<br>}</blockquote>",
        "<hr>",
        "Add a CSS rule for the <code>hover</code> state of the <code>div</code> and use the <code>transform</code> property to scale the <code>div</code> element to 1.1 times its original size when a user hovers over it."
      ],
      "tests": [
        {
          "text": "The size of the <code>div</code> element should scale 1.1 times when the user hovers over it.",
          "testString": "assert(code.match(/div:hover\\s*?{\\s*?transform:\\s*?scale\\(1\\.1\\);/gi), 'The size of the <code>div</code> element should scale 1.1 times when the user hovers over it.');"
        }
      ],
      "solutions": [],
      "hints": [
        "Make sure to apply the CSS rule to the hover state of the div, using div:hover"
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div { ",
            "    width: 70%;",
            "    height: 100px;",
            "    margin:  50px auto;",
            "    background: linear-gradient(",
            "      53deg,",
            "      #ccfffc,",
            "      #ffcccf",
            "    );",
            "  }",
            "  ",
            "  ",
            "  ",
            "</style>",
            "",
            "<div></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a6367417b2b2512adb",
      "title": "Use the CSS Transform Property skewX to Skew an Element Along the X-Axis",
      "description": [
        "The next function of the <code>transform</code> property is <code>skewX()</code>, which skews the selected element along its X (horizontal) axis by a given degree.",
        "The following code skews the paragraph element by -32 degrees along the X-axis.",
        "<blockquote>p {<br>&nbsp;&nbsp;transform: skewX(-32deg);<br>}</blockquote>",
        "<hr>",
        "Skew the element with the id of <code>bottom</code> by 24 degrees along the X-axis by using the <code>transform</code> property."
      ],
      "tests": [
        {
          "text": "The element with id <code>bottom</code> should be skewed by 24 degrees along its X-axis.",
          "testString": "assert(code.match(/#bottom\\s*?{\\s*?.*?\\s*?transform:\\s*?skewX\\(24deg\\);/g), 'The element with id <code>bottom</code> should be skewed by 24 degrees along its X-axis.');"
        }
      ],
      "solutions": [],
      "hints": [
        "Notice that there is no space between the number and \"deg\" (-32deg) when declaring the degrees value."
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div { ",
            "    width: 70%;",
            "    height: 100px;",
            "    margin:  50px auto;",
            "  }",
            "  #top {",
            "    background-color: red;",
            "  }",
            "  #bottom {",
            "    background-color: blue;",
            "    ",
            "  }",
            "</style>",
            "",
            "<div id=\"top\"></div>",
            "<div id=\"bottom\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a6367417b2b2512adc",
      "title": "Use the CSS Transform Property skewY to Skew an Element Along the Y-Axis",
      "description": [
        "Given that the <code>skewX()</code> function skews the selected element along the X-axis by a given degree, it is no surprise that the <code>skewY()</code> property skews an element along the Y (vertical) axis.",
        "<hr>",
        "Skew the element with the id of <code>top</code> -10 degrees along the Y-axis by using the <code>transform</code> property."
      ],
      "tests": [
        {
          "text": "The element with id <code>top</code> should be skewed by -10 degrees along its Y-axis.",
          "testString": "assert(code.match(/#top\\s*?{\\s*?.*?\\s*?transform:\\s*?skewY\\(-10deg\\);/g), 'The element with id <code>top</code> should be skewed by -10 degrees along its Y-axis.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div { ",
            "    width: 70%;",
            "    height: 100px;",
            "    margin: 50px auto;",
            "  }",
            "  #top {",
            "    background-color: red;",
            "    ",
            "  }",
            "  #bottom {",
            "    background-color: blue;",
            "    transform: skewX(24deg);",
            "  }",
            "</style>",
            "",
            "<div id=\"top\"></div>",
            "<div id=\"bottom\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a6367417b2b2512add",
      "title": "Create a Graphic Using CSS",
      "description": [
        "By manipulating different selectors and properties, you can make interesting shapes. One of the easier ones to try is a crescent moon shape. For this challenge you need to work with the <code>box-shadow</code> property that sets the shadow of an element, along with the <code>border-radius</code> property that controls the roundness of the element's corners.",
        "You will create a round, transparent object with a crisp shadow that is slightly offset to the side - the shadow is actually going to be the moon shape you see.",
        "In order to create a round object, the <code>border-radius</code> property should be set to a value of 50%.",
        "You may recall from an earlier challenge that the <code>box-shadow</code> property takes values for <code>offset-x</code>, <code>offset-y</code>, <code>blur-radius</code>, <code>spread-radius</code> and a color value in that order. The <code>blur-radius</code> and <code>spread-radius</code> values are optional.",
        "<hr>",
        "Manipulate the square element in the editor to create the moon shape. First, change the <code>background-color</code> to transparent, then set the <code>border-radius</code> property to 50% to make the circular shape. Finally, change the <code>box-shadow</code> property to set the <code>offset-x</code> to 25px, the <code>offset-y</code> to 10px, <code>blur-radius</code> to 0, <code>spread-radius</code> to 0, and color to blue."
      ],
      "tests": [
        {
          "text": "The value of the <code>background-color</code> property should be set to <code>transparent</code>.",
          "testString": "assert(code.match(/background-color:\\s*?transparent;/gi), 'The value of the <code>background-color</code> property should be set to <code>transparent</code>.');"
        },
        {
          "text": "The value of the <code>border-radius</code> property should be set to <code>50%</code>.",
          "testString": "assert(code.match(/border-radius:\\s*?50%;/gi), 'The value of the <code>border-radius</code> property should be set to <code>50%</code>.');"
        },
        {
          "text": "The value of the <code>box-shadow</code> property should be set to 25px for <code>offset-x</code>, 10px for <code>offset-y</code>, 0 for <code>blur-radius</code>, 0 for <code>spread-radius</code>, and finally blue for the color.",
          "testString": "assert(code.match(/box-shadow:\\s*?25px\\s+?10px\\s+?0(px)?\\s+?0(px)?\\s+?blue\\s*?;/gi), 'The value of the <code>box-shadow</code> property should be set to 25px for <code>offset-x</code>, 10px for <code>offset-y</code>, 0 for <code>blur-radius</code>, 0 for <code>spread-radius</code>, and finally blue for the color.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            ".center",
            "{",
            "  position: absolute;",
            "  margin: auto;",
            "  top: 0;",
            "  right: 0;",
            "  bottom: 0;",
            "  left: 0;",
            "  width: 100px;",
            "  height: 100px;",
            "  ",
            "  background-color: blue;",
            "  border-radius: 0px;",
            "  box-shadow: 25px 10px 10px 10px green; ",
            "}",
            "",
            "</style>",
            "<div class=\"center\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a6367417b2b2512ade",
      "title": "Create a More Complex Shape Using CSS and HTML",
      "description": [
        "One of the most popular shapes in the world is the heart shape, and in this challenge you'll create one using pure CSS. But first, you need to understand the <code>::before</code> and <code>::after</code> pseudo-elements. These pseudo-elements are used to add something before or after a selected element. In the following example, a <code>::before</code> pseudo-element is used to add a rectangle to an element with the class <code>heart</code>:",
        "<blockquote>.heart::before {<br>&nbsp;&nbsp;content: \"\";<br>&nbsp;&nbsp;background-color: yellow;<br>&nbsp;&nbsp;border-radius: 25%;<br>&nbsp;&nbsp;position: absolute;<br>&nbsp;&nbsp;height: 50px;<br>&nbsp;&nbsp;width: 70px;<br>&nbsp;&nbsp;top: -50px;<br>&nbsp;&nbsp;left: 5px;<br>}</blockquote>",
        "For the <code>::before</code> and <code>::after</code> pseudo-elements to function properly, they must have a defined <code>content</code> property. This property is usually used to add things like a photo or text to the selected element. When the <code>::before</code> and <code>::after</code> pseudo-elements are used to make shapes, the <code>content</code> property is still required, but it's set to an empty string.",
        "In the above example, the element with the class of <code>heart</code> has a <code>::before</code> pseudo-element that produces a yellow rectangle with <code>height</code> and <code>width</code> of 50px and 70px, respectively. This rectangle has round corners due to its 25% border radius and is positioned absolutely at 5px from the <code>left</code> and 50px above the <code>top</code> of the element.",
        "<hr>",
        "Transform the element on the screen to a heart. In the <code>heart::after</code> selector, change the <code>background-color</code> to pink and the <code>border-radius</code> to 50%.",
        "Next, target the element with the class <code>heart</code> (just <code>heart</code>) and fill in the <code>transform</code> property. Use the <code>rotate()</code> function with -45 degrees. (<code>rotate()</code> works the same way that <code>skewX()</code> and <code>skewY()</code> do).",
        "Finally, in the <code>heart::before</code> selector, set its <code>content</code> property to an empty string."
      ],
      "tests": [
        {
          "text": "The <code>background-color</code> property of the <code>heart::after</code> selector should be pink.",
          "testString": "assert(code.match(/\\.heart::after\\s*?{\\s*?background-color\\s*?:\\s*?pink\\s*?;/gi), 'The <code>background-color</code> property of the <code>heart::after</code> selector should be pink.');"
        },
        {
          "text": "The <code>border-radius</code> of the <code>heart::after</code> selector should be 50%.",
          "testString": "assert(code.match(/border-radius\\s*?:\\s*?50%/gi).length == 2, 'The <code>border-radius</code> of the <code>heart::after</code> selector should be 50%.');"
        },
        {
          "text": "The <code>transform</code> property for the <code>heart</code> class should use a <code>rotate()</code> function set to -45 degrees.",
          "testString": "assert(code.match(/transform\\s*?:\\s*?rotate\\(\\s*?-45deg\\s*?\\)/gi), 'The <code>transform</code> property for the <code>heart</code> class should use a <code>rotate()</code> function set to -45 degrees.');"
        },
        {
          "text": "The <code>content</code> of the <code>heart::before</code> selector should be an empty string.",
          "testString": "assert(code.match(/\\.heart::before\\s*?{\\s*?content\\s*?:\\s*?(\"|')\\1\\s*?;/gi), 'The <code>content</code> of the <code>heart::before</code> selector should be an empty string.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            ".heart {",
            "  position: absolute;",
            "  margin: auto;",
            "  top: 0;",
            "  right: 0;",
            "  bottom: 0;",
            "  left: 0;",
            "  background-color: pink;",
            "  height: 50px;",
            "  width: 50px;",
            "  transform: ;",
            "}",
            ".heart::after {",
            "  background-color: blue;",
            "  content: \"\";",
            "  border-radius: 25%;",
            "  position: absolute;",
            "  width: 50px;",
            "  height: 50px;",
            "  top: 0px;",
            "  left: 25px;",
            "}",
            ".heart::before {",
            "  content: ;",
            "  background-color: pink;",
            "  border-radius: 50%;",
            "  position: absolute;",
            "  width: 50px;",
            "  height: 50px;",
            "  top: -25px;",
            "  left: 0px;",
            "}",
            "</style>",
            "<div class = \"heart\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a7367417b2b2512adf",
      "title": "Learn How the CSS @keyframes and animation Properties Work",
      "description": [
        "To animate an element, you need to know about the animation properties and the <code>@keyframes</code> rule. The animation properties control how the animation should behave and the <code>@keyframes</code> rule controls what happens during that animation. There are eight animation properties in total. This challenge will keep it simple and cover the two most important ones first:",
        "<code>animation-name</code> sets the name of the animation, which is later used by <code>@keyframes</code> to tell CSS which rules go with which animations.",
        "<code>animation-duration</code> sets the length of time for the animation.",
        "<code>@keyframes</code> is how to specify exactly what happens within the animation over the duration. This is done by giving CSS properties for specific \"frames\" during the animation, with percentages ranging from 0% to 100%. If you compare this to a movie, the CSS properties for 0% is how the element displays in the opening scene. The CSS properties for 100% is how the element appears at the end, right before the credits roll. Then CSS applies the magic to transition the element over the given duration to act out the scene. Here's an example to illustrate the usage of <code>@keyframes</code> and the animation properties:",
        "<blockquote>#anim {<br>&nbsp;&nbsp;animation-name: colorful;<br>&nbsp;&nbsp;animation-duration: 3s;<br>}<br>@keyframes colorful {<br>&nbsp;&nbsp;0% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: blue;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;100% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: yellow;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "For the element with the <code>anim</code> id, the code snippet above sets the <code>animation-name</code> to <code>colorful</code> and sets the <code>animation-duration</code> to 3 seconds. Then the <code>@keyframes</code> rule links to the animation properties with the name <code>colorful</code>. It sets the color to blue at the beginning of the animation (0%) which will transition to yellow by the end of the animation (100%). You aren't limited to only beginning-end transitions, you can set properties for the element for any percentage between 0% and 100%.",
        "<hr>",
        "Create an animation for the element with the id <code>rect</code>, by setting the <code>animation-name</code> to rainbow and the <code>animation-duration</code> to 4 seconds. Next, declare a <code>@keyframes</code> rule, and set the <code>background-color</code> at the beginning of the animation (<code>0%</code>) to blue, the middle of the animation (<code>50%</code>) to green, and the end of the animation (<code>100%</code>) to yellow."
      ],
      "tests": [
        {
          "text": "The element with id of <code>rect</code> should have an <code>animation-name</code> property with a value of rainbow.",
          "testString": "assert($('#rect').css('animation-name') == 'rainbow', 'The element with id of <code>rect</code> should have an <code>animation-name</code> property with a value of rainbow.');"
        },
        {
          "text": "The element with id of <code>rect</code> should have an <code>animation-duration</code> property with a value of 4s.",
          "testString": "assert($('#rect').css('animation-duration') == '4s', 'The element with id of <code>rect</code> should have an <code>animation-duration</code> property with a value of 4s.');"
        },
        {
          "text": "The <code>@keyframes</code> rule should use the <code>animation-name</code> of rainbow.",
          "testString": "assert(code.match(/@keyframes\\s+?rainbow\\s*?{/g), 'The <code>@keyframes</code> rule should use the <code>animation-name</code> of rainbow.');"
        },
        {
          "text": "The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of blue at 0%.",
          "testString": "assert(code.match(/0%\\s*?{\\s*?background-color:\\s*?blue;\\s*?}/gi), 'The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of blue at 0%.');"
        },
        {
          "text": "The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of green at 50%.",
          "testString": "assert(code.match(/50%\\s*?{\\s*?background-color:\\s*?green;\\s*?}/gi), 'The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of green at 50%.');"
        },
        {
          "text": "The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of yellow at 100%.",
          "testString": "assert(code.match(/100%\\s*?{\\s*?background-color:\\s*?yellow;\\s*?}/gi), 'The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of yellow at 100%.');"
        }
      ],
      "solutions": [],
      "hints": [
        "Make sure the @keyframes rule links to the animation-name."
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div {",
            "    height: 40px;",
            "    width: 70%;",
            "    background: black;",
            "    margin: 50px auto;",
            "    border-radius: 5px;",
            "  }",
            "",
            "  #rect {",
            "    ",
            "    ",
            "  }",
            "  ",
            "  ",
            "  ",
            "  ",
            "</style>",
            "<div id=\"rect\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a7367417b2b2512ae0",
      "title": "Use CSS Animation to Change the Hover State of a Button",
      "description": [
        "You can use CSS <code>@keyframes</code> to change the color of a button in its hover state.",
        "Here's an example of changing the width of an image on hover:",
        "<blockquote>&lt;style&gt;<br>&nbsp;&nbsp;img:hover {<br>&nbsp;&nbsp;&nbsp;&nbsp;animation-name: width;<br>&nbsp;&nbsp;&nbsp;&nbsp;animation-duration: 500ms;<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;@keyframes width {<br>&nbsp;&nbsp;&nbsp;&nbsp;100% {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 40px;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br>&lt;img src=&quot;https://bit.ly/smallgooglelogo&quot; alt=&quot;Google's Logo&quot; /&gt;</blockquote>",
        "<hr>",
        "Note that <code>ms</code> stands for milliseconds, where 1000ms is equal to 1s.",
        "Use CSS <code>@keyframes</code> to change the <code>background-color</code> of the <code>button</code> element so it becomes <code>#4791d0</code> when a user hovers over it. The <code>@keyframes</code> rule should only have an entry for <code>100%</code>."
      ],
      "tests": [
        {
          "text": "The @keyframes rule should use the <code>animation-name</code> background-color.",
          "testString": "assert(code.match(/@keyframes\\s+?background-color\\s*?{/g), 'The @keyframes rule should use the <code>animation-name</code> background-color.');"
        },
        {
          "text": "There should be one rule under <code>@keyframes</code> that changes the <code>background-color</code> to <code>#4791d0</code> at 100%.",
          "testString": "assert(code.match(/100%\\s*?{\\s*?background-color:\\s*?#4791d0;\\s*?}/gi), 'There should be one rule under <code>@keyframes</code> that changes the <code>background-color</code> to <code>#4791d0</code> at 100%.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  button {",
            "    border-radius: 5px;",
            "    color: white;",
            "    background-color: #0F5897;",
            "    padding: 5px 10px 8px 10px;",
            "  }",
            "  ",
            "  button:hover {",
            "    animation-name: background-color;",
            "    animation-duration: 500ms;",
            "  }",
            "  ",
            "  ",
            "</style>",
            "  ",
            "<button>Register</button>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "58a7a6ebf9a6318348e2d5aa",
      "title": "Modify Fill Mode of an Animation",
      "description": [
        "That's great, but it doesn't work right yet. Notice how the animation resets after <code>500ms</code> has passed, causing the button to revert back to the original color. You want the button to stay highlighted.",
        "This can be done by setting the <code>animation-fill-mode</code> property to <code>forwards</code>. The <code>animation-fill-mode</code> specifies the style applied to an element when the animation has finished. You can set it like so:",
        "<code>animation-fill-mode: forwards;</code>",
        "<hr>",
        "Set the <code>animation-fill-mode</code> property of <code>button:hover</code> to <code>forwards</code> so the button stays highlighted when a user hovers over it."
      ],
      "tests": [
        {
          "text": "<code>button:hover</code> should have a <code>animation-fill-mode</code> property with a value of <code>forwards</code>.",
          "testString": "assert(code.match(/button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-fill-mode\\s*?:\\s*?forwards\\s*?;[\\s\\S]*}/gi) && code.match(/button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-name\\s*?:\\s*?background-color\\s*?;[\\s\\S]*}/gi) && code.match(/button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-duration\\s*?:\\s*?500ms\\s*?;[\\s\\S]*}/gi), '<code>button:hover</code> should have a <code>animation-fill-mode</code> property with a value of <code>forwards</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  button {",
            "    border-radius: 5px;",
            "    color: white;",
            "    background-color: #0F5897;",
            "    padding: 5px 10px 8px 10px;",
            "  }",
            "  button:hover {",
            "    animation-name: background-color;",
            "    animation-duration: 500ms;",
            "    /* add your code below this line */",
            "    ",
            "    /* add your code above this line */",
            "  }",
            "  @keyframes background-color {",
            "    100% {",
            "      background-color: #4791d0;",
            "    }",
            "  }",
            "</style>",
            "<button>Register</button>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a7367417b2b2512ae1",
      "title": "Create Movement Using CSS Animation",
      "description": [
        "When elements have a specified <code>position</code>, such as <code>fixed</code> or <code>relative</code>, the CSS offset properties <code>right</code>, <code>left</code>, <code>top</code>, and <code>bottom</code> can be used in animation rules to create movement.",
        "As shown in the example below, you can push the item downwards then upwards by setting the <code>top</code> property of the <code>50%</code> keyframe to 50px, but having it set to 0px for the first (<code>0%</code>) and the last (<code>100%</code>) keyframe.",
        "<blockquote>@keyframes rainbow {<br>&nbsp;&nbsp;0% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: blue;<br>&nbsp;&nbsp;&nbsp;&nbsp;top: 0px;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;50% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: green;<br>&nbsp;&nbsp;&nbsp;&nbsp;top: 50px;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;100% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: yellow;<br>&nbsp;&nbsp;&nbsp;&nbsp;top: 0px;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "<hr>",
        "Add a horizontal motion to the <code>div</code> animation. Using the <code>left</code> offset property, add to the <code>@keyframes</code> rule so rainbow starts at 0 pixels at <code>0%</code>, moves to 25 pixels at <code>50%</code>, and ends at -25 pixels at <code>100%</code>. Don't replace the <code>top</code> property in the editor - the animation should have both vertical and horizontal motion."
      ],
      "tests": [
        {
          "text": "The <code>@keyframes</code> rule for <code>0%</code> should use the <code>left</code> offset of 0px.",
          "testString": "assert(code.match(/0%\\s*?{\\s*?background-color:\\s*?blue;\\s*?top:\\s*?0px;\\s*?left:\\s*?0px;\\s*?}/gi), 'The <code>@keyframes</code> rule for <code>0%</code> should use the <code>left</code> offset of 0px.');"
        },
        {
          "text": "The <code>@keyframes</code> rule for <code>50%</code> should use the <code>left</code> offset of 25px.",
          "testString": "assert(code.match(/50%\\s*?{\\s*?background-color:\\s*?green;\\s*?top:\\s*?50px;\\s*?left:\\s*?25px;\\s*?}/gi), 'The <code>@keyframes</code> rule for <code>50%</code> should use the <code>left</code> offset of 25px.');"
        },
        {
          "text": "The <code>@keyframes</code> rule for <code>100%</code> should use the <code>left</code> offset of -25px.",
          "testString": "assert(code.match(/100%\\s*?{\\s*?background-color:\\s*?yellow;\\s*?top:\\s*?0px;\\s*?left:\\s*?-25px;\\s*?}/gi), 'The <code>@keyframes</code> rule for <code>100%</code> should use the <code>left</code> offset of -25px.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div {",
            "    height: 40px;",
            "    width: 70%;",
            "    background: black;",
            "    margin: 50px auto;",
            "    border-radius: 5px;",
            "    position: relative;",
            "  }",
            "",
            "#rect {",
            "  animation-name: rainbow;",
            "  animation-duration: 4s;",
            "}",
            "",
            "@keyframes rainbow {",
            "  0% {",
            "    background-color: blue;",
            "    top: 0px;",
            "    ",
            "  }",
            "  50% {",
            "    background-color: green;",
            "    top: 50px;",
            "    ",
            "  }",
            "  100% {",
            "    background-color: yellow;",
            "    top: 0px;",
            "    ",
            "  }",
            "}",
            "</style>",
            "",
            "<div id=\"rect\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a7367417b2b2512ae2",
      "title": "Create Visual Direction by Fading an Element from Left to Right",
      "description": [
        "For this challenge, you'll change the <code>opacity</code> of an animated element so it gradually fades as it reaches the right side of the screen.",
        "In the displayed animation, the round element with the gradient background moves to the right by the 50% mark of the animation per the <code>@keyframes</code> rule.",
        "<hr>",
        "Target the element with the id of <code>ball</code> and add the <code>opacity</code> property set to 0.1 at <code>50%</code>, so the element fades as it moves to the right."
      ],
      "tests": [
        {
          "text": "The <code>keyframes</code> rule for fade should set the <code>opacity</code> property to 0.1 at 50%.",
          "testString": "assert(code.match(/@keyframes fade\\s*?{\\s*?50%\\s*?{\\s*?(?:left:\\s*?60%;\\s*?opacity:\\s*?0?\\.1;|opacity:\\s*?0?\\.1;\\s*?left:\\s*?60%;)/gi), 'The <code>keyframes</code> rule for fade should set the <code>opacity</code> property to 0.1 at 50%.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  #ball {",
            "    width: 70px;",
            "    height: 70px;",
            "    margin: 50px auto;",
            "    position: fixed;",
            "    left: 20%;",
            "    border-radius: 50%;",
            "    background: linear-gradient(",
            "      35deg,",
            "      #ccffff,",
            "      #ffcccc",
            "    );",
            "    animation-name: fade;",
            "    animation-duration: 3s;",
            "  }",
            "",
            "  @keyframes fade {",
            "    50% {",
            "      left: 60%;",
            "      ",
            "    }",
            "  }",
            "",
            "</style>",
            "",
            "<div id=\"ball\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a8367417b2b2512ae3",
      "title": "Animate Elements Continually Using an Infinite Animation Count",
      "description": [
        "The previous challenges covered how to use some of the animation properties and the <code>@keyframes</code> rule. Another animation property is the <code>animation-iteration-count</code>, which allows you to control how many times you would like to loop through the animation. Here's an example:",
        "<code>animation-iteration-count: 3;</code>",
        "In this case the animation will stop after running 3 times, but it's possible to make the animation run continuously by setting that value to infinite.",
        "<hr>",
        "To keep the ball bouncing on the right on a continuous loop, change the <code>animation-iteration-count</code> property to infinite."
      ],
      "tests": [
        {
          "text": "The <code>animation-iteration-count</code> property should have a value of infinite.",
          "testString": "assert($('#ball').css('animation-iteration-count') == 'infinite', 'The <code>animation-iteration-count</code> property should have a value of infinite.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  #ball {",
            "    width: 100px;",
            "    height: 100px;",
            "    margin: 50px auto;",
            "    position: relative;",
            "    border-radius: 50%;",
            "    background: linear-gradient(",
            "      35deg,",
            "      #ccffff,",
            "      #ffcccc",
            "    );",
            "    animation-name: bounce;",
            "    animation-duration: 1s;",
            "    animation-iteration-count: 3;",
            "  }",
            "",
            "  @keyframes bounce{",
            "    0% {",
            "      top: 0px;",
            "    }",
            "    50% {",
            "      top: 249px;",
            "      width: 130px;",
            "      height: 70px;",
            "    }",
            "    100% {",
            "      top: 0px;",
            "    }",
            "  }",
            "</style>",
            "<div id=\"ball\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a8367417b2b2512ae4",
      "title": "Make a CSS Heartbeat using an Infinite Animation Count",
      "description": [
        "Here's one more continuous animation example with the <code>animation-iteration-count</code> property that uses the heart you designed in a previous challenge.",
        "The one-second long heartbeat animation consists of two animated pieces. The <code>heart</code> elements (including the <code>:before</code> and <code>:after</code> pieces) are animated to change size using the <code>transform</code> property, and the background <code>div</code> is animated to change its color using the <code>background</code> property.",
        "<hr>",
        "Keep the heart beating by adding the <code>animation-iteration-count</code> property for both the <code>back</code> class and the <code>heart</code> class and setting the value to infinite. The <code>heart:before</code> and <code>heart:after</code> selectors do not need any animation properties."
      ],
      "tests": [
        {
          "text": "The <code>animation-iteration-count</code> property for the <code>heart</code> class should have a value of infinite.",
          "testString": "assert($('.heart').css('animation-iteration-count') == 'infinite', 'The <code>animation-iteration-count</code> property for the <code>heart</code> class should have a value of infinite.');"
        },
        {
          "text": "The <code>animation-iteration-count</code> property for the <code>back</code> class should have a value of infinite.",
          "testString": "assert($('.back').css('animation-iteration-count') == 'infinite', 'The <code>animation-iteration-count</code> property for the <code>back</code> class should have a value of infinite.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .back {",
            "    position: fixed;",
            "    padding: 0;",
            "    margin: 0;",
            "    top: 0;",
            "    left: 0;",
            "    width: 100%;",
            "    height: 100%;",
            "    background: white;",
            "    animation-name: backdiv;",
            "    animation-duration: 1s; ",
            "    ",
            "  }",
            "",
            "  .heart {",
            "    position: absolute;",
            "    margin: auto;",
            "    top: 0;",
            "    right: 0;",
            "    bottom: 0;",
            "    left: 0;",
            "    background-color: pink;",
            "    height: 50px;",
            "    width: 50px;",
            "    transform: rotate(-45deg);",
            "    animation-name: beat;",
            "    animation-duration: 1s;",
            "    ",
            "  }",
            "  .heart:after {",
            "    background-color: pink;",
            "    content: \"\";",
            "    border-radius: 50%;",
            "    position: absolute;",
            "    width: 50px;",
            "    height: 50px;",
            "    top: 0px;",
            "    left: 25px;",
            "  }",
            "  .heart:before {",
            "    background-color: pink;",
            "    content: \"\";",
            "    border-radius: 50%;",
            "    position: absolute;",
            "    width: 50px;",
            "    height: 50px;",
            "    top: -25px;",
            "    left: 0px;",
            "  }",
            "",
            "  @keyframes backdiv {",
            "    50% {",
            "      background: #ffe6f2;",
            "    }",
            "  }",
            "",
            "  @keyframes beat {",
            "    0% {",
            "      transform: scale(1) rotate(-45deg);",
            "    }",
            "    50% {",
            "      transform: scale(0.6) rotate(-45deg);",
            "    }",
            "  }",
            "",
            "</style>",
            "<div class=\"back\"></div>",
            "<div class=\"heart\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a8367417b2b2512ae5",
      "title": "Animate Elements at Variable Rates",
      "description": [
        "There are a variety of ways to alter the animation rates of similarly animated elements. So far, this has been achieved by applying an <code>animation-iteration-count</code> property and setting <code>@keyframes</code> rules.",
        "To illustrate, the animation on the right consists of two \"stars\" that each decrease in size and opacity at the 20% mark in the <code>@keyframes</code> rule, which creates the twinkle animation. You can change the <code>@keyframes</code> rule for one of the elements so the stars twinkle at different rates.",
        "<hr>",
        "Alter the animation rate for the element with the class name of <code>star-1</code> by changing its <code>@keyframes</code> rule to 50%."
      ],
      "tests": [
        {
          "text": "The <code>@keyframes</code> rule for the <code>star-1</code> class should be 50%.",
          "testString": "assert(code.match(/twinkle-1\\s*?{\\s*?50%/g), 'The <code>@keyframes</code> rule for the <code>star-1</code> class should be 50%.');"
        }
      ],
      "solutions": [],
      "hints": [
        "Check the animation-name declared in the star-1 class to find the right @keyframes rule to change."
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .stars {",
            "    background-color: white;",
            "    height: 30px;",
            "    width: 30px;",
            "    border-radius: 50%;",
            "    animation-iteration-count: infinite;",
            "  }",
            "",
            "  .star-1 {",
            "    margin-top: 15%; ",
            "    margin-left: 60%;",
            "    animation-name: twinkle-1;",
            "    animation-duration: 1s;",
            "  }",
            "",
            "  .star-2 {",
            "    margin-top: 25%;",
            "    margin-left: 25%;",
            "    animation-name: twinkle-2;",
            "    animation-duration: 1s;",
            "  }",
            "",
            "  @keyframes twinkle-1 {",
            "    20% {",
            "      transform: scale(0.5);",
            "      opacity: 0.5;",
            "    }",
            "  }",
            "",
            "  @keyframes twinkle-2 {",
            "    20% {",
            "      transform: scale(0.5);",
            "      opacity: 0.5;",
            "    }",
            "  }",
            "",
            "  #back {",
            "    position: fixed;",
            "    padding: 0;",
            "    margin: 0;",
            "    top: 0;",
            "    left: 0;",
            "    width: 100%;",
            "    height: 100%;",
            "    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);",
            "  }",
            "</style>",
            "",
            "<div id=\"back\"></div>",
            "<div class=\"star-1 stars\"></div>",
            "<div class=\"star-2 stars\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a8367417b2b2512ae6",
      "title": "Animate Multiple Elements at Variable Rates",
      "description": [
        "In the previous challenge, you changed the animation rates for two similarly animated elements by altering their <code>@keyframes</code> rules. You can achieve the same goal by manipulating the <code>animation-duration</code> of multiple elements.",
        "In the animation running in the code editor, there are three \"stars\" in the sky that twinkle at the same rate on a continuous loop. To make them twinkle at different rates, you can set the <code>animation-duration</code> property to different values for each element.",
        "<hr>",
        "Set the <code>animation-duration</code> of the elements with the classes <code>star-1</code>, <code>star-2</code>, and <code>star-3</code> to 1s, 0.9s, and 1.1s, respectively."
      ],
      "tests": [
        {
          "text": "The <code>animation-duration</code> property for the star with class <code>star-1</code> should remain at 1s.",
          "testString": "assert($('.star-1').css('animation-duration') == '1s', 'The <code>animation-duration</code> property for the star with class <code>star-1</code> should remain at 1s.');"
        },
        {
          "text": "The <code>animation-duration</code> property for the star with class <code>star-2</code> should be 0.9s.",
          "testString": "assert($('.star-2').css('animation-duration') == '0.9s', 'The <code>animation-duration</code> property for the star with class <code>star-2</code> should be 0.9s.');"
        },
        {
          "text": "The <code>animation-duration</code> property for the star with class <code>star-3</code> should be 1.1s.",
          "testString": "assert($('.star-3').css('animation-duration') == '1.1s', 'The <code>animation-duration</code> property for the star with class <code>star-3</code> should be 1.1s.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .stars {",
            "    background-color: white;",
            "    height: 30px;",
            "    width: 30px;",
            "    border-radius: 50%;",
            "    animation-iteration-count: infinite;",
            "  }",
            "",
            "  .star-1 {",
            "    margin-top: 15%; ",
            "    margin-left: 60%;",
            "    animation-duration: 1s;",
            "    animation-name: twinkle;",
            "  }",
            "",
            "  .star-2 {",
            "    margin-top: 25%;",
            "    margin-left: 25%;",
            "    animation-duration: 1s;",
            "    animation-name: twinkle;",
            "  }",
            "",
            "  .star-3 {",
            "    margin-top: 10%;",
            "    margin-left: 50%;",
            "    animation-duration: 1s;",
            "    animation-name: twinkle;",
            "  }",
            "",
            "  @keyframes twinkle {",
            "    20% {",
            "      transform: scale(0.5);",
            "      opacity: 0.5;",
            "    }",
            "  }",
            "",
            "  #back {",
            "    position: fixed;",
            "    padding: 0;",
            "    margin: 0;",
            "    top: 0;",
            "    left: 0;",
            "    width: 100%;",
            "    height: 100%;",
            "    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);",
            "  }",
            "</style>",
            "",
            "<div id=\"back\"></div>",
            "<div class=\"star-1 stars\"></div>",
            "<div class=\"star-2 stars\"></div>",
            "<div class=\"star-3 stars\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a8367417b2b2512ae7",
      "title": "Change Animation Timing with Keywords",
      "description": [
        "In CSS animations, the <code>animation-timing-function</code> property controls how quickly an animated element changes over the duration of the animation. If the animation is a car moving from point A to point B in a given time (your <code>animation-duration</code>), the <code>animation-timing-function</code> says how the car accelerates and decelerates over the course of the drive.",
        "There are a number of predefined keywords available for popular options. For example, the default value is <code>ease</code>, which starts slow, speeds up in the middle, and then slows down again in the end. Other options include <code>ease-out</code>, which is quick in the beginning then slows down, <code>ease-in</code>, which is slow in the beginning, then speeds up at the end, or <code>linear</code>, which applies a constant animation speed throughout.",
        "<hr>",
        "For the elements with id of <code>ball1</code> and <code>ball2</code>, add an <code>animation-timing-function</code> property to each, and set <code>#ball1</code> to <code>linear</code>, and <code>#ball2</code> to <code>ease-out</code>. Notice the difference between how the elements move during the animation but end together, since they share the same <code>animation-duration</code> of 2 seconds."
      ],
      "tests": [
        {
          "text": "The value of the <code>animation-timing-function</code> property for the element with the id <code>ball1</code> should be linear.",
          "testString": "assert($('#ball1').css('animation-timing-function') == 'linear', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>ball1</code> should be linear.');"
        },
        {
          "text": "The value of the <code>animation-timing-function</code> property for the element with the id <code>ball2</code> should be ease-out.",
          "testString": "assert($('#ball2').css('animation-timing-function') == 'ease-out', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>ball2</code> should be ease-out.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  .balls {",
            "    border-radius: 50%;",
            "    background: linear-gradient(",
            "      35deg,",
            "      #ccffff,",
            "      #ffcccc",
            "    );",
            "    position: fixed;  ",
            "    width: 50px;",
            "    height: 50px;",
            "    margin-top: 50px;",
            "    animation-name: bounce;",
            "    animation-duration: 2s;",
            "    animation-iteration-count: infinite;",
            "  }",
            "  #ball1 { ",
            "    left:27%;",
            "    ",
            "  }",
            "  #ball2 { ",
            "    left:56%;",
            "    ",
            "  }",
            "",
            "@keyframes bounce {",
            "  0% {",
            "    top: 0px;",
            "  } ",
            "  100% {",
            "    top: 249px;",
            "  }",
            "} ",
            "",
            "</style>",
            "",
            "<div class=\"balls\" id=\"ball1\"></div>",
            "<div class=\"balls\" id=\"ball2\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a9367417b2b2512ae8",
      "title": "Learn How Bezier Curves Work",
      "description": [
        "The last challenge introduced the <code>animation-timing-function</code> property and a few keywords that change the speed of an animation over its duration. CSS offers an option other than keywords that provides even finer control over how the animation plays out, through the use of Bezier curves.",
        "In CSS animations, Bezier curves are used with the <code>cubic-bezier</code> function. The shape of the curve represents how the animation plays out. The curve lives on a 1 by 1 coordinate system. The X-axis of this coordinate system is the duration of the animation (think of it as a time scale), and the Y-axis is the change in the animation.",
        "The <code>cubic-bezier</code> function consists of four main points that sit on this 1 by 1 grid: <code>p0</code>, <code>p1</code>, <code>p2</code>, and <code>p3</code>. <code>p0</code> and <code>p3</code> are set for you - they are the beginning and end points which are always located respectively at the origin (0, 0) and (1, 1). You set the x and y values for the other two points, and where you place them in the grid dictates the shape of the curve for the animation to follow. This is done in CSS by declaring the x and y values of the <code>p1</code> and <code>p2</code> \"anchor\" points in the form: <code>(x1, y1, x2, y2)</code>. Pulling it all together, here's an example of a Bezier curve in CSS code:",
        "<code>animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);</code>",
        "In the example above, the x and y values are equivalent for each point (x1 = 0.25 = y1 and x2 = 0.75 = y2), which if you remember from geometry class, results in a line that extends from the origin to point (1, 1). This animation is a linear change of an element during the length of an animation, and is the same as using the <code>linear</code> keyword. In other words, it changes at a constant speed.",
        "<hr>",
        "For the element with the id of <code>ball1</code>, change the value of the <code>animation-timing-function</code> property from <code>linear</code> to its equivalent <code>cubic-bezier</code> function value. Use the point values given in the example above."
      ],
      "tests": [
        {
          "text": "The value of the <code>animation-timing-function</code> property for the element with the id <code>ball1</code> should be the linear-equivalent cubic-bezier function.",
          "testString": "assert($('#ball1').css('animation-timing-function') == 'cubic-bezier(0.25, 0.25, 0.75, 0.75)', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>ball1</code> should be the linear-equivalent cubic-bezier function.');"
        },
        {
          "text": "The value of the <code>animation-timing-function</code> property for the element with the id <code>ball2</code> should not change.",
          "testString": "assert($('#ball2').css('animation-timing-function') == 'ease-out', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>ball2</code> should not change.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  .balls{",
            "    border-radius: 50%;",
            "    background: linear-gradient(",
            "      35deg,",
            "      #ccffff,",
            "      #ffcccc",
            "    );",
            "    position: fixed;  ",
            "    width: 50px;",
            "    height: 50px;",
            "    margin-top: 50px;",
            "    animation-name: bounce;",
            "    animation-duration: 2s;",
            "    animation-iteration-count: infinite;",
            "  }",
            "  #ball1 { ",
            "    left: 27%;",
            "    animation-timing-function: linear;",
            "  }",
            "  #ball2 { ",
            "    left: 56%;",
            "    animation-timing-function: ease-out;",
            "  }",
            "",
            "@keyframes bounce {",
            "  0% {",
            "    top: 0px;",
            "  } ",
            "  100% {",
            "    top: 249px;",
            "  }",
            "} ",
            "",
            "</style>",
            "",
            "<div class=\"balls\" id=\"ball1\"></div>",
            "<div class=\"balls\" id=\"ball2\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a9367417b2b2512ae9",
      "title": "Use a Bezier Curve to Move a Graphic",
      "description": [
        "A previous challenge discussed the <code>ease-out</code> keyword that describes an animation change that speeds up first and then slows down at the end of the animation. On the right, the difference between the <code>ease-out</code> keyword (for the blue element) and <code>linear</code> keyword (for the red element) is demonstrated. Similar animation progressions to the <code>ease-out</code> keyword can be achieved by using a custom cubic Bezier curve function.",
        "In general, changing the <code>p1</code> and <code>p2</code> anchor points drives the creation of different Bezier curves, which controls how the animation progresses through time. Here's an example of a Bezier curve using values to mimic the ease-out style:",
        "<code>animation-timing-function: cubic-bezier(0, 0, 0.58, 1);</code>",
        "Remember that all <code>cubic-bezier</code> functions start with <code>p0</code> at (0, 0) and end with <code>p3</code> at (1, 1). In this example, the curve moves faster through the Y-axis (starts at 0, goes to <code>p1</code> y value of 0, then goes to <code>p2</code> y value of 1) than it moves through the X-axis (0 to start, then 0 for <code>p1</code>, up to 0.58 for <code>p2</code>). As a result, the change in the animated element progresses faster than the time of the animation for that segment. Towards the end of the curve, the relationship between the change in x and y values reverses - the y value moves from 1 to 1 (no change), and the x values move from 0.58 to 1, making the animation changes progress slower compared to the animation duration.",
        "<hr>",
        "To see the effect of this Bezier curve in action, change the <code>animation-timing-function</code> of the element with id of <code>red</code> to a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0, 0, 0.58, 1. This will make both elements progress through the animation similarly."
      ],
      "tests": [
        {
          "text": "The value of the <code>animation-timing-function</code> property of the element with the id <code>red</code> should be a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0, 0, 0.58, 1 .",
          "testString": "assert($('#red').css('animation-timing-function') == 'cubic-bezier(0, 0, 0.58, 1)', 'The value of the <code>animation-timing-function</code> property of the element with the id <code>red</code> should be a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0, 0, 0.58, 1 .');"
        },
        {
          "text": "The element with the id <code>red</code> should no longer have the <code>animation-timing-function</code> property of linear.",
          "testString": "assert($('#red').css('animation-timing-function') !== 'linear', 'The element with the id <code>red</code> should no longer have the <code>animation-timing-function</code> property of linear.');"
        },
        {
          "text": "The value of the <code>animation-timing-function</code> property for the element with the id <code>blue</code> should not change.",
          "testString": "assert($('#blue').css('animation-timing-function') == 'ease-out', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>blue</code> should not change.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .balls{",
            "    border-radius: 50%;",
            "    position: fixed;",
            "    width: 50px;",
            "    height: 50px;",
            "    margin-top: 50px;",
            "    animation-name: bounce;",
            "    animation-duration: 2s;",
            "    animation-iteration-count: infinite;",
            "  }",
            "  #red {",
            "    background: red;",
            "    left: 27%;",
            "    animation-timing-function: linear;",
            "  }",
            "  #blue {",
            "    background: blue;",
            "    left: 56%;",
            "    animation-timing-function: ease-out;",
            "  }",
            "  @keyframes bounce {",
            "    0% {",
            "      top: 0px;",
            "    }",
            "    100% {",
            "      top: 249px;",
            "    }",
            "  }",
            "</style>",
            "<div class=\"balls\" id= \"red\"></div>",
            "<div class=\"balls\" id= \"blue\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a9367417b2b2512aea",
      "title": "Make Motion More Natural Using a Bezier Curve",
      "description": [
        "This challenge animates an element to replicate the movement of a ball being juggled. Prior challenges covered the <code>linear</code> and <code>ease-out</code> cubic Bezier curves, however neither depicts the juggling movement accurately. You need to customize a Bezier curve for this.",
        "The <code>animation-timing-function</code> automatically loops at every keyframe when the <code>animation-iteration-count</code> is set to infinite. Since there is a keyframe rule set in the middle of the animation duration (at <code>50%</code>), it results in two identical animation progressions at the upward and downward movement of the ball.",
        "The following cubic Bezier curve simulates a juggling movement:",
        "<code>cubic-bezier(0.3, 0.4, 0.5, 1.6); </code>",
        "Notice that the value of y2 is larger than 1. Although the cubic Bezier curve is mapped on an 1 by 1 coordinate system, and it can only accept x values from 0 to 1, the y value can be set to numbers larger than one. This results in a bouncing movement that is ideal for simulating the juggling ball.",
        "<hr>",
        "Change value of the <code>animation-timing-function</code> of the element with the id of <code>green</code> to a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0.311, 0.441, 0.444, 1.649."
      ],
      "tests": [
        {
          "text": "The value of the <code>animation-timing-function</code> property for the element with the id <code>green</code> should be a <code>cubic-bezier</code> function with x1, y1, x2, y2 values as specified.",
          "testString": "assert($('#green').css('animation-timing-function') == 'cubic-bezier(0.311, 0.441, 0.444, 1.649)', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>green</code> should be a <code>cubic-bezier</code> function with x1, y1, x2, y2 values as specified.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "translations": {},
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .balls {",
            "    border-radius: 50%;",
            "    top: 249px;",
            "    position: fixed;  ",
            "    width: 50px;",
            "    height: 50px;",
            "    top: 60%;",
            "    animation-name: jump;",
            "    animation-duration: 2s;",
            "    animation-iteration-count: infinite;",
            "  }",
            "  #red {",
            "    background: red;",
            "    left: 25%;",
            "    animation-timing-function: linear;",
            "  }",
            "  #blue {",
            "    background: blue;",
            "    left: 50%;",
            "    animation-timing-function: ease-out;",
            "  }",
            "  #green {",
            "    background: green;",
            "    left: 75%;",
            "    animation-timing-function: cubic-bezier(0.69, 0.1, 1, 0.1);",
            "  }",
            "",
            "  @keyframes jump {",
            "    50% {",
            "      top: 10%;",
            "    }",
            "  }",
            "</style>",
            "<div class=\"balls\" id=\"red\"></div>",
            "<div class=\"balls\" id=\"blue\"></div>",
            "<div class=\"balls\" id=\"green\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9acde08712",
      "title": "Use Responsive Design with Bootstrap Fluid Containers",
      "description": [
        "In the HTML5 and CSS section of freeCodeCamp we built a Cat Photo App. Now let's go back to it. This time, we'll style it using the popular Bootstrap responsive CSS framework.",
        "Bootstrap will figure out how wide your screen is and respond by resizing your HTML elements - hence the name <code>Responsive Design</code>.",
        "With responsive design, there is no need to design a mobile version of your website. It will look good on devices with screens of any width.",
        "You can add Bootstrap to any app by adding the following code to the top of your HTML:",
        "<code>&#60;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"/&#62;</code>",
        "In this case, we've already added it for you to this page behind the scenes. Note that using either <code>></code> or <code>/></code> to close the <code>link</code> tag is acceptable.",
        "To get started, we should nest all of our HTML (except the <code>link</code> tag and the <code>style</code> element) in a <code>div</code> element with the class <code>container-fluid</code>."
      ],
      "tests": [
        {
          "text": "Your <code>div</code> element should have the class <code>container-fluid</code>.",
          "testString": "assert($(\"div\").hasClass(\"container-fluid\"), 'Your <code>div</code> element should have the class <code>container-fluid</code>.');"
        },
        {
          "text": "Make sure your <code>div</code> element has a closing tag.",
          "testString": "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure your <code>div</code> element has a closing tag.');"
        },
        {
          "text": "Make sure you have nested all HTML elements after the closing <code>style</code> tag in <code>.container-fluid</code>.",
          "testString": "assert($(\".container-fluid\").children().length >= 8, 'Make sure you have nested all HTML elements after the closing <code>style</code> tag in <code>.container-fluid</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Usa diseño adaptativo con los contenedores fluidos de Bootstrap",
          "description": [
            "Ahora vamos de vuelta a nuestra aplicación de fotos de gatos. Esta vez, vamos a darle estilo utilizando la infraestructura CSS del popular Bootstrap.",
            "Bootstrap determina qué tan ancha es la pantalla y adapta correspondientemente el tamaño de tus elementos HTML - por eso es que se llama <code>Diseño adaptativo</code> (responsive design).",
            "Con diseño adaptativo, no hay necesidad de diseñar una versión móvil para tu sitio web. Se verá bien en dispositivos con pantallas de cualquier tamaño.",
            "Puedes agregar Bootstrap a cualquier aplicación simplemente incluyendo el siguiente código al inicio de tu HTML:",
            "<code>&#60;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css\"/&#62;</code>",
            "En este caso, lo hemos agregado a esta página por ti.",
            "Para iniciar, debemos anidar todo nuestro HTML en un elemento <code>div</code> con la clase <code>container-fluid</code>."
          ]
        },
        "fr": {
          "title": "Un design adaptatif (responsive design) utilisant les conteneurs fluides de Bootstrap",
          "description": [
            "Revenons à notre application de photos de chats. Cette fois-ci, nous allons lui donner un style grâce au renommé framework CSS Bootstrap.",
            "Bootstrap saura reconnaître la largeur de notre écran et s'y adapter en redimensionnant les éléments HTML - d'où le nom <code>Responsive Design</code> (design adaptatif).",
            "Avec le design responsive, il n'y a pas besoin de créer de version mobile de votre site. Il restera bien sur tous les appareils quelle que soit la taille de leurs écrans.",
            "Vous pouvez ajouter Bootstrap à n'importe quelle application simplement en incluant le code suivant en haut de votre HTML:",
            "<code>&#60;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css\" integrity=\"sha384-8+rznmq/k0KZkJlZhnuPEVkbRD7tA0wcFEjY48dajGWn3Xc1MasJwS8/tJ7OEsKW\" crossorigin=\"anonymous\">/&#62;</code>",
            "Ici, nous l'avons déjà ajouté à la page pour vous dans l'arrière-boutique.",
            "Pour commencer, nous devons envelopper nos éléments HTML dans un élément <code>div</code> possédant la classe <code>container-fluid</code>"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "",
            "<p>Click here for <a href=\"#\">cat photos</a>.</p>",
            "",
            "<a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "",
            "<p>Things cats love:</p>",
            "<ul>",
            "  <li>cat nip</li>",
            "  <li>laser pointers</li>",
            "  <li>lasagna</li>",
            "</ul>",
            "<p>Top 3 things cats hate:</p>",
            "<ol>",
            "  <li>flea treatment</li>",
            "  <li>thunder</li>",
            "  <li>other cats</li>",
            "</ol>",
            "<form action=\"/submit-cat-photo\">",
            "  <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "  <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "  <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "  <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "  <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "  <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "  <button type=\"submit\">Submit</button>",
            "</form>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9acde08812",
      "title": "Make Images Mobile Responsive",
      "description": [
        "First, add a new image below the existing one. Set its <code>src</code> attribute to <code>https://bit.ly/fcc-running-cats</code>.",
        "It would be great if this image could be exactly the width of our phone's screen.",
        "Fortunately, with Bootstrap, all we need to do is add the <code>img-responsive</code> class to your image. Do this, and the image should perfectly fit the width of your page."
      ],
      "tests": [
        {
          "text": "You should have a total of two images.",
          "testString": "assert($(\"img\").length === 2, 'You should have a total of two images.');"
        },
        {
          "text": "Your new image should be below your old one and have the class <code>img-responsive</code>.",
          "testString": "assert($(\"img:eq(1)\").hasClass(\"img-responsive\"), 'Your new image should be below your old one and have the class <code>img-responsive</code>.');"
        },
        {
          "text": "Your new image should not have the class <code>smaller-image</code>.",
          "testString": "assert(!$(\"img:eq(1)\").hasClass(\"smaller-image\"), 'Your new image should not have the class <code>smaller-image</code>.');"
        },
        {
          "text": "Your new image should have a <code>src</code> of <code>https&#58;//bit.ly/fcc-running-cats</code>.",
          "testString": "assert($(\"img:eq(1)\").attr(\"src\") === \"https://bit.ly/fcc-running-cats\", 'Your new image should have a <code>src</code> of <code>https&#58;//bit.ly/fcc-running-cats</code>.');"
        },
        {
          "text": "Make sure your new <code>img</code> element has a closing angle bracket.",
          "testString": "assert(code.match(/<img/g) && code.match(/<img[^<]*>/g).length === 2 && code.match(/<img/g).length === 2, 'Make sure your new <code>img</code> element has a closing angle bracket.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Haz que las imágenes sean adaptativas en dispositivos móviles",
          "description": [
            "Primero, agrega una nueva imagen debajo que la que ya existe. Haz que su atributo <code>src</code> sea <code>https://bit.ly/fcc-running-cats</code>.",
            "Sería genial si esta imagen fuera exactamente del tamaño de la pantalla de nuestro teléfono.",
            "Afortunadamente, con Bootstrap, todo lo que tenemos que hacer es agregar la clase <code>img-responsive</code> a tu imagen. Hazlo, y verás que la imagen se ajustará perfectamente al ancho de tu página."
          ]
        },
        "fr": {
          "title": "Rendre des images adaptatives aux appareils mobiles",
          "description": [
            "It would be great if this image could be exactly the width of our phone's screen.",
            "Fortunately, with Bootstrap, all we need to do is add the <code>img-responsive</code> class to your image. Do this, and the image should perfectly fit the width of your page.",
            "D'abord, ajoutez une nouvelle image en dessous de celle qui eiste dejà. Changez l'attribut <code>src</src> en <code>https://bit.ly/fcc-running-cats</code>.",
            "Ce serait absolument super si notre image pouvait être exactement de la largeur de l'écran du téléphone.",
            "Heureusement, avec Bootstrap, il faut seulement ajouter la classe <code>img-responsive</code> à notre image. Faites le, et l'image devrait s'ajuster parfaitement à la largeur de la page."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <h2 class=\"red-text\">CatPhotoApp</h2>",
            "",
            "  <p>Click here for <a href=\"#\">cat photos</a>.</p>",
            "",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd8acde08812",
      "title": "Center Text with Bootstrap",
      "description": [
        "Now that we're using Bootstrap, we can center our heading element to make it look better. All we need to do is add the class <code>text-center</code> to our <code>h2</code> element.",
        "Remember that you can add several classes to the same element by separating each of them with a space, like this:",
        "<code>&#60h2 class=\"red-text text-center\"&#62your text&#60/h2&#62</code>"
      ],
      "tests": [
        {
          "text": "Your <code>h2</code> element should be centered by applying the class <code>text-center</code>",
          "testString": "assert($(\"h2\").hasClass(\"text-center\"), 'Your <code>h2</code> element should be centered by applying the class <code>text-center</code>');"
        },
        {
          "text": "Your <code>h2</code> element should still have the class <code>red-text</code>",
          "testString": "assert($(\"h2\").hasClass(\"red-text\"), 'Your <code>h2</code> element should still have the class <code>red-text</code>');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Centra el texto con Bootstrap",
          "description": [
            "Ahora que estamos usando Bootstrap, podemos centrar nuestro elemento de encabezado para hacerlo verse mejor. Todo lo que necesitamos hacer es agregar la clase <code>text-center</code> a nuestro elemento <code>h2</code>.",
            "Recuerda que puedes agregar varias clases a un mismo elemento separando cada una de ellas con un espacio, de esta forma:",
            "<code>&#60h2 class=\"red-text text-center\"&#62your text&#60/h2&#62</code>"
          ]
        },
        "fr": {
          "title": "Centrer du texte avec Bootstrap",
          "description": [
            "Maintenant que wous utilisons Bootstrap, nous pouvons centrer notre entête pour qu'il ait une meilleure apparence. Nous devons seulement ajouter la classe <code>text-center</code> à notre élément <code>h2</code>.",
            "Souvenez vous que vous pouvez utiliser plusieurs classes pour un même élément en les séparant avec un espace, comme ceci:",
            "<code>&#60h2 class=\"red-text text-center\"&#62Votre texte&#60/h2&#62</code>"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <h2 class=\"red-text\">CatPhotoApp</h2>",
            "",
            "  <p>Click here for <a href=\"#\">cat photos</a>.</p>",
            "",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348cd8acdf08812",
      "title": "Create a Bootstrap Button",
      "description": [
        "Bootstrap has its own styles for <code>button</code> elements, which look much better than the plain HTML ones.",
        "Create a new <code>button</code> element below your large kitten photo. Give it the <code>btn</code> and <code>btn-default</code> classes, as well as the text of \"Like\"."
      ],
      "tests": [
        {
          "text": "Create a new <code>button</code> element with the text \"Like\".",
          "testString": "assert(new RegExp(\"like\",\"gi\").test($(\"button\").text()) && ($(\"img.img-responsive + button.btn\").length > 0), 'Create a new <code>button</code> element with the text \"Like\".');"
        },
        {
          "text": "Your new button should have two classes: <code>btn</code> and <code>btn-default</code>.",
          "testString": "assert($(\"button\").hasClass(\"btn\") && $(\"button\").hasClass(\"btn-default\"), 'Your new button should have two classes: <code>btn</code> and <code>btn-default</code>.');"
        },
        {
          "text": "Make sure all your <code>button</code> elements have a closing tag.",
          "testString": "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure all your <code>button</code> elements have a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Crea un botón con Bootstrap",
          "description": [
            "Bootstrap tiene sus propios estilos para elementos <code>button</code>, los cuales se ven mejor que los estilos simples de HTML.",
            "Crea un nuevo elemento <code>button</code> debajo de tu foto grande del gatito. Dale la clase <code>btn</code> y el texto \"Like\"."
          ]
        },
        "fr": {
          "title": "Créer un bouton avec Bootstrap",
          "description": [
            "Bootstrap possède ses propres styles pour les éléments <code>button</code>, qui sont beaucoup plus beaux que ceux issus du HTML seul.",
            "Créez un nouvel élément <code>button</code> en dessous de votre grande photo de chaton. Donnez lui comme classe <code>btn</code> et comme texte \"Like\"."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <h2 class=\"red-text text-center\">CatPhotoApp</h2>",
            "",
            "  <p>Click here for <a href=\"#\">cat photos</a>.</p>",
            "",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348cd8acef08812",
      "title": "Create a Block Element Bootstrap Button",
      "description": [
        "Normally, your <code>button</code> elements with the <code>btn</code> and <code>btn-default</code> classes are only as wide as the text that they contain. For example:",
        "<code>&lt;button class=\"btn btn-default\"&gt;Submit&lt;/button&gt;</code>",
        "This button would only be as wide as the word \"Submit\".",
        "<button class='btn btn-default'>Submit</button>",
        "By making them block elements with the additional class of <code>btn-block</code>, your button will stretch to fill your page's entire horizontal space and any elements following it will flow onto a \"new line\" below the block.",
        "<code>&lt;button class=\"btn btn-default btn-block\"&gt;Submit&lt;/button&gt;</code>",
        "This button would take up 100% of the available width.",
        "<button class='btn btn-default btn-block'>Submit</button>",
        "Note that these buttons still need the <code>btn</code> class.",
        "Add Bootstrap's <code>btn-block</code> class to your Bootstrap button."
      ],
      "tests": [
        {
          "text": "Your button should still have the <code>btn</code> and <code>btn-default</code> classes.",
          "testString": "assert($(\"button\").hasClass(\"btn\") && $(\"button\").hasClass(\"btn-default\"), 'Your button should still have the <code>btn</code> and <code>btn-default</code> classes.');"
        },
        {
          "text": "Your button should have the class <code>btn-block</code>.",
          "testString": "assert($(\"button\").hasClass(\"btn-block\"), 'Your button should have the class <code>btn-block</code>.');"
        },
        {
          "text": "Make sure all your <code>button</code> elements have a closing tag.",
          "testString": "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure all your <code>button</code> elements have a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Crea un elemento botón de bloque con Bootstrap",
          "description": [
            "Normalmente , los elementos de <code>button</code> con una clase de <code>btn</code> sólo son tan ancha como el texto que contienen. Por ejemplo:",
            "<code>&lt;button class=\"btn\"&gt;Enviar&lt;/button&gt;</code>",
            "Este botón sólo sería tan amplia como la palabra \"Enviar\"",
            "<button class='btn' style='background-color: rgb(0, 100, 0);  color: rgb(255, 255, 255);'>Enviar</button>",
            "Haciéndolos bloquean elementos con la clase adicional de <code>btn-block</code>, el botón se amplía para llenar toda espacio horizontal de la página y los elementos siguientes fluirá sobre una \"nueva línea\" debajo del bloque .",
            "<code>&lt;button class=\"btn btn-block\"&gt;Enviar&lt;/button&gt;</code>",
            "Este botón llevaría hasta el 100% de la anchura disponible.",
            "<button class='btn btn-block' style='background-color: rgb(0, 100, 0);  color: rgb(255, 255, 255);'>Enviar</button>",
            "Ten en cuenta que estos botones todavía necesitan la clase <code>btn</code>.",
            "Agrega la clase de Bootstrap <code>btn-block</code> a tu botón Bootstrap."
          ]
        },
        "fr": {
          "title": "Créer un bouton bloc Bootstrap",
          "description": [
            "Normalement , vos éléments de <code>button</code> avec une classe de <code>btn</code> ne sont aussi larges que le texte qu'ils contiennent . Par exemple:",
            "<code>&lt;button class=\"btn\"&gt;Soumettre&lt;/button&gt;</code>",
            "Ce bouton ne serait plus large que le mot \"Soumettre\" .",
            "<button class='btn' style='background-color: rgb(0, 100, 0);  color: rgb(255, 255, 255);'>Soumettre</button>",
            "En leur faisant bloquer les éléments avec la classe supplémentaire de <code>btn-block</code>, votre bouton étirer pour remplir tout l'espace horizontal de votre page et tous les éléments suivants, il coulera sur une \"nouvelle ligne\" en dessous du bloc .",
            "<code>&lt;button class=\"btn btn-block\"&gt;Soumettre&lt;/button&gt;</code>",
            "Ce bouton prendrait 100% de la largeur disponible .",
            "<button class='btn btn-block' style='background-color: rgb(0, 100, 0);  color: rgb(255, 255, 255);'>Soumettre</button>",
            "Notez que ces boutons ont toujours besoin de la classe <code>btn</code>",
            "Ajoutez la classe Bootstrap <code>btn-block</code> à votre bouton Bootstrap."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <h2 class=\"red-text text-center\">CatPhotoApp</h2>",
            "",
            "  <p>Click here for <a href=\"#\">cat photos</a>.</p>",
            "",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "  <button class=\"btn btn-default\">Like</button>",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348cd8acef08811",
      "title": "Taste the Bootstrap Button Color Rainbow",
      "description": [
        "The <code>btn-primary</code> class is the main color you'll use in your app. It is useful for highlighting actions you want your user to take.",
        "Replace Bootstrap's <code>btn-default</code> class by <code>btn-primary</code> in your button.",
        "Note that this button will still need the <code>btn</code> and <code>btn-block</code> classes."
      ],
      "tests": [
        {
          "text": "Your button should have the class <code>btn-primary</code>.",
          "testString": "assert($(\"button\").hasClass(\"btn-primary\"), 'Your button should have the class <code>btn-primary</code>.');"
        },
        {
          "text": "Your button should still have the <code>btn</code> and <code>btn-block</code> classes.",
          "testString": "assert($(\"button\").hasClass(\"btn-block\") && $(\"button\").hasClass(\"btn\"), 'Your button should still have the <code>btn</code> and <code>btn-block</code> classes.');"
        },
        {
          "text": "Make sure all your <code>button</code> elements have a closing tag.",
          "testString": "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure all your <code>button</code> elements have a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Prueba el arcoíris de colores para botones que te ofrece Bootstrap",
          "description": [
            "La clase <code>btn-primary</code> es el color principal que utilizarás en tu aplicación. Es útil resaltar las acciones que quieres que tu usuario ejecute.",
            "Agrega la clase <code>btn-primary</code> de Bootstrap a tu botón.",
            "Ten en mente que este botón todavía necesita las clases <code>btn</code> y <code>btn-block</code>."
          ]
        },
        "fr": {
          "title": "Goutez à l'arc en ciel de couleurs des boutons de Bootstrap",
          "description": [
            "La classe <code>btn-primary</code> est la couleur principale que vous utiliserez dans votre application. Elle est utile pour mettre en valeur les actions que vous voulez faire réaliser par vos utilisateurs.",
            "Ajoutez la classe Bootstrap <code>btn-primary</code> à votre bouton.",
            "Notez que ce bouton a toujours besoin des classes <code>btn</code> et <code>btn-block</code>"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <h2 class=\"red-text text-center\">CatPhotoApp</h2>",
            "",
            "  <p>Click here for <a href=\"#\">cat photos</a>.</p>",
            "",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "  <button class=\"btn btn-default btn-block\">Like</button>",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348cd8acef08813",
      "title": "Call out Optional Actions with btn-info",
      "description": [
        "Bootstrap comes with several pre-defined colors for buttons. The <code>btn-info</code> class is used to call attention to optional actions that the user can take.",
        "Create a new block-level Bootstrap button below your \"Like\" button with the text \"Info\", and add Bootstrap's <code>btn-info</code> and <code>btn-block</code> classes to it.",
        "Note that these buttons still need the <code>btn</code> and <code>btn-block</code> classes."
      ],
      "tests": [
        {
          "text": "Create a new <code>button</code> element with the text \"Info\".",
          "testString": "assert(new RegExp(\"info\",\"gi\").test($(\"button\").text()), 'Create a new <code>button</code> element with the text \"Info\".');"
        },
        {
          "text": "Both of your Bootstrap buttons should have the <code>btn</code> and <code>btn-block</code> classes.",
          "testString": "assert($(\"button.btn-block.btn\").length > 1, 'Both of your Bootstrap buttons should have the <code>btn</code> and <code>btn-block</code> classes.');"
        },
        {
          "text": "Your new button should have the class <code>btn-info</code>.",
          "testString": "assert($(\"button\").hasClass(\"btn-info\"), 'Your new button should have the class <code>btn-info</code>.');"
        },
        {
          "text": "Make sure all your <code>button</code> elements have a closing tag.",
          "testString": "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure all your <code>button</code> elements have a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Señala acciones opcionales con botones informativos",
          "description": [
            "Bootstrap incluye varios colores pre-definidos para botones. La clase <code>btn-info</code> se utiliza para llamar la atención a acciones opcionales que el usuario puede tomar.",
            "Crea un nuevo botón a nivel de bloque de Bootstrap debajo de tu botón de \"Like\" con el texto \"Info\", y agrégale las clases de Bootstrap <code>btn-info</code> y <code>btn-block</code>.",
            "Ten en mente que estos botones todavía necesitan las clases <code>btn</code> y <code>btn-block</code>."
          ]
        },
        "fr": {
          "title": "Indiquez les actions optionelles avec des boutons informatifs",
          "description": [
            "Bootstrap est livré avec plusieurs couleurs prédéfinies pour les boutons. La classe <code>btn-info</code> est utilisée pour indiquer des actions optionelles pour vos utilisateurs.",
            "Créez un nouveau bouton Bootstrap bloc en dessous de votre bouton \"Like\" avec le texte \"Info\" et donnez lui les classes Bootstrap <code>btn-info</code> et <code>btn-block</code>.",
            "Notez que ces boutons ont toujours besoins des classes <code>btn</code> and <code>btn-block</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <h2 class=\"red-text text-center\">CatPhotoApp</h2>",
            "",
            "  <p>Click here for <a href=\"#\">cat photos</a>.</p>",
            "",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "  <button class=\"btn btn-block btn-primary\">Like</button>",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348ce8acef08814",
      "title": "Warn Your Users of a Dangerous Action with btn-danger",
      "description": [
        "Bootstrap comes with several pre-defined colors for buttons. The <code>btn-danger</code> class is the button color you'll use to notify users that the button performs a destructive action, such as deleting a cat photo.",
        "Create a button with the text \"Delete\" and give it the class <code>btn-danger</code>.",
        "Note that these buttons still need the <code>btn</code> and <code>btn-block</code> classes."
      ],
      "tests": [
        {
          "text": "Create a new <code>button</code> element with the text \"Delete\".",
          "testString": "assert(new RegExp(\"Delete\",\"gi\").test($(\"button\").text()), 'Create a new <code>button</code> element with the text \"Delete\".');"
        },
        {
          "text": "All of your Bootstrap buttons should have the <code>btn</code> and <code>btn-block</code> classes.",
          "testString": "assert($(\"button.btn-block.btn\").length > 2, 'All of your Bootstrap buttons should have the <code>btn</code> and <code>btn-block</code> classes.');"
        },
        {
          "text": "Your new button should have the class <code>btn-danger</code>.",
          "testString": "assert($(\"button\").hasClass(\"btn-danger\"), 'Your new button should have the class <code>btn-danger</code>.');"
        },
        {
          "text": "Make sure all your <code>button</code> elements have a closing tag.",
          "testString": "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure all your <code>button</code> elements have a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Advierte a tus usuarios sobre acciones peligrosas",
          "description": [
            "Bootstrap incluye varios colores pre-definidos para botones. La clase <code>btn-danger</code> es el color de botón que usarías para notificar a los usuarios que el botón ejecuta una acción destructiva, como por ejemplo eliminar la foto de un gato.",
            "Crea un botón con el texto \"Delete\" y dale la clase <code>btn-danger</code>.",
            "Recuerda que estos botones todavía requieren las clases <code>btn</codez> y <code>btn-block</code>."
          ]
        },
        "fr": {
          "title": "Prévenez vos utilisateurs d'une action dangereuse",
          "description": [
            "Bootstrap est livré avec plusieurs couleurs prédéfinies pour les boutons. La classe <code>btn-danger</code> est utilisée pour indiquer aux utilisateurs que le bouton actionne un processus destructif comme supprimer une photo de chat.",
            "Créez un bouton ayant le texte \"Delete\" et donnez lui la classe <code>btn-danger</code>.",
            "Notez que ces boutons ont toujours besoins des classes <code>btn</code> and <code>btn-block</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <h2 class=\"red-text text-center\">CatPhotoApp</h2>",
            "",
            "  <p>Click here for <a href=\"#\">cat photos</a>.</p>",
            "",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "  <button class=\"btn btn-block btn-primary\">Like</button>",
            "  <button class=\"btn btn-block btn-info\">Info</button>",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad88fee1348ce8acef08815",
      "title": "Use the Bootstrap Grid to Put Elements Side By Side",
      "description": [
        "Bootstrap uses a responsive 12-column grid system, which makes it easy to put elements into rows and specify each element's relative width. Most of Bootstrap's classes can be applied to a <code>div</code> element.",
        "Bootstrap has different column width attributes that it uses depending on how wide the user's screen is. For example, phones have narrow screens, and laptops have wider screens.",
        "Take for example Bootstrap's <code>col-md-*</code> class. Here, <code>md</code> means medium, and <code>*</code> is a number specifying how many columns wide the element should be. In this case, the column width of an element on a medium-sized screen, such as a laptop, is being specified.",
        "In the Cat Photo App that we're building, we'll use <code>col-xs-*</code>, where <code>xs</code> means extra small (like an extra-small mobile phone screen), and <code>*</code> is the number of columns specifying how many columns wide the element should be.",
        "Put the <code>Like</code>, <code>Info</code> and <code>Delete</code> buttons side-by-side by nesting all three of them within one <code>&#60;div class=\"row\"&#62;</code> element, then each of them within a <code>&#60;div class=\"col-xs-4\"&#62;</code> element.",
        "The <code>row</code> class is applied to a <code>div</code>, and the buttons themselves can be nested within it."
      ],
      "tests": [
        {
          "text": "Your buttons should all be nested within the same <code>div</code> element with the class <code>row</code>.",
          "testString": "assert($(\"div.row:has(button)\").length > 0, 'Your buttons should all be nested within the same <code>div</code> element with the class <code>row</code>.');"
        },
        {
          "text": "Each of your Bootstrap buttons should be nested within its own <code>div</code> element with the class <code>col-xs-4</code>.",
          "testString": "assert($(\"div.col-xs-4:has(button)\").length > 2, 'Each of your Bootstrap buttons should be nested within its own <code>div</code> element with the class <code>col-xs-4</code>.');"
        },
        {
          "text": "Make sure each of your <code>button</code> elements has a closing tag.",
          "testString": "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure each of your <code>button</code> elements has a closing tag.');"
        },
        {
          "text": "Make sure each of your <code>div</code> elements has a closing tag.",
          "testString": "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure each of your <code>div</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Usa la cuadrícula de Bootstrap para poner elementos lado a lado",
          "description": [
            "Bootstrap utiliza un sistema de cuadrícula adaptativa que facilita el poner elementos en fila y especificar la anchura relativa de cada elemento. La mayoría de las clases de Bootstrap pueden ser aplicadas a un elemento <code>div</code>.",
            "Aquí hay un diagrama del funcionamiento de la cuadrícula de 12 columnas Bootstrap:",
            "<a href=\"https://v4-alpha.getbootstrap.com/layout/grid/#example-stacked-to-horizontal\" target=\"_blank\"><img class=\"img-responsive\" src=\"https://i.imgur.com/FaYuui8.png\" title=\"Haga clic para ver la documentación rejilla Bootstrap\" alt=\"una imagen que muestra el sistema de cuadrícula de Bootstrap\"></a>",
            "En esta ilustración se está utilizando la clase <code>col-md-*</code>. Aquí, <code>md</code> significa mediano, y <code>*</code> es un número que especifica la cantidad de columnas debe tomar el ancho del elemento. En este caso, se especifica el ancho de columna de un elemento en una pantalla de tamaño mediano, como una laptop.",
            "En la aplicación de fotos de gatos que estamos construyendo, usaremos <code>col-xs-*</code>, donde <code>xs</code> significa extra pequeño (como una pantalla extra-pequeña de un teléfono), y <code>*</code> especifica el número de columnas que debe tomar el ancho del elemento.",
            "Pon los botones de <code>Like</code>, <code>Info</code> y <code>Delete</code> lado a lado. Esto se hace anidando los tres botones dentro de un elemento <code>&#60;div class=\"row\"&#62;</code>, y luego cada uno de ellos dentro de un elemento <code>&#60;div class=\"col-xs-4\"&#62;</code>.",
            "La clase <code>row</code> se aplica al elemento <code>div</code>, dentro del cual van anidados los botones."
          ]
        },
        "fr": {
          "title": "Utilisez la grille de Bootstrap pour mettre les éléments côte-à-côte.",
          "description": [
            "Bootstrap utilise un système de grille adaptative, qui rend plus simple le placement des éléments en rangées et la spécification de la largeur relative de chaque élément. La plupart des classes de Bootstrap peuvent être associés à un élément <code>div</code>",
            "Voici un diagramme décrivant le fonctionnement du système de grille à 12 colonnes:",
            "<a href=\"https://v4-alpha.getbootstrap.com/layout/grid/#example-stacked-to-horizontal\" target=\"_blank\"><img class=\"img-responsive\" src=\"https://i.imgur.com/FaYuui8.png\" title=\"Cliquez pour voir la documentation de la grille Bootstrap\" alt=\"Une image illustrant le système de grille Bootstrap\"></a>",
            "Notez que dans cet exemple, nous avons utilisé la classe <code>col-md-*</code>. Ici, <code>md</code> signifie medium, et <code>*</code> donne le nombre de colonnes en largeur de l'élément. Dans le cas présenté, on a défini la largeur en colonnes d' un élément sur un écrand de taille medium, comme un ordinateur portable.",
            "Dans l'application de photos de chats que nous sommes en train de construire, nous utiliserons <code>col-xs-*</code>, où <code>xs</code> signifie extrêmement petit (comme un écran de téléphone mobile), et <code>*</code> est le nombre de colonnes en largeur de l'élément.",
            "Mettez les boutons <code>Like</code>, <code>info</code> et <code>Delete</code> côte-à-côte en les enveloppant tous dans un élément <code>&#60;div class=\"row\"&#62;</code>, puis chacun d'entre eux dans un élément <code>&#60;div class=\"col-xs-4\"&#62;</code> element.",
            "La classe <code>row</code> est donnée à un <code>div</code>, et les boutons peuvent être insérés à l'intérieur de celui-ci."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <h2 class=\"red-text text-center\">CatPhotoApp</h2>",
            "",
            "  <p>Click here for <a href=\"#\">cat photos</a>.</p>",
            "",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "  <button class=\"btn btn-block btn-primary\">Like</button>",
            "  <button class=\"btn btn-block btn-info\">Info</button>",
            "  <button class=\"btn btn-block btn-danger\">Delete</button>",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1347bd9aedf08845",
      "title": "Ditch Custom CSS for Bootstrap",
      "description": [
        "We can clean up our code and make our Cat Photo App look more conventional by using Bootstrap's built-in styles instead of the custom styles we created earlier.",
        "Don't worry - there will be plenty of time to customize our CSS later.",
        "Delete the <code>.red-text</code>, <code>p</code>, and <code>.smaller-image</code> CSS declarations from your <code>style</code> element so that the only declarations left in your <code>style</code> element are <code>h2</code> and <code>thick-green-border</code>.",
        "Then delete the <code>p</code> element that contains a dead link. Then remove the <code>red-text</code> class from your <code>h2</code> element and replace it with the <code>text-primary</code> Bootstrap class.",
        "Finally, remove the \"smaller-image\" class from your first <code>img</code> element and replace it with the <code>img-responsive</code> class."
      ],
      "tests": [
        {
          "text": "Your h2 element should no longer have the class <code>red-text</code>.",
          "testString": "assert(!$(\"h2\").hasClass(\"red-text\"), 'Your h2 element should no longer have the class <code>red-text</code>.');"
        },
        {
          "text": "Your h2 element should now have the class <code>text-primary</code>.",
          "testString": "assert($(\"h2\").hasClass(\"text-primary\"), 'Your h2 element should now have the class <code>text-primary</code>.');"
        },
        {
          "text": "Your paragraph elements should no longer use the font <code>Monospace</code>.",
          "testString": "assert(!$(\"p\").css(\"font-family\").match(/monospace/i), 'Your paragraph elements should no longer use the font <code>Monospace</code>.');"
        },
        {
          "text": "Remove the <code>smaller-image</code> class from your top image.",
          "testString": "assert(!$(\"img\").hasClass(\"smaller-image\"), 'Remove the <code>smaller-image</code> class from your top image.');"
        },
        {
          "text": "Add the <code>img-responsive</code> class to your top image.",
          "testString": "assert($(\".img-responsive\").length > 1, 'Add the <code>img-responsive</code> class to your top image.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Reemplaza el CSS personalizado por Bootstrap",
          "description": [
            "Podemos limpiar nuestro código y hacer que nuestra aplicación de fotos de gatos se vea más convencional, usando los estilos pre-construidos de Bootstrap, en lugar de los estilos personalizados que creamos antes.",
            "No te preocupes, luego habrá más tiempo para personalizar nuestro CSS.",
            "Elimina las declaraciones CSS <code>.red-text</code>, <code>p</code>, y <code>.smaller-image</code> de tu elemento <code>style</code>, de forma que las únicas declaraciones que queden en tu elemento <code>style</code> sean <code>h2</code> y <code>thick-green-border</code>.",
            "Luego elimina el elemento <code>p</code> que contiene un enlace nulo. Después, elimina la clase <code>red-text</code> de tu elemento <code>h2</code> y reemplázalo con la clase <code>text-primary</code> de Bootstrap.",
            "Por último, elimina la clase \"smaller-image\" de tu primer elemento <code>img</code> y reemplázalo con la clase <code>img-responsive</code>."
          ]
        },
        "fr": {
          "title": "Remplacez le CSS personnalisé par les styles Bootstrap",
          "description": [
            "Nous pouvons nettoyer notre code et rendre le look de notre appli Cat Photos plus conventionnel en utilisant les styles intégrés à Bootstrap à la place des styles personnalisés que nous avons créés auparavant.",
            "Ne vous inquiétez pas - nous auront beaucoup de temps pour personnaliser notre CSS plus tard.",
            "Supprimez les déclarations CSS <code>.red-text</code>, <code>p</code>, et <code>.smaller-image</code> de votre élément <code>style</code> pour que les seules déclarations restantes dans l'élément <code>style</code> soient <code>h2</code> et <code>thick-green-border</code>.",
            "Ensuite supprimez l'élément <code>p</code> contenant un lien fantôme. Puis enlevez la classe <code>red-text</code> de votre élément <code>h2</code> et remplacez la par la classe Bootstrap <code>text-primary</code>",
            "Enfin, enlevez la classe \"smaller-image\" dde votre premier élément <code>img</code> et remplacez le par la classe <code>img-responsive</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <h2 class=\"red-text text-center\">CatPhotoApp</h2>",
            "",
            "  <p>Click here for <a href=\"#\">cat photos</a>.</p>",
            "",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-primary\">Like</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-info\">Info</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-danger\">Delete</button>",
            "    </div>",
            "  </div>",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08845",
      "title": "Use a span to Target Inline Elements",
      "description": [
        "You can use spans to create inline elements. Remember when we used the <code>btn-block</code> class to make the button fill the entire row?",
        "<button class='btn' style='background-color: rgb(0, 100, 0);  color: rgb(255, 255, 255);'>normal button</button>",
        "<button class='btn btn-block' style='background-color: rgb(0, 100, 0);  color: rgb(255, 255, 255);'>btn-block button</button>",
        "That illustrates the difference between an \"inline\" element and a \"block\" element.",
        "By using the inline <code>span</code> element, you can put several elements on the same line, and even style different parts of the same line differently.",
        "Nest the word \"love\" in your \"Things cats love\" element below within a <code>span</code> element. Then give that <code>span</code> the class <code>text-danger</code> to make the text red.",
        "Here's how you would do this with the \"Top 3 things cats hate\" element:",
        "<code>&#60;p&#62;Top 3 things cats &#60;span class=\"text-danger\"&#62;hate:&#60;/span&#62;&#60;/p&#62;</code>"
      ],
      "tests": [
        {
          "text": "Your <code>span</code> element should be inside your <code>p</code> element.",
          "testString": "assert($(\"p span\") && $(\"p span\").length > 0, 'Your <code>span</code> element should be inside your <code>p</code> element.');"
        },
        {
          "text": "Your <code>span</code> element should have just the text <code>love</code>.",
          "testString": "assert($(\"p span\") && $(\"p span\").text().match(/love/i) && !$(\"p span\").text().match(/Things cats/i), 'Your <code>span</code> element should have just the text <code>love</code>.');"
        },
        {
          "text": "Your <code>span</code> element should have class <code>text-danger</code>.",
          "testString": "assert($(\"span\").hasClass(\"text-danger\"), 'Your <code>span</code> element should have class <code>text-danger</code>.');"
        },
        {
          "text": "Make sure your <code>span</code> element has a closing tag.",
          "testString": "assert(code.match(/<\\/span>/g) && code.match(/<span/g) && code.match(/<\\/span>/g).length === code.match(/<span/g).length, 'Make sure your <code>span</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Usa span para elementos en línea",
          "description": [
            "Puedes utilizar span para crear elementos en línea. ¿Recuerdas cuando usamos la clase <code>btn-block</code> para hacer que el botón llenara toda la línea?",
            "Esta imagen ilustra la diferencia entre elementos en línea (<code>inline</code>) y elementos a nivel de bloque (<code>block-level</code>):",
            "<a href=\"https://i.imgur.com/O32cDWE.png\" data-lightbox=\"img-enlarge\"><img class=\"img-responsive\" src=\"https://i.imgur.com/O32cDWE.png\" title=\"Pulsa para agrandar\" alt=\"Un botón \"en línea\" es tan pequeño como el texto que contiene. En esta imagen, está centrado. Debajo de este hay un botón \"a nivel de bloque\", que se estira para llenar todo el espacio horizontal.'></a>",
            "Al usar el elemento <code>span</code>, puedes poner varios elementos juntos, e incluso darle diferentes estilos a partes diferentes del mismo elemento.",
            "Anida la palabra \"love\" en tu elemento \"Things cats love\" dentro de un elemento <code>span</code>. Luego, asigna a ese elemento <code>span</code> la clase <code>text-danger</code> para hacer que el texto sea rojo.",
            "Así es como lo harías con el elemento \"Top 3 things cats hate\":",
            "<code>&#60;p&#62;Top 3 things cats &#60;span class=\"text-danger\"&#62;hate:&#60;/span&#62;&#60;/p&#62;</code>"
          ]
        },
        "fr": {
          "title": "Utiliser Spans pour les éléments \"Inline\"",
          "description": [
            "Vous pouvez utiliser les spans pour créer des éléments inline. Vous rappelez vous quand nous avions utilisé la classe <code>btn-block</code> pour remplir la rangée entière?",
            "Cette image illustre la différence entre les éléments <code>inline</code> (en ligne) et les éléments <code>block-level</code> (de blocs):",
            "<a href=\"https://i.imgur.com/O32cDWE.png\" data-lightbox=\"img-enlarge\"><img class=\"img-responsive\" src=\"https://i.imgur.com/O32cDWE.png\" title=\"Cliquez pour élargir\" alt=\"Un bouton \"inline\" est aussi petit que le texte qu'il contient. Dans cette image, c'est centré. En dessous il y a un bouton \"block-level\", qui s'étire à tout l'espace horizontal.'></a>",
            "En utilisant un élément <code>span</code>, vous pouvez mettre ensemble plusieurs éléments, et même donner un style différent à plusieurs parties d'un même élément",
            "Nichez le mot \"love\" dans votre élément \"Things cats love\" en dessous dans un élément <code>span</code>; Ensuite donnez à ce <code>span</code> la classe <code>text-danger</code> pour rendre le texte rouge.",
            "Il faudrait que vous fassiez ainsi pour l'élément \"Top 3 things cats hate\":",
            "<code>&#60;p&#62;Top 3 things cats &#60;span class=\"text-danger\"&#62;hate:&#60;/span&#62;&#60;/p&#62;</code>"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>",
            "",
            "  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-primary\">Like</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-info\">Info</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-danger\">Delete</button>",
            "    </div>",
            "  </div>",
            "  <p>Things cats love:</p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aede08845",
      "title": "Create a Custom Heading",
      "description": [
        "We will make a simple heading for our Cat Photo App by putting the title and relaxing cat image in the same row.",
        "Remember, Bootstrap uses a responsive grid system, which makes it easy to put elements into rows and specify each element's relative width. Most of Bootstrap's classes can be applied to a <code>div</code> element.",
        "Nest your first image and your <code>h2</code> element within a single <code>&#60;div class=\"row\"&#62;</code> element. Nest your <code>h2</code> element within a <code>&#60;div class=\"col-xs-8\"&#62;</code> and your image in a <code>&#60;div class=\"col-xs-4\"&#62;</code> so that they are on the same line.",
        "Notice how the image is now just the right size to fit along the text?"
      ],
      "tests": [
        {
          "text": "Your <code>h2</code> element and topmost <code>img</code> element should both be nested together within a <code>div</code> element with the class <code>row</code>.",
          "testString": "assert($(\"div.row:has(h2)\").length > 0 && $(\"div.row:has(img)\").length > 0, 'Your <code>h2</code> element and topmost <code>img</code> element should both be nested together within a <code>div</code> element with the class <code>row</code>.');"
        },
        {
          "text": "Nest your topmost <code>img</code> element within a <code>div</code> with the class <code>col-xs-4</code>.",
          "testString": "assert($(\"div.col-xs-4:has(img)\").length > 0 && $(\"div.col-xs-4:has(div)\").length === 0, 'Nest your topmost <code>img</code> element within a <code>div</code> with the class <code>col-xs-4</code>.');"
        },
        {
          "text": "Nest your <code>h2</code> element within a <code>div</code> with the class <code>col-xs-8</code>.",
          "testString": "assert($(\"div.col-xs-8:has(h2)\").length > 0 && $(\"div.col-xs-8:has(div)\").length === 0, 'Nest your <code>h2</code> element within a <code>div</code> with the class <code>col-xs-8</code>.');"
        },
        {
          "text": "Make sure each of your <code>div</code> elements has a closing tag.",
          "testString": "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure each of your <code>div</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Crea un encabezado personalizado",
          "description": [
            "Crearemos un encabezado simple para nuestra aplicación de fotos de gatos poniendo el título y la relajante imagen del gato en la misma línea.",
            "Recuerda, Bootstrap usa un sistema de cuadrícula adaptativo, el cual facilita poner elementos en filas y especificar el ancho relativo de cada elemento. La mayoría de las clases de Bootstrap pueden aplicarse a un elemento <code>div</code>.",
            "Aquí hay un diagrama del funcionamiento de la cuadrícula de 12 columnas Bootstrap:",
            "<a href=\"https://i.imgur.com/FaYuui8.png\" data-lightbox=\"img-enlarge\"><img class=\"img-responsive\" src=\"https://i.imgur.com/FaYuui8.png\" title=\"Pulsa para agrandar\" alt=\"una imagen que muestra el sistema de cuadrícula de Bootstrap\"></a>",
            "En esta ilustración se está utilizando la clase <code>col-md-*</code>. Aquí, <code>md</code> significa mediano, y <code>*</code> es un número que especifica el número de columnas que debe tomar el ancho del elemento. En este caso, se especifica el ancho de columna de un elemento en una pantalla de tamaño mediano, como un computador portátil.",
            "En la aplicación de fotos de gatos que estamos construyendo, usaremos <code>col-xs-*</code>, donde <code>xs</code> significa extra pequeño (como una pantalla extra-pequeña de un teléfono), y <code>*</code> especifica el número de columnas que debe tomar el ancho del elemento.",
            "Anida tu primera imagen y tu elemento <code>h2</code> dentro de un solo elemento <code>&#60;div class=\"row\"&#62;</code>. Anida tu texto <code>h2</code> dentro de un <code>&#60;div class=\"col-xs-8\"&#62;</code> y tu imagen en un <code>&#60;div class=\"col-xs-4\"&#62;</code> de tal forma que estén en la misma línea.",
            "¿Te diste cuenta de que la imagen es ahora justamente del tamaño apropiado para el texto?"
          ]
        },
        "fr": {
          "title": "Créer un entête personalisé",
          "description": [
            "Notice how the image is now just the right size to fit along the text?",
            "Nous allons réaliser un entête tout simple pour notre appli Cat Photo App en plaçant le titre et l'image de chat relaxante dans la même rangée.",
            "Rappelez-vous, Bootstrap utilise un système de grille adaptative, qui rend facile le placement des éléments en rangées et la définition de la largeur relative de chaque élément. La plupart des classes de Bootstrap peuvent être appliquées à un élément <code>div</code>.",
            "Voici un diagramme du fonctionnement de la grille à 12 colonnes de Bootstrap:",
            "<a href=\"https://i.imgur.com/FaYuui8.png\" data-lightbox=\"img-enlarge\"><img class=\"img-responsive\" src=\"https://i.imgur.com/FaYuui8.png\" title=\"Cliquer pour élargir\" alt=\"Une image illlustrant le système de grille de Bootstrap\"></a>",
            "Notez que dans cet exemple, on utilise la classe <code>col-md-*</code>. Ici <code>md</code> signifie medium, et <code>*</code> est un nombre spécifiant le nombre de colonnes en largeur que l'élément devrait avoir.",
            "Enveloppez votre première image et votre élément <code>h2</code> dans un seul élément <code>&#60;div class=\"row\"&#62;</code>. Mettez l'élément <code>h2</code> dans un <code>&#60;div class=\"col-xs-8\"&#62;</code> et votre image dans un <code>&#60;div class=\"col-xs-4\"&#62;</code> pour qu'ils soient sur la même ligne.",
            "Voyez vous comme l'image est maintenant exactement ajustée à la bonne taille pour être à côté du texte?"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "",
            "<style>",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>",
            "",
            "  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-primary\">Like</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-info\">Info</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-danger\">Delete</button>",
            "    </div>",
            "  </div>",
            "  <p>Things cats <span class=\"text-danger\">love:</span></p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedd08845",
      "title": "Add Font Awesome Icons to our Buttons",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css",
          "raw": true
        }
      ],
      "description": [
        "Font Awesome is a convenient library of icons. These icons are vector graphics, stored in the <code>.svg</code> file format. These icons are treated just like fonts. You can specify their size using pixels, and they will assume the font size of their parent HTML elements.",
        "You can include Font Awesome in any app by adding the following code to the top of your HTML:",
        "<code>&#60;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css\" integrity=\"sha384-XdYbMnZ/QjLh6iI4ogqCTaIjrFk87ip+ekIjefZch0Y+PvJ8CDYtEs1ipDmPorQ+\" crossorigin=\"anonymous\"&#62;</code>",
        "In this case, we've already added it for you to this page behind the scenes.",
        "The <code>i</code> element was originally used to make other elements italic, but is now commonly used for icons. You can add the Font Awesome classes to the <code>i</code> element to turn it into an icon, for example:",
        "<code>&lt;i class=\"fa fa-info-circle\"&gt;&lt;/i&gt;</code>",
        "Note that the <code>span</code> element is also acceptable for use with icons.",
        "Use Font Awesome to add a <code>thumbs-up</code> icon to your like button by giving it an <code>i</code> element with the classes <code>fa</code> and <code>fa-thumbs-up</code>; make sure to keep the text \"Like\" next to the icon."
      ],
      "tests": [
        {
          "text": "Add an <code>i</code> element with the classes <code>fa</code> and <code>fa-thumbs-up</code>.",
          "testString": "assert($(\"i\").is(\".fa.fa-thumbs-up\") || $(\"span\").is(\".fa.fa-thumbs-up\"), 'Add an <code>i</code> element with the classes <code>fa</code> and <code>fa-thumbs-up</code>.');"
        },
        {
          "text": "Your <code>fa-thumbs-up</code> icon should be located within the Like button.",
          "testString": "assert(($(\"i.fa-thumbs-up\").parent().text().match(/Like/gi) && $(\".btn-primary > i\").is(\".fa.fa-thumbs-up\")) || ($(\"span.fa-thumbs-up\").parent().text().match(/Like/gi) && $(\".btn-primary > span\").is(\".fa.fa-thumbs-up\")), 'Your <code>fa-thumbs-up</code> icon should be located within the Like button.');"
        },
        {
          "text": "Nest your <code>i</code> element within your <code>button</code> element.",
          "testString": "assert($(\"button\").children(\"i\").length > 0 || $(\"button\").children(\"span\").length > 0, 'Nest your <code>i</code> element within your <code>button</code> element.');"
        },
        {
          "text": "Make sure your icon element has a closing tag.",
          "testString": "assert(code.match(/<\\/i>|<\\/span>/g), 'Make sure your icon element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Agrega iconos de Font Awesome a los botones",
          "description": [
            "Font Awesome es una librería de iconos muy conveniente. Estos iconos son imágenes vectoriales, almacenadas en formato <code>.svg</code>, y son tratados como si fueran fuentes. Puedes especificar su tamaño usando pixeles, y tomarán el tamaño de fuente de su elemento HTML padre.",
            "Puedes añadir Font Awesome a cualquier aplicación sólo incluyendo y agregando el siguiente código al comienzo de tu HTML:",
            "<code>&#60;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css\" integrity=\"sha384-XdYbMnZ/QjLh6iI4ogqCTaIjrFk87ip+ekIjefZch0Y+PvJ8CDYtEs1ipDmPorQ+\" crossorigin=\"anonymous\"/&#62;</code>",
            "En este caso, ya lo hemos agregado por tí a esta página tras bambalinas.",
            "El elemento <code>i</code> originalmente era usado para hacer textos en itálicas, pero ahora comunmente se usa para iconos.  Le agregas clases de Font Awesome al elemento <code>i</code> para convertirlo en un ícono, por ejemplo:",
            "<code>&lt;i class=\"fa fa-info-circle\"&gt;&lt;/i&gt;</code>",
            "Usa Font Awesome para agregar un icono de \"pulgar arriba\" <code>thumbs-up</code> a tu botón de like dándole un elemento <code>i</code> con las clases <code>fa</code> y <code>fa-thumbs-up</code>."
          ]
        },
        "fr": {
          "title": "Ajouter des icônes Font Awesome à nos boutons",
          "description": [
            "Font Awesome est une librairie d'icônes très pratique. Ces icones sont des images vectorielles, stockées en format <code>.svg</code>. Ces icônes sont traités exactemeent comme des polices. Vous pouvez choisir leur taille en pixel, et ils prendront la taille de police de leur élémment parent HTML.",
            "Vous poyvez ajouter Font Awesome à n'importe quell application en ajoutant le code suivant en haut de votre HTML:",
            "<code>&#60;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css\" integrity=\"sha384-XdYbMnZ/QjLh6iI4ogqCTaIjrFk87ip+ekIjefZch0Y+PvJ8CDYtEs1ipDmPorQ+\" crossorigin=\"anonymous\">/&#62;</code>",
            "Ici, nous l'avons déjà ajouté pour vous dans le back-office.",
            "La balise <code>i</code> eétait utilisé à la base pour mettre les autres éléments en italique, mais maintenant elle est utilisée pour les icones. Vous ajoutez des classes Font Awesome à un élément <code>i</code> pour les les transformer en icones, par exemple:",
            "<code>&lt;i class=\"fa fa-info-circle\"&gt;&lt;/i&gt;</code>",
            "Utilisez Font Awesome pour ajouter un icone <code>thumbs-up</code> à votre bouton de like en lui donnant un élément <code>i</code> ayant les classes <code>fa</code> et <code>fa-thumbs-up</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-8\">",
            "      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "    </div>",
            "  </div>",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-primary\">Like</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-info\">Info</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-danger\">Delete</button>",
            "    </div>",
            "  </div>",
            "  <p>Things cats <span class=\"text-danger\">love:</span></p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedc08845",
      "title": "Add Font Awesome Icons to all of our Buttons",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css",
          "raw": true
        }
      ],
      "description": [
        "Font Awesome is a convenient library of icons. These icons are vector graphics, stored in the <code>.svg</code> file format. These icons are treated just like fonts. You can specify their size using pixels, and they will assume the font size of their parent HTML elements.",
        "Use Font Awesome to add an <code>info-circle</code> icon to your info button and a <code>trash</code> icon to your delete button.",
        "Note: The <code>span</code> element is an acceptable alternative to the <code>i</code> element for the directions below."
      ],
      "tests": [
        {
          "text": "You should add a <code>&#60;i class=\"fa fa-info-circle\"&#62;&#60;/i&#62;</code> within your info button element.",
          "testString": "assert($(\".btn-info > i\").is(\".fa.fa-info-circle\") || $(\".btn-info > span\").is(\".fa.fa-info-circle\"), 'You should add a <code>&#60;i class=\"fa fa-info-circle\"&#62;&#60;/i&#62;</code> within your info button element.');"
        },
        {
          "text": "You should add a <code>&#60;i class=\"fa fa-trash\"&#62;&#60;/i&#62;</code> within your delete button element.",
          "testString": "assert($(\".btn-danger > i\").is(\".fa.fa-trash\") || $(\".btn-danger > span\").is(\".fa.fa-trash\"), 'You should add a <code>&#60;i class=\"fa fa-trash\"&#62;&#60;/i&#62;</code> within your delete button element.');"
        },
        {
          "text": "Make sure each of your <code>i</code> elements has a closing tag and <code>&#60;i class=\"fa fa-thumbs-up\"&#62;&#60;/i&#62;</code> is in your like button element.",
          "testString": "assert(code.match(/<\\/i>|<\\/span/g) && code.match(/<\\/i|<\\/span>/g).length > 2 && ($(\".btn-primary > i\").is(\".fa.fa-thumbs-up\") || $(\".btn-primary > span\").is(\".fa.fa-thumbs-up\")), 'Make sure each of your <code>i</code> elements has a closing tag and <code>&#60;i class=\"fa fa-thumbs-up\"&#62;&#60;/i&#62;</code> is in your like button element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Agrega Font Awesome a todos los botones",
          "description": [
            "Font Awesome es una librería de iconos muy conveniente. Estos iconos son imágenes vectoriales, almacenadas en formato <code>.svg</code>, y son tratados como si fueran fuentes. Puedes especificar su tamaño usando pixeles, y tomarán el tamaño de fuente de su elemento HTML padre.",
            "Utiliza Font Awesome para agregar un icono <code>info-circle</code> a tu botón informativo y un icono <code>trash</code> a tu botón de eliminar."
          ]
        },
        "fr": {
          "title": "Ajoutez des icones Font Awesome à tous nos boutons",
          "description": [
            "Font Awesome est une librairie d'icônes très pratique. Ces icones sont des images vectorielles, stockées en format <code>.svg</code>. Ces icônes sont traités exactemeent comme des polices. Vous pouvez choisir leur taille en pixel, et ils prendront la taille de police de leur élémment parent HTML.",
            "Utilisez Font Awesome pour ajouter un icone <code>info-circle</code> à votre bouton d'info et un icone <code>trash</code> à votre bouton de suppression."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-8\">",
            "      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "    </div>",
            "  </div>",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-info\">Info</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-danger\">Delete</button>",
            "    </div>",
            "  </div>",
            "  <p>Things cats <span class=\"text-danger\">love:</span></p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedb08845",
      "title": "Responsively Style Radio Buttons",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css",
          "raw": true
        }
      ],
      "description": [
        "You can use Bootstrap's <code>col-xs-*</code> classes on <code>form</code> elements, too! This way, our radio buttons will be evenly spread out across the page, regardless of how wide the screen resolution is.",
        "Nest both your radio buttons within a <code>&#60;div class=\"row\"&#62;</code> element. Then nest each of them within a <code>&#60;div class=\"col-xs-6\"&#62;</code> element.",
        "<strong>Note:</strong> As a reminder, radio buttons are <code>input</code> elements of type <code>radio</code>."
      ],
      "tests": [
        {
          "text": "Nest all of your radio buttons inside one <code>div</code> with the class <code>row</code>.",
          "testString": "assert($(\"div.row:has(input[type=\\\"radio\\\"])\").length > 0, 'Nest all of your radio buttons inside one <code>div</code> with the class <code>row</code>.');"
        },
        {
          "text": "Nest each of your radio buttons inside its own <code>div</code> with the class <code>col-xs-6</code>.",
          "testString": "assert($(\"div.col-xs-6:has(input[type=\\\"radio\\\"])\").length > 1, 'Nest each of your radio buttons inside its own <code>div</code> with the class <code>col-xs-6</code>.');"
        },
        {
          "text": "Make sure each of your <code>div</code> elements has a closing tag.",
          "testString": "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure each of your <code>div</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Crea botones de opción con estilo adaptativo",
          "description": [
            "¡Puedes utilizar las clases <code>col-xs-*</code> de Bootstrap en elementos <code>form</code> también! De esta forma, nuestros botones de opción estarán igualmente distribuidos en la página, sin importar qué tan ancha es la resolución de la pantalla.",
            "Anida todos los botones de opción dentro de un elemento <code>&#60;div class=\"row\"&#62;</code>. Luego, anida cada uno de ellos dentro de un elemento <code>&#60;div class=\"col-xs-6\"&#62;</code>."
          ]
        },
        "fr": {
          "title": "Donnez un style responsive à vos boutons radio",
          "description": [
            "Vous pouvez utiliser la classe Bootstrap <code>col-xs-*</code> sur des éléments <code>form</code>. Comme ça, nos boutons radio serons disposés régulierement dans la page, quelle que soit la largeur de l'écran.",
            "Nichez tous vous boutons radio dans un élément <code>&#60;div class=\"row\"&#62;</code>. Ensuite, nichezchacun d'entre eux dans un élément <code>&#60;div class=\"col-xs-6\"&#62;</code>"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-8\">",
            "      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "    </div>",
            "  </div>",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>",
            "    </div>",
            "  </div>",
            "  <p>Things cats <span class=\"text-danger\">love:</span></p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aeda08845",
      "title": "Responsively Style Checkboxes",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css",
          "raw": true
        }
      ],
      "description": [
        "You can use Bootstrap's <code>col-xs-*</code> classes on <code>form</code> elements, too! This way, our checkboxes will be evenly spread out across the page, regardless of how wide the screen resolution is.",
        "Nest all three of your checkboxes in a <code>&#60;div class=\"row\"&#62;</code> element. Then nest each of them in a <code>&#60;div class=\"col-xs-4\"&#62;</code> element."
      ],
      "tests": [
        {
          "text": "Nest all of your checkboxes inside one <code>div</code> with the class <code>row</code>.",
          "testString": "assert($(\"div.row:has(input[type=\\\"checkbox\\\"])\").length > 0, 'Nest all of your checkboxes inside one <code>div</code> with the class <code>row</code>.');"
        },
        {
          "text": "Nest each of your checkboxes inside its own <code>div</code> with the class <code>col-xs-4</code>.",
          "testString": "assert($(\"div.col-xs-4:has(input[type=\\\"checkbox\\\"])\").length > 2, 'Nest each of your checkboxes inside its own <code>div</code> with the class <code>col-xs-4</code>.');"
        },
        {
          "text": "Make sure each of your <code>div</code> elements has a closing tag.",
          "testString": "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure each of your <code>div</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Crea casillas de selección con estilo adaptativo",
          "description": [
            "¡Puedes utilizar las clases <code>col-xs-*</code> de Bootstrap en elementos <code>form</code> también! De esta forma, nuestros botones de opción estarán igualmente distribuidos en la página, sin importar qué tan ancha es la resolución de la pantalla.",
            "Anida todas las casillas de selección en un elemento <code>&#60;div class=\"row\"&#62;</code>. Luego, anida cada una de ellas en un elemento <code>&#60;div class=\"col-xs-4\"&#62;</code>."
          ]
        },
        "fr": {
          "title": "Donnez un style responsive à vos checkbox (cases de séléction)",
          "description": [
            "Vous pouvez aussi utiliser la classe Bootstrap <code>col-xs-*</code> sur des éléments <code>form</code>! Comme ça, nos boutons radio serons disposés régulierement dans la page, quelle que soit la largeur de l'écran.",
            "You can use Bootstrap's <code>col-xs-*</code> classes on <code>form</code> elements, too! This way, our checkboxes will be evenly spread out across the page, regardless of how wide the screen resolution is.",
            "Nichez toustes vos checkbox dans un élément <code>&#60;div class=\"row\"&#62;</code>. Ensuite nichez chacun d'entre eux dans un élément <code>&#60;div class=\"col-xs-4\"&#62;</code>"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-8\">",
            "      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "    </div>",
            "  </div>",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>",
            "    </div>",
            "  </div>",
            "  <p>Things cats <span class=\"text-danger\">love:</span></p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <div class=\"row\">",
            "      <div class=\"col-xs-6\">",
            "        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "      </div>",
            "      <div class=\"col-xs-6\">",
            "        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "      </div>",
            "    </div>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aed908845",
      "title": "Style Text Inputs as Form Controls",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css",
          "raw": true
        }
      ],
      "description": [
        "You can add the <code>fa-paper-plane</code> Font Awesome icon by adding <code>&#60;i class=\"fa fa-paper-plane\"&#62;&#60;/i&#62;</code> within your submit <code>button</code> element.",
        "Give your form's text input field a class of <code>form-control</code>. Give your form's submit button the classes <code>btn btn-primary</code>. Also give this button the Font Awesome icon of <code>fa-paper-plane</code>.",
        "All textual <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code> elements with the class <code>.form-control</code> have a width of 100%."
      ],
      "tests": [
        {
          "text": "Give the submit button in your form the classes <code>btn btn-primary</code>.",
          "testString": "assert($(\"button[type=\\\"submit\\\"]\").hasClass(\"btn btn-primary\"), 'Give the submit button in your form the classes <code>btn btn-primary</code>.');"
        },
        {
          "text": "Add a <code>&#60;i class=\"fa fa-paper-plane\"&#62;&#60;/i&#62;</code> within your submit <code>button</code> element.",
          "testString": "assert($(\"button[type=\\\"submit\\\"]:has(i.fa.fa-paper-plane)\").length > 0, 'Add a <code>&#60;i class=\"fa fa-paper-plane\"&#62;&#60;/i&#62;</code> within your submit <code>button</code> element.');"
        },
        {
          "text": "Give the text <code>input</code> in your form the class <code>form-control</code>.",
          "testString": "assert($(\"input[type=\\\"text\\\"]\").hasClass(\"form-control\"), 'Give the text <code>input</code> in your form the class <code>form-control</code>.');"
        },
        {
          "text": "Make sure each of your <code>i</code> elements has a closing tag.",
          "testString": "assert(code.match(/<\\/i>/g) && code.match(/<\\/i/g).length > 3, 'Make sure each of your <code>i</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Estiliza cajas de texto como controles de formulario",
          "description": [
            "Puedes agregar el icono <code>fa-paper-plane</code> de Font Awesome incluyendo <code>&#60;i class=\"fa fa-paper-plane\"&#62;&#60;/i&#62;</code> dentro de tu elemento <code>button</code> de envío.",
            "Dale a la entrada de texto de tu formulario la clase <code>form-control</code>. Dale al botón de envío de tu formulario las clases <code>btn btn-primary</code>. También, incluye en ese botón el icono <code>fa-paper-plane</code> de Font Awesome."
          ]
        },
        "fr": {
          "title": "Donnez un style similaire au contrôles de formulaires à des zones de texte",
          "description": [
            "Vous pouvez ajouter l'icone Font Awesome <code>fa-paper-plane</code> en ajoutant <code>&#60;i class=\"fa fa-paper-plane\"&#62;&#60;/i&#62;</code> à l'intérieur de votre <code>button</code> de soumission du formulaire.",
            "Donnez aux entrées texte de votre formulaire une classe <code>form-control</code>. Donnez à votre bouton de soumission de formulaire les classes <code>btn btn-primary</code>. Donnez lui aussi un icone Font Awesome <code>fa-paper-plane</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-8\">",
            "      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "    </div>",
            "  </div>",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>",
            "    </div>",
            "  </div>",
            "  <p>Things cats <span class=\"text-danger\">love:</span></p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <div class=\"row\">",
            "      <div class=\"col-xs-6\">",
            "        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "      </div>",
            "      <div class=\"col-xs-6\">",
            "        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "      </div>",
            "    </div>",
            "    <div class=\"row\">",
            "      <div class=\"col-xs-4\">",
            "        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "      </div>",
            "      <div class=\"col-xs-4\">",
            "        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "      </div>",
            "      <div class=\"col-xs-4\">",
            "        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "      </div>",
            "    </div>",
            "    <input type=\"text\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\">Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aec908845",
      "title": "Line up Form Elements Responsively with Bootstrap",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css",
          "raw": true
        }
      ],
      "description": [
        "Now let's get your form <code>input</code> and your submission <code>button</code> on the same line. We'll do this the same way we have previously: by using a <code>div</code> element with the class <code>row</code>, and other <code>div</code> elements within it using the <code>col-xs-*</code> class.",
        "Nest both your form's text <code>input</code> and submit <code>button</code> within a <code>div</code> with the class <code>row</code>. Nest your form's text <code>input</code> within a div with the class of <code>col-xs-7</code>. Nest your form's submit <code>button</code> in a <code>div</code> with the class <code>col-xs-5</code>.",
        "This is the last challenge we'll do for our Cat Photo App for now. We hope you've enjoyed learning Font Awesome, Bootstrap, and responsive design!"
      ],
      "tests": [
        {
          "text": "Nest your form submission button and text input in a div with class <code>row</code>.",
          "testString": "assert($(\"div.row:has(input[type=\\\"text\\\"])\").length > 0 &&  $(\"div.row:has(button[type=\\\"submit\\\"])\").length > 0, 'Nest your form submission button and text input in a div with class <code>row</code>.');"
        },
        {
          "text": "Nest your form text input in a div with the class <code>col-xs-7</code>.",
          "testString": "assert($(\"div.col-xs-7:has(input[type=\\\"text\\\"])\").length > 0, 'Nest your form text input in a div with the class <code>col-xs-7</code>.');"
        },
        {
          "text": "Nest your form submission button in a div with the class <code>col-xs-5</code>.",
          "testString": "assert($(\"div.col-xs-5:has(button[type=\\\"submit\\\"])\").length > 0, 'Nest your form submission button in a div with the class <code>col-xs-5</code>.');"
        },
        {
          "text": "Make sure each of your <code>div</code> elements has a closing tag.",
          "testString": "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure each of your <code>div</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Alínea elementos de formulario de forma adaptativa con Bootstrap",
          "description": [
            "Ahora vamos a poner el elemento <code>input</code> y el elemento <code>button</code> que dice submit de tu formulario en la misma línea. Lo haremos de la misma forma que lo hicimos anteriormente: usando un elemento <code>div</code> con la clase <code>row</code>, y otros elementos <code>div</code> dentro de ese, usando la clase <code>col-xs-*</code>.",
            "Anida ambos, el elemento <code>input</code> y el elemento <code>button</code> que dice submit de tu formulario dentro de un <code>div</code> con la clase <code>row</code>. Anida el elemento <code>input</code> de tu formulario dentro de un div con cla clase <code>col-xs-7</code>. Anida el elemento <code>button</code> que dice submit de tu formulario en un elemento <code>div</code> con la clase <code>col-xs-5</code>.",
            "¡Este es el último desafío que haremos con nuestra aplicación de fotos de gato por ahora. Esperamos que hayas disfrutado aprender acerca de Font Awesome, Bootstrap y diseño adaptativo!"
          ]
        },
        "fr": {
          "title": "Aligner les éléments de formulaire de façon responsive avec Bootstrap",
          "description": [
            "Maintenant mettons sur la même ligne l'élément <code>input</code> et le <code>button</code> de soumission du formulaire. Nous procéderons de la même façon que précedemment: en utilisant un élément <code>div</code> avec la classe <code>row</code>, et un un autre div à l'intérieur qui aura la classe <code>col-xs-*</code>.",
            "Nichez à la fois l'<code>input</code> texte de votre formulaire et le <code>button</code> de soumission de formulaire à l'intérieur d'un <code>div</code> avec la classe <code>row</code>. Nichez l'<code>input</code> texte du formulaire dans un div ayant la classe <code>col-xs-7</code>. Nichez votre <code>button</code> de soumission de formulaire dans un div ayant la classe <code>col-xs-5</code>.",
            "C'est le dernier challenge qui concerne notre application de photos de chats. Nous espérons que vous avez aimé apprendre Font Awesome, Bootstrap et du design adaptatif!"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  h2 {",
            "    font-family: Lobster, Monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "</style>",
            "",
            "<div class=\"container-fluid\">",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-8\">",
            "      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>",
            "    </div>",
            "  </div>",
            "  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>",
            "    </div>",
            "    <div class=\"col-xs-4\">",
            "      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>",
            "    </div>",
            "  </div>",
            "  <p>Things cats <span class=\"text-danger\">love:</span></p>",
            "  <ul>",
            "    <li>cat nip</li>",
            "    <li>laser pointers</li>",
            "    <li>lasagna</li>",
            "  </ul>",
            "  <p>Top 3 things cats hate:</p>",
            "  <ol>",
            "    <li>flea treatment</li>",
            "    <li>thunder</li>",
            "    <li>other cats</li>",
            "  </ol>",
            "  <form action=\"/submit-cat-photo\">",
            "    <div class=\"row\">",
            "      <div class=\"col-xs-6\">",
            "        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>",
            "      </div>",
            "      <div class=\"col-xs-6\">",
            "        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>",
            "      </div>",
            "    </div>",
            "    <div class=\"row\">",
            "      <div class=\"col-xs-4\">",
            "        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>",
            "      </div>",
            "      <div class=\"col-xs-4\">",
            "        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>",
            "      </div>",
            "      <div class=\"col-xs-4\">",
            "        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>",
            "      </div>",
            "    </div>",
            "    <input type=\"text\" class=\"form-control\" placeholder=\"cat photo URL\" required>",
            "    <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-paper-plane\"></i> Submit</button>",
            "  </form>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aec908846",
      "title": "Create a Bootstrap Headline",
      "description": [
        "Now let's build something from scratch to practice our HTML, CSS and Bootstrap skills.",
        "We'll build a jQuery playground, which we'll soon put to use in our jQuery challenges.",
        "To start with, create an <code>h3</code> element, with the text <code>jQuery Playground</code>.",
        "Color your <code>h3</code> element with the <code>text-primary</code> Bootstrap class, and center it with the <code>text-center</code> Bootstrap class."
      ],
      "tests": [
        {
          "text": "Add a <code>h3</code> element to your page.",
          "testString": "assert($(\"h3\") && $(\"h3\").length > 0, 'Add a <code>h3</code> element to your page.');"
        },
        {
          "text": "Make sure your <code>h3</code> element has a closing tag.",
          "testString": "assert(code.match(/<\\/h3>/g) && code.match(/<h3/g) && code.match(/<\\/h3>/g).length === code.match(/<h3/g).length, 'Make sure your <code>h3</code> element has a closing tag.');"
        },
        {
          "text": "Your <code>h3</code> element should be colored by applying the class <code>text-primary</code>",
          "testString": "assert($(\"h3\").hasClass(\"text-primary\"), 'Your <code>h3</code> element should be colored by applying the class <code>text-primary</code>');"
        },
        {
          "text": "Your <code>h3</code> element should be centered by applying the class <code>text-center</code>",
          "testString": "assert($(\"h3\").hasClass(\"text-center\"), 'Your <code>h3</code> element should be centered by applying the class <code>text-center</code>');"
        },
        {
          "text": "Your <code>h3</code> element should have the text <code>jQuery Playground</code>.",
          "testString": "assert.isTrue((/jquery(\\s)+playground/gi).test($(\"h3\").text()), 'Your <code>h3</code> element should have the text <code>jQuery Playground</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Crea un encabezado con Bootstrap",
          "description": [
            "Ahora vamos a comenzar un proyecto desde cero para practicar nuestras habilidades con HTML, CSS y Bootstrap.",
            "Crearemos un área de juego con jQuery, el cual utilizaremos en nuestros desafíos con jQuery.",
            "Para empezar, crea un elemento <code>h3</code>, con el texto <code>jQuery Playground</code>.",
            "Ponle color a tu elemento <code>h3</code> con la clase <code>text-primary</code> de Bootstrap, y céntrala con la clase <code>text-center</code> de Bootstrap."
          ]
        },
        "fr": {
          "title": "Créer un entête Bootstrap",
          "description": [
            "Maintenons, créons queqlque chose à partir de zéro pour pratiquer nos connaissances acquises sur HTML, CSS et Bootstrap.",
            "Nous allons construire un terrain de jeu pour jQuery, que nous allons bientôt utiliser dans les challenges jQuery.",
            "Pour commencer, créez un élément <code>h3</code>, contenant le texte <code>jQuery Playground</code>.",
            "Colorez notre élément <code>h3</code> avec la classe Bootstrap <code>text-primary</code>, et centrez le en utilisant la classe Bootstrap <code>text-center</code>"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aec908746",
      "title": "House our page within a Bootstrap container-fluid div",
      "description": [
        "Now let's make sure all the content on your page is mobile-responsive.",
        "Let's nest your <code>h3</code> element within a <code>div</code> element with the class <code>container-fluid</code>."
      ],
      "tests": [
        {
          "text": "Your <code>div</code> element should have the class <code>container-fluid</code>.",
          "testString": "assert($(\"div\").hasClass(\"container-fluid\"), 'Your <code>div</code> element should have the class <code>container-fluid</code>.');"
        },
        {
          "text": "Make sure each of your <code>div</code> elements has a closing tag.",
          "testString": "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure each of your <code>div</code> elements has a closing tag.');"
        },
        {
          "text": "Nest your <code>h3</code> element inside a <code>div</code> element.",
          "testString": "assert($(\"div\").children(\"h3\").length >0, 'Nest your <code>h3</code> element inside a <code>div</code> element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Aloja la página dentro de un elemento Div contenedor fluido de Bootstrap",
          "description": [
            "Ahora asegurémonos de que todo el contenido en nuestra página pueda adaptarse a dispositivos móviles.",
            "Anida tu elemento <code>h3</code> dentro de un elemento <code>div</code> con la clase <code>container-fluid</code>."
          ]
        },
        "fr": {
          "title": "Loger notre page dans un conteneur Bootstrap Fluid Div",
          "description": [
            "Maintenant, assurons nous que tout le contenu de la page est mobile-responsive (adaptatif au téléphones mobiles).",
            "Nichons notre element <code>h3</code> à l'intérieur d'un élément <code>div</code> ayant la classe <code>container-fluid</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9bec908846",
      "title": "Create a Bootstrap Row",
      "description": [
        "Now we'll create a Bootstrap row for our inline elements.",
        "Create a <code>div</code> element below the <code>h3</code> tag, with a class of <code>row</code>."
      ],
      "tests": [
        {
          "text": "Add a <code>div</code> element below your <code>h3</code> element.",
          "testString": "assert(($(\"div\").length > 1) && ($(\"div.row h3.text-primary\").length == 0) && ($(\"div.row + h3.text-primary\").length == 0) && ($(\"h3.text-primary + div.row\").length > 0), 'Add a <code>div</code> element below your <code>h3</code> element.');"
        },
        {
          "text": "Your <code>div</code> element should have the class <code>row</code>",
          "testString": "assert($(\"div\").hasClass(\"row\"), 'Your <code>div</code> element should have the class <code>row</code>');"
        },
        {
          "text": "Your <code>row div</code> should be nested inside the <code>container-fluid div</code>",
          "testString": "assert($(\"div.container-fluid div.row\").length > 0, 'Your <code>row div</code> should be nested inside the <code>container-fluid div</code>');"
        },
        {
          "text": "Make sure your <code>div</code> element has a closing tag.",
          "testString": "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure your <code>div</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Crea una fila en Bootstrap",
          "description": [
            "Ahora crearemos una fila de Bootstrap con nuestros elementos en línea.",
            "Crea un elemento <code>div</code> debajo de la etiqueta <code>h3</code>, con la clase <code>row</code>."
          ]
        },
        "fr": {
          "title": "Créer une rangée (row) Bootstrap",
          "description": [
            "Maintenant nous allons créer une rangée (row) Bootstrap pour nos éléments inline.",
            "Créez un élément <code>div</code> en dessous de la balise <code>h3</code>, avec une classe <code>row</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "",
            "</div>",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aec908847",
      "title": "Split Your Bootstrap Row",
      "description": [
        "Now that we have a Bootstrap Row, let's split it into two columns to house our elements.",
        "Create two <code>div</code> elements within your row, both with the class <code>col-xs-6</code>."
      ],
      "tests": [
        {
          "text": "Nest two <code>div class=\"col-xs-6\"</code> elements within your <code>div class=\"row\"</code> element.",
          "testString": "assert($(\"div.row > div.col-xs-6\").length > 1, 'Nest two <code>div class=\"col-xs-6\"</code> elements within your <code>div class=\"row\"</code> element.');"
        },
        {
          "text": "Make sure all your <code>div</code> elements have closing tags.",
          "testString": "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure all your <code>div</code> elements have closing tags.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Parte tu fila en Bootstrap",
          "description": [
            "Ahora que tenemos una fila en Bootstrap, vamos a partirla en dos columnas para alojar nuestros elementos.",
            "Crea dos elementos <code>div</code> dentro de tu fila, ambos con la clase <code>col-xs-6</code>."
          ]
        },
        "fr": {
          "title": "Séparer une rangée Bootstrap",
          "description": [
            "Maintenant que nous avons une rangée Bootstrap, séparons la en deux colonnes pour placer nos éléments.",
            "Créez deux éléments <code>div</code>dans votre rangée, chacun ayant la classe <code>col-xs-6</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "",
            "",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aec908848",
      "title": "Create Bootstrap Wells",
      "description": [
        "Bootstrap has a class called <code>well</code> that can create a visual sense of depth for your columns.",
        "Nest one <code>div</code> element with the class <code>well</code> within each of your <code>col-xs-6</code> <code>div</code> elements."
      ],
      "tests": [
        {
          "text": "Add a <code>div</code> element with the class <code>well</code> inside each of your <code>div</code> elements with the class <code>\"col-xs-6\"</code>",
          "testString": "assert($(\"div.col-xs-6\").not(\":has(>div.well)\").length < 1, 'Add a <code>div</code> element with the class <code>well</code> inside each of your <code>div</code> elements with the class <code>\"col-xs-6\"</code>');"
        },
        {
          "text": "Nest both of your <code>div</code> elements with the class <code>\"col-xs-6\"</code> within your <code>div</code> element with the class <code>\"row\"</code>.",
          "testString": "assert($(\"div.row > div.col-xs-6\").length > 1, 'Nest both of your <code>div</code> elements with the class <code>\"col-xs-6\"</code> within your <code>div</code> element with the class <code>\"row\"</code>.');"
        },
        {
          "text": "Make sure all your <code>div</code> elements have closing tags.",
          "testString": "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure all your <code>div</code> elements have closing tags.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Crea pozos en Bootstrap",
          "description": [
            "Bootstrap tiene una clase llamada <code>well</code> que crea una sensación visual de profundidad para tus columnas.",
            "Anida un elemento <code>div</code> con la clase <code>well</code> dentro de cada uno de tus elementos <code>div</code> que tienen la clase <code>col-xs-6</code>."
          ]
        },
        "fr": {
          "title": "Créez un \"puit\" (well) Bootstrap",
          "description": [
            "Bootstrap possède une classe appelée <code>well</code> qui peux créer une certaine profondeur pour vos colonnes.",
            "Nichez un élément <code>div</code> avec la classe <code>well</code> dans chacun de vos éléments <code>col-xs-6</code> <code>div</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aec908849",
      "title": "Add Elements within Your Bootstrap Wells",
      "description": [
        "Now we're several <code>div</code> elements deep on each column of our row. This is as deep as we'll need to go. Now we can add our <code>button</code> elements.",
        "Nest three <code>button</code> elements within each of your <code>well</code> <code>div</code> elements."
      ],
      "tests": [
        {
          "text": "Nest three <code>button</code> elements within each of your <code>div</code> elements with class <code>well</code>.",
          "testString": "assert($(\"div.well:eq(0)\").children(\"button\").length === 3 && $(\"div.well:eq(1)\").children(\"button\").length === 3, 'Nest three <code>button</code> elements within each of your <code>div</code> elements with class <code>well</code>.');"
        },
        {
          "text": "You should have a total of 6 <code>button</code> elements.",
          "testString": "assert($(\"button\") && $(\"button\").length > 5, 'You should have a total of 6 <code>button</code> elements.');"
        },
        {
          "text": "Make sure all your <code>button</code> elements have closing tags.",
          "testString": "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure all your <code>button</code> elements have closing tags.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Agrega elementos dentro de los pozos de Bootstrap",
          "description": [
            "Ahora estamos a una profundidad de varios elementos <code>div</code> dentro de cada columna de nuestra fila. No iremos más profundo que esto. Ahora podemos agregar nuestros elementos <code>button</code>.",
            "Anida tres elementos <code>button</code> dentro de cada uno de tus elementos <code>div</code> que tienen la clase <code>well</code>."
          ]
        },
        "fr": {
          "title": "Ajouter des éléments dans un puit Bootstrap",
          "description": [
            "Nous avons maintenant plusieurs niveaux de profondeur d'éléments <code>div</code> dans chaque colonne de notre rangée. Ceci est suffisant pour le moment. Maintenant nous pouvons ajouter nos éléments <code>button</code>.",
            "Nichez trois éléments <code>button</code> dans chaque élément <code>well</code> <code>div</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <div class=\"well\">",
            "",
            "",
            "",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <div class=\"well\">",
            "",
            "",
            "",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aec908850",
      "title": "Apply the Default Bootstrap Button Style",
      "description": [
        "Bootstrap has another button class called <code>btn-default</code>.",
        "Apply both the <code>btn</code> and <code>btn-default</code> classes to each of your <code>button</code> elements."
      ],
      "tests": [
        {
          "text": "Apply the <code>btn</code> class to each of your <code>button</code> elements.",
          "testString": "assert($(\".btn\").length > 5, 'Apply the <code>btn</code> class to each of your <code>button</code> elements.');"
        },
        {
          "text": "Apply the <code>btn-default</code> class to each of your <code>button</code> elements.",
          "testString": "assert($(\".btn-default\").length > 5, 'Apply the <code>btn-default</code> class to each of your <code>button</code> elements.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Aplica el estilo de botón predeterminado de Bootstrap",
          "description": [
            "Bootstrap tiene otra clase de botón llamada <code>btn-default</code>.",
            "Aplica las clases <code>btn</code> y <code>btn-default</code> a cada uno de tus elementos <code>button</code>."
          ]
        },
        "fr": {
          "title": "Appliquer le style de bouton par défaut de Bootstrap",
          "description": [
            "Bootstrap possède une autre classe de bouton appelée <code>btn-default</code>.",
            "Appliquez les deux classes <code>btn</code> et <code>btn-default</code> à chacun de vos éléments <code>button</code>"
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/apply-the-default-bootstrap-button-style",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <div class=\"well\">",
            "        <button></button>",
            "        <button></button>",
            "        <button></button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <div class=\"well\">",
            "        <button></button>",
            "        <button></button>",
            "        <button></button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aec908852",
      "title": "Create a Class to Target with jQuery Selectors",
      "description": [
        "Not every class needs to have corresponding CSS. Sometimes we create classes just for the purpose of selecting these elements more easily using jQuery.",
        "Give each of your <code>button</code> elements the class <code>target</code>."
      ],
      "tests": [
        {
          "text": "Apply the <code>target</code> class to each of your <code>button</code> elements.",
          "testString": "assert($(\".target\").length > 5, 'Apply the <code>target</code> class to each of your <code>button</code> elements.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Crea una clase para usar con selectores de jQuery",
          "description": [
            "No todas las clases necesitan tener un código CSS correspondiente. A veces creamos clases sólo con el propósito de seleccionar esos elementos más fácilmente usando jQuery.",
            "Dale a cada uno de tus elementos <code>button</code> la clase <code>target</code>."
          ]
        },
        "fr": {
          "title": "Créez une classe à cibler avec les sélécteurs jQuery",
          "description": [
            "Toutes les classes ne nécéssitent pas d'avoir un code CSS qui leur correspondent. Parfois ous créons des classes dans le seul but de pouvoir sélectionner ces éléments plus facilement en utilisant jQuery.",
            "Donnez à chacun de vos éléments <code>button</code> la classe <code>target</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <div class=\"well\">",
            "        <button class=\"btn btn-default\"></button>",
            "        <button class=\"btn btn-default\"></button>",
            "        <button class=\"btn btn-default\"></button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <div class=\"well\">",
            "        <button class=\"btn btn-default\"></button>",
            "        <button class=\"btn btn-default\"></button>",
            "        <button class=\"btn btn-default\"></button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aec908853",
      "title": "Add id Attributes to Bootstrap Elements",
      "description": [
        "Recall that in addition to class attributes, you can give each of your elements an <code>id</code> attribute.",
        "Each id must be unique to a specific element and used only once per page.",
        "Let's give a unique id to each of our <code>div</code> elements of class <code>well</code>.",
        "Remember that you can give an element an id like this:",
        "<code>&#60;div class=\"well\" id=\"center-well\"&#62;</code>",
        "Give the well on the left the id of <code>left-well</code>. Give the well on the right the id of <code>right-well</code>."
      ],
      "tests": [
        {
          "text": "Give your left <code>well</code> the id of <code>left-well</code>.",
          "testString": "assert($(\".col-xs-6\").children(\"#left-well\") && $(\".col-xs-6\").children(\"#left-well\").length > 0, 'Give your left <code>well</code> the id of <code>left-well</code>.');"
        },
        {
          "text": "Give your right <code>well</code> the id of <code>right-well</code>.",
          "testString": "assert($(\".col-xs-6\").children(\"#right-well\") && $(\".col-xs-6\").children(\"#right-well\").length > 0, 'Give your right <code>well</code> the id of <code>right-well</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Asígnales atributos de identificación (id) a tus elementos de Bootstrap",
          "description": [
            "Recuerda que, además de los atributos de clase, también puedes darle a cada uno de tus elementos un atributo <code>id</code>.",
            "Cada id debe ser único para un elemento específico y ser usado solamente una vez por página.",
            "Vamos a darle un id único a cada uno de nuestros elementos <code>div</code> que tienen la clase <code>well</code>.",
            "Recuerda que puedes darle a un elemento un id como el siguiente:",
            "<code>&#60;div class=\"well\" id=\"center-well\"&#62;</code>",
            "Dale al pozo de la izquireda el id <code>left-well</code>. Al pozo de la derecha, dale un id <code>right-well</code>."
          ]
        },
        "fr": {
          "title": "Ajouter des attributs ID à vos éléments Bootstrap",
          "description": [
            "Rappelez vous qu'en plus des attributs classes, vous pouvez donnez à chacun de vos éléments un attribut <code>id</code>.",
            "Chaque id doit être unique pour un élément donné et utilisé une seule fois par page.",
            "Donnons un id unique à chacun de nos éléments <code>div</code> de classe <code>well</code>.",
            "Rappelez vous que vous pouvez donner un id à un élément ainsi :",
            "<code>&#60;div class=\"well\" id=\"center-well\"&#62;</code>",
            "Donnez au puit sur la gauche un id de <code>left-well</code>. Donnez au puit sur la droite un id de <code>right-well</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <div class=\"well\">",
            "        <button class=\"btn btn-default target\"></button>",
            "        <button class=\"btn btn-default target\"></button>",
            "        <button class=\"btn btn-default target\"></button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <div class=\"well\">",
            "        <button class=\"btn btn-default target\"></button>",
            "        <button class=\"btn btn-default target\"></button>",
            "        <button class=\"btn btn-default target\"></button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aec908854",
      "title": "Label Bootstrap Wells",
      "description": [
        "For the sake of clarity, let's label both of our wells with their ids.",
        "Above your left-well, inside its <code>col-xs-6</code> <code>div</code> element, add a <code>h4</code> element with the text <code>#left-well</code>.",
        "Above your right-well, inside its <code>col-xs-6</code> <code>div</code> element, add a <code>h4</code> element with the text <code>#right-well</code>."
      ],
      "tests": [
        {
          "text": "Add an <code>h4</code> element to each of your <code>&#60;div class=\"col-xs-6\"&#62;</code> elements.",
          "testString": "assert($(\".col-xs-6\").children(\"h4\") && $(\".col-xs-6\").children(\"h4\").length > 1, 'Add an <code>h4</code> element to each of your <code>&#60;div class=\"col-xs-6\"&#62;</code> elements.');"
        },
        {
          "text": "One <code>h4</code> element should have the text <code>#left-well</code>.",
          "testString": "assert(new RegExp(\"#left-well\",\"gi\").test($(\"h4\").text()), 'One <code>h4</code> element should have the text <code>#left-well</code>.');"
        },
        {
          "text": "One <code>h4</code> element should have the text <code>#right-well</code>.",
          "testString": "assert(new RegExp(\"#right-well\",\"gi\").test($(\"h4\").text()), 'One <code>h4</code> element should have the text <code>#right-well</code>.');"
        },
        {
          "text": "Make sure all your <code>h4</code> elements have closing tags.",
          "testString": "assert(code.match(/<\\/h4>/g) && code.match(/<h4/g) && code.match(/<\\/h4>/g).length === code.match(/<h4/g).length, 'Make sure all your <code>h4</code> elements have closing tags.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Etiqueta tus pozos de Bootstrap",
          "description": [
            "Para que todo esté más claro, vamos a ponerle a todos nuestros pozos una etiqueta que sea igual a su id.",
            "Sobre tu pozo de la izquierda, dentro de su elemento <code>div</code> que tiene la clase <code>col-xs-6</code>, agrega un elemento <code>h4</code> con el texto <code>#left-well</code>.",
            "Ahora, sobre tu pozo de la derecha, dentro de su elemento <code>div</code> que tiene la clase <code>col-xs-6</code>, agrega un elemento <code>h4</code> con el texto <code>#right-well</code>."
          ]
        },
        "fr": {
          "title": "Donner un nom aux puits Bootstrap",
          "description": [
            "Au nom de la clarté, donnons un nom à nos deux puits en accord avec leur ids",
            "Au dessus de votre puit de gauche, à l'intérieur de ses éléments <code>col-xs-6</code> <code>div</code>,  ajoutez un élément <code>h4</code> ayant le texte <code>#left-well</code>.",
            "Au dessus de votre puit de droite, à l'intérieur de ses éléments <code>col-xs-6</code> <code>div</code>,  ajoutez un élément <code>h4</code> ayant le texte <code>#right-well</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\"></button>",
            "        <button class=\"btn btn-default target\"></button>",
            "        <button class=\"btn btn-default target\"></button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\"></button>",
            "        <button class=\"btn btn-default target\"></button>",
            "        <button class=\"btn btn-default target\"></button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aec908855",
      "title": "Give Each Element a Unique id",
      "description": [
        "We will also want to be able to use jQuery to target each button by its unique id.",
        "Give each of your buttons a unique id, starting with <code>target1</code> and ending with <code>target6</code>.",
        "Make sure that <code>target1</code> to <code>target3</code> are in <code>#left-well</code>, and <code>target4</code> to <code>target6</code> are in <code>#right-well</code>."
      ],
      "tests": [
        {
          "text": "One <code>button</code> element should have the id <code>target1</code>.",
          "testString": "assert($(\"#left-well\").children(\"#target1\") && $(\"#left-well\").children(\"#target1\").length > 0, 'One <code>button</code> element should have the id <code>target1</code>.');"
        },
        {
          "text": "One <code>button</code> element should have the id <code>target2</code>.",
          "testString": "assert($(\"#left-well\").children(\"#target2\") && $(\"#left-well\").children(\"#target2\").length > 0, 'One <code>button</code> element should have the id <code>target2</code>.');"
        },
        {
          "text": "One <code>button</code> element should have the id <code>target3</code>.",
          "testString": "assert($(\"#left-well\").children(\"#target3\") && $(\"#left-well\").children(\"#target3\").length > 0, 'One <code>button</code> element should have the id <code>target3</code>.');"
        },
        {
          "text": "One <code>button</code> element should have the id <code>target4</code>.",
          "testString": "assert($(\"#right-well\").children(\"#target4\") && $(\"#right-well\").children(\"#target4\").length > 0, 'One <code>button</code> element should have the id <code>target4</code>.');"
        },
        {
          "text": "One <code>button</code> element should have the id <code>target5</code>.",
          "testString": "assert($(\"#right-well\").children(\"#target5\") && $(\"#right-well\").children(\"#target5\").length > 0, 'One <code>button</code> element should have the id <code>target5</code>.');"
        },
        {
          "text": "One <code>button</code> element should have the id <code>target6</code>.",
          "testString": "assert($(\"#right-well\").children(\"#target6\") && $(\"#right-well\").children(\"#target6\").length > 0, 'One <code>button</code> element should have the id <code>target6</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Dale a cada elemento un ID único",
          "description": [
            "También quisiéramos referirnos a cada botón por su id utilizando jQuery.",
            "Dale a cada uno de tus botones un id único, comenzando con <code>target1</code> y terminando con <code>target6</code>.",
            "Asegúrate que <code>target1</code> a <code>target3</code> queden en <code>#left-well</code>, mientras que <code>target4</code> a <code>target6</code> queden en <code>#right-well</code>."
          ]
        },
        "fr": {
          "title": "Donner à chaque élément un ID unique",
          "description": [
            "Nous désirerons aussi pouvoir être capable d'utiliser jQuery pour cibler chaque bouton suivant son id unique.",
            "Donnez à chaque bouton un id unique, commençant par <code>target1</code> et finissant par <code>target6</code>.",
            "Assurez vous que <code>target1</code> à <code>target3</code> sont dans le <code>#left-well</code>,  et que <code>target4</code> à <code>target6</code> sont dans le <code>#right-well</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\"></button>",
            "        <button class=\"btn btn-default target\"></button>",
            "        <button class=\"btn btn-default target\"></button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\"></button>",
            "        <button class=\"btn btn-default target\"></button>",
            "        <button class=\"btn btn-default target\"></button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aec908856",
      "title": "Label Bootstrap Buttons",
      "description": [
        "Just like we labeled our wells, we want to label our buttons.",
        "Give each of your <code>button</code> elements text that corresponds to its <code>id</code>'s selector."
      ],
      "tests": [
        {
          "text": "Give your <code>button</code> element with the id <code>target1</code> the text <code>#target1</code>.",
          "testString": "assert(new RegExp(\"#target1\",\"gi\").test($(\"#target1\").text()), 'Give your <code>button</code> element with the id <code>target1</code> the text <code>#target1</code>.');"
        },
        {
          "text": "Give your <code>button</code> element with the id <code>target2</code> the text <code>#target2</code>.",
          "testString": "assert(new RegExp(\"#target2\",\"gi\").test($(\"#target2\").text()), 'Give your <code>button</code> element with the id <code>target2</code> the text <code>#target2</code>.');"
        },
        {
          "text": "Give your <code>button</code> element with the id <code>target3</code> the text <code>#target3</code>.",
          "testString": "assert(new RegExp(\"#target3\",\"gi\").test($(\"#target3\").text()), 'Give your <code>button</code> element with the id <code>target3</code> the text <code>#target3</code>.');"
        },
        {
          "text": "Give your <code>button</code> element with the id <code>target4</code> the text <code>#target4</code>.",
          "testString": "assert(new RegExp(\"#target4\",\"gi\").test($(\"#target4\").text()), 'Give your <code>button</code> element with the id <code>target4</code> the text <code>#target4</code>.');"
        },
        {
          "text": "Give your <code>button</code> element with the id <code>target5</code> the text <code>#target5</code>.",
          "testString": "assert(new RegExp(\"#target5\",\"gi\").test($(\"#target5\").text()), 'Give your <code>button</code> element with the id <code>target5</code> the text <code>#target5</code>.');"
        },
        {
          "text": "Give your <code>button</code> element with the id <code>target6</code> the text <code>#target6</code>.",
          "testString": "assert(new RegExp(\"#target6\",\"gi\").test($(\"#target6\").text()), 'Give your <code>button</code> element with the id <code>target6</code> the text <code>#target6</code>.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Etiqueta los botones con Bootstrap",
          "description": [
            "De la misma forma en que etiquetamos nuestros pozos, ahora vamos a etiquetar nuestros botones.",
            "Dale a cada uno de tus elementos <code>button</code> un texto que corresponda con su <code>id</code>."
          ]
        },
        "fr": {
          "title": "Donnez un nom à vos boutons Bootstrap",
          "description": [
            "De la même façon que nous avons donné un nom à nos puits, nous voulons nommer nos boutons.",
            "Donnez à chaque élément <code>button</code> un texte qui corresponde à son <code>id</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\"></button>",
            "        <button class=\"btn btn-default target\" id=\"target2\"></button>",
            "        <button class=\"btn btn-default target\" id=\"target3\"></button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\"></button>",
            "        <button class=\"btn btn-default target\" id=\"target5\"></button>",
            "        <button class=\"btn btn-default target\" id=\"target6\"></button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aec908857",
      "title": "Use Comments to Clarify Code",
      "description": [
        "When we start using jQuery, we will modify HTML elements without needing to actually change them in HTML.",
        "Let's make sure that everyone knows they shouldn't actually modify any of this code directly.",
        "Remember that you can start a comment with <code>&#60;!--</code> and end a comment with <code>--&#62;</code>",
        "Add a comment at the top of your HTML that says <code>Only change code above this line.</code>"
      ],
      "tests": [
        {
          "text": "Start a comment with <code>&#60;!--</code> at the top of your HTML.",
          "testString": "assert(code.match(/^\\s*<!--/), 'Start a comment with <code>&#60;!--</code> at the top of your HTML.');"
        },
        {
          "text": "Your comment should have the text <code>Only change code above this line</code>.",
          "testString": "assert(code.match(/<!--(?!(>|->|.*-->.*this line))\\s*.*this line.*\\s*-->/gi), 'Your comment should have the text <code>Only change code above this line</code>.');"
        },
        {
          "text": "Be sure to close your comment with <code>--&#62;</code>.",
          "testString": "assert(code.match(/-->.*\\n+.+/g), 'Be sure to close your comment with <code>--&#62;</code>.');"
        },
        {
          "text": "You should have the same number of comment openers and closers.",
          "testString": "assert(code.match(/<!--/g).length === code.match(/-->/g).length, 'You should have the same number of comment openers and closers.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "es": {
          "title": "Usa elementos para explicar tu código",
          "description": [
            "Cuando comencemos a usar jQuery, modificarmemos los elementos HTML sin necesidad de hacer cambios reales en el código HTML.",
            "Vamos a asegurar que cualquier persona sepa que no debe modificar nada en este código directamente.",
            "Recuerda que puedes iniciar un comentario usando <code>&#60;!--</code> y terminarlo usando <code>--&#62;</code>",
            "Agrega un comentario al inicio de tu código HTML que diga <code>Only change code above this line.</code>"
          ]
        },
        "fr": {
          "title": "Utiliser des commentaires pour clarifier son code",
          "description": [
            "Quand nous commencerons à utiliser jQuery, nous modifierons les éléments HTML sans avoir besoin de les changer directement dans le fichier HTML.",
            "Assurons nous que tout le monde sache qu'ils ne devraient pas modifier quoi que ce soit dans le code HTML.",
            "Rappelez vous que vous pouvez commencer un commentaire avec <code>&#60;!--</code> et le finir avec <code>--&#62;</code>",
            "Ajoutez un commentaire en haut de l'HTML qui annonce <code>Only change code above this line.</code> (Changez seulement le code au dessus de cette ligne.)"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bd7123c9c441eddfaeb4bdef",
      "title": "Comment Your JavaScript Code",
      "description": [
        "Comments are lines of code that JavaScript will intentionally ignore. Comments are a great way to leave notes to yourself and to other people who will later need to figure out what that code does.",
        "There are two ways to write comments in JavaScript:",
        "Using <code>//</code> will tell JavaScript to ignore the remainder of the text on the current line:",
        "<blockquote>// This is an in-line comment.</blockquote>",
        "You can make a multi-line comment beginning with <code>/*</code> and ending with <code>*/</code>:",
        "<blockquote>/* This is a<br>multi-line comment */</blockquote>",
        "<strong>Best Practice</strong><br>As you write code, you should regularly add comments to clarify the function of parts of your code. Good commenting can help communicate the intent of your code&mdash;both for others <em>and</em> for your future self.",
        "<hr>",
        "Try creating one of each type of comment."
      ],
      "solutions": [
        "// Fake Comment\n/* Another Comment */"
      ],
      "tests": [
        {
          "text": "Create a <code>//</code> style comment that contains at least five letters.",
          "testString": "assert(code.match(/(\\/\\/)...../g), 'Create a <code>//</code> style comment that contains at least five letters.');"
        },
        {
          "text": "Create a <code>/* */</code> style comment that contains at least five letters.",
          "testString": "assert(code.match(/(\\/\\*)([^\\/]{5,})(?=\\*\\/)/gm), 'Create a <code>/* */</code> style comment that contains at least five letters.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Agrega comentarios a tu código JavaScript",
          "description": [
            "Los comentarios son líneas de código que el computador ignorará intencionalmente. Los comentarios son una gran forma de dejarte notas a ti mismo y a otras personas que luego tendrán que averiguar lo que hace que el código. ",
            "Vamos a echar un vistazo a las dos maneras en las que puedes agregar tus comentarios en JavaScript.",
            "El comentario de doble barra comentará el resto del texto en la línea donde se ubica:",
            "<code>// Este es un comentario.</code>",
            "El comentario de barra-estrella-estrella-barra, comentará todo lo que haya entre los caracteres <code>/*</code> y <code>*/</code>:",
            "<code>/* Este es también un comentario */</code>",
            "Trata de crear uno de cada uno."
          ]
        },
        "fr": {
          "title": "Commentez votre code JavaScript",
          "description": [
            "Les commentaires sont des lignes de code que JavaScript va intentionnellement ignorer. Les commentaires sont un bon moyen de laisser des notes à votre intention ou pour d'autres personnes qui devront comprendre ce que fait votre code.",
            "Il y a deux façons d'écrire des commentaires en JavaScript.",
            "Utiliser <code>//</code> indiquera à JavaScript d'ignorer le reste du texte sur cette même ligne:",
            "<code>// Voici un commentaire sur une ligne.</code>",
            "Vous pouvez commenter plusieurs lignes en commençant par <code>/*</code> et en finissant par <code>*/</code>:",
            "<code>/*Voici un commentaire <br>   sur plusieurs lignes */</code>",
            "<strong>Conseils</strong>",
            "Lorsque vous écrivez votre code, vous devriez ajouter régulièrement des commentaires pour clarifier l'objectif de certaines parties de votre code. De bons commentaires peuvent aider les autres <em>et</em> vous-même à mieux comprendre votre code.",
            "<hr>",
            "Essayez de créer un commentaire de chaque type."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bd7123c9c443eddfaeb5bdef",
      "title": "Declare JavaScript Variables",
      "description": [
        "In computer science, <dfn>data</dfn> is anything that is meaningful to the computer. JavaScript provides seven different <dfn>data types</dfn> which are <code>undefined</code>, <code>null</code>, <code>boolean</code>, <code>string</code>, <code>symbol</code>, <code>number</code>, and <code>object</code>.",
        "For example, computers distinguish between numbers, such as the number <code>12</code>, and <code>strings</code>, such as <code>\"12\"</code>, <code>\"dog\"</code>, or <code>\"123 cats\"</code>, which are collections of characters. Computers can perform mathematical operations on a number, but not on a string.",
        "<dfn>Variables</dfn> allow computers to store and manipulate data in a dynamic fashion. They do this by using a \"label\" to point to the data rather than using the data itself. Any of the seven data types may be stored in a variable.",
        "<code>Variables</code> are similar to the x and y variables you use in mathematics, which means they're a simple name to represent the data we want to refer to. Computer <code>variables</code> differ from mathematical variables in that they can store different values at different times.",
        "We tell JavaScript to create or <dfn>declare</dfn> a variable by putting the keyword <code>var</code> in front of it, like so:",
        "<blockquote>var ourName;</blockquote>",
        "creates a <code>variable</code> called <code>ourName</code>. In JavaScript we end statements with semicolons.",
        "<code>Variable</code> names can be made up of numbers, letters, and <code>$</code> or <code>_</code>, but may not contain spaces or start with a number.",
        "<hr>",
        "Use the <code>var</code> keyword to create a variable called <code>myName</code>.",
        "<strong>Hint</strong><br>Look at the <code>ourName</code> example if you get stuck."
      ],
      "solutions": [
        "var myName;"
      ],
      "tests": [
        {
          "text": "You should declare <code>myName</code> with the <code>var</code> keyword, ending with a semicolon",
          "testString": "assert(/var\\s+myName\\s*;/.test(code), 'You should declare <code>myName</code> with the <code>var</code> keyword, ending with a semicolon');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Declara variables en JavaScript",
          "description": [
            "Cuando almacenamos datos en una <code>estructura de datos</code>, la llamamos una <code>variable</code>. Estas variables no son diferentes de las variables x e y que utilizas en matemáticas. ",
            "Vamos a crear nuestra primera variable y a llamarla \"myName\".",
            "Te darás cuenta que en <code>myName</code>, no usamos un espacio, y que la \" N\"se escribe con mayúscula. Las variables en JavaScript se escriben con <code>capitalización camello (camel case)</code>. Un ejemplo de capitalización camello: capitalizacionCamello.",
            "Ahora, utiliza la palabra clave <code>var</code> para crear una variable llamada <code>myName</code>. Establecele como valor tu nombre, entre comillas dobles. ",
            "Mira el ejemplo con <code>ourName</code> si te quedas atascado."
          ]
        },
        "fr": {
          "title": "Déclarer des variables en JavaScript",
          "description": [
            "En informatique, une <dfn>donnée</dfn> comporte tout ce qui peut avoir du sens pour l'ordinateur. JavaScript dispose de sept <code>types de données</code> différents qui sont <code>undefined</code>, <code>null</code>, <code>boolean</code>, <code>string</code>, <code>symbol</code>, <code>number</code> et <code>object</code>.",
            "Par exemple, les ordinateurs font la différence entre les nombres tel que <code>12</code> et les <code>strings</code>, tels que <code>\"12\"</code>, <code>\"dog\"</code>, ou <code>\"123 cats\"</code>, qui sont des collections de caractères. Les ordinateurs peuvent faire des opérations mathématiques sur un nombre, mais pas sur une chaîne de caractères.",
            "Les <dfn>variables</dfn> permettent aux ordinateurs de stocker et manipuler les données de façon dynamique. Ils font cela en utilisant un <blockquote>label</blockquote> qui réfère à la donnée plutôt que d'utiliser la donnée elle-même. Les sept types de données peuvent être stockés dans une variable.",
            "Les <code>variables</code> sont similaires aux x et y que vous utilisez en mathématiques, ce qui veut dire que ce sont des noms simples qui représentent les données que l'on veut utiliser. Les <code>variables</code> de l'ordinateur diffèrent de celles des mathématiques car elles peuvent stocker différentes valeurs à différents moments.",
            "On peut dire à JavaScript de créer ou <code>déclarer</code> une variable en la précédant du mot-clé <code>var</code>, comme ceci:",
            "<code>var notreNom</code>;",
            "crée une <code>variable</code> appelée <code>notreNom</code>.On termine nos expressions avec un point virgule en JavaScript.",
            "Le nom d'une <code>variable</code> peut être composé de nombres, lettres et <code>$</code> ou <code>_</code>, mais ne peut contenir d'espaces ou commencer par un nombre.",
            "<hr>",
            "Utilisez le mot-clé <code>var</code> pour créer une variable appelée <code>monNom</code>",
            "<strong>Conseil</strong><br>Regardez à l'exemple de <code>notreNom</code> si vous vous êtes bloqué."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourName;",
            "",
            "// Declare myName below this line",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myName !== \"undefined\"){(function(v){return v;})(myName);}"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244a8",
      "title": "Storing Values with the Assignment Operator",
      "description": [
        "In JavaScript, you can store a value in a variable with the <dfn>assignment</dfn> operator.",
        "<code>myVariable = 5;</code>",
        "This assigns the <code>Number</code> value <code>5</code> to <code>myVariable</code>.",
        "Assignment always goes from right to left. Everything to the right of the <code>=</code> operator is resolved before the value is assigned to the variable to the left of the operator.",
        "<blockquote>myVar = 5;<br>myNum = myVar;</blockquote>",
        "This assigns <code>5</code> to <code>myVar</code> and then resolves <code>myVar</code> to <code>5</code>  again and assigns it to <code>myNum</code>.",
        "<hr>",
        "Assign the value <code>7</code> to variable <code>a</code>.",
        "Assign the contents of <code>a</code> to variable <code>b</code>."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var a;\nvar b = 2;\na = 7;\nb = a;"
      ],
      "tests": [
        {
          "text": "Do not change code above the line",
          "testString": "assert(/var a;/.test(code) && /var b = 2;/.test(code), 'Do not change code above the line');"
        },
        {
          "text": "<code>a</code> should have a value of 7",
          "testString": "assert(typeof a === 'number' && a === 7, '<code>a</code> should have a value of 7');"
        },
        {
          "text": "<code>b</code> should have a value of 7",
          "testString": "assert(typeof b === 'number' && b === 7, '<code>b</code> should have a value of 7');"
        },
        {
          "text": "<code>a</code> should be assigned to <code>b</code> with <code>=</code>",
          "testString": "assert(/b\\s*=\\s*a\\s*;/g.test(code), '<code>a</code> should be assigned to <code>b</code> with <code>=</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Almacenar valores con el operador igual",
          "description": [
            "En JavaScript, puedes almacenar un valor en una variable con la <dfn>asignación</dfn> o con el operador <code>igual</code> (<code>=</code>).",
            "<code>miVariable = 5;</code>",
            "Asigna el valor <code>númerico</code> de <code>5</code> a <code>miVariable</code>.",
            "La asignación siempre va de derecha a izquierda. Todo a la derecha del operador <code>=</code> es resuelto antes que el valor es asignado a la variable a la izquierda del operador.",
            "<blockquote>miVar = 5;<br>miNum = miVar;</blockquote>",
            "Asigna <code>5</code> a <code>miVar</code> y entonces resuelve <code>miVar</code> a <code>5</code> otra vez y asigna esta a <code>miNum</code>.",
            "<h4>Instrucciones</h4>",
            "Asigna el valor <code>7</code> a la variable <code>a</code>.",
            "Asigna el contenido de <code>a</code> a la variable <code>b</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "var a;",
            "var b = 2;",
            "",
            "// Only change code below this line",
            ""
          ],
          "head": [
            "if (typeof a != 'undefined') {",
            "  a = undefined;",
            "}",
            "if (typeof b != 'undefined') {",
            "  b = undefined;",
            "}"
          ],
          "tail": [
            "(function(a,b){return \"a = \" + a + \", b = \" + b;})(a,b);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244a9",
      "title": "Initializing Variables with the Assignment Operator",
      "description": [
        "It is common to <dfn>initialize</dfn> a variable to an initial value in the same line as it is declared.",
        "<code>var myVar = 0;</code>",
        "Creates a new variable called <code>myVar</code> and assigns it an initial value of <code>0</code>.",
        "<hr>",
        "Define a variable <code>a</code> with <code>var</code> and initialize it to a value of <code>9</code>."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var a = 9;"
      ],
      "tests": [
        {
          "text": "Initialize <code>a</code> to a value of <code>9</code>",
          "testString": "assert(/var\\s+a\\s*=\\s*9\\s*/.test(code), 'Initialize <code>a</code> to a value of <code>9</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Inicializar variables con el operador igual",
          "description": [
            "Es común <dfn>inicializar</dfn> una variable a un valor inicial en la misma línea que es declarada.",
            "<code>var miVar = 0;</code>",
            "Crea una nueva variable llamada <code>miVar</code> y le asigna un valor inicial de <code>0</code>.",
            "<h4>Instrucciones</h4>",
            "Define una variable <code>a</code> con <code>var</code> e inicializala a un valor de <code>9</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourVar = 19;",
            "",
            "// Only change code below this line",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof a !== 'undefined') {(function(a){return \"a = \" + a;})(a);} else { (function() {return 'a is undefined';})(); }"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244aa",
      "title": "Understanding Uninitialized Variables",
      "description": [
        "When JavaScript variables are declared, they have an initial value of <code>undefined</code>. If you do a mathematical operation on an <code>undefined</code> variable your result will be <code>NaN</code> which means <dfn>\"Not a Number\"</dfn>. If you concatenate a string with an <code>undefined</code> variable, you will get a literal <dfn>string</dfn> of <code>\"undefined\"</code>.",
        "<hr>",
        "Initialize the three variables <code>a</code>, <code>b</code>, and <code>c</code> with <code>5</code>, <code>10</code>, and <code>\"I am a\"</code> respectively so that they will not be <code>undefined</code>."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var a = 5;\nvar b = 10;\nvar c = \"I am a\";\na = a + 1;\nb = b + 5;\nc = c + \" String!\";"
      ],
      "tests": [
        {
          "text": "<code>a</code> should be defined and evaluated to have the value of <code>6</code>",
          "testString": "assert(typeof a === 'number' && a === 6, '<code>a</code> should be defined and evaluated to have the value of <code>6</code>');"
        },
        {
          "text": "<code>b</code> should be defined and evaluated to have the value of <code>15</code>",
          "testString": "assert(typeof b === 'number' && b === 15, '<code>b</code> should be defined and evaluated to have the value of <code>15</code>');"
        },
        {
          "text": "<code>c</code> should not contain <code>undefined</code> and should have a value of \"I am a String!\"",
          "testString": "assert(!/undefined/.test(c) && c === \"I am a String!\", '<code>c</code> should not contain <code>undefined</code> and should have a value of \"I am a String!\"');"
        },
        {
          "text": "Do not change code below the line",
          "testString": "assert(/a = a \\+ 1;/.test(code) && /b = b \\+ 5;/.test(code) && /c = c \\+ \" String!\";/.test(code), 'Do not change code below the line');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Entendiendo variables sin inicializar",
          "description": [
            "Cuando las variables de JavaScript son declaradas, ellas tienen un valor inicial de <code>undefined</code>. Si tu haces una operación matematica sobre una variable <code>undefined</code> tu resultado sera <code>NaN</code> el cual significa <dfn>\"Not a Number\"</dfn> es decir \"No es un número\". Si tu concatenas una cadena con una variable <code>undefined</code>, vas a obtener una <dfn>cadena</dfn> literal de <code>\"undefined\"</code>.",
            "<h4>Instrucciones</h4>",
            "Inicializa las tres variables <code>a</code>, <code>b</code>, y <code>c</code> con <code>5</code>, <code>10</code>, y <code>\"I am a\"</code> respectivamente de manera que no sean <code>undefined</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Initialize these three variables",
            "var a;",
            "var b;",
            "var c;",
            "",
            "// Do not change code below this line",
            "",
            "a = a + 1;",
            "b = b + 5;",
            "c = c + \" String!\";",
            ""
          ],
          "head": [],
          "tail": [
            "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = '\" + c + \"'\"; })(a,b,c);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ab",
      "title": "Understanding Case Sensitivity in Variables",
      "description": [
        "In JavaScript all variables and function names are case sensitive. This means that capitalization matters.",
        "<code>MYVAR</code> is not the same as <code>MyVar</code> nor <code>myvar</code>. It is possible to have multiple distinct variables with the same name but different casing. It is strongly recommended that for the sake of clarity, you <em>do not</em> use this language feature.",
        "<h4>Best Practice</h4>",
        "Write variable names in JavaScript in <dfn>camelCase</dfn>. In <dfn>camelCase</dfn>, multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized.",
        "<strong>Examples:</strong>",
        "<blockquote>var someVariable;<br>var anotherVariableName;<br>var thisVariableNameIsSoLong;</blockquote>",
        "<hr>",
        "Modify the existing declarations and assignments so their names use <dfn>camelCase</dfn>.<br>Do not create any new variables."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var studlyCapVar;\nvar properCamelCase;\nvar titleCaseOver;\n\nstudlyCapVar = 10;\nproperCamelCase = \"A String\";\ntitleCaseOver = 9000;"
      ],
      "tests": [
        {
          "text": "<code>studlyCapVar</code> is defined and has a value of <code>10</code>",
          "testString": "assert(typeof studlyCapVar !== 'undefined' && studlyCapVar === 10, '<code>studlyCapVar</code> is defined and has a value of <code>10</code>');"
        },
        {
          "text": "<code>properCamelCase</code> is defined and has a value of <code>\"A String\"</code>",
          "testString": "assert(typeof properCamelCase !== 'undefined' && properCamelCase === \"A String\", '<code>properCamelCase</code> is defined and has a value of <code>\"A String\"</code>');"
        },
        {
          "text": "<code>titleCaseOver</code> is defined and has a value of <code>9000</code>",
          "testString": "assert(typeof titleCaseOver !== 'undefined' && titleCaseOver === 9000, '<code>titleCaseOver</code> is defined and has a value of <code>9000</code>');"
        },
        {
          "text": "<code>studlyCapVar</code> should use camelCase in both declaration and assignment sections.",
          "testString": "assert(code.match(/studlyCapVar/g).length === 2, '<code>studlyCapVar</code> should use camelCase in both declaration and assignment sections.');"
        },
        {
          "text": "<code>properCamelCase</code> should use camelCase in both declaration and assignment sections.",
          "testString": "assert(code.match(/properCamelCase/g).length === 2, '<code>properCamelCase</code> should use camelCase in both declaration and assignment sections.');"
        },
        {
          "text": "<code>titleCaseOver</code> should use camelCase in both declaration and assignment sections.",
          "testString": "assert(code.match(/titleCaseOver/g).length === 2, '<code>titleCaseOver</code> should use camelCase in both declaration and assignment sections.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Entendiendo la distinción en variables",
          "description": [
            "En JavaScript todas las variables y nombres de funciones distinguen entre mayúsculas y minúsculas. Esto significa que la capitalización importa.",
            "<code>MIVAR</code> no es lo mismo que <code>MiVar</code> o <code>mivar</code>. Esto hace posible tener múltiples variables distintas con el mismo nombre pero de diferente manera. Es fuertemente recomendado por el bien de la claridad, que tu <em>no</em> uses esta característica del lenguaje.",
            "<h4>Mejor Práctica</h4>",
            "Escribe nombres de variables en JavaScript en <dfn>capitalizaciónCamello (camelCase)</dfn>. En <dfn>capitalizaciónCamello</dfn>, los nombres de variables con múltiples palabras tienen la primera palabra en minúsculas y la primera letra de cada palabra subsecuente es capitalizada.",
            "<strong>Ejemplos:</strong>",
            "<blockquote>var algunaVariable;<br>var otraVariable;<br>var esteNombreDeVariableEsMuyLargo;</blockquote>",
            "<h4>Instrucciones</h4>",
            "Repara las declaraciones y asignaciones de variables de manera que sus nombres usen <dfn>capitalizaciónCamello</dfn>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Declarations",
            "var StUdLyCapVaR;",
            "var properCamelCase;",
            "var TitleCaseOver;",
            "",
            "// Assignments",
            "STUDLYCAPVAR = 10;",
            "PRoperCAmelCAse = \"A String\";",
            "tITLEcASEoVER = 9000;"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb3bdef",
      "title": "Add Two Numbers with JavaScript",
      "description": [
        "<code>Number</code> is a data type in JavaScript which represents numeric data.",
        "Now let's try to add two numbers using JavaScript.",
        "JavaScript uses the <code>+</code> symbol as addition operation when placed between two numbers.",
        "<strong>Example</strong>",
        "<blockquote>myVar = 5 + 10; // assigned 15</blockquote>",
        "<hr>",
        "Change the <code>0</code> so that sum will equal <code>20</code>."
      ],
      "solutions": [
        "var sum = 10 + 10;"
      ],
      "tests": [
        {
          "text": "<code>sum</code> should equal <code>20</code>",
          "testString": "assert(sum === 20, '<code>sum</code> should equal <code>20</code>');"
        },
        {
          "text": "Use the <code>+</code> operator",
          "testString": "assert(/\\+/.test(code), 'Use the <code>+</code> operator');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Suma dos números con JavaScript",
          "description": [
            "Intentemos sumar dos números con JavaScript.",
            "JavaScript utiliza el símbolo <code>+</code> para la adición.",
            "Cambie el <code>0</code> para que la suma seá igual a <code>20</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var sum = 10 + 0;",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return 'sum = '+z;})(sum);"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb4bdef",
      "title": "Subtract One Number from Another with JavaScript",
      "description": [
        "We can also subtract one number from another.",
        "JavaScript uses the <code>-</code> symbol for subtraction.",
        "",
        "<strong>Example</strong>",
        "<blockquote>myVar = 12 - 6; // assigned 6</blockquote>",
        "",
        "<hr>",
        "Change the <code>0</code> so the difference is <code>12</code>."
      ],
      "solutions": [
        "var difference = 45 - 33;"
      ],
      "tests": [
        {
          "text": "Make the variable <code>difference</code> equal 12.",
          "testString": "assert(difference === 12, 'Make the variable <code>difference</code> equal 12.');"
        },
        {
          "text": "Only subtract one number from 45.",
          "testString": "assert(/var\\s*difference\\s*=\\s*45\\s*-\\s*[0-9]*;(?!\\s*[a-zA-Z0-9]+)/.test(code),'Only subtract one number from 45.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Resta un número de otro con JavaScript",
          "description": [
            "También podemos restar un número de otro.",
            "JavaScript utiliza el símbolo <code>-</code> de sustracción",
            "Cambia el <code>0</code> para que la diferencia sea <code>12</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var difference = 45 - 0;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return 'difference = '+z;})(difference);"
          ]
        }
      }
    },
    {
      "id": "cf1231c1c11feddfaeb5bdef",
      "title": "Multiply Two Numbers with JavaScript",
      "description": [
        "We can also multiply one number by another.",
        "JavaScript uses the <code>*</code> symbol for multiplication of two numbers.",
        "",
        "<strong>Example</strong>",
        "<blockquote>myVar = 13 * 13; // assigned 169</blockquote>",
        "",
        "<hr>",
        "Change the <code>0</code> so that product will equal <code>80</code>."
      ],
      "solutions": [
        "var product = 8 * 10;"
      ],
      "tests": [
        {
          "text": "Make the variable <code>product</code> equal 80",
          "testString": "assert(product === 80,'Make the variable <code>product</code> equal 80');"
        },
        {
          "text": "Use the <code>*</code> operator",
          "testString": "assert(/\\*/.test(code), 'Use the <code>*</code> operator');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Multiplica dos números con JavaScript",
          "description": [
            "También podemos multiplicar un número por otro.",
            "JavaScript utiliza el símbolo <code>*</code> de la multiplicación.",
            "Cambie el <code>0</code> para que el producto sea igual a <code>80</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var product = 8 * 0;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return 'product = '+z;})(product);"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb6bdef",
      "title": "Divide One Number by Another with JavaScript",
      "description": [
        "We can also divide one number by another.",
        "JavaScript uses the <code>/</code> symbol for division.",
        "",
        "<strong>Example</strong>",
        "<blockquote>myVar = 16 / 2; // assigned 8</blockquote>",
        "",
        "<hr>",
        "Change the <code>0</code> so that the <code>quotient</code> is equal to <code>2</code>."
      ],
      "solutions": [
        "var quotient = 66 / 33;"
      ],
      "tests": [
        {
          "text": "Make the variable <code>quotient</code> equal to 2.",
          "testString": "assert(quotient === 2, 'Make the variable <code>quotient</code> equal to 2.');"
        },
        {
          "text": "Use the <code>/</code> operator",
          "testString": "assert(/\\d+\\s*\\/\\s*\\d+/.test(code), 'Use the <code>/</code> operator');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Divide un número por otro con JavaScript",
          "description": [
            "También podemos dividir un número por otro.",
            "JavaScript utiliza el símbolo <code>/</code> para dividir.",
            "Cambia el <code>0</code> para que el cociente sea igual a <code>2</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var quotient = 66 / 0;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return 'quotient = '+z;})(quotient);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ac",
      "title": "Increment a Number with JavaScript",
      "description": [
        "You can easily <dfn>increment</dfn> or add one to a variable with the <code>++</code> operator.",
        "<code>i++;</code>",
        "is the equivalent of",
        "<code>i = i + 1;</code>",
        "<strong>Note</strong><br>The entire line becomes <code>i++;</code>, eliminating the need for the equal sign.",
        "<hr>",
        "Change the code to use the <code>++</code> operator on <code>myVar</code>.",
        "<strong>Hint</strong><br>Learn more about <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment_()\" target=\"_blank\">Arithmetic operators - Increment (++)</a>."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myVar = 87;\nmyVar++;"
      ],
      "tests": [
        {
          "text": "<code>myVar</code> should equal <code>88</code>",
          "testString": "assert(myVar === 88, '<code>myVar</code> should equal <code>88</code>');"
        },
        {
          "text": "<code>myVar = myVar + 1;</code> should be changed",
          "testString": "assert(/var\\s*myVar\\s*=\\s*87;\\s*\\/*.*\\s*myVar\\+\\+;/.test(code), '<code>myVar = myVar + 1;</code> should be changed');"
        },
        {
          "text": "Use the <code>++</code> operator",
          "testString": "assert(/[+]{2}\\s*myVar|myVar\\s*[+]{2}/.test(code), 'Use the <code>++</code> operator');"
        },
        {
          "text": "Do not change code above the line",
          "testString": "assert(/var myVar = 87;/.test(code), 'Do not change code above the line');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Incrementa un número con JavaScript",
          "description": [
            "Tu puedes fácilmente <dfn>incrementar</dfn> o agregar uno a una variable con el operador <code>++</code>.",
            "<code>i++</code>",
            "es el equivalente de",
            "<code>i = i + 1;</code>",
            "<strong>Nota</strong><br>Toda la línea equivale a <code>i++</code>, sin necesidad del signo igual.",
            "<h4>Instrucciones</h4>",
            "Cambia el código para usar el operador <code>++</code> sobre <code>myVar</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var myVar = 87;",
            "",
            "// Only change code below this line",
            "myVar = myVar + 1;",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return 'myVar = ' + z;})(myVar);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ad",
      "title": "Decrement a Number with JavaScript",
      "description": [
        "You can easily <dfn>decrement</dfn> or decrease a variable by one with the <code>--</code> operator.",
        "<code>i--;</code>",
        "is the equivalent of",
        "<code>i = i - 1;</code>",
        "<strong>Note</strong><br>The entire line becomes <code>i--;</code>, eliminating the need for the equal sign.",
        "<hr>",
        "Change the code to use the <code>--</code> operator on <code>myVar</code>."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myVar = 11;\nmyVar--;"
      ],
      "tests": [
        {
          "text": "<code>myVar</code> should equal <code>10</code>",
          "testString": "assert(myVar === 10, '<code>myVar</code> should equal <code>10</code>');"
        },
        {
          "text": "<code>myVar = myVar - 1;</code> should be changed",
          "testString": "assert(/var\\s*myVar\\s*=\\s*11;\\s*\\/*.*\\s*myVar--;/.test(code), '<code>myVar = myVar - 1;</code> should be changed');"
        },
        {
          "text": "Use the <code>--</code> operator on <code>myVar</code>",
          "testString": "assert(/[-]{2}\\s*myVar|myVar\\s*[-]{2}/.test(code), 'Use the <code>--</code> operator on <code>myVar</code>');"
        },
        {
          "text": "Do not change code above the line",
          "testString": "assert(/var myVar = 11;/.test(code), 'Do not change code above the line');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Decrementar un número con JavaScript",
          "description": [
            "Fácilmente puedes <dfn>decrementar</dfn> o disminuir una variable por uno con el operador <code>--</code>.",
            "<code>i--;</code>",
            "es el equivalente a",
            "<code>i = i - 1;</code>",
            "<strong>Nota</strong><br>Toda la línea equivale a <code>i--;</code>, sin necesidad del signo igual.",
            "<h4>Instrucciones</h4>",
            "Cambia el código para usar el operador <code>--</code> en <code>myVar</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var myVar = 11;",
            "",
            "// Only change code below this line",
            "myVar = myVar - 1;",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return 'myVar = ' + z;})(myVar);"
          ]
        }
      }
    },
    {
      "id": "cf1391c1c11feddfaeb4bdef",
      "title": "Create Decimal Numbers with JavaScript",
      "description": [
        "We can store decimal numbers in variables too. Decimal numbers are sometimes referred to as <dfn>floating point</dfn> numbers or <dfn>floats</dfn>.",
        "<strong>Note</strong><br>Not all real numbers can accurately be represented in <dfn>floating point</dfn>. This can lead to rounding errors. <a href=\"https://en.wikipedia.org/wiki/Floating_point#Accuracy_problems\" target=\"_blank\">Details Here</a>.",
        "<hr>",
        "Create a variable <code>myDecimal</code> and give it a decimal value with a fractional part (e.g. <code>5.7</code>)."
      ],
      "solutions": [
        "var myDecimal = 9.9;"
      ],
      "tests": [
        {
          "text": "<code>myDecimal</code> should be a number.",
          "testString": "assert(typeof myDecimal === \"number\", '<code>myDecimal</code> should be a number.');"
        },
        {
          "text": "<code>myDecimal</code> should have a decimal point",
          "testString": "assert(myDecimal % 1 != 0, '<code>myDecimal</code> should have a decimal point'); "
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Crea números decimales con JavaScript",
          "description": [
            "Podemos almacenar números decimales en variables también. Los números decimales a veces son referidos como números de <dfn>punto flotante</dfn> o <dfn>flotantes</dfn>.",
            "<strong>Nota</strong><br>No todos los números reales pueden ser exactamente representados en <dfn>punto flotante</dfn>. Esto puede conducir a errores de redondeo. <a href=\"https://en.wikipedia.org/wiki/Floating_point#Accuracy_problems\" target=\"_blank\">Detalles aquí</a>.",
            "<h4>Instrucciones</h4>",
            "Crea una variable <code>myDecimal</code> y dale un valor decimal con una parte fraccional (p.e. <code>5.7</code>)."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var ourDecimal = 5.7;",
            "",
            "// Only change code below this line",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){if(typeof myDecimal !== \"undefined\"){return myDecimal;}})();"
          ]
        }
      }
    },
    {
      "id": "bd7993c9c69feddfaeb7bdef",
      "title": "Multiply Two Decimals with JavaScript",
      "description": [
        "In JavaScript, you can also perform calculations with decimal numbers, just like whole numbers.",
        "Let's multiply two decimals together to get their product.",
        "<hr>",
        "Change the <code>0.0</code> so that product will equal <code>5.0</code>."
      ],
      "solutions": [
        "var product = 2.0 * 2.5;"
      ],
      "tests": [
        {
          "text": "The variable <code>product</code> should equal <code>5.0</code>.",
          "testString": "assert(product === 5.0, 'The variable <code>product</code> should equal <code>5.0</code>.');"
        },
        {
          "text": "You should use the <code>*</code> operator",
          "testString": "assert(/\\*/.test(code), 'You should use the <code>*</code> operator');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Multiplicar dos decimales con JavaScript",
          "description": [
            "En JavaScript, también puedes realizar cálculos con números decimales, al igual que con números enteros.",
            "Vamos a multiplicar dos números decimales para obtener su producto.",
            "<h4>Instrucciones</h4>",
            "Cambia el <code>0.0</code> para que el producto sea igual a <code>5.0</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var product = 2.0 * 0.0;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(y){return 'product = '+y;})(product);"
          ]
        }
      }
    },
    {
      "id": "bd7993c9ca9feddfaeb7bdef",
      "title": "Divide One Decimal by Another with JavaScript",
      "description": [
        "Now let's divide one decimal by another.",
        "<hr>",
        "Change the <code>0.0</code> so that <code>quotient</code> will equal to <code>2.2</code>."
      ],
      "solutions": [],
      "tests": [
        {
          "text": "The variable <code>quotient</code> should equal <code>2.2</code>",
          "testString": "assert(quotient === 2.2, 'The variable <code>quotient</code> should equal <code>2.2</code>');"
        },
        {
          "text": "You should use the <code>/</code> operator to divide 4.4 by 2",
          "testString": "assert(/4\\.40*\\s*\\/\\s*2\\.*0*/.test(code), 'You should use the <code>/</code> operator to divide 4.4 by 2');"
        },
        {
          "text": "The quotient variable should only be assigned once",
          "testString": "assert(code.match(/quotient/g).length === 1, 'The quotient variable should only be assigned once');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Divide un número decimal por otro con JavaScript",
          "description": [
            "Ahora vamos a dividir un decimal por otro.",
            "<h4>Instrucciones</h4>",
            "Cambia el <code>0.0</code> para que tu cociente sea igual a <code>2.2</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var quotient = 0.0 / 2.0; // Fix this line",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(y){return 'quotient = '+y;})(quotient);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ae",
      "title": "Finding a Remainder in JavaScript",
      "description": [
        "The <dfn>remainder</dfn> operator <code>%</code> gives the remainder of the division of two numbers.",
        "<strong>Example</strong>",
        "<blockquote>5 % 2 = 1 because<br>Math.floor(5 / 2) = 2 (Quotient)<br>2 * 2 = 4<br>5 - 4 = 1 (Remainder)</blockquote>",
        "<strong>Usage</strong><br>In mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by <code>2</code>.",
        "<blockquote>17 % 2 = 1 (17 is Odd)<br>48 % 2 = 0 (48 is Even)</blockquote>",
        "<strong>Note</strong><br>The <dfn>remainder</dfn> operator is sometimes incorrectly referred to as  the \"modulus\" operator. It is very similar to modulus, but does not work properly with negative numbers.",
        "<hr>",
        "Set <code>remainder</code> equal to the remainder of <code>11</code> divided by <code>3</code> using the <dfn>remainder</dfn> (<code>%</code>) operator."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var remainder =  11 % 3;"
      ],
      "tests": [
        {
          "text": "The variable <code>remainder</code> should be initialized",
          "testString": "assert(/var\\s+?remainder/.test(code), 'The variable <code>remainder</code> should be initialized');"
        },
        {
          "text": "The value of <code>remainder</code> should be <code>2</code>",
          "testString": "assert(remainder === 2, 'The value of <code>remainder</code> should be <code>2</code>');"
        },
        {
          "text": "You should use the <code>%</code> operator",
          "testString": "assert(/\\s+?remainder\\s*?=\\s*?.*%.*;/.test(code), 'You should use the <code>%</code> operator');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Encontrar un cociente en JavaScript",
          "description": [
            "El operador <dfn>residuo</dfn> <code>%</code> da el residuo de la división de dos números.",
            "<strong>Ejemplo</strong>",
            "<blockquote>5 % 2 = 1 por que<br>Math.floor(5 / 2) = 2 (Cociente)<br>2 * 2 = 4<br>5 - 4 = 1 (Residuo)</blockquote>",
            "<strong>Uso</strong><br>En matemáticas, se puede comprobar si un número es par o impar revisando en residuo de la división del número por <code>2</code>.",
            "<blockquote>17 % 2 = 1 (17 es Impar)<br>48 % 2 = 0 (48 es Par)</blockquote>",
            "<strong>Nota</strong><br>El operador <dfn>residuo</dfn> es a veces incorrectamente referenciado como el operador \"módulo\". Este es muy parecido a módulo, pero no trabaja apropiadamente con números negativos.",
            "<h4>Instrucciones</h4>",
            "Asigna <code>remainder</code> igual al residuo de <code>11</code> dividido por <code>3</code> usando el operador <dfn>residuo</dfn> (<code>%</code>)."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Only change code below this line",
            "",
            "var remainder;",
            ""
          ],
          "head": [],
          "tail": [
            "(function(y){return 'remainder = '+y;})(remainder);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244af",
      "title": "Compound Assignment With Augmented Addition",
      "description": [
        "In programming, it is common to use assignments to modify the contents of a variable. Remember that everything to the right of the equals sign is evaluated first, so we can say:",
        "<code>myVar = myVar + 5;</code>",
        "to add <code>5</code> to <code>myVar</code>. Since this is such a common pattern, there are operators which do both a mathematical operation and assignment in one step.",
        "One such operator is the <code>+=</code> operator.",
        "<blockquote>var myVar = 1;<br>myVar += 5;<br>console.log(myVar); // Returns 6</blockquote>",
        "<hr>",
        "Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>+=</code> operator."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var a = 3;\nvar b = 17;\nvar c = 12;\n\na += 12;\nb += 9;\nc += 7;"
      ],
      "tests": [
        {
          "text": "<code>a</code> should equal <code>15</code>",
          "testString": "assert(a === 15, '<code>a</code> should equal <code>15</code>');"
        },
        {
          "text": "<code>b</code> should equal <code>26</code>",
          "testString": "assert(b === 26, '<code>b</code> should equal <code>26</code>');"
        },
        {
          "text": "<code>c</code> should equal <code>19</code>",
          "testString": "assert(c === 19, '<code>c</code> should equal <code>19</code>');"
        },
        {
          "text": "You should use the <code>+=</code> operator for each variable",
          "testString": "assert(code.match(/\\+=/g).length === 3, 'You should use the <code>+=</code> operator for each variable');"
        },
        {
          "text": "Do not modify the code above the line",
          "testString": "assert(/var a = 3;/.test(code) && /var b = 17;/.test(code) && /var c = 12;/.test(code), 'Do not modify the code above the line');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Asignación con más",
          "description": [
            "En programación, es común usar asignaciones para modificar el contenido de una variable. Recuerda que todo lo de la derecha del signo igual es evaluado primero, así podemos decir que:",
            "<code>miVar = miVar + 5;</code>",
            "para agregar <code>5</code> a <code>miVar</code>. Dado que este es un patrón común, hay operadores que realizan tanto una operación matemática como una asignación en un paso.",
            "Uno de tales operadores es el operador <code>+=</code>.",
            "<code>miVar += 5;</code> añadirá <code>5</code> a <code>miVar</code>.",
            "<h4>Instrucciones</h4>",
            "Convierte las asignaciones para <code>a</code>, <code>b</code> y <code>c</code> usando el operador <code>+=</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var a = 3;",
            "var b = 17;",
            "var c = 12;",
            "",
            "// Only modify code below this line",
            "",
            "a = a + 12;",
            "b = 9 + b;",
            "c = c + 7;",
            ""
          ],
          "head": [],
          "tail": [
            "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b0",
      "title": "Compound Assignment With Augmented Subtraction",
      "description": [
        "Like the <code>+=</code> operator, <code>-=</code> subtracts a number from a variable.",
        "<code>myVar = myVar - 5;</code>",
        "will subtract <code>5</code> from <code>myVar</code>. This can be rewritten as: ",
        "<code>myVar -= 5;</code>",
        "<hr>",
        "Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>-=</code> operator."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var a = 11;\nvar b = 9;\nvar c = 3;\n\na -= 6;\nb -= 15;\nc -= 1;\n\n"
      ],
      "tests": [
        {
          "text": "<code>a</code> should equal <code>5</code>",
          "testString": "assert(a === 5, '<code>a</code> should equal <code>5</code>');"
        },
        {
          "text": "<code>b</code> should equal <code>-6</code>",
          "testString": "assert(b === -6, '<code>b</code> should equal <code>-6</code>');"
        },
        {
          "text": "<code>c</code> should equal <code>2</code>",
          "testString": "assert(c === 2, '<code>c</code> should equal <code>2</code>');"
        },
        {
          "text": "You should use the <code>-=</code> operator for each variable",
          "testString": "assert(code.match(/-=/g).length === 3, 'You should use the <code>-=</code> operator for each variable');"
        },
        {
          "text": "Do not modify the code above the line",
          "testString": "assert(/var a = 11;/.test(code) && /var b = 9;/.test(code) && /var c = 3;/.test(code), 'Do not modify the code above the line');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Asignación con menos",
          "description": [
            "Al igual que el operador <code>+=</code>, <code>-=</code> substrae un número de una variable.",
            "<code>miVar = miVar - 5;</code>",
            "substraerá <code>5</code> de <code>miVar</code>. Esto puede ser reescrito como: ",
            "<code>miVar -= 5;</code>",
            "<h4>Instrucciones</h4>",
            "Convierte las asignaciones para <code>a</code>, <code>b</code>, y <code>c</code> para usar el operador <code>-=</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var a = 11;",
            "var b = 9;",
            "var c = 3;",
            "",
            "// Only modify code below this line",
            "",
            "a = a - 6;",
            "b = b - 15;",
            "c = c - 1;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b1",
      "title": "Compound Assignment With Augmented Multiplication",
      "description": [
        "The <code>*=</code> operator multiplies a variable by a number.",
        "<code>myVar = myVar * 5;</code>",
        "will multiply <code>myVar</code> by <code>5</code>. This can be rewritten as: ",
        "<code>myVar *= 5;</code>",
        "<hr>",
        "Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>*=</code> operator."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var a = 5;\nvar b = 12;\nvar c = 4.6;\n\na *= 5;\nb *= 3;\nc *= 10;"
      ],
      "tests": [
        {
          "text": "<code>a</code> should equal <code>25</code>",
          "testString": "assert(a === 25, '<code>a</code> should equal <code>25</code>');"
        },
        {
          "text": "<code>b</code> should equal <code>36</code>",
          "testString": "assert(b === 36, '<code>b</code> should equal <code>36</code>');"
        },
        {
          "text": "<code>c</code> should equal <code>46</code>",
          "testString": "assert(c === 46, '<code>c</code> should equal <code>46</code>');"
        },
        {
          "text": "You should use the <code>*=</code> operator for each variable",
          "testString": "assert(code.match(/\\*=/g).length === 3, 'You should use the <code>*=</code> operator for each variable');"
        },
        {
          "text": "Do not modify the code above the line",
          "testString": "assert(/var a = 5;/.test(code) && /var b = 12;/.test(code) && /var c = 4\\.6;/.test(code), 'Do not modify the code above the line');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Asignación con veces igual",
          "description": [
            "El operador <code>*=</code> multiplica una variable por un número.",
            "<code>miVar = miVar * 5;</code>",
            "multiplicará <code>miVar</code> por <code>5</code>. Esto puede ser reescrito como: ",
            "<code>miVar *= 5;</code>",
            "<h4>Instrucciones</h4>",
            "Convierte las asignaciones para <code>a</code>, <code>b</code> y <code>c</code> usando el operador <code>*=</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var a = 5;",
            "var b = 12;",
            "var c = 4.6;",
            "",
            "// Only modify code below this line",
            "",
            "a = a * 5;",
            "b = 3 * b;",
            "c = c * 10;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b2",
      "title": "Compound Assignment With Augmented Division",
      "description": [
        "The <code>/=</code> operator divides a variable by another number.",
        "<code>myVar = myVar / 5;</code>",
        "Will divide <code>myVar</code> by <code>5</code>. This can be rewritten as: ",
        "<code>myVar /= 5;</code>",
        "<hr>",
        "Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>/=</code> operator."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var a = 48;\nvar b = 108;\nvar c = 33;\n\na /= 12;\nb /= 4;\nc /= 11;"
      ],
      "tests": [
        {
          "text": "<code>a</code> should equal <code>4</code>",
          "testString": "assert(a === 4, '<code>a</code> should equal <code>4</code>');"
        },
        {
          "text": "<code>b</code> should equal <code>27</code>",
          "testString": "assert(b === 27, '<code>b</code> should equal <code>27</code>');"
        },
        {
          "text": "<code>c</code> should equal <code>3</code>",
          "testString": "assert(c === 3, '<code>c</code> should equal <code>3</code>');"
        },
        {
          "text": "You should use the <code>/=</code> operator for each variable",
          "testString": "assert(code.match(/\\/=/g).length === 3, 'You should use the <code>/=</code> operator for each variable');"
        },
        {
          "text": "Do not modify the code above the line",
          "testString": "assert(/var a = 48;/.test(code) && /var b = 108;/.test(code) && /var c = 33;/.test(code), 'Do not modify the code above the line');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Asignación con división",
          "description": [
            "El operador <code>/=</code> divide una variable por otro número.",
            "<code>miVar = miVar / 5;</code>",
            "Dividirá <code>miVar</code> por <code>5</code>. Esto puede ser reescrito como: ",
            "<code>miVar /= 5;</code>",
            "<h4>Instrucciones</h4>",
            "Convierte las asignaciones para <code>a</code>, <code>b</code> y <code>c</code> para usar el operador <code>/=</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var a = 48;",
            "var b = 108;",
            "var c = 33;",
            "",
            "// Only modify code below this line",
            "",
            "a = a / 12;",
            "b = b / 4;",
            "c = c / 11;",
            ""
          ],
          "head": [],
          "tail": [
            "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
          ]
        }
      }
    },
    {
      "id": "bd7123c9c444eddfaeb5bdef",
      "title": "Declare String Variables",
      "description": [
        "Previously we have used the code",
        "<code>var myName = \"your name\";</code>",
        "<code>\"your name\"</code> is called a <dfn>string</dfn> <dfn>literal</dfn>. It is a string because it is a series of zero or more characters enclosed in single or double quotes.",
        "<hr>",
        "Create two new <code>string</code> variables: <code>myFirstName</code> and <code>myLastName</code> and assign them the values of your first and last name, respectively."
      ],
      "solutions": [
        "var myFirstName = \"Alan\";\nvar myLastName = \"Turing\";"
      ],
      "tests": [
        {
          "text": "<code>myFirstName</code> should be a string with at least one character in it.",
          "testString": "assert((function(){if(typeof myFirstName !== \"undefined\" && typeof myFirstName === \"string\" && myFirstName.length > 0){return true;}else{return false;}})(), '<code>myFirstName</code> should be a string with at least one character in it.');"
        },
        {
          "text": "<code>myLastName</code> should be a string with at least one character in it.",
          "testString": "assert((function(){if(typeof myLastName !== \"undefined\" && typeof myLastName === \"string\" && myLastName.length > 0){return true;}else{return false;}})(), '<code>myLastName</code> should be a string with at least one character in it.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Declara variables tipo cadena",
          "description": [
            "En el reto anterior, se utilizó el código <code>myName var = \"su nombre\"</code>. Esto es lo que llamamos una variable tipo <code>cadena</code>. No es nada más que una \"cadena\" de caracteres. Las cadenas en JavaScript siempre se encierran entre comillas. ",
            "Ahora vamos a crear dos nuevas variables tipo cadena: <code>myFirstName</code> y <code>myLastName</code> y asignarles los valores de tu nombre y tu apellido, respectivamente."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var firstName = \"Alan\";",
            "var lastName = \"Turing\";",
            "",
            "// Only change code below this line",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myFirstName !== \"undefined\" && typeof myLastName !== \"undefined\"){(function(){return myFirstName + ', ' + myLastName;})();}"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b5",
      "title": "Escaping Literal Quotes in Strings",
      "description": [
        "When you are defining a string you must start and end with a single or double quote. What happens when you need a literal quote: <code>\"</code> or <code>'</code> inside of your string?",
        "In JavaScript, you can <dfn>escape</dfn> a quote from considering it as an end of string quote by placing a <dfn>backslash</dfn> (<code>\\</code>) in front of the quote.",
        "<code>var sampleStr = \"Alan said, \\\"Peter is learning JavaScript\\\".\";</code>",
        "This signals to JavaScript that the following quote is not the end of the string, but should instead appear inside the string. So if you were to print this to the console, you would get:",
        "<code>Alan said, \"Peter is learning JavaScript\".</code>",
        "<hr>",
        "Use <dfn>backslashes</dfn> to assign a string to the <code>myStr</code> variable so that if you were to print it to the console, you would see:",
        "<code>I am a \"double quoted\" string inside \"double quotes\".</code>"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myStr = \"I am a \\\"double quoted\\\" string inside \\\"double quotes\\\".\";"
      ],
      "tests": [
        {
          "text": "You should use two double quotes (<code>&quot;</code>) and four escaped double quotes (<code>&#92;&quot;</code>).",
          "testString": "assert(code.match(/\\\\\"/g).length === 4 && code.match(/[^\\\\]\"/g).length === 2, 'You should use two double quotes (<code>&quot;</code>) and four escaped double quotes (<code>&#92;&quot;</code>).');"
        },
        {
          "text": "Variable myStr should contain the string: <code>I am a \"double quoted\" string inside \"double quotes\".</code>",
          "testString": "assert(myStr === \"I am a \\\"double quoted\\\" string inside \\\"double quotes\\\".\", 'Variable myStr should contain the string: <code>I am a \"double quoted\" string inside \"double quotes\".</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Escapar comillas en cadenas de texto",
          "description": [
            "Cuando estás definiendo una cadena debes iniciar y terminar con apóstrofes o comillas. ¿Qué pasa cuando necesitas una comilla: <code>\"</code> o <code>'</code> dentro de tu cadena?",
            "En JavaScript, tu puedes <dfn>escapar</dfn> unas comillas para diferenciarlas de las comillas del final de la cadena colocando una <dfn>barra invertida</dfn> (<code>\\</code>) antes de la cita.",
            "<code>var cadenaEjem = \"Alan dijo, \\\"Pedro está aprendiendo JavaScript\\\".\";</code>",
            "Esto le indica a JavaScript que la comilla siguiente no es el fin de la cadena, sino que debe aparecer dentro de la cadena. Así que si fueras a imprimir esto en la consola, tu obtendrías:",
            "<code>Alan dijo, \"Pedro está aprendiendo JavaScript\".<code>",
            "<h4>Instructiones</h4>",
            "Usa <dfn>barras invertidas</dfn>para asigar una cadena a la variable <code>myStr</code> de modo que <em>si</em> tu fueras a imprimirla en la consola, tu verías:",
            "<code>I am a \"double quoted\" string inside \"double quotes\".</code>"
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var myStr = \"\"; // Change this line",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){",
            "  if(typeof myStr === 'string') {",
            "    console.log(\"myStr = \\\"\" + myStr + \"\\\"\");",
            "  } else {",
            "    console.log(\"myStr is undefined\");",
            "  }",
            "})();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b4",
      "title": "Quoting Strings with Single Quotes",
      "description": [
        "<dfn>String</dfn> values in JavaScript may be written with single or double quotes, as long as you start and end with the same type of quote. Unlike some other programming languages, single and double quotes work the same in JavaScript.",
        "<blockquote>doubleQuoteStr = \"This is a string\"; <br/>singleQuoteStr = 'This is also a string';</blockquote>",
        "The reason why you might want to use one type of quote over the other is if you want to use both in a string. This might happen if you want to save a conversation in a string and have the conversation in quotes. Another use for it would be saving an <code>&#60;a&#62;</code> tag with various attributes in quotes, all within a string.",
        "<blockquote>conversation = 'Finn exclaims to Jake, \"Algebraic!\"';</blockquote>",
        "However, this becomes a problem if you need to use the outermost quotes within it. Remember, a string has the same kind of quote at the beginning and end. But if you have that same quote somewhere in the middle, the string will stop early and throw an error.",
        "<blockquote>goodStr = 'Jake asks Finn, \"Hey, let\\'s go on an adventure?\"'; <br/>badStr = 'Finn responds, \"Let's go!\"'; // Throws an error</blockquote>",
        "In the <dfn>goodStr</dfn> above, you can use both quotes safely by using the backslash <code>\\</code> as an escape character.",
        "<strong>Note</strong><br/>The backslash <code>\\</code> should not be be confused with the forward slash <code>/</code>. They do not do the same thing.",
        "<hr>",
        "Change the provided string to a string with single quotes at the beginning and end and no escape characters.",
        "Right now, the <code>&#60;a&#62;</code> tag in the string uses double quotes everywhere. You will need to change the outer quotes to single quotes so you can remove the escape characters."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myStr = '<a href=\"http://www.example.com\" target=\"_blank\">Link</a>';"
      ],
      "tests": [
        {
          "text": "Remove all the <code>backslashes</code> (<code>\\</code>)",
          "testString": "assert(!/\\\\/g.test(code) && myStr.match('\\\\s*<a href\\\\s*=\\\\s*\"http://www.example.com\"\\\\s*target\\\\s*=\\\\s*\"_blank\">\\\\s*Link\\\\s*</a>\\\\s*'), 'Remove all the <code>backslashes</code> (<code>\\</code>)');"
        },
        {
          "text": "You should have two single quotes <code>&#39;</code> and four double quotes <code>&quot;</code>",
          "testString": "assert(code.match(/\"/g).length === 4 && code.match(/'/g).length === 2, 'You should have two single quotes <code>&#39;</code> and four double quotes <code>&quot;</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Citando cadenas con comillas simples",
          "description": [
            "Los valores de <dfn>Cadenas</dfn> en JavaScript pueden ser escritos con comillas o apóstrofes, siempre y cuando inicien y terminen con el mismo tipo de cita. A diferencia de algunos lenguajes, apóstrofes y comillas son funcionalmente identicas en JavaScript.",
            "<code>\"Esta cadena tiene \\\"comillas\\\" en esta\"</code>",
            "La ventaja de usar una o la otra tiene que ver con la necesidad de <code>escapar</code> comillas. Si tu tienes una cadena con algunas comillas, esta puede ser difícil de leer y escribir. En su lugar, usa apóstrofes:",
            "<code>'Esta cadena tiene \"comillas\" en esta. Y \"probablemente\" muchas de ellas.'</code>",
            "<h4>Instrucciones</h4>",
            "Cambia la cadena dada de comillas a apóstrofes y quita el escape."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var myStr = \"<a href=\\\"http://www.example.com\\\" target=\\\"_blank\\\">Link</a>\";",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function() { return \"myStr = \" + myStr; })();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b6",
      "title": "Escape Sequences in Strings",
      "description": [
        "Quotes are not the only characters that can be <dfn>escaped</dfn> inside a string. There are two reasons to use escaping characters: First is to allow you to use characters you might not otherwise be able to type out, such as a backspace. Second is to allow you to represent multiple quotes in a string without JavaScript misinterpreting what you mean. We learned this in the previous challenge.",
        "<table class=\"table table-striped\"><thead><tr><th>Code</th><th>Output</th></tr></thead><tbody><tr><td><code>\\'</code></td><td>single quote</td></tr><tr><td><code>\\\"</code></td><td>double quote</td></tr><tr><td><code>\\\\</code></td><td>backslash</td></tr><tr><td><code>\\n</code></td><td>newline</td></tr><tr><td><code>\\r</code></td><td>carriage return</td></tr><tr><td><code>\\t</code></td><td>tab</td></tr><tr><td><code>\\b</code></td><td>backspace</td></tr><tr><td><code>\\f</code></td><td>form feed</td></tr></tbody></table>",
        "<em>Note that the backslash itself must be escaped in order to display as a backslash.</em>",
        "<hr>",
        "Assign the following three lines of text into the single variable <code>myStr</code> using escape sequences.",
        "<blockquote>FirstLine<br/>&nbsp;&nbsp;&nbsp;&nbsp;\\SecondLine<br/>ThirdLine</blockquote>",
        "You will need to use escape sequences to insert special characters correctly. You will also need to follow the spacing as it looks above, with no spaces between escape sequences or words.",
        "Here is the text with the escape sequences written out.",
        "<q>FirstLine<code>newline</code><code>tab</code><code>backslash</code>SecondLine<code>newline</code>ThirdLine</q>"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myStr = \"FirstLine\\n\\t\\\\SecondLine\\nThirdLine\";"
      ],
      "tests": [
        {
          "text": "<code>myStr</code> should not contain any spaces",
          "testString": "assert(!/ /.test(myStr), '<code>myStr</code> should not contain any spaces');"
        },
        {
          "text": "<code>myStr</code> should contain the strings <code>FirstLine</code>, <code>SecondLine</code> and <code>ThirdLine</code> (remember case sensitivity)",
          "testString": "assert(/FirstLine/.test(myStr) && /SecondLine/.test(myStr) && /ThirdLine/.test(myStr), '<code>myStr</code> should contain the strings <code>FirstLine</code>, <code>SecondLine</code> and <code>ThirdLine</code> (remember case sensitivity)');"
        },
        {
          "text": "<code>FirstLine</code> should be followed by the newline character <code>\\n</code>",
          "testString": "assert(/FirstLine\\n/.test(myStr), '<code>FirstLine</code> should be followed by the newline character <code>\\n</code>');"
        },
        {
          "text": "<code>myStr</code> should contain a tab character <code>\\t</code> which follows a newline character",
          "testString": "assert(/\\n\\t/.test(myStr), '<code>myStr</code> should contain a tab character <code>\\t</code> which follows a newline character');"
        },
        {
          "text": "<code>SecondLine</code> should be preceded by the backslash character <code>\\\\</code>",
          "testString": "assert(/\\SecondLine/.test(myStr), '<code>SecondLine</code> should be preceded by the backslash character <code>\\\\</code>');"
        },
        {
          "text": "There should be a newline character between <code>SecondLine</code> and <code>ThirdLine</code>",
          "testString": "assert(/SecondLine\\nThirdLine/.test(myStr), 'There should be a newline character between <code>SecondLine</code> and <code>ThirdLine</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Secuencias de escape en cadenas",
          "description": [
            "Las comillas no son el único caracter que puede ser <dfn>escapado</dfn> dentro de una cadena. Aquí ahí una tabla de secuencias de escape comunes:",
            "<table class=\"table table-striped\"><thead><tr><th>Código</th><th>Salida</th></tr></thead><tbody><tr><td>\\'</td><td>apostrofe</td></tr><tr><td>\\\"</td><td>comilla</td></tr><tr><td>\\\\</td><td>barra invertida</td></tr><tr><td>\\n</td><td>nueva línea</td></tr><tr><td>\\r</td><td>retorno de carro</td></tr><tr><td>\\t</td><td>tabulación</td></tr><tr><td>\\b</td><td>retroceso</td></tr><tr><td>\\f</td><td>salto de página</td></tr></tbody></table>",
            "<em>Nota que la barra invertida por si misma tiene que ser escapada con el fin de mostrarse como una barra invertida.</em>",
            "<h4>Instrucciones</h4>",
            "Codifica la siguiente secuencia, separada por espacios:<br><q>FirstLine<code>nueva línea</code><code>tabulación</code><code>barra invertida</code>SecondLine<code>nueva línea</code>ThirdLine</q>"
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var myStr; // Change this line",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){",
            "if (myStr !== undefined){",
            "console.log('myStr:\\n' + myStr);}})();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b7",
      "title": "Concatenating Strings with Plus Operator",
      "description": [
        "In JavaScript, when the <code>+</code> operator is used with a <code>String</code> value, it is called the <dfn>concatenation</dfn> operator. You can build a new string out of other strings by <dfn>concatenating</dfn> them together.",
        "<strong>Example</strong>",
        "<blockquote>'My name is Alan,' + ' I concatenate.'</blockquote>",
        "<strong>Note</strong><br>Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.",
        "<hr>",
        "Build <code>myStr</code> from the strings <code>\"This is the start. \"</code> and <code>\"This is the end.\"</code> using the <code>+</code> operator."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var ourStr = \"I come first. \" + \"I come second.\";\nvar myStr = \"This is the start. \" + \"This is the end.\";"
      ],
      "tests": [
        {
          "text": "<code>myStr</code> should have a value of <code>This is the start. This is the end.</code>",
          "testString": "assert(myStr === \"This is the start. This is the end.\", '<code>myStr</code> should have a value of <code>This is the start. This is the end.</code>');"
        },
        {
          "text": "Use the <code>+</code> operator to build <code>myStr</code>",
          "testString": "assert(code.match(/([\"']).*([\"'])\\s*\\+\\s*([\"']).*([\"'])/g).length > 1, 'Use the <code>+</code> operator to build <code>myStr</code>');"
        },
        {
          "text": "<code>myStr</code> should be created using the <code>var</code> keyword.",
          "testString": "assert(/var\\s+myStr/.test(code), '<code>myStr</code> should be created using the <code>var</code> keyword.');"
        },
        {
          "text": "Make sure to assign the result to the <code>myStr</code> variable.",
          "testString": "assert(/myStr\\s*=/.test(code), 'Make sure to assign the result to the <code>myStr</code> variable.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Concatenar cadenas con el operador más",
          "description": [
            "En JavaScript, cuando el operador <code>+</code> es usado con un valor de <code>Cadena</code>, este es llamado el operador <dfn>concatenación</dfn>. Tu puedes construir una nueva cadena de otras cadenas <dfn>concatenandolas</dfn> juntas.",
            "<strong>Ejemplo</strong>",
            "<blockquote>'Mi nombre es Alan,' + ' Yo concateno.'<blockquote>",
            "<strong>Nota</strong><br>Cuidado con los espacios. La concatenación no agrega espacios entre cadenas concatenadas, así que necesitarás agregarlos tu mismo.",
            "<h4>Instrucciones</h4>",
            "Construye <code>myStr</code> con las cadenas <code>\"This is the start. \"</code> y <code>\"This is the end.\"</code> usando el operador<code>+</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourStr = \"I come first. \" + \"I come second.\";",
            "",
            "// Only change code below this line",
            "",
            "var myStr;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){",
            "  if(typeof myStr === 'string') {",
            "    return 'myStr = \"' + myStr + '\"';",
            "  } else {",
            "    return 'myStr is not a string';",
            "  }",
            "})();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b8",
      "title": "Concatenating Strings with the Plus Equals Operator",
      "description": [
        "We can also use the <code>+=</code> operator to <dfn>concatenate</dfn> a string onto the end of an existing string variable. This can be very helpful to break a long string over several lines.",
        "<strong>Note</strong><br>Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.",
        "<hr>",
        "Build <code>myStr</code> over several lines by concatenating these two strings: <code>\"This is the first sentence. \"</code> and <code>\"This is the second sentence.\"</code> using the <code>+=</code> operator. Use the <code>+=</code> operator similar to how it is shown in the editor. Start by assigning the first string to <code>myStr</code>, then add on the second string."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var ourStr = \"I come first. \";\nourStr += \"I come second.\";\n\nvar myStr = \"This is the first sentence. \";\nmyStr += \"This is the second sentence.\";"
      ],
      "tests": [
        {
          "text": "<code>myStr</code> should have a value of <code>This is the first sentence. This is the second sentence.</code>",
          "testString": "assert(myStr === \"This is the first sentence. This is the second sentence.\", '<code>myStr</code> should have a value of <code>This is the first sentence. This is the second sentence.</code>');"
        },
        {
          "text": "Use the <code>+=</code> operator to build <code>myStr</code>",
          "testString": "assert(code.match(/\\w\\s*\\+=\\s*[\"']/g).length > 1 && code.match(/\\w\\s*\\=\\s*[\"']/g).length > 1, 'Use the <code>+=</code> operator to build <code>myStr</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Concatenar cadenas con el operador mas igual",
          "description": [
            "Nosotros también podemos usar el operador <code>+=</code> para <dfn>concatenar</dfn> una cadena al final de una variable de cadena existente. Esto puede ser muy útil para romper una cadena larga sobre varias líneas.",
            "<strong>Nota</strong><br>Cuidado con los espacios. La concatenación no agrega espacios entre cadenas concatenadas, así que necesitarás añadirlos tu mismo.",
            "<h4>Instrucciones</h4>",
            "Construye <code>myStr</code> sobre varias líneas concatenando estas dos cadenas:<br><code>\"This is the first sentence. \"</code> y <code>\"This is the second sentence.\"</code> usando el operador <code>+=</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourStr = \"I come first. \";",
            "ourStr += \"I come second.\";",
            "",
            "// Only change code below this line",
            "",
            "var myStr;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){",
            "  if(typeof myStr === 'string') {",
            "    return 'myStr = \"' + myStr + '\"';",
            "  } else {",
            "    return 'myStr is not a string';",
            "  }",
            "})();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b9",
      "title": "Constructing Strings with Variables",
      "description": [
        "Sometimes you will need to build a string, <a href=\"https://en.wikipedia.org/wiki/Mad_Libs\" target=\"_blank\">Mad Libs</a> style. By using the concatenation operator (<code>+</code>), you can insert one or more variables into a string you're building.",
        "<hr>",
        "Set <code>myName</code> to a string equal to your name and build <code>myStr</code> with <code>myName</code> between the strings <code>\"My name is \"</code> and <code>\" and I am well!\"</code>"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myName = \"Bob\";\nvar myStr = \"My name is \" + myName + \" and I am well!\";"
      ],
      "tests": [
        {
          "text": "<code>myName</code> should be set to a string at least 3 characters long",
          "testString": "assert(typeof myName !== 'undefined' && myName.length > 2, '<code>myName</code> should be set to a string at least 3 characters long');"
        },
        {
          "text": "Use two <code>+</code> operators to build <code>myStr</code> with <code>myName</code> inside it",
          "testString": "assert(code.match(/[\"']\\s*\\+\\s*myName\\s*\\+\\s*[\"']/g).length > 0, 'Use two <code>+</code> operators to build <code>myStr</code> with <code>myName</code> inside it');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Construir cadenas con variables",
          "description": [
            "A veces necesitarás construir una cadena, al estilo <a href=\"https://en.wikipedia.org/wiki/Mad_Libs\" target=\"_blank\">Mad Libs</a>. Mediante el uso del operador concatenación (<code>+</code>), puedes insertar una o más variables dentro de una cadena que estés construyendo.",
            "<h4>Instrucciones</h4>",
            "Asigna <code>myName</code> a una cadena igual a tu nombre y construye <code>myStr</code> con <code>myName</code> entre las cadenas <code>\"My name is \"</code> and <code>\" and I am well!\"</code>"
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourName = \"freeCodeCamp\";",
            "var ourStr = \"Hello, our name is \" + ourName + \", how are you?\";",
            "",
            "// Only change code below this line",
            "var myName;",
            "var myStr;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){",
            "  var output = [];",
            "  if(typeof myName === 'string') {",
            "    output.push('myName = \"' + myName + '\"');",
            "  } else {",
            "    output.push('myName is not a string');",
            "  }",
            "  if(typeof myStr === 'string') {",
            "    output.push('myStr = \"' + myStr + '\"');",
            "  } else {",
            "    output.push('myStr is not a string');",
            "  }",
            "  return output.join('\\n');",
            "})();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ed",
      "title": "Appending Variables to Strings",
      "description": [
        "Just as we can build a string over multiple lines out of string <dfn>literals</dfn>, we can also append variables to a string using the plus equals (<code>+=</code>) operator.",
        "<hr>",
        "Set <code>someAdjective</code> and append it to <code>myStr</code> using the <code>+=</code> operator."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var anAdjective = \"awesome!\";\nvar ourStr = \"freeCodeCamp is \";\nourStr += anAdjective;\n\nvar someAdjective = \"neat\";\nvar myStr = \"Learning to code is \";\nmyStr += someAdjective;"
      ],
      "tests": [
        {
          "text": "<code>someAdjective</code> should be set to a string at least 3 characters long",
          "testString": "assert(typeof someAdjective !== 'undefined' && someAdjective.length > 2, '<code>someAdjective</code> should be set to a string at least 3 characters long');"
        },
        {
          "text": "Append <code>someAdjective</code> to <code>myStr</code> using the <code>+=</code> operator",
          "testString": "assert(code.match(/myStr\\s*\\+=\\s*someAdjective\\s*/).length > 0, 'Append <code>someAdjective</code> to <code>myStr</code> using the <code>+=</code> operator');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Anexando variables a cadenas",
          "description": [
            "Al igual que podemos construir una cadena en múltiples líneas a partir de cadenas <dfn>literales</dfn>, nosotros podemos ademas anexar variables a una cadena usando el operador más igual (<code>+=</code>).",
            "<h4>Instructiones</h4>",
            "Asigna <code>someAdjective</code> y anexalo a <code>myStr</code> usando el operador <code>+=</code>."
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/appending-variables-to-strings",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var anAdjective = \"awesome!\";",
            "var ourStr = \"freeCodeCamp is \";",
            "ourStr += anAdjective;",
            "",
            "// Only change code below this line",
            "",
            "var someAdjective;",
            "var myStr = \"Learning to code is \";",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){",
            "  var output = [];",
            "  if(typeof someAdjective === 'string') {",
            "    output.push('someAdjective = \"' + someAdjective + '\"');",
            "  } else {",
            "    output.push('someAdjective is not a string');",
            "  }",
            "  if(typeof myStr === 'string') {",
            "    output.push('myStr = \"' + myStr + '\"');",
            "  } else {",
            "    output.push('myStr is not a string');",
            "  }",
            "  return output.join('\\n');",
            "})();"
          ]
        }
      }
    },
    {
      "id": "bd7123c9c448eddfaeb5bdef",
      "title": "Find the Length of a String",
      "description": [
        "You can find the length of a <code>String</code> value by writing <code>.length</code> after the string variable or string literal.",
        "<code>\"Alan Peter\".length; // 10</code>",
        "For example, if we created a variable <code>var firstName = \"Charles\"</code>, we could find out how long the string <code>\"Charles\"</code> is by using the <code>firstName.length</code> property.",
        "<hr>",
        "Use the <code>.length</code> property to count the number of characters in the <code>lastName</code> variable and assign it to <code>lastNameLength</code>."
      ],
      "solutions": [
        "var firstNameLength = 0;\nvar firstName = \"Ada\";\nfirstNameLength = firstName.length;\n\nvar lastNameLength = 0;\nvar lastName = \"Lovelace\";\nlastNameLength = lastName.length;"
      ],
      "tests": [
        {
          "text": "<code>lastNameLength</code> should be equal to eight.",
          "testString": "assert((function(){if(typeof lastNameLength !== \"undefined\" && typeof lastNameLength === \"number\" && lastNameLength === 8){return true;}else{return false;}})(), '<code>lastNameLength</code> should be equal to eight.');"
        },
        {
          "text": "You should be getting the length of <code>lastName</code> by using <code>.length</code> like this: <code>lastName.length</code>.",
          "testString": "assert((function(){if(code.match(/\\.length/gi) && code.match(/\\.length/gi).length >= 2 && code.match(/var lastNameLength \\= 0;/gi) && code.match(/var lastNameLength \\= 0;/gi).length >= 1){return true;}else{return false;}})(), 'You should be getting the length of <code>lastName</code> by using <code>.length</code> like this: <code>lastName.length</code>.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Comprueba la propiedad longitud (length) de una variable tipo cadena",
          "description": [
            "Las <code>estructuras de datos</code> tienen <code>propiedades</code>. Por ejemplo, las <code>cadenas</code> tienen una propiedad llamada <code>.length </code> que te dirá cuántos caracteres hay en la cadena.",
            "Por ejemplo, si creamos una variable <code>var firstName=\"Charles\"</code>, podemos averiguar la longitud de la cadena \"Charles\" usando la propiedad <code>firstName.length</code>. ",
            "Usa la propiedad <code>.length</code> para contar el número de caracteres en el variable <code>lastName</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var firstNameLength = 0;",
            "var firstName = \"Ada\";",
            "",
            "firstNameLength = firstName.length;",
            "",
            "// Setup",
            "var lastNameLength = 0;",
            "var lastName = \"Lovelace\";",
            "",
            "// Only change code below this line.",
            "",
            "lastNameLength = lastName;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof lastNameLength !== \"undefined\"){(function(){return lastNameLength;})();}"
          ]
        }
      }
    },
    {
      "id": "bd7123c9c549eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the First Character in a String",
      "description": [
        "<code>Bracket notation</code> is a way to get a character at a specific <code>index</code> within a string.",
        "Most modern programming languages, like JavaScript, don't start counting at 1 like humans do. They start at 0. This is referred to as <dfn>Zero-based</dfn> indexing.",
        "For example, the character at index 0 in the word \"Charles\" is \"C\". So if <code>var firstName = \"Charles\"</code>, you can get the value of the first letter of the string by using <code>firstName[0]</code>.",
        "<hr>",
        "Use <dfn>bracket notation</dfn> to find the first character in the <code>lastName</code> variable and assign it to <code>firstLetterOfLastName</code>.",
        "<strong>Hint</strong><br>Try looking at the <code>firstLetterOfFirstName</code> variable declaration if you get stuck."
      ],
      "solutions": [
        "var firstLetterOfLastName = \"\";\nvar lastName = \"Lovelace\";\n\n// Only change code below this line\nfirstLetterOfLastName = lastName[0];"
      ],
      "tests": [
        {
          "text": "The <code>firstLetterOfLastName</code> variable should have the value of <code>L</code>.",
          "testString": "assert(firstLetterOfLastName === 'L', 'The <code>firstLetterOfLastName</code> variable should have the value of <code>L</code>.');"
        },
        {
          "text": "You should use bracket notation.",
          "testString": "assert(code.match(/firstLetterOfLastName\\s*?=\\s*?lastName\\[.*?\\]/), 'You should use bracket notation.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Usa la notación de corchetes para encontrar el primer carácter de una cadena",
          "description": [
            "La <code>notación de corchetes</code> es una forma de obtener el caracter en un <code>índice</code> específico de una cadena.",
            "Los computadoras no empiezan a contar desde 1 como hacen los humanos. Comienzan en 0 ",
            "Por ejemplo, el caracter en el índice 0 en la palabra \"Charles \" es \"C\". Entonces si <code>var firstName = \"Charles\"</code>, puedes obtener la primera letra de la cadena usando <code>firstName[0]</code> .",
            "Usa la <code>notación de corchetes</code> para encontrar el primer caracter en la variable <code>lastName</code> y asignarlo a <code>firstLetterOfLastName</code>.",
            "Si te atascas intenta mirar la declaración de la variable <code>firstLetterOfFirstName</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var firstLetterOfFirstName = \"\";",
            "var firstName = \"Ada\";",
            "",
            "firstLetterOfFirstName = firstName[0];",
            "",
            "// Setup",
            "var firstLetterOfLastName = \"\";",
            "var lastName = \"Lovelace\";",
            "",
            "// Only change code below this line",
            "firstLetterOfLastName = lastName;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(v){return v;})(firstLetterOfLastName);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ba",
      "title": "Understand String Immutability",
      "description": [
        "In JavaScript, <code>String</code> values are <dfn>immutable</dfn>, which means that they cannot be altered once created.",
        "For example, the following code:",
        "<blockquote>var myStr = \"Bob\";<br>myStr[0] = \"J\";</blockquote>",
        "cannot change the value of <code>myStr</code> to \"Job\", because the contents of <code>myStr</code> cannot be altered. Note that this does <em>not</em> mean that <code>myStr</code> cannot be changed, just that the individual characters of a <dfn>string literal</dfn> cannot be changed. The only way to change <code>myStr</code> would be to assign it with a new string, like this:",
        "<blockquote>var myStr = \"Bob\";<br>myStr = \"Job\";</blockquote>",
        "<hr>",
        "Correct the assignment to <code>myStr</code> so it contains the string value of <code>Hello World</code> using the approach shown in the example above."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myStr = \"Jello World\";\nmyStr = \"Hello World\";"
      ],
      "tests": [
        {
          "text": "<code>myStr</code> should have a value of <code>Hello World</code>",
          "testString": "assert(myStr === \"Hello World\", '<code>myStr</code> should have a value of <code>Hello World</code>');"
        },
        {
          "text": "Do not change the code above the line",
          "testString": "assert(/myStr = \"Jello World\"/.test(code), 'Do not change the code above the line');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Comprender la inmutabilidad de cadenas",
          "description": [
            "En JavaScript, los valores de las <code>Cadenas</code> son <dfn>inmutables</dfn>, lo cual significa que ellos no pueden ser alterados una vez creados.",
            "Por ejemplo, el siguiente código:",
            "<blockquote>var miCad = \"Bob\";<br>myCad[0] = \"J\";</blockquote>",
            "no puede cambiar el valor de <code>miCad</code> a \"Job\" porque el contenido de <code>miCad</code> no puede ser alterado. Nota que esto <em>no</em> significa que <code>miCad</code> no puede ser cambiado, solo que los valores individuales de una <dfn>cadena literal</dfn> no pueden ser cambiados. La única manera de cambiar <code>miCad</code> sería asignandola a una nueva cadena, como esta:",
            "<blockquote>var miCad = \"Bob\";<br>miCad = \"Job\";</blockquote>",
            "<h4>Instrucciones</h4>",
            "Corrige la asignación de <code>myStr</code> para lograr el efecto deseado."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "var myStr = \"Jello World\";",
            "",
            "// Only change code below this line",
            "",
            "myStr[0] = \"H\"; // Fix Me",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(v){return \"myStr = \" + v;})(myStr);"
          ]
        }
      }
    },
    {
      "id": "bd7123c9c450eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the Nth Character in a String",
      "description": [
        "You can also use <dfn>bracket notation</dfn> to get the character at other positions within a string.",
        "Remember that computers start counting at <code>0</code>, so the first character is actually the zeroth character.",
        "<hr>",
        "Let's try to set <code>thirdLetterOfLastName</code> to equal the third letter of the <code>lastName</code> variable using bracket notation.",
        "<strong>Hint</strong><br>Try looking at the <code>secondLetterOfFirstName</code> variable declaration if you get stuck."
      ],
      "solutions": [
        "var lastName = \"Lovelace\";\nvar thirdLetterOfLastName = lastName[2];"
      ],
      "tests": [
        {
          "text": "The <code>thirdLetterOfLastName</code> variable should have the value of <code>v</code>.",
          "testString": "assert(thirdLetterOfLastName === 'v', 'The <code>thirdLetterOfLastName</code> variable should have the value of <code>v</code>.');"
        },
        {
          "text": "You should use bracket notation.",
          "testString": "assert(code.match(/thirdLetterOfLastName\\s*?=\\s*?lastName\\[.*?\\]/), 'You should use bracket notation.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Usar la notación de corchetes para encontrar el n-ésimo caracter en una cadena",
          "description": [
            "También puede usar <code>notación de corchetes</code> para obtener el caracter en otras posiciones dentro de una cadena.",
            "Recuerda que los computadores empiezan a contar a 0, por lo que el primer caracter es en realidad el caracter cero.",
            "<h4>Instrucciones</h4>",
            "Vamos a tratar de asignar a <code>thirdLetterOfLastName</code> la <code>tercera letra</code> de la variable <code>lastName</code>.",
            "<strong>Pista</strong><br>Si te atascas intenta mirar la declaración de la variable <code>secondLetterOfFirstName</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var firstName = \"Ada\";",
            "var secondLetterOfFirstName = firstName[1];",
            "",
            "// Setup",
            "var lastName = \"Lovelace\";",
            "",
            "// Only change code below this line.",
            "var thirdLetterOfLastName = lastName;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(v){return v;})(thirdLetterOfLastName);"
          ]
        }
      }
    },
    {
      "id": "bd7123c9c451eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the Last Character in a String",
      "description": [
        "In order to get the last letter of a string, you can subtract one from the string's length.",
        "For example, if <code>var firstName = \"Charles\"</code>, you can get the value of the last letter of the string by using <code>firstName[firstName.length - 1]</code>.",
        "<hr>",
        "Use <dfn>bracket notation</dfn> to find the last character in the <code>lastName</code> variable.",
        "<strong>Hint</strong><br>Try looking at the <code>lastLetterOfFirstName</code> variable declaration if you get stuck."
      ],
      "solutions": [
        "var firstName = \"Ada\";\nvar lastLetterOfFirstName = firstName[firstName.length - 1];\n\nvar lastName = \"Lovelace\";\nvar lastLetterOfLastName = lastName[lastName.length - 1];"
      ],
      "tests": [
        {
          "text": "<code>lastLetterOfLastName</code> should be \"e\".",
          "testString": "assert(lastLetterOfLastName === \"e\", '<code>lastLetterOfLastName</code> should be \"e\".');"
        },
        {
          "text": "You have to use <code>.length</code> to get the last letter.",
          "testString": "assert(code.match(/\\.length/g).length === 2, 'You have to use <code>.length</code> to get the last letter.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Usa notación de corchetes para encontrar el último caracter de una cadena",
          "description": [
            "Con el fin de conseguir la última letra de una cadena, puedes restar uno a la longitud de la cadena.",
            "Por ejemplo, si <code>var firstName = \"Charles\"</code>, se puede obtener la última letra usando <code>firstName[firstName.length - 1]</code>. ",
            "<h4>Instrucciones</h4>",
            "Utiliza <code>notación de corchetes</code> para encontrar el último caracter de la variabel <code>lastName</code>.",
            "Si te atascas intenta mirando la declaración de la variable <code>lastLetterOfFirstName</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var firstName = \"Ada\";",
            "var lastLetterOfFirstName = firstName[firstName.length - 1];",
            "",
            "// Setup",
            "var lastName = \"Lovelace\";",
            "",
            "// Only change code below this line.",
            "var lastLetterOfLastName = lastName;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(v){return v;})(lastLetterOfLastName);"
          ]
        }
      }
    },
    {
      "id": "bd7123c9c452eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the Nth-to-Last Character in a String",
      "description": [
        "You can use the same principle we just used to retrieve the last character in a string to retrieve the Nth-to-last character.",
        "For example, you can get the value of the third-to-last letter of the <code>var firstName = \"Charles\"</code> string by using <code>firstName[firstName.length - 3]</code>",
        "<hr>",
        "Use <dfn>bracket notation</dfn> to find the second-to-last character in the <code>lastName</code> string.",
        "<strong>Hint</strong><br>Try looking at the <code>thirdToLastLetterOfFirstName</code> variable declaration if you get stuck."
      ],
      "solutions": [
        "var firstName = \"Ada\";\nvar thirdToLastLetterOfFirstName = firstName[firstName.length - 3];\n\nvar lastName = \"Lovelace\";\nvar secondToLastLetterOfLastName = lastName[lastName.length - 2];"
      ],
      "tests": [
        {
          "text": "<code>secondToLastLetterOfLastName</code> should be \"c\".",
          "testString": "assert(secondToLastLetterOfLastName === 'c', '<code>secondToLastLetterOfLastName</code> should be \"c\".');"
        },
        {
          "text": "You have to use <code>.length</code> to get the second last letter.",
          "testString": "assert(code.match(/\\.length/g).length === 2, 'You have to use <code>.length</code> to get the second last letter.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Usa notación de corchetes para encontrar el n-ésimo último caracter de una cadena",
          "description": [
            "Puede utilizar el mismo principio utilizamos para recuperar el último caracter de una cadena para recuperar el n-ésimo último caracter.",
            "Por ejemplo, se puede obtener el valor de la tercera última letra de la cadena <code>var firstName = \"Charles\"</code> utilizando <code>firstName[firstName.length - 3]</code> ",
            "<h4>Instrucciones</h4>",
            "Usa <code>notación de corchete</code> para encontrar el segundo último caracter de la cadena en <code>lastName</code>.",
            "<strong>Pista</strong><br>Si te atascas intenta mirando la declaración de la variable <code>thirdToLastLetterOfFirstName</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var firstName = \"Ada\";",
            "var thirdToLastLetterOfFirstName = firstName[firstName.length - 3];",
            "",
            "// Setup",
            "var lastName = \"Lovelace\";",
            "",
            "// Only change code below this line",
            "var secondToLastLetterOfLastName = lastName;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(v){return v;})(secondToLastLetterOfLastName);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244bb",
      "title": "Word Blanks",
      "description": [
        "We will now use our knowledge of strings to build a \"<a href='https://en.wikipedia.org/wiki/Mad_Libs' target='_blank'>Mad Libs</a>\" style word game we're calling \"Word Blanks\". You will create an (optionally humorous) \"Fill in the Blanks\" style sentence.",
        "In a \"Mad Libs\" game, you are provided sentences with some missing words, like nouns, verbs, adjectives and adverbs. You then fill in the missing pieces with words of your choice in a way that the completed sentence makes sense.",
        "Consider this sentence - \"It was really <strong>____</strong>, and we <strong>____</strong> ourselves <strong>____</strong>\". This sentence has three missing pieces- an adjective, a verb and an adverb, and we can add words of our choice to complete it. We can then assign the completed sentence to a variable as follows:",
        "<blockquote>var sentence = \"It was really\" + \"hot\" + \", and we\" + \"laughed\" + \"ourselves\" + \"silly.\";</blockquote>",
        "<hr>",
        "In this challenge, we provide you with a noun, a verb, an adjective and an adverb. You need to form a complete sentence using words of your choice, along with the words we provide.",
        "You will need to use the string concatenation operator <code>+</code> to build a new string, using the provided variables: <code>myNoun</code>, <code>myAdjective</code>, <code>myVerb</code>, and <code>myAdverb</code>. You will then assign the formed string to the <code>result</code> variable.",
        "You will also need to account for spaces in your string, so that the final sentence has spaces between all the words. The result should be a complete sentence."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {\n  var result = \"\";\n\n  result = \"Once there was a \" + myNoun + \" which was very \" + myAdjective + \". \";\n  result += \"It \" + myVerb + \" \" + myAdverb + \" around the yard.\";\n\n  return result;\n}"
      ],
      "tests": [
        {
          "text": "<code>wordBlanks(\"\",\"\",\"\",\"\")</code> should return a string.",
          "testString": "assert(typeof wordBlanks(\"\",\"\",\"\",\"\") === 'string', '<code>wordBlanks(\"\",\"\",\"\",\"\")</code> should return a string.');"
        },
        {
          "text": "<code>wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\")</code> should contain all of the passed in words separated by non-word characters (and any additional words in your madlib).",
          "testString": "assert(/\\bdog\\b/.test(test1) && /\\bbig\\b/.test(test1) && /\\bran\\b/.test(test1) && /\\bquickly\\b/.test(test1),'<code>wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\")</code> should contain all of the passed in words separated by non-word characters (and any additional words in your madlib).');"
        },
        {
          "text": "<code>wordBlanks(\"cat\", \"little\", \"hit\", \"slowly\")</code> should contain all of the passed in words separated by non-word characters (and any additional words in your madlib).",
          "testString": "assert(/\\bcat\\b/.test(test2) && /\\blittle\\b/.test(test2) && /\\bhit\\b/.test(test2) && /\\bslowly\\b/.test(test2),'<code>wordBlanks(\"cat\", \"little\", \"hit\", \"slowly\")</code> should contain all of the passed in words separated by non-word characters (and any additional words in your madlib).');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Espacios en blanco de palabras",
          "description": [
            "Ahora usaremos nuestro conocimiento de cadenas para construir un juego de palabras estilo \"<a href='https://en.wikipedia.org/wiki/Mad_Libs' target='_blank'>Mad Libs</a>\" que llamaremos \"Espacios en Blanco de Palabras\". Vas a crear unas oraciones estilo (opcionalmente graciosa) \"Llena los espacios en blanco\".",
            "Necesitarás usar operadores de cadenas para construir una nueva cadena <code>result</code>, usando las variables previstas: <code>myNoun</code>, <code>myAdjective</code>, <code>myVerb</code> y <code>myAdverb</code>.",
            "Además, necesitarás proporcionar cadenas adicionales, las cuales no cambiarán entre las palabras proporcionadas.",
            "Nosotros hemos proporcionado un marco de referencia para probar tus resultados con diferentes palabras. La prueba correrá tu función con varias palabras diferentes para asegurarse  que todas las palabras proporcionadas aparezcan en la salida, así como en tus cadenas adicionales."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {",
            "  // Your code below this line",
            "  var result = \"\";",
            "",
            "  // Your code above this line",
            "  return result;",
            "}",
            "",
            "// Change the words here to test your function",
            "wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\");"
          ],
          "head": [],
          "tail": [
            "var test1 = wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\");",
            "var test2 = wordBlanks(\"cat\", \"little\", \"hit\", \"slowly\");"
          ]
        }
      }
    },
    {
      "id": "bd7993c9c69feddfaeb8bdef",
      "title": "Store Multiple Values in one Variable using JavaScript Arrays",
      "description": [
        "With JavaScript <code>array</code> variables, we can store several pieces of data in one place.",
        "You start an array declaration with an opening square bracket, end it with a closing square bracket, and put a comma between each entry, like this: ",
        "<code>var sandwich = [\"peanut butter\", \"jelly\", \"bread\"]</code>.",
        "<hr>",
        "Modify the new array <code>myArray</code> so that it contains both a <code>string</code> and a <code>number</code> (in that order).",
        "<strong>Hint</strong><br>Refer to the example code in the text editor if you get stuck."
      ],
      "solutions": [
        "var myArray = [\"The Answer\", 42];"
      ],
      "tests": [
        {
          "text": "<code>myArray</code> should be an <code>array</code>.",
          "testString": "assert(typeof myArray == 'object', '<code>myArray</code> should be an <code>array</code>.');"
        },
        {
          "text": "The first item in <code>myArray</code> should be a <code>string</code>.",
          "testString": "assert(typeof myArray[0] !== 'undefined' && typeof myArray[0] == 'string', 'The first item in <code>myArray</code> should be a <code>string</code>.');"
        },
        {
          "text": "The second item in <code>myArray</code> should be a <code>number</code>.",
          "testString": "assert(typeof myArray[1] !== 'undefined' && typeof myArray[1] == 'number', 'The second item in <code>myArray</code> should be a <code>number</code>.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Almacena múltiples valores en una variable utilizando vectores en JavaScript",
          "description": [
            "Con las variables tipo <code>vector</code> (o en inglés <code>array</code>) podemos almacenar diversos datos en un solo lugar.",
            "Empiezas la declaración de un vector con un corchete de apertura, y terminas con un corchete de cierre, y pones una coma entre cada entrada, así: <code>var sandwich = [\"mantequilla de maní\", \"jalea\" , \"pan\"]</code>. ",
            "<h4>Instrucciones</h4>",
            "Ahora vamos a crear un nuevo vector llamado <code>myArray</code> que contenga una <code>cadena</code> y un <code>número</code> (en ese orden).",
            "Consulta el código comentado en el editor de texto si te atascas."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourArray = [\"John\", 23];",
            "",
            "// Only change code below this line.",
            "var myArray = [];",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return z;})(myArray);"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb7bdef",
      "title": "Nest one Array within Another Array",
      "description": [
        "You can also nest arrays within other arrays, like this: <code>[[\"Bulls\", 23], [\"White Sox\", 45]]</code>. This is also called a <dfn>Multi-dimensional Array<dfn>.",
        "<hr>",
        "Create a nested array called <code>myArray</code>."
      ],
      "solutions": [
        "var myArray = [[1,2,3]];"
      ],
      "tests": [
        {
          "text": "<code>myArray</code> should have at least one array nested within another array.",
          "testString": "assert(Array.isArray(myArray) && myArray.some(Array.isArray), '<code>myArray</code> should have at least one array nested within another array.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Anida un vector dentro de otro vector",
          "description": [
            "También puedes anidar vectores dentro de otros vectores, como este: <code>[[\"Bulls\", 23], [\"White Sox\", 45]]</code>.",
            "<h4>Instrucciones</h4>",
            "Ahora vamos a crear un vector anidado llamado <code>myArray</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourArray = [[\"the universe\", 42], [\"everything\", 101010]];",
            "",
            "// Only change code below this line.",
            "var myArray = [];",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392ca",
      "title": "Access Array Data with Indexes",
      "description": [
        "We can access the data inside arrays using <code>indexes</code>.",
        "Array indexes are written in the same bracket notation that strings use, except that instead of specifying a character, they are specifying an entry in the array. Like strings, arrays use <dfn>zero-based</dfn> indexing, so the first element in an array is element <code>0</code>.",
        "<strong>Example</strong>",
        "<blockquote>var array = [50,60,70];<br>array[0]; // equals 50<br>var data = array[1];  // equals 60</blockquote>",
        "<strong>Note</strong><br>There shouldn't be any spaces between the array name and the square brackets, like <code>array [0]</code>. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.",
        "<hr>",
        "Create a variable called <code>myData</code> and set it to equal the first value of <code>myArray</code> using bracket notation."
      ],
      "solutions": [
        "var myArray = [50,60,70];\nvar myData = myArray[0];"
      ],
      "tests": [
        {
          "text": "The variable <code>myData</code> should equal the first value of <code>myArray</code>.",
          "testString": "assert((function(){if(typeof myArray !== 'undefined' && typeof myData !== 'undefined' && myArray[0] === myData){return true;}else{return false;}})(), 'The variable <code>myData</code> should equal the first value of <code>myArray</code>.');"
        },
        {
          "text": "The data in variable <code>myArray</code> should be accessed using bracket notation.",
          "testString": "assert((function(){if(code.match(/\\s*=\\s*myArray\\[0\\]/g)){return true;}else{return false;}})(), 'The data in variable <code>myArray</code> should be accessed using bracket notation.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Accede a los datos de un vector mediante índices",
          "description": [
            "Podemos acceder a los datos dentro de los vectores usando <code>índices</code>.",
            "Los índices del vector se escriben en la misma notación con corchetes usado con cadenas, excepto que en lugar de especificar un caracter, especifican un elemento del vector.",
            "Por ejemplo:",
            "<code>var array = [1,2,3];</code>",
            "<code>array[0]; //es igual a 1</code>",
            "<code>var data = array[1];</code>",
            "<h4>Instrucciones</h4>",
            "Crea una variable llamada <code>myData</ ​​code> y asignale el primer valor del vector <code>myArray</code>."
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/access-array-data-with-indexes",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourArray = [50,60,70];",
            "var ourData = ourArray[0]; // equals 50",
            "",
            "// Setup",
            "var myArray = [50,60,70];",
            "",
            "// Only change code below this line.",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\" && typeof myData !== \"undefined\"){(function(y,z){return 'myArray = ' + JSON.stringify(y) + ', myData = ' + JSON.stringify(z);})(myArray, myData);}"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb8bdef",
      "title": "Modify Array Data With Indexes",
      "description": [
        "Unlike strings, the entries of arrays are <dfn>mutable</dfn> and can be changed freely.",
        "<strong>Example</strong>",
        "<blockquote>var ourArray = [50,40,30];<br>ourArray[0] = 15; // equals [15,40,30]</blockquote>",
        "<strong>Note</strong><br>There shouldn't be any spaces between the array name and the square brackets, like <code>array [0]</code>. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.",
        "<hr>",
        "Modify the data stored at index <code>0</code> of <code>myArray</code> to a value of <code>45</code>."
      ],
      "solutions": [
        "var myArray = [18,64,99];\nmyArray[0] = 45;"
      ],
      "tests": [
        {
          "text": "<code>myArray</code> should now be [45,64,99].",
          "testString": "assert((function(){if(typeof myArray != 'undefined' && myArray[0] == 45 && myArray[1] == 64 && myArray[2] == 99){return true;}else{return false;}})(), '<code>myArray</code> should now be [45,64,99].');"
        },
        {
          "text": "You should be using correct index to modify the value in <code>myArray</code>.",
          "testString": "assert((function(){if(code.match(/myArray\\[0\\]\\s*=\\s*/g)){return true;}else{return false;}})(), 'You should be using correct index to modify the value in <code>myArray</code>.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Modifica datos de un vector usando índices",
          "description": [
            "También podemos modificar los datos almacenados en vectores usando índices.",
            "Por ejemplo:",
            "<code>var ourArray = [3,2,1];</code>",
            "<code>ourArray[0] = 1; // equals [1,2,1]</code>",
            "<h4>Instrucciones</h4>",
            "Ahora establece el dato almacenado en el índice 0 de <code>myArray</code> para que sea el valor 3."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourArray = [18,64,99];",
            "ourArray[1] = 45; // ourArray now equals [18,45,99].",
            "",
            "// Setup",
            "var myArray = [18,64,99];",
            "",
            "// Only change code below this line.",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          ]
        }
      }
    },
    {
      "id": "56592a60ddddeae28f7aa8e1",
      "title": "Access Multi-Dimensional Arrays With Indexes",
      "description": [
        "One way to think of a <dfn>multi-dimensional</dfn> array, is as an <em>array of arrays</em>. When you use brackets to access your array, the first set of brackets refers to the entries in the outer-most (the first level) array, and each additional pair of brackets refers to the next level of entries inside.",
        "<strong>Example</strong>",
        "<blockquote>var arr = [<br>&nbsp;&nbsp;[1,2,3],<br>&nbsp;&nbsp;[4,5,6],<br>&nbsp;&nbsp;[7,8,9],<br>&nbsp;&nbsp;[[10,11,12], 13, 14]<br>];<br>arr[3]; // equals [[10,11,12], 13, 14]<br>arr[3][0]; // equals [10,11,12]<br>arr[3][0][1]; // equals 11</blockquote>",
        "<strong>Note</strong><br>There shouldn't be any spaces between the array name and the square brackets, like <code>array [0][0]</code> and even this <code>array [0] [0]</code> is not allowed. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.",
        "<hr>",
        "Using bracket notation select an element from <code>myArray</code> such that <code>myData</code> is equal to <code>8</code>."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myArray = [[1,2,3],[4,5,6], [7,8,9], [[10,11,12], 13, 14]];\nvar myData = myArray[2][1];"
      ],
      "tests": [
        {
          "text": "<code>myData</code> should be equal to <code>8</code>.",
          "testString": "assert(myData === 8, '<code>myData</code> should be equal to <code>8</code>.');"
        },
        {
          "text": "You should be using bracket notation to read the correct value from <code>myArray</code>.",
          "testString": "assert(/myArray\\[2\\]\\[1\\]/g.test(code) && !/myData\\s*=\\s*(?:.*[-+*/%]|\\d)/g.test(code), 'You should be using bracket notation to read the correct value from <code>myArray</code>.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Acceder a vectores multi-dimensionales con índices",
          "description": [
            "Una manera de pensar un vector <dfn>multi-dimensional</dfn>, es como un <em>vector de vectores</em>. Cuando usas corchetes para acceder a tu vector, el primer conjunto de brackets se refiere a las entradas en el vector más externo y cada nivel subsecuente de brackets se refiere al siguiente nivel de vectores internos.",
            "<strong>Ejemplo</strong>",
            "<blockquote>var vec = [<br>&nbsp;&nbsp;[1,2,3],<br>&nbsp;&nbsp;[4,5,6],<br>&nbsp;&nbsp;[7,8,9],<br>&nbsp;&nbsp;[[10,11,12], 13, 14]<br>];<br>vec[0]; // es igual [1,2,3]<br>vec[1][2]; // es igual 6<br>vec[3][0][1]; // es igual 11</blockquote>",
            "<h4>Instrucciones</h4>",
            "Lee de <code>myArray</code> usando la notación corchete de modo que myData sea igual a <code>8</code>"
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/access-array-data-with-indexes",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "var myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];",
            "",
            "// Only change code below this line.",
            "var myData = myArray[0][0];",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\"){(function(){return \"myData: \" + myData + \" myArray: \" + JSON.stringify(myArray);})();}"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392cb",
      "title": "Manipulate Arrays With push()",
      "description": [
        "An easy way to append data to the end of an array is via the <code>push()</code> function.",
        "<code>.push()</code> takes one or more <dfn>parameters</dfn> and \"pushes\" them onto the end of the array.",
        "<blockquote>var arr = [1,2,3];<br>arr.push(4);<br>// arr is now [1,2,3,4]</blockquote>",
        "<hr>",
        "Push <code>[\"dog\", 3]</code> onto the end of the <code>myArray</code> variable."
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"cat\", 2]];\nmyArray.push([\"dog\",3]);"
      ],
      "tests": [
        {
          "text": "<code>myArray</code> should now equal <code>[[\"John\", 23], [\"cat\", 2], [\"dog\", 3]]</code>.",
          "testString": "assert((function(d){if(d[2] != undefined && d[0][0] == 'John' && d[0][1] === 23 && d[2][0] == 'dog' && d[2][1] === 3 && d[2].length == 2){return true;}else{return false;}})(myArray), '<code>myArray</code> should now equal <code>[[\"John\", 23], [\"cat\", 2], [\"dog\", 3]]</code>.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Manipula vectores con push()",
          "description": [
            "No sólo se pueden sacar datos del final de un vector con <code>pop()</code>, también puedes empujar (<code>push()</code>) datos al final del vector.",
            "<h4>Instrucciones</h4>",
            "Empuja <code>[\"dog\", 3]</code> al final de la variable <code>myArray</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourArray = [\"Stimpson\", \"J\", \"cat\"];",
            "ourArray.push([\"happy\", \"joy\"]); ",
            "// ourArray now equals [\"Stimpson\", \"J\", \"cat\", [\"happy\", \"joy\"]]",
            "",
            "// Setup",
            "var myArray = [[\"John\", 23], [\"cat\", 2]];",
            "",
            "// Only change code below this line.",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return 'myArray = ' + JSON.stringify(z);})(myArray);"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392cc",
      "title": "Manipulate Arrays With pop()",
      "description": [
        "Another way to change the data in an array is with the <code>.pop()</code> function.",
        "<code>.pop()</code> is used to \"pop\" a value off of the end of an array. We can store this \"popped off\" value by assigning it to a variable. In other words, <code>.pop()</code> removes the last element from an array and returns that element.",
        "Any type of entry can be \"popped\" off of an array - numbers, strings, even nested arrays.",
        "<blockquote><code>var threeArr = [1, 4, 6];<br> var oneDown = threeArr.pop();<br> console.log(oneDown); // Returns 6<br> console.log(threeArr); // Returns [1, 4]</code></blockquote>",
        "<hr>",
        "Use the <code>.pop()</code> function to remove the last item from <code>myArray</code>, assigning the \"popped off\" value to <code>removedFromMyArray</code>."
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"cat\", 2]];\nvar removedFromMyArray = myArray.pop();"
      ],
      "tests": [
        {
          "text": "<code>myArray</code> should only contain <code>[[\"John\", 23]]</code>.",
          "testString": "assert((function(d){if(d[0][0] == 'John' && d[0][1] === 23 && d[1] == undefined){return true;}else{return false;}})(myArray), '<code>myArray</code> should only contain <code>[[\"John\", 23]]</code>.');"
        },
        {
          "text": "Use <code>pop()</code> on <code>myArray</code>",
          "testString": "assert(/removedFromMyArray\\s*=\\s*myArray\\s*.\\s*pop\\s*(\\s*)/.test(code), 'Use <code>pop()</code> on <code>myArray</code>');"
        },
        {
          "text": "<code>removedFromMyArray</code> should only contain <code>[\"cat\", 2]</code>.",
          "testString": "assert((function(d){if(d[0] == 'cat' && d[1] === 2 && d[2] == undefined){return true;}else{return false;}})(removedFromMyArray), '<code>removedFromMyArray</code> should only contain <code>[\"cat\", 2]</code>.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Manipula vectores con pop()",
          "description": [
            "Otra forma de cambiar los datos en un vector es con la función <code>.pop()</code>.",
            "<code>.pop()</code> se utiliza para \"sacar\" el valor final de un vector. Podemos almacenar el valor \"sacado\" asignando <code>pop</code> a una variable por ejemplo durante su declaración.",
            "Todo tipo de datos puede ser \"sacado\" de un vector --números, cadenas, incluso los vectores anidadas.",
            "<h4>Instrucciones</h4>",
            "Usa la función <code>.pop()</code> para sacar el último elemento de <code>myArray</code> y asigna ese valor \"sacado\" a <code>removedFromMyArray </code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourArray = [1,2,3];",
            "var removedFromOurArray = ourArray.pop(); ",
            "// removedFromOurArray now equals 3, and ourArray now equals [1,2]",
            "",
            "// Setup",
            "var myArray = [[\"John\", 23], [\"cat\", 2]];",
            "",
            "// Only change code below this line.",
            "var removedFromMyArray;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(y, z){return 'myArray = ' + JSON.stringify(y) + ' & removedFromMyArray = ' + JSON.stringify(z);})(myArray, removedFromMyArray);"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392cd",
      "title": "Manipulate Arrays With shift()",
      "description": [
        "<code>pop()</code> always removes the last element of an array. What if you want to remove the first?",
        "That's where <code>.shift()</code> comes in. It works just like <code>.pop()</code>, except it removes the first element instead of the last.",
        "<hr>",
        "Use the <code>.shift()</code> function to remove the first item from <code>myArray</code>, assigning the \"shifted off\" value to <code>removedFromMyArray</code>."
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"dog\", 3]];\n\n// Only change code below this line.\nvar removedFromMyArray = myArray.shift();"
      ],
      "tests": [
        {
          "text": "<code>myArray</code> should now equal <code>[[\"dog\", 3]]</code>.",
          "testString": "assert((function(d){if(d[0][0] == 'dog' && d[0][1] === 3 && d[1] == undefined){return true;}else{return false;}})(myArray), '<code>myArray</code> should now equal <code>[[\"dog\", 3]]</code>.');"
        },
        {
          "text": "<code>removedFromMyArray</code> should contain <code>[\"John\", 23]</code>.",
          "testString": "assert((function(d){if(d[0] == 'John' && d[1] === 23 && typeof removedFromMyArray === 'object'){return true;}else{return false;}})(removedFromMyArray), '<code>removedFromMyArray</code> should contain <code>[\"John\", 23]</code>.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Manipula vectores con shift()",
          "description": [
            "<code>pop()</code> siempre elimina el último elemento de un vector. ¿Qué pasa si quieres quitar el primero?",
            "Ahí es donde entra <code>.shift()</code>. Funciona igual que <code>.pop ()</code>, excepto que elimina el primer elemento en lugar del pasado. ",
            "<h4>Instrucciones</h4>",
            "Usa la función <code>.shift()</code> para eliminar el primer elemento de <code>myArray</code>, y el elemento que saques asignalo a <code>removedFromMyArra</code>"
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourArray = [\"Stimpson\", \"J\", [\"cat\"]];",
            "var removedFromOurArray = ourArray.shift();",
            "// removedFromOurArray now equals \"Stimpson\" and ourArray now equals [\"J\", [\"cat\"]].",
            "",
            "// Setup",
            "var myArray = [[\"John\", 23], [\"dog\", 3]];",
            "",
            "// Only change code below this line.",
            "var removedFromMyArray;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(y, z){return 'myArray = ' + JSON.stringify(y) + ' & removedFromMyArray = ' + JSON.stringify(z);})(myArray, removedFromMyArray);"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392ce",
      "title": "Manipulate Arrays With unshift()",
      "description": [
        "Not only can you <code>shift</code> elements off of the beginning of an array, you can also <code>unshift</code> elements to the beginning of an array i.e. add elements in front of the array.",
        "<code>.unshift()</code> works exactly like <code>.push()</code>, but instead of adding the element at the end of the array, <code>unshift()</code> adds the element at the beginning of the array.",
        "<hr>",
        "Add <code>[\"Paul\",35]</code> to the beginning of the <code>myArray</code> variable using <code>unshift()</code>."
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"dog\", 3]];\nmyArray.shift();\nmyArray.unshift([\"Paul\", 35]);"
      ],
      "tests": [
        {
          "text": "<code>myArray</code> should now have [[\"Paul\", 35], [\"dog\", 3]].",
          "testString": "assert((function(d){if(typeof d[0] === \"object\" && d[0][0] == 'Paul' && d[0][1] === 35 && d[1][0] != undefined && d[1][0] == 'dog' && d[1][1] != undefined && d[1][1] == 3){return true;}else{return false;}})(myArray), '<code>myArray</code> should now have [[\"Paul\", 35], [\"dog\", 3]].');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Manipula vectores con unshift()",
          "description": [
            "No sólo se puedes <code>correr</code> (shift) elementos del comienzo de un vector, también puedes <code>descorrerlos</code> (unshift) al comienzo.",
            "<code>unshift()</code> funciona exactamente igual que <code>push()</code>, pero en lugar de añadir el elemento al final del vector, <code>unshift()</code> añade el elemento al comienzo del vector. ",
            "<h4>Instrucciones</h4>",
            "Añade <code>\"Paul\"</code> al comienzo de la variable <code>myArray</code> usando <code>unshift()</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourArray = [\"Stimpson\", \"J\", \"cat\"];",
            "ourArray.shift(); // ourArray now equals [\"J\", \"cat\"]",
            "ourArray.unshift(\"Happy\"); ",
            "// ourArray now equals [\"Happy\", \"J\", \"cat\"]",
            "",
            "// Setup",
            "var myArray = [[\"John\", 23], [\"dog\", 3]];",
            "myArray.shift();",
            "",
            "// Only change code below this line.",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(y, z){return 'myArray = ' + JSON.stringify(y);})(myArray);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244bc",
      "title": "Shopping List",
      "description": [
        "Create a shopping list in the variable <code>myList</code>. The list should be a multi-dimensional array containing several sub-arrays.",
        "The first element in each sub-array should contain a string with the name of the item. The second element should be a number representing the quantity i.e.",
        "<code>[\"Chocolate Bar\", 15]</code>",
        "There should be at least 5 sub-arrays in the list."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myList = [\n  [\"Candy\", 10],\n  [\"Potatoes\", 12],\n  [\"Eggs\", 12],\n  [\"Catfood\", 1],\n  [\"Toads\", 9]\n];"
      ],
      "tests": [
        {
          "text": "<code>myList</code> should be an array",
          "testString": "assert(isArray, '<code>myList</code> should be an array');"
        },
        {
          "text": "The first elements in each of your sub-arrays must all be strings",
          "testString": "assert(hasString, 'The first elements in each of your sub-arrays must all be strings');"
        },
        {
          "text": "The second elements in each of your sub-arrays must all be numbers",
          "testString": "assert(hasNumber, 'The second elements in each of your sub-arrays must all be numbers');"
        },
        {
          "text": "You must have at least 5 items in your list",
          "testString": "assert(count > 4, 'You must have at least 5 items in your list');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Lista de compras",
          "description": [
            "Crea una lista de compras en la variable <code>myList</code>. La lista tiene que ser un vector multidimensional conteniendo varios sub-vectores.",
            "El primer elemento en cada sub-vector debe contener una cadena con el nombre del elemento. El segundo elemento debe ser un número representando la cantidad i. e.",
            "<code>[\"Barra de Chocolate\", 15]</code>",
            "Tiene que haber por lo menos 5 sub-vectores en la lista."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var myList = [];",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "var count = 0;",
            "var isArray = false;",
            "var hasString = false;",
            "var hasNumber = false;",
            "(function(list){",
            "  if(Array.isArray(myList)) {",
            "    isArray = true;",
            "    if(myList.length > 0) {",
            "      hasString = true;",
            "      hasNumber = true;",
            "      myList.forEach(function(elem) {",
            "        if(typeof elem[0] !== 'string') {",
            "          hasString = false;",
            "        }",
            "        if(typeof elem[1] !== 'number') {",
            "          hasNumber = false;",
            "        }",
            "      });",
            "    }",
            "    count = myList.length;",
            "    return JSON.stringify(myList);",
            "  } else {",
            "    return \"myList is not an array\";",
            "  }",
            "",
            "})(myList);"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392cf",
      "title": "Write Reusable JavaScript with Functions",
      "description": [
        "In JavaScript, we can divide up our code into reusable parts called <dfn>functions</dfn>.",
        "Here's an example of a function:",
        "<blockquote>function functionName() {<br>&nbsp;&nbsp;console.log(\"Hello World\");<br>}</blockquote>",
        "You can call or <dfn>invoke</dfn> this function by using its name followed by parentheses, like this:",
        "<code>functionName();</code>",
        "Each time the function is called it will print out the message <code>\"Hello World\"</code> on the dev console. All of the code between the curly braces will be executed every time the function is called.",
        "<hr>",
        "<ol><li>Create a function called <code>reusableFunction</code> which prints <code>\"Hi World\"</code> to the dev console.</li><li>Call the function.</li></ol>"
      ],
      "solutions": [
        "function reusableFunction() {\n  console.log(\"Hi World\");\n}\nreusableFunction();"
      ],
      "tests": [
        {
          "text": "<code>reusableFunction</code> should be a function",
          "testString": "assert(typeof reusableFunction === 'function', '<code>reusableFunction</code> should be a function');"
        },
        {
          "text": "<code>reusableFunction</code> should output \"Hi World\" to the dev console",
          "testString": "assert(\"Hi World\" === logOutput, '<code>reusableFunction</code> should output \"Hi World\" to the dev console');"
        },
        {
          "text": "Call <code>reusableFunction</code> after you define it",
          "testString": "assert(/^\\s*reusableFunction\\(\\)\\s*;/m.test(code), 'Call <code>reusableFunction</code> after you define it');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Escribe código JavaScript reutilizable con funciones",
          "description": [
            "En JavaScript, podemos dividir nuestro código en partes reutilizables llamadas funciones.",
            "He aquí un ejemplo de una función:",
            "<code>function nombreDeFuncion(a, b) {</code>",
            "<code>& nbsp; & nbsp; return a + b;</code>",
            "<code>}</code>",
            "Después de escribir las líneas anteriores en nuestro código, podemos pasar valores a nuestra función y el resultado que sigue a la instrucción <code>return</code> será retornado.",
            "Por ejemplo, podemos pasar los números <code>4</code> y <code>2</code> al \"llamar\" la función más adelante en nuestro código, así: <code>nombreDeFuncion(4, 2)</ code >. ",
            "En este ejemplo, la función devolverá el número <code>6</code>, ya que es el resultado de <code>4 + 2</code>.",
            "Crea y llama una función de nombre <code>myFunction</code> que devuelva la suma de <code>a</code> y <code>b</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "function ourReusableFunction() {",
            "  console.log(\"Heyya, World\");",
            "}",
            "",
            "ourReusableFunction();",
            "",
            "// Only change code below this line",
            ""
          ],
          "head": [
            "var logOutput = \"\";",
            "var originalConsole = console",
            "function capture() {",
            "    var nativeLog = console.log;",
            "    console.log = function (message) {",
            "        if(message && message.trim) logOutput = message.trim();",
            "        if(nativeLog.apply) {",
            "          nativeLog.apply(originalConsole, arguments);",
            "        } else {",
            "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
            "          nativeLog(nativeMsg);",
            "        }",
            "    };",
            "}",
            "",
            "function uncapture() {",
            "  console.log = originalConsole.log;",
            "}",
            "",
            "capture();"
          ],
          "tail": [
            "uncapture();",
            "",
            "if (typeof reusableFunction !== \"function\") { ",
            "  (function() { return \"reusableFunction is not defined\"; })();",
            "} else {",
            "  (function() { return logOutput || \"console.log never called\"; })();",
            "}"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244bd",
      "title": "Passing Values to Functions with Arguments",
      "description": [
        "<dfn>Parameters</dfn> are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters. The actual values that are input (or <dfn>\"passed\"</dfn>) into a function when it is called are known as <dfn>arguments</dfn>.",
        "Here is a function with two parameters, <code>param1</code> and <code>param2</code>:",
        "<blockquote>function testFun(param1, param2) {<br>&nbsp;&nbsp;console.log(param1, param2);<br>}</blockquote>",
        "Then we can call <code>testFun</code>:",
        "<code>testFun(\"Hello\", \"World\");</code>",
        "We have passed two arguments, <code>\"Hello\"</code> and <code>\"World\"</code>. Inside the function, <code>param1</code> will equal \"Hello\" and <code>param2</code> will equal \"World\". Note that you could call <code>testFun</code> again with different arguments and the parameters would take on the value of the new arguments.",
        "<hr>",
        "<ol><li>Create a function called <code>functionWithArgs</code> that accepts two arguments and outputs their sum to the dev console.</li><li>Call the function with two numbers as arguments.</li></ol>"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function functionWithArgs(a, b) {\n  console.log(a + b);\n}\nfunctionWithArgs(10, 5);"
      ],
      "tests": [
        {
          "text": "<code>functionWithArgs</code> should be a function",
          "testString": "assert(typeof functionWithArgs === 'function', '<code>functionWithArgs</code> should be a function');"
        },
        {
          "text": "<code>functionWithArgs(1,2)</code> should output <code>3</code>",
          "testString": "if(typeof functionWithArgs === \"function\") { capture(); functionWithArgs(1,2); uncapture(); } assert(logOutput == 3, '<code>functionWithArgs(1,2)</code> should output <code>3</code>');"
        },
        {
          "text": "<code>functionWithArgs(7,9)</code> should output <code>16</code>",
          "testString": "if(typeof functionWithArgs === \"function\") { capture(); functionWithArgs(7,9); uncapture(); } assert(logOutput == 16, '<code>functionWithArgs(7,9)</code> should output <code>16</code>');"
        },
        {
          "text": "Call <code>functionWithArgs</code> with two numbers after you define it.",
          "testString": "assert(/^\\s*functionWithArgs\\s*\\(\\s*\\d+\\s*,\\s*\\d+\\s*\\)\\s*;/m.test(code), 'Call <code>functionWithArgs</code> with two numbers after you define it.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Pasando valores a funciones con argumentos",
          "description": [
            "Los <dfn>parámetros</dfn> son variables que actúan como marcadores de lugar para los valores que han de ser entrada para una función cuando esta es llamada. Cuando una función es definida, es típicamente definida con uno o más parámetros. Los valores actuales que son entrada (or <dfn>\"pasados\"</dfn>) dentro de una función cuando esta es llamada son concidos como <dfn>argumentos</dfn>.",
            "Aquí hay una función con dos parámetros, <code>param1</code> y <code>param2</code>:",
            "<blockquote>function testFun(param1, param2) {<br>&nbsp;&nbsp;console.log(param1, param2);<br>}</blockquote>",
            "Entonces nosotros podemos llamar <code>testFun</code>:",
            "<code>testFun(\"Hello\", \"World\");</code>",
            "Nosotros hemos pasado dos argumentos, <code>\"Hello\"</code> y <code>\"World\"</code>. Dentro de la función, <code>param1</code> será igual a \"Hello\" y <code>param2</code> será igual a \"World\". Nota que puedes llamar <code>testFun</code> otra vez con argumentos diferentes y los parámetros asumirían el valor de los nuevos argumentos.",
            "<h4>Instrucciones</h4>",
            "<ol><li>Crea una función llamada <code>functionWithArgs</code> que acepte dos argumentos y da salida a su suma en la consola.</li><li>Llama la función.</li></ol>"
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "function ourFunctionWithArgs(a, b) {",
            "  console.log(a - b);",
            "}",
            "ourFunctionWithArgs(10, 5); // Outputs 5",
            "",
            "// Only change code below this line.",
            "",
            ""
          ],
          "head": [
            "var logOutput = \"\";",
            "var originalConsole = console",
            "function capture() {",
            "    var nativeLog = console.log;",
            "    console.log = function (message) {",
            "        if(message) logOutput = JSON.stringify(message).trim();",
            "        if(nativeLog.apply) {",
            "          nativeLog.apply(originalConsole, arguments);",
            "        } else {",
            "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
            "          nativeLog(nativeMsg);",
            "        }",
            "    };",
            "}",
            "",
            "function uncapture() {",
            "  console.log = originalConsole.log;",
            "}",
            "",
            "capture();"
          ],
          "tail": [
            "uncapture();",
            "",
            "if (typeof functionWithArgs !== \"function\") { ",
            "  (function() { return \"functionWithArgs is not defined\"; })();",
            "} else {",
            "  (function() { return logOutput || \"console.log never called\"; })();",
            "}"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244be",
      "title": "Global Scope and Functions",
      "description": [
        "In JavaScript, <dfn>scope</dfn> refers to the visibility of variables. Variables which are defined outside of a function block have <dfn>Global</dfn> scope. This means, they can be seen everywhere in your JavaScript code.",
        "Variables which are used without the <code>var</code> keyword are automatically created in the <code>global</code> scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with <code>var</code>.",
        "<hr>",
        "Using <code>var</code>, declare a <code>global</code> variable <code>myGlobal</code> outside of any function. Initialize it with a value of <code>10</code>.",
        "Inside function <code>fun1</code>, assign <code>5</code> to <code>oopsGlobal</code> <strong><em>without</em></strong> using the <code>var</code> keyword."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "// Declare your variable here\nvar myGlobal = 10;\n\nfunction fun1() {\n  // Assign 5 to oopsGlobal Here\n  oopsGlobal = 5;\n}\n\n// Only change code above this line\nfunction fun2() {\n  var output = \"\";\n  if(typeof myGlobal != \"undefined\") {\n    output += \"myGlobal: \" + myGlobal;\n  }\n  if(typeof oopsGlobal != \"undefined\") {\n    output += \" oopsGlobal: \" + oopsGlobal;\n  }\n  console.log(output);\n}"
      ],
      "tests": [
        {
          "text": "<code>myGlobal</code> should be defined",
          "testString": "assert(typeof myGlobal != \"undefined\", '<code>myGlobal</code> should be defined');"
        },
        {
          "text": "<code>myGlobal</code> should have a value of <code>10</code>",
          "testString": "assert(myGlobal === 10, '<code>myGlobal</code> should have a value of <code>10</code>');"
        },
        {
          "text": "<code>myGlobal</code> should be declared using the <code>var</code> keyword",
          "testString": "assert(/var\\s+myGlobal/.test(code), '<code>myGlobal</code> should be declared using the <code>var</code> keyword');"
        },
        {
          "text": "<code>oopsGlobal</code> should be a global variable and have a value of <code>5</code>",
          "testString": "assert(typeof oopsGlobal != \"undefined\" && oopsGlobal === 5, '<code>oopsGlobal</code> should be a global variable and have a value of <code>5</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Alcance global y funciones",
          "description": [
            "En JavaScript, <dfn>alcance</dfn> se referiere a la visibilidad de variables. Las variables que definas fuera de un bloque de una función tienen alcance <dfn>Global</dfn>. Esto significa que ellas pueden ser vistas en todas partes en tu código JavaScript.",
            "Las variables que pueden ser usadas sin la palabra clave <code>var</code> son automáticamente creadas en el alcance <code>global</code>. Esto puede tener consecuencias no deseadas en otras partes de tu código o cuando se ejecuta una función de nuevo. Tu siempre deberías declarar tus variables con <code>var</code>.",
            "<h4>Instrucciones</h4>",
            "Declara a variable <code>global</code> <code>myGlobal</code> fuera de cualquier función. Inicializala para tener un valor de <code>10</code> ",
            "Dentro de la función <code>fun1</code>, asigna <code>5</code> a <code>oopsGlobal</code> <strong><em>sin</em></strong> usar la palabra clave <code>var</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Declare your variable here",
            "",
            "",
            "function fun1() {",
            "  // Assign 5 to oopsGlobal Here",
            "  ",
            "}",
            "",
            "// Only change code above this line",
            "function fun2() {",
            "  var output = \"\";",
            "  if (typeof myGlobal != \"undefined\") {",
            "    output += \"myGlobal: \" + myGlobal;",
            "  }",
            "  if (typeof oopsGlobal != \"undefined\") {",
            "    output += \" oopsGlobal: \" + oopsGlobal;",
            "  }",
            "  console.log(output);",
            "}"
          ],
          "head": [
            "var logOutput = \"\";",
            "var originalConsole = console",
            "function capture() {",
            "    var nativeLog = console.log;",
            "    console.log = function (message) {",
            "        logOutput = message;",
            "        if(nativeLog.apply) {",
            "          nativeLog.apply(originalConsole, arguments);",
            "        } else {",
            "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
            "          nativeLog(nativeMsg);",
            "        }",
            "    };",
            "}",
            "",
            "function uncapture() {",
            "  console.log = originalConsole.log;",
            "}",
            "var oopsGlobal;",
            "capture();"
          ],
          "tail": [
            "fun1();",
            "fun2();",
            "uncapture();",
            "(function() { return logOutput || \"console.log never called\"; })();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244bf",
      "title": "Local Scope and Functions",
      "description": [
        "Variables which are declared within a function, as well as the function parameters have <dfn>local</dfn> scope. That means, they are only visible within that function.",
        "Here is a function <code>myTest</code> with a local variable called <code>loc</code>.",
        "<blockquote>function myTest() {<br>&nbsp;&nbsp;var loc = \"foo\";<br>&nbsp;&nbsp;console.log(loc);<br>}<br>myTest(); // logs \"foo\"<br>console.log(loc); // loc is not defined</blockquote>",
        "<code>loc</code> is not defined outside of the function.",
        "<hr>",
        "Declare a local variable <code>myVar</code> inside <code>myLocalScope</code>. Run the tests and then follow the instructions commented out in the editor.",
        "<strong>Hint</strong><br>Refreshing the page may help if you get stuck."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function myLocalScope() {\n  'use strict';\n  \n  var myVar;\n  console.log(myVar);\n}\nmyLocalScope();"
      ],
      "tests": [
        {
          "text": "No global <code>myVar</code> variable",
          "testString": "assert(typeof myVar === 'undefined', 'No global <code>myVar</code> variable');"
        },
        {
          "text": "Add a local <code>myVar</code> variable",
          "testString": "assert(/var\\s+myVar/.test(code), 'Add a local <code>myVar</code> variable');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Alcance local y funciones",
          "description": [
            "Las variables que son declaradas dentro de una función, así como los parámetros de la función tienen alcance <dfn>local</dfn>. Eso significa que solo son visibles dentro de esa función.",
            "Aquí está una función <code>myTest</code> con una variable local llamada <code>loc</code>.",
            "<blockquote>function myTest() {<br>&nbsp;&nbsp;var loc = \"foo\";<br>&nbsp;&nbsp;console.log(loc);<br>}<br>myTest(); // \"foo\"<br>console.log(loc); // \"undefined\"</blockquote>",
            "<code>loc</code> no está definida fuera de la función.",
            "<h4>Instrucciones</h4>",
            "Declara una variable local <code>myVar</code> dentro de <code>myLocalScope</code>"
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function myLocalScope() {",
            "  'use strict'; // you shouldn't need to edit this line",
            "  ",
            "  console.log(myVar);",
            "}",
            "myLocalScope();",
            "",
            "// Run and check the console",
            "// myVar is not defined outside of myLocalScope",
            "console.log(myVar);",
            "",
            "// Now remove the console log line to pass the test",
            ""
          ],
          "head": [
            "var logOutput = \"\";",
            "var originalConsole = console",
            "function capture() {",
            "  var nativeLog = console.log;",
            "  console.log = function (message) {",
            "    logOutput = message;",
            "    if(nativeLog.apply) {",
            "      nativeLog.apply(originalConsole, arguments);",
            "    } else {",
            "      var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
            "      nativeLog(nativeMsg);",
            "    }",
            "  };",
            "}",
            "",
            "function uncapture() {",
            "  console.log = originalConsole.log;",
            "}",
            ""
          ],
          "tail": [
            "typeof myLocalScope === 'function' && (capture(), myLocalScope(), uncapture());",
            "(function() { return logOutput || \"console.log never called\"; })();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c0",
      "title": "Global vs. Local Scope in Functions",
      "description": [
        "It is possible to have both <dfn>local</dfn> and <dfn>global</dfn> variables with the same name. When you do this, the <code>local</code> variable takes precedence over the <code>global</code> variable.",
        "In this example:",
        "<blockquote>var someVar = \"Hat\";<br>function myFun() {<br>&nbsp;&nbsp;var someVar = \"Head\";<br>&nbsp;&nbsp;return someVar;<br>}</blockquote>",
        "The function <code>myFun</code> will return <code>\"Head\"</code> because the <code>local</code> version of the variable is present.",
        "<hr>",
        "Add a local variable to <code>myOutfit</code> function to override the value of <code>outerWear</code> with <code>\"sweater\"</code>."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var outerWear = \"T-Shirt\";\nfunction myOutfit() {\n  var outerWear = \"sweater\";\n  return outerWear;\n}"
      ],
      "tests": [
        {
          "text": "Do not change the value of the global <code>outerWear</code>",
          "testString": "assert(outerWear === \"T-Shirt\", 'Do not change the value of the global <code>outerWear</code>');"
        },
        {
          "text": "<code>myOutfit</code> should return <code>\"sweater\"</code>",
          "testString": "assert(myOutfit() === \"sweater\", '<code>myOutfit</code> should return <code>\"sweater\"</code>');"
        },
        {
          "text": "Do not change the return statement",
          "testString": "assert(/return outerWear/.test(code), 'Do not change the return statement');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Alcance global vs. local en funciones",
          "description": [
            "Es posible tener variables <dfn>locales</dfn> y <dfn>globales</dfn> con el mismo nombre. Cuando tu haces esto, la variable <code>local</code> toma precedencia sobre la variable <code>global</code>.",
            "En este ejemplo:",
            "<blockquote>var algunaVar = \"Sombrero\";<br>function miFun() {<br>&nbsp;&nbsp;var algunaVar = \"Cabeza\";<br>&nbsp;&nbsp;return algunaVar;<br>}</blockquote>",
            "La función <code>miFun</code> regresará <code>\"Cabeza\"</code> porque la versión <code>local</code> de la variable tiene precedencia.",
            "<h4>Instrucciones</h4>",
            "Agrega una variable local a <code>myOutfit</code> para sobreescribir el valor de <code>outerWear</code> con <code>\"sweater\"</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "var outerWear = \"T-Shirt\";",
            "",
            "function myOutfit() {",
            "  // Only change code below this line",
            "  ",
            "  ",
            "  ",
            "  // Only change code above this line",
            "  return outerWear;",
            "}",
            "",
            "myOutfit();"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c2",
      "title": "Return a Value from a Function with Return",
      "description": [
        "We can pass values into a function with <dfn>arguments</dfn>. You can use a <code>return</code> statement to send a value back out of a function.",
        "<strong>Example</strong>",
        "<blockquote>function plusThree(num) {<br>&nbsp;&nbsp;return num + 3;<br>}<br>var answer = plusThree(5); // 8</blockquote>",
        "<code>plusThree</code> takes an <dfn>argument</dfn> for <code>num</code> and returns a value equal to <code>num + 3</code>.",
        "<hr>",
        "Create a function <code>timesFive</code> that accepts one argument, multiplies it by <code>5</code>, and returns the new value. See the last line in the editor for an example of how you can test your <code>timesFive</code> function."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function timesFive(num) {\n  return num * 5;\n}\ntimesFive(10);"
      ],
      "tests": [
        {
          "text": "<code>timesFive</code> should be a function",
          "testString": "assert(typeof timesFive === 'function', '<code>timesFive</code> should be a function');"
        },
        {
          "text": "<code>timesFive(5)</code> should return <code>25</code>",
          "testString": "assert(timesFive(5) === 25, '<code>timesFive(5)</code> should return <code>25</code>');"
        },
        {
          "text": "<code>timesFive(2)</code> should return <code>10</code>",
          "testString": "assert(timesFive(2) === 10, '<code>timesFive(2)</code> should return <code>10</code>');"
        },
        {
          "text": "<code>timesFive(0)</code> should return <code>0</code>",
          "testString": "assert(timesFive(0) === 0, '<code>timesFive(0)</code> should return <code>0</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Retorna un valor desde una función con return",
          "description": [
            "Podemos pasar valores a una función mediante los <dfn>argumentos</dfn>. Puedes usar una sentencia <code>return</code> para enviar un valor de vuelta de una función.",
            "<strong>Ejemplo</strong>",
            "<blockquote>function masTres(num) {<br>&nbsp;&nbsp;return num + 3;<br>}<br>var respuesta = masTres(5); // 8</blockquote>",
            "<code>masTres</code> toma un <dfn>argumento</dfn> que es <code>num</code> y retorna un valor igual a <code>num + 3</code>.",
            "<h4>Instrucciones</h4>",
            "Crea una función <code>timesFive</code> que acepte un argumento, lo multiplique por <code>5</code> y retorne el nuevo valor."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "function minusSeven(num) {",
            "  return num - 7;",
            "}",
            "",
            "// Only change code below this line",
            "",
            "",
            "",
            "console.log(minusSeven(10));"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "598e8944f009e646fc236146",
      "title": "Understanding Undefined Value returned from a Function",
      "description": [
        "A function can include the <code>return</code> statement but it does not have to. In the case that the function doesn't have a <code>return</code> statement, when you call it, the function processes the inner code but the returned value is <code>undefined</code>.",
        "<strong>Example</strong>",
        "<blockquote>var sum = 0;<br>function addSum(num) {<br>&nbsp;&nbsp;sum = sum + num;<br>}<br>var returnedValue = addSum(3); // sum will be modified but returned value is undefined</blockquote>",
        "<code>addSum</code> is a function without a <code>return</code> statement. The function will change the global <code>sum</code> variable but the returned value of the function is <code>undefined</code>",
        "<hr>",
        "Create a function <code>addFive</code> without any arguments. This function adds 5 to the <code>sum</code> variable, but its returned value is <code>undefined</code>."
      ],
      "releasedOn": "August 11, 2017",
      "solutions": [
        "function addFive() {\n sum = sum + 5;\n}"
      ],
      "tests": [
        {
          "text": "<code>addFive</code> should be a function",
          "testString": "assert(typeof addFive === 'function', '<code>addFive</code> should be a function');"
        },
        {
          "text": "<code>sum</code> should be equal to 8",
          "testString": "assert(sum === 8, '<code>sum</code> should be equal to 8');"
        },
        {
          "text": "Returned value from <code>addFive</code> should be <code>undefined</code>",
          "testString": "assert(addFive() === undefined, 'Returned value from <code>addFive</code> should be <code>undefined</code>');"
        },
        {
          "text": "Inside of your functions, add 5 to the <code>sum</code> variable",
          "testString": "assert(code.match(/(sum\\s*\\=\\s*sum\\s*\\+\\s*5)|(sum\\s*\\+\\=\\s*5)/g).length === 1, 'Inside of your functions, add 5 to the <code>sum</code> variable');"
        }
      ],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var sum = 0;",
            "function addThree() {",
            "  sum = sum + 3;",
            "}",
            "",
            "// Only change code below this line",
            "",
            "",
            "",
            "// Only change code above this line",
            "var returnedValue = addFive();"
          ],
          "head": [],
          "tail": [
            "var sum = 0;",
            "function addThree() {sum = sum + 3;}",
            "addThree();",
            "addFive();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c3",
      "title": "Assignment with a Returned Value",
      "description": [
        "If you'll recall from our discussion of <a href=\"javascript-algorithms-and-data-structures/basic-javascript/storing-values-with-the-assignment-operator\" target=\"_blank\">Storing Values with the Assignment Operator</a>, everything to the right of the equal sign is resolved before the value is assigned. This means we can take the return value of a function and assign it to a variable.",
        "Assume we have pre-defined a function <code>sum</code> which adds two numbers together, then: ",
        "<code>ourSum = sum(5, 12);</code>",
        "will call <code>sum</code> function, which returns a value of <code>17</code> and assigns it to <code>ourSum</code> variable.",
        "<hr>",
        "Call the <code>processArg</code> function with an argument of <code>7</code> and assign its return value to the variable <code>processed</code>."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var processed = 0;\n\nfunction processArg(num) {\n  return (num + 3) / 5;\n}\n\nprocessed = processArg(7);"
      ],
      "tests": [
        {
          "text": "<code>processed</code> should have a value of <code>2</code>",
          "testString": "assert(processed === 2, '<code>processed</code> should have a value of <code>2</code>');"
        },
        {
          "text": "You should assign <code>processArg</code> to <code>processed</code>",
          "testString": "assert(/processed\\s*=\\s*processArg\\(\\s*7\\s*\\)\\s*;/.test(code), 'You should assign <code>processArg</code> to <code>processed</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Asignación con un valor retornado",
          "description": [
            "Si recuerdas de nuestra discusión de <a href=\"waypoint-storing-values-with-the-equal-operator\" target=\"_blank\">Almacenar Valores con el Operador Igual</a>, todo a la derecha del signo igual es resuelto antes que el valor sea asignado. Esto significa que nosotros podemos tomar el valor de retorno de una función y asignarlo a una variable.",
            "Supongamos que tenemos una función pre-definida <code>suma</code> la cual suma dos números, entonces: ",
            "<code>nuestraSuma = suma(5, 12);</code>",
            "llamará la función <code>suma</code>, la cual retornará un valor de <code>17</code> y lo asignará a la variable <code>nuestraSuma</code>.",
            "<h4>Instrucciones</h4>",
            "Llama la función <code>processArg</code> con un argumento <code>7</code> y asigna su valor de retorno a la variable <code>processed</code>."
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/assignment-with-a-returned-value",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var changed = 0;",
            "",
            "function change(num) {",
            "  return (num + 5) / 3;",
            "}",
            "",
            "changed = change(10);",
            "",
            "// Setup",
            "var processed = 0;",
            "",
            "function processArg(num) {",
            "  return (num + 3) / 5;",
            "}",
            "",
            "// Only change code below this line",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){return \"processed = \" + processed})();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c6",
      "title": "Stand in Line",
      "description": [
        "In Computer Science a <dfn>queue</dfn> is an abstract <dfn>Data Structure</dfn> where items are kept in order. New items can be added at the back of the <code>queue</code> and old items are taken off from the front of the <code>queue</code>.",
        "Write a function <code>nextInLine</code> which takes an array (<code>arr</code>) and a number (<code>item</code>) as arguments.",
        "Add the number to the end of the array, then remove the first element of the array.",
        "The <code>nextInLine</code> function should then return the element that was removed."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var testArr = [ 1,2,3,4,5];\n\nfunction nextInLine(arr, item) {\n    arr.push(item);\n    return arr.shift();\n}"
      ],
      "tests": [
        {
          "text": "<code>nextInLine([], 5)</code> should return a number.",
          "testString": "assert.isNumber(nextInLine([],5), '<code>nextInLine([], 5)</code> should return a number.');"
        },
        {
          "text": "<code>nextInLine([], 1)</code> should return <code>1</code>",
          "testString": "assert(nextInLine([],1) === 1, '<code>nextInLine([], 1)</code> should return <code>1</code>');"
        },
        {
          "text": "<code>nextInLine([2], 1)</code> should return <code>2</code>",
          "testString": "assert(nextInLine([2],1) === 2, '<code>nextInLine([2], 1)</code> should return <code>2</code>');"
        },
        {
          "text": "<code>nextInLine([5,6,7,8,9], 1)</code> should return <code>5</code>",
          "testString": "assert(nextInLine([5,6,7,8,9],1) === 5, '<code>nextInLine([5,6,7,8,9], 1)</code> should return <code>5</code>');"
        },
        {
          "text": "After <code>nextInLine(testArr, 10)</code>, <code>testArr[4]</code> should be <code>10</code>",
          "testString": "nextInLine(testArr, 10); assert(testArr[4] === 10, 'After <code>nextInLine(testArr, 10)</code>, <code>testArr[4]</code> should be <code>10</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Hacer cola",
          "description": [
            "En Ciencias de la Computación una <dfn>cola</dfn> es una <dfn>Estructura de Datos</dfn> abstracta donde los elementos son mantenidos en orden. Nuevos elementos pueden ser agregados en la parte trasera de la <code>cola</code> y los elementos viejos son quitados desde el frente de la <code>cola</code>.",
            "Escribe una función <code>nextInLine</code> la cual toma un vector (<code>arr</code>) y un número (<code>item</code>) como argumentos. Agrega el número al final del vector, entonces retira el primer elemento del vector. La función nextInLine debe entonces devolver el elemento que se ha eliminado."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function nextInLine(arr, item) {",
            "  // Your code here",
            "  ",
            "  return item;  // Change this line",
            "}",
            "",
            "// Test Setup",
            "var testArr = [1,2,3,4,5];",
            "",
            "// Display Code",
            "console.log(\"Before: \" + JSON.stringify(testArr));",
            "console.log(nextInLine(testArr, 6)); // Modify this line to test",
            "console.log(\"After: \" + JSON.stringify(testArr));"
          ],
          "head": [
            "var logOutput = [];",
            "var originalConsole = console",
            "function capture() {",
            "    var nativeLog = console.log;",
            "    console.log = function (message) {",
            "        logOutput.push(message);",
            "        if(nativeLog.apply) {",
            "          nativeLog.apply(originalConsole, arguments);",
            "        } else {",
            "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
            "          nativeLog(nativeMsg);",
            "        }",
            "    };",
            "}",
            "",
            "function uncapture() {",
            "  console.log = originalConsole.log;",
            "}",
            "",
            "capture();"
          ],
          "tail": [
            "uncapture();",
            "testArr = [1,2,3,4,5];",
            "(function() { return logOutput.join(\"\\n\");})();"
          ]
        }
      }
    },
    {
      "id": "bd7123c9c441eddfaeb5bdef",
      "title": "Understanding Boolean Values",
      "description": [
        "Another data type is the <dfn>Boolean</dfn>. <code>Booleans</code> may only be one of two values: <code>true</code> or <code>false</code>. They are basically little on-off switches, where <code>true</code> is \"on\" and <code>false</code> is \"off.\"  These two states are mutually exclusive.",
        "<strong>Note</strong><br><code>Boolean</code> values are never written with quotes. The <code>strings</code> <code>\"true\"</code> and <code>\"false\"</code> are not <code>Boolean</code> and have no special meaning in JavaScript.",
        "<hr>",
        "Modify the <code>welcomeToBooleans</code> function so that it returns <code>true</code> instead of <code>false</code> when the run button is clicked."
      ],
      "solutions": [
        "function welcomeToBooleans() {\n  return true; // Change this line\n}"
      ],
      "tests": [
        {
          "text": "The <code>welcomeToBooleans()</code> function should return a boolean &#40;true/false&#41; value.",
          "testString": "assert(typeof welcomeToBooleans() === 'boolean', 'The <code>welcomeToBooleans()</code> function should return a boolean &#40;true/false&#41; value.');"
        },
        {
          "text": "<code>welcomeToBooleans()</code> should return true.",
          "testString": "assert(welcomeToBooleans() === true, '<code>welcomeToBooleans()</code> should return true.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Entiende los valores booleanos",
          "description": [
            "En informática las <code>estructuras de datos</code> son cosas que contienen datos. JavaScript tiene siete de estas. Por ejemplo, la estructura de datos <code>Número</code> contiene números. ",
            "Vamos a aprender acerca de la estructura de datos más básica de todas: el <code>Boolean</code>. Los booleanos sólo puede contener el valor verdadero o el valor falso. Son básicamente pequeños interruptores de encendido y apagado. ",
            "<h4>Instrucciones</h4>",
            "Vamos a modificar nuestra función <code>welcomeToBooleans</code> para que devuelva <code>true</code> en lugar de <code>false</code> cuando se pulse el botón de ejecución."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function welcomeToBooleans() {",
            "",
            "// Only change code below this line.",
            "",
            "return false; // Change this line",
            "",
            "// Only change code above this line.",
            "}"
          ],
          "head": [],
          "tail": [
            "welcomeToBooleans();"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c12feddfaeb3bdef",
      "title": "Use Conditional Logic with If Statements",
      "description": [
        "<code>If</code> statements are used to make decisions in code. The keyword <code>if</code> tells JavaScript to execute the code in the curly braces under certain conditions, defined in the parentheses. These conditions are known as <code>Boolean</code> conditions and they may only be <code>true</code> or <code>false</code>.",
        "When the condition evaluates to <code>true</code>, the program executes the statement inside the curly braces. When the Boolean condition evaluates to <code>false</code>, the statement inside the curly braces will not execute.",
        "<strong>Pseudocode</strong>",
        "<blockquote>if (<i>condition is true</i>) {<br>&nbsp;&nbsp;<i>statement is executed</i><br>}</blockquote>",
        "<strong>Example</strong>",
        "<blockquote>function test (myCondition) {<br>&nbsp;&nbsp;if (myCondition) {<br>&nbsp;&nbsp;&nbsp;&nbsp; return \"It was true\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return \"It was false\";<br>}<br>test(true);  // returns \"It was true\"<br>test(false); // returns \"It was false\"</blockquote>",
        "When <code>test</code> is called with a value of <code>true</code>, the <code>if</code> statement evaluates <code>myCondition</code> to see if it is <code>true</code> or not. Since it is <code>true</code>, the function returns <code>\"It was true\"</code>. When we call <code>test</code> with a value of <code>false</code>, <code>myCondition</code> is <em>not</em> <code>true</code> and the statement in the curly braces is not executed and the function returns <code>\"It was false\"</code>.",
        "<hr>",
        "Create an <code>if</code> statement inside the function to return <code>\"Yes, that was true\"</code> if the parameter <code>wasThatTrue</code> is <code>true</code> and return <code>\"No, that was false\"</code> otherwise."
      ],
      "solutions": [
        "function trueOrFalse(wasThatTrue) {\n  if (wasThatTrue) {\n    return \"Yes, that was true\";\n  }\n  return \"No, that was false\";\n}"
      ],
      "tests": [
        {
          "text": "<code>trueOrFalse</code> should be a function",
          "testString": "assert(typeof trueOrFalse === \"function\", '<code>trueOrFalse</code> should be a function');"
        },
        {
          "text": "<code>trueOrFalse(true)</code> should return a string",
          "testString": "assert(typeof trueOrFalse(true) === \"string\", '<code>trueOrFalse(true)</code> should return a string');"
        },
        {
          "text": "<code>trueOrFalse(false)</code> should return a string",
          "testString": "assert(typeof trueOrFalse(false) === \"string\", '<code>trueOrFalse(false)</code> should return a string');"
        },
        {
          "text": "<code>trueOrFalse(true)</code> should return \"Yes, that was true\"",
          "testString": "assert(trueOrFalse(true) === \"Yes, that was true\", '<code>trueOrFalse(true)</code> should return \"Yes, that was true\"');"
        },
        {
          "text": "<code>trueOrFalse(false)</code> should return \"No, that was false\"",
          "testString": "assert(trueOrFalse(false) === \"No, that was false\", '<code>trueOrFalse(false)</code> should return \"No, that was false\"');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Usa lógica condicional con instrucciones if y else",
          "description": [
            "Podemos usar instrucciones <code>if</code> (\"if\" es \"si\" en español) en JavaScript para ejecutar código sólo cuando cierta condición se cumpla.",
            "Las instrucciones <code>if</code> requieren evaluar algún tipo de condición booleana.",
            "Por ejemplo:",
            "<code>if (1 === 2) {</code>",
            "<code>&nbsp;&nbsp;return true;</code>",
            "<code>} else {</code>",
            "<code>&nbsp;&nbsp;return false;</code>",
            "<code>}</code>",
            "Vamos a usar la instrucción <code>if</code> con <code>else</code> (\"else\" puede traducirse como \"de lo contrario\") para hacer un juego de cara o sello.",
            "<h4>Instrucciones</h4>",
            "Crea una instrucción <code>if</code> con <code>else</code> que retorne la cadena <code>\"heads\"</code> si la variable <code>flip</code> es cero, o bien que retorne <code >\"tails\"</code> si la variable <code>flip</code> no es cero. "
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "function ourTrueOrFalse(isItTrue) {",
            "  if (isItTrue) { ",
            "    return \"Yes, it's true\";",
            "  }",
            "  return \"No, it's false\";",
            "}",
            "",
            "// Setup",
            "function trueOrFalse(wasThatTrue) {",
            "",
            "  // Only change code below this line.",
            "  ",
            "  ",
            "  ",
            "  // Only change code above this line.",
            "",
            "}",
            "",
            "// Change this value to test",
            "trueOrFalse(true);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d0",
      "title": "Comparison with the Equality Operator",
      "description": [
        "There are many <dfn>Comparison Operators</dfn> in JavaScript. All of these operators return a boolean <code>true</code> or <code>false</code> value.",
        "The most basic operator is the equality operator <code>==</code>. The equality operator compares two values and returns <code>true</code> if they're equivalent or <code>false</code> if they are not. Note that equality is different from assignment (<code>=</code>), which assigns the value at the right of the operator to a variable in the left.",
        "<blockquote>function equalityTest(myVal) {<br>&nbsp;&nbsp;if (myVal == 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp; return \"Equal\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return \"Not Equal\";<br>}</blockquote>",
        "If <code>myVal</code> is equal to <code>10</code>, the equality operator returns <code>true</code>, so the code in the curly braces will execute, and the function will return <code>\"Equal\"</code>. Otherwise, the function will return <code>\"Not Equal\"</code>.",
        "In order for JavaScript to compare two different <code>data types</code> (for example, <code>numbers</code> and <code>strings</code>), it must convert one type to another. This is known as \"Type Coercion\". Once it does, however, it can compare terms as follows:",
        "<blockquote>1   ==  1    // true<br>1   ==  2    // false<br>1   == '1'   // true<br>\"3\"  ==  3    // true</blockquote>",
        "<hr>",
        "Add the <code>equality operator</code> to the indicated line so that the function will return \"Equal\" when <code>val</code> is equivalent to <code>12</code>"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testEqual(val) {\n  if (val == 12) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"
      ],
      "tests": [
        {
          "text": "<code>testEqual(10)</code> should return \"Not Equal\"",
          "testString": "assert(testEqual(10) === \"Not Equal\", '<code>testEqual(10)</code> should return \"Not Equal\"');"
        },
        {
          "text": "<code>testEqual(12)</code> should return \"Equal\"",
          "testString": "assert(testEqual(12) === \"Equal\", '<code>testEqual(12)</code> should return \"Equal\"');"
        },
        {
          "text": "<code>testEqual(\"12\")</code> should return \"Equal\"",
          "testString": "assert(testEqual(\"12\") === \"Equal\", '<code>testEqual(\"12\")</code> should return \"Equal\"');"
        },
        {
          "text": "You should use the <code>==</code> operator",
          "testString": "assert(code.match(/==/g) && !code.match(/===/g), 'You should use the <code>==</code> operator');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "La comparación con el operador de igualdad",
          "description": [
            "Hay muchos <dfn>Operadores de Comparación</dfn> en JavaScript. Todos estos operadores retornan un valor booleano <code>true</code>(verdadero) o <code>false</code>(falso).",
            "El operador más básico es el operador de igualdad <code>==</code>. El operador de igualdad compara dos valores y retorna <code>true</code> si son equivalentes o <code>false</code> si no lo son. Nota que la igualdad es diferente de la asignación (<code>=</code>), la cual asigna el valor a la derecha del operador a la variable en la izquierda.",
            "<blockquote>function pruebaIgualdad(miVal) {<br>&nbsp;&nbsp;if (miVal == 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp; return \"Igual\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return \"No Es Igual\";<br>}</blockquote>",
            "Si <code>miVal</code> es igual a <code>10</code>, el operador de igualdad retornará <code>true</code>(verdadero), así el código entre llaves será ejecutado y la función retornará <code>\"Equal\"</code>. De otra manera, la función retornará <code>\"Not Equal\"</code>.",
            "Para que JavaScript pueda comparar dos <code>tipos de datos</code> diferentes (por ejemplo, <code>números</code> y <code>cadenas de texto</code>), debe convertir un tipo a otro. Una vez que lo hace, sin embargo, puede comparar términos de la siguiente manera:",
            "<blockquote>1   ==  1    // true<br>1   ==  2    // false<br>1   == '1'   // true<br>\"3\"  ==  3    // true</blockquote>",
            "<h4>Instrucciones</h4>",
            "Agrega el <code>operador de igualdad</code> a la línea indicada de manera que la función retornará \"Equal\" cuando <code>val</code> sea equivalente a <code>12</code>"
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "function testEqual(val) {",
            "  if (val) { // Change this line",
            "    return \"Equal\";",
            "  }",
            "  return \"Not Equal\";",
            "}",
            "",
            "// Change this value to test",
            "testEqual(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d1",
      "title": "Comparison with the Strict Equality Operator",
      "description": [
        "Strict equality (<code>===</code>) is the counterpart to the equality operator (<code>==</code>). However, unlike the equality operator, which attempts to convert both values being compared to a common type, the strict equality operator does not perform a type conversion.",
        "If the values being compared have different types, they are considered unequal, and the strict equality operator will return false.",
        "<strong>Examples</strong>",
        "<blockquote>3 === 3   // true<br>3 === '3' // false</blockquote>",
        "In the second example, <code>3</code> is a <code>Number</code> type and <code>'3'</code> is a <code>String</code> type.",
        "<hr>",
        "Use the strict equality operator in the <code>if</code> statement so the function will return \"Equal\" when <code>val</code> is strictly equal to <code>7</code>"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testStrict(val) {\n  if (val === 7) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"
      ],
      "tests": [
        {
          "text": "<code>testStrict(10)</code> should return \"Not Equal\"",
          "testString": "assert(testStrict(10) === \"Not Equal\", '<code>testStrict(10)</code> should return \"Not Equal\"');"
        },
        {
          "text": "<code>testStrict(7)</code> should return \"Equal\"",
          "testString": "assert(testStrict(7) === \"Equal\", '<code>testStrict(7)</code> should return \"Equal\"');"
        },
        {
          "text": "<code>testStrict(\"7\")</code> should return \"Not Equal\"",
          "testString": "assert(testStrict(\"7\") === \"Not Equal\", '<code>testStrict(\"7\")</code> should return \"Not Equal\"');"
        },
        {
          "text": "You should use the <code>===</code> operator",
          "testString": "assert(code.match(/(val\\s*===\\s*\\d+)|(\\d+\\s*===\\s*val)/g).length > 0, 'You should use the <code>===</code> operator');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "La comparación con el operador de estricta igualdad",
          "description": [
            "Igualdad estricta (<code>===</code>) es la contraparte del operador de igualdad (<code>==</code>). Diferente al operador de igualdad, igualdad estricta prueba los <code>tipos de datos</code> y el valor de los elementos comparados.",
            "<strong>Ejemplos</strong>",
            "<blockquote>3 === 3   // true<br>3 === '3' // falso</blockquote>",
            "En el segundo ejemplo, <code>3</code> es de tipo <code>Número</code> y <code>'3'</code> es de tipo <code>Cadena</code>.",
            "<h4>Instrucciones</h4>",
            "Usa el operador de igualdad estricta en la sentencia <code>if</code> de manera que la función retorne \"Equal\" cuando <code>val</code> es estrictamente igual a <code>7</code>"
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "function testStrict(val) {",
            "  if (val) { // Change this line",
            "    return \"Equal\";",
            "  }",
            "  return \"Not Equal\";",
            "}",
            "",
            "// Change this value to test",
            "testStrict(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "599a789b454f2bbd91a3ff4d",
      "title": "Practice comparing different values",
      "description": [
        "In the last two challenges, we learned about the equality operator (<code>==</code>) and the strict equality operator (<code>===</code>). Let's do a quick review and practice using these operators some more.",
        "If the values being compared are not of the same type, the equality operator will perform a type conversion, and then evaluate the values. However, the strict equality operator will compare both the data type and value as-is, without converting one type to the other.",
        "<strong>Examples</strong>",
        "<blockquote>3 == '3'  // returns true because JavaScript performs type conversion from string to number<br>3 === '3' // returns false because the types are different and type conversion is not performed</blockquote>",
        "<strong>Note</strong><br>In JavaScript, you can determine the type of a variable or a value with the <code>typeof</code> operator, as follows:",
        "<blockquote>typeof 3   // returns 'number'<br>typeof '3' // returns 'string'</blockquote>",
        "<hr>",
        "The <code>compareEquality</code> function in the editor compares two values using the <code>equality operator</code>. Modify the function so that it returns \"Equal\" only when the values are strictly equal."
      ],
      "releasedOn": "August 21, 2017",
      "solutions": [
        "function compareEquality(a,b) {\n  if (a === b) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"
      ],
      "tests": [
        {
          "text": "<code>compareEquality(10, \"10\")</code> should return \"Not Equal\"",
          "testString": "assert(compareEquality(10, \"10\") === \"Not Equal\", '<code>compareEquality(10, \"10\")</code> should return \"Not Equal\"');"
        },
        {
          "text": "<code>compareEquality(\"20\", 20)</code> should return \"Not Equal\"",
          "testString": "assert(compareEquality(\"20\", 20) === \"Not Equal\", '<code>compareEquality(\"20\", 20)</code> should return \"Not Equal\"');"
        },
        {
          "text": "You should use the <code>===</code> operator",
          "testString": "assert(code.match(/===/g), 'You should use the <code>===</code> operator');"
        }
      ],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "function compareEquality(a, b) {",
            "  if (a == b) { // Change this line",
            "    return \"Equal\";",
            "  }",
            "  return \"Not Equal\";",
            "}",
            "",
            "// Change this value to test",
            "compareEquality(10, \"10\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d2",
      "title": "Comparison with the Inequality Operator",
      "description": [
        "The inequality operator (<code>!=</code>) is the opposite of the equality operator. It means \"Not Equal\" and returns <code>false</code> where equality would return <code>true</code> and <em>vice versa</em>. Like the equality operator, the inequality operator will convert data types of values while comparing.",
        "<strong>Examples</strong>",
        "<blockquote>1 != 2      // true<br>1 != \"1\"    // false<br>1 != '1'    // false<br>1 != true   // false<br>0 != false  // false</blockquote>",
        "<hr>",
        "Add the inequality operator <code>!=</code> in the <code>if</code> statement so that the function will return \"Not Equal\" when <code>val</code> is not equivalent to <code>99</code>"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testNotEqual(val) {\n  if (val != 99) {\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}"
      ],
      "tests": [
        {
          "text": "<code>testNotEqual(99)</code> should return \"Equal\"",
          "testString": "assert(testNotEqual(99) === \"Equal\", '<code>testNotEqual(99)</code> should return \"Equal\"');"
        },
        {
          "text": "<code>testNotEqual(\"99\")</code> should return \"Equal\"",
          "testString": "assert(testNotEqual(\"99\") === \"Equal\", '<code>testNotEqual(\"99\")</code> should return \"Equal\"');"
        },
        {
          "text": "<code>testNotEqual(12)</code> should return \"Not Equal\"",
          "testString": "assert(testNotEqual(12) === \"Not Equal\", '<code>testNotEqual(12)</code> should return \"Not Equal\"');"
        },
        {
          "text": "<code>testNotEqual(\"12\")</code> should return \"Not Equal\"",
          "testString": "assert(testNotEqual(\"12\") === \"Not Equal\", '<code>testNotEqual(\"12\")</code> should return \"Not Equal\"');"
        },
        {
          "text": "<code>testNotEqual(\"bob\")</code> should return \"Not Equal\"",
          "testString": "assert(testNotEqual(\"bob\") === \"Not Equal\", '<code>testNotEqual(\"bob\")</code> should return \"Not Equal\"');"
        },
        {
          "text": "You should use the <code>!=</code> operator",
          "testString": "assert(code.match(/(?!!==)!=/), 'You should use the <code>!=</code> operator');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "La comparación con el operador de desigualdad",
          "description": [
            "El operador de desigualdad (<code>!=</code>) es el opuesto al operador de igualdad. Esto significa \"No Igual a\" y retorna <code>false</code> cuando igualdad retornaría <code>true</code> y <em>viceversa</em>. Como el operador de igualdad, el operador de desigualdad convertirá tipos de datos mientras compara.",
            "<strong>Ejemplos</strong>",
            "<blockquote>1 != 2      // true<br>1 != \"1\"    // false<br>1 != '1'    // false<br>1 != true   // false<br>0 != false  // false</blockquote>",
            "<h4>Instrucciones</h4>",
            "Agrega el operador de desigualdad <code>!=</code> en la sentencia <code>if</code> de manera que la función retorne \"Not Equal\" (No igual a) cuando <code>val</code> no es equivalente a <code>99</code>"
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "function testNotEqual(val) {",
            "  if (val) { // Change this line",
            "    return \"Not Equal\";",
            "  }",
            "  return \"Equal\";",
            "}",
            "",
            "// Change this value to test",
            "testNotEqual(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d3",
      "title": "Comparison with the Strict Inequality Operator",
      "description": [
        "The strict inequality operator (<code>!==</code>) is the logical opposite of the strict equality operator. It means \"Strictly Not Equal\" and returns <code>false</code> where strict equality would return <code>true</code> and <em>vice versa</em>. Strict inequality will not convert data types.",
        "<strong>Examples</strong>",
        "<blockquote>3 !== 3   // false<br>3 !== '3' // true<br>4 !== 3   // true</blockquote>",
        "<hr>",
        "Add the <code>strict inequality operator</code> to the <code>if</code> statement so the function will return \"Not Equal\" when <code>val</code> is not strictly equal to <code>17</code>"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testStrictNotEqual(val) {\n  if (val !== 17) {\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}"
      ],
      "MDNlinks": [
        "Strict Inequality Operator"
      ],
      "tests": [
        {
          "text": "<code>testStrictNotEqual(17)</code> should return \"Equal\"",
          "testString": "assert(testStrictNotEqual(17) === \"Equal\", '<code>testStrictNotEqual(17)</code> should return \"Equal\"');"
        },
        {
          "text": "<code>testStrictNotEqual(\"17\")</code> should return \"Not Equal\"",
          "testString": "assert(testStrictNotEqual(\"17\") === \"Not Equal\", '<code>testStrictNotEqual(\"17\")</code> should return \"Not Equal\"');"
        },
        {
          "text": "<code>testStrictNotEqual(12)</code> should return \"Not Equal\"",
          "testString": "assert(testStrictNotEqual(12) === \"Not Equal\", '<code>testStrictNotEqual(12)</code> should return \"Not Equal\"');"
        },
        {
          "text": "<code>testStrictNotEqual(\"bob\")</code> should return \"Not Equal\"",
          "testString": "assert(testStrictNotEqual(\"bob\") === \"Not Equal\", '<code>testStrictNotEqual(\"bob\")</code> should return \"Not Equal\"');"
        },
        {
          "text": "You should use the <code>!==</code> operator",
          "testString": "assert(code.match(/(val\\s*!==\\s*\\d+)|(\\d+\\s*!==\\s*val)/g).length > 0, 'You should use the <code>!==</code> operator');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "La comparación con el operador de estricta desigualdad",
          "description": [
            "El operador de estricta desigualdad (<code>!==</code>) es el opuesto al operador de estricta igualdad. Esto significa \"Estrictamente no Igual\" y retorna <code>false</code>(falso) donde igualdad estricta retornaría <code>true</code>(verdadero) y <em>viceversa</em>. Estricta desigualdad no convertirá tipos de datos.",
            "<strong>Ejemplos</strong>",
            "<blockquote>3 !== 3   // false<br>3 !== '3' // true<br>4 !== 3   // true</blockquote>",
            "<h4>Instrucciones</h4>",
            "Agrega el <code>operador de estricta desigualdad</code> a la sentencia <code>if</code> de manera que la función retorne \"Not Equal\" cuando <code>val</code> no es estrictamente igual a <code>17</code>"
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "function testStrictNotEqual(val) {",
            "  // Only Change Code Below this Line",
            "  ",
            "  if (val) {",
            "",
            "  // Only Change Code Above this Line",
            "",
            "    return \"Not Equal\";",
            "  }",
            "  return \"Equal\";",
            "}",
            "",
            "// Change this value to test",
            "testStrictNotEqual(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d4",
      "title": "Comparison with the Greater Than Operator",
      "description": [
        "The greater than operator (<code>&gt;</code>) compares the values of two numbers. If the number to the left is greater than the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>.",
        "Like the equality operator, greater than operator will convert data types of values while comparing.",
        "<strong>Examples</strong>",
        "<blockquote> 5 > 3   // true<br> 7 > '3' // true<br> 2 > 3   // false<br>'1' > 9  // false</blockquote>",
        "<hr>",
        "Add the <code>greater than</code> operator to the indicated lines so that the return statements make sense."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testGreaterThan(val) {\n  if (val > 100) {  // Change this line\n    return \"Over 100\";\n  }\n  if (val > 10) {  // Change this line\n    return \"Over 10\";\n  }\n  return \"10 or Under\";\n}"
      ],
      "tests": [
        {
          "text": "<code>testGreaterThan(0)</code> should return \"10 or Under\"",
          "testString": "assert(testGreaterThan(0) === \"10 or Under\", '<code>testGreaterThan(0)</code> should return \"10 or Under\"');"
        },
        {
          "text": "<code>testGreaterThan(10)</code> should return \"10 or Under\"",
          "testString": "assert(testGreaterThan(10) === \"10 or Under\", '<code>testGreaterThan(10)</code> should return \"10 or Under\"');"
        },
        {
          "text": "<code>testGreaterThan(11)</code> should return \"Over 10\"",
          "testString": "assert(testGreaterThan(11) === \"Over 10\", '<code>testGreaterThan(11)</code> should return \"Over 10\"');"
        },
        {
          "text": "<code>testGreaterThan(99)</code> should return \"Over 10\"",
          "testString": "assert(testGreaterThan(99) === \"Over 10\", '<code>testGreaterThan(99)</code> should return \"Over 10\"');"
        },
        {
          "text": "<code>testGreaterThan(100)</code> should return \"Over 10\"",
          "testString": "assert(testGreaterThan(100) === \"Over 10\", '<code>testGreaterThan(100)</code> should return \"Over 10\"');"
        },
        {
          "text": "<code>testGreaterThan(101)</code> should return \"Over 100\"",
          "testString": "assert(testGreaterThan(101) === \"Over 100\", '<code>testGreaterThan(101)</code> should return \"Over 100\"');"
        },
        {
          "text": "<code>testGreaterThan(150)</code> should return \"Over 100\"",
          "testString": "assert(testGreaterThan(150) === \"Over 100\", '<code>testGreaterThan(150)</code> should return \"Over 100\"');"
        },
        {
          "text": "You should use the <code>&gt;</code> operator at least twice",
          "testString": "assert(code.match(/val\\s*>\\s*('|\")*\\d+('|\")*/g).length > 1, 'You should use the <code>&gt;</code> operator at least twice');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "La comparación con el operador mayor que",
          "description": [
            "El operador mayor que (<code>&gt;</code>) compara los valores de dos números. Si el número a la izquierda es mayor que el número a la derecha, este returna <code>true</code>(verdadero). De otra manera, este retorna <code>false</code>(falso).",
            "Al igual que el operador de igualdad, el operador mayor que convertirá tipos de datos de valores mientras los compara.",
            "<strong>Ejemplos</strong>",
            "<blockquote> 5 > 3   // true<br> 7 > '3' // true<br> 2 > 3   // false<br>'1' > 9  // false</blockquote>",
            "<h4>Instrucciones</h4>",
            "Agrega el operador <code>mayor que</code> para las líneas indicadas de manera que las sentencias retornadas tengan sentido."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testGreaterThan(val) {",
            "  if (val) {  // Change this line",
            "    return \"Over 100\";",
            "  }",
            "  ",
            "  if (val) {  // Change this line",
            "    return \"Over 10\";",
            "  }",
            "",
            "  return \"10 or Under\";",
            "}",
            "",
            "// Change this value to test",
            "testGreaterThan(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d5",
      "title": "Comparison with the Greater Than Or Equal To Operator",
      "description": [
        "The <code>greater than or equal to</code> operator (<code>&gt;=</code>) compares the values of two numbers. If the number to the left is greater than or equal to the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>.",
        "Like the equality operator, <code>greater than or equal to</code> operator will convert data types while comparing.",
        "<strong>Examples</strong>",
        "<blockquote> 6  >=  6  // true<br> 7  >= '3' // true<br> 2  >=  3  // false<br>'7' >=  9  // false</blockquote>",
        "<hr>",
        "Add the <code>greater than or equal to</code> operator to the indicated lines so that the return statements make sense."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testGreaterOrEqual(val) {\n  if (val >= 20) {  // Change this line\n    return \"20 or Over\";\n  }\n  \n  if (val >= 10) {  // Change this line\n    return \"10 or Over\";\n  }\n\n  return \"Less than 10\";\n}"
      ],
      "tests": [
        {
          "text": "<code>testGreaterOrEqual(0)</code> should return \"Less than 10\"",
          "testString": "assert(testGreaterOrEqual(0) === \"Less than 10\", '<code>testGreaterOrEqual(0)</code> should return \"Less than 10\"');"
        },
        {
          "text": "<code>testGreaterOrEqual(9)</code> should return \"Less than 10\"",
          "testString": "assert(testGreaterOrEqual(9) === \"Less than 10\", '<code>testGreaterOrEqual(9)</code> should return \"Less than 10\"');"
        },
        {
          "text": "<code>testGreaterOrEqual(10)</code> should return \"10 or Over\"",
          "testString": "assert(testGreaterOrEqual(10) === \"10 or Over\", '<code>testGreaterOrEqual(10)</code> should return \"10 or Over\"');"
        },
        {
          "text": "<code>testGreaterOrEqual(11)</code> should return \"10 or Over\"",
          "testString": "assert(testGreaterOrEqual(11) === \"10 or Over\", '<code>testGreaterOrEqual(11)</code> should return \"10 or Over\"');"
        },
        {
          "text": "<code>testGreaterOrEqual(19)</code> should return \"10 or Over\"",
          "testString": "assert(testGreaterOrEqual(19) === \"10 or Over\", '<code>testGreaterOrEqual(19)</code> should return \"10 or Over\"');"
        },
        {
          "text": "<code>testGreaterOrEqual(100)</code> should return \"20 or Over\"",
          "testString": "assert(testGreaterOrEqual(100) === \"20 or Over\", '<code>testGreaterOrEqual(100)</code> should return \"20 or Over\"');"
        },
        {
          "text": "<code>testGreaterOrEqual(21)</code> should return \"20 or Over\"",
          "testString": "assert(testGreaterOrEqual(21) === \"20 or Over\", '<code>testGreaterOrEqual(21)</code> should return \"20 or Over\"');"
        },
        {
          "text": "You should use the <code>&gt;=</code> operator at least twice",
          "testString": "assert(code.match(/val\\s*>=\\s*('|\")*\\d+('|\")*/g).length > 1, 'You should use the <code>&gt;=</code> operator at least twice');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "La comparación con el operador mayor o ogual",
          "description": [
            "El operador <code>mayor o igual </code> (<code>&gt;=</code>) compara los valores de dos números. Si el número de la izquierda es mayor o igual a el número de la derecha, este retorna <code>true</code>(verdadero). De otra manera, este retorna <code>false</code>(falso).",
            "Como el operador de igualdad, el operador <code>mayor o igual</code> convertirá tipos de datos mientras está comparando.",
            "<strong>Ejemplos</strong>",
            "<blockquote> 6  >=  6  // true<br> 7  >= '3' // true<br> 2  >=  3  // false<br>'7' >=  9  // false</blockquote>",
            "<h4>Instrucciones</h4>",
            "Agrega el operador <code>mayor o igual</code> a las líneas indicadas de manera que las sentencias de retorno tengan sentido."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testGreaterOrEqual(val) {",
            "  if (val) {  // Change this line",
            "    return \"20 or Over\";",
            "  }",
            "  ",
            "  if (val) {  // Change this line",
            "    return \"10 or Over\";",
            "  }",
            "",
            "  return \"Less than 10\";",
            "}",
            "",
            "// Change this value to test",
            "testGreaterOrEqual(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d6",
      "title": "Comparison with the Less Than Operator",
      "description": [
        "The <dfn>less than</dfn> operator (<code>&lt;</code>) compares the values of two numbers. If the number to the left is less than the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>. Like the equality operator, <dfn>less than</dfn> operator converts data types while comparing.",
        "<strong>Examples</strong>",
        "<blockquote>2 &lt; 5  // true<br>'3' &lt; 7  // true<br>5 &lt; 5  // false<br>3 &lt; 2  // false<br>'8' &lt; 4  // false</blockquote>",
        "<hr>",
        "Add the <code>less than</code> operator to the indicated lines so that the return statements make sense."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testLessThan(val) {\n  if (val < 25) {  // Change this line\n    return \"Under 25\";\n  }\n  \n  if (val < 55) {  // Change this line\n    return \"Under 55\";\n  }\n\n  return \"55 or Over\";\n}"
      ],
      "tests": [
        {
          "text": "<code>testLessThan(0)</code> should return \"Under 25\"",
          "testString": "assert(testLessThan(0) === \"Under 25\", '<code>testLessThan(0)</code> should return \"Under 25\"');"
        },
        {
          "text": "<code>testLessThan(24)</code> should return \"Under 25\"",
          "testString": "assert(testLessThan(24) === \"Under 25\", '<code>testLessThan(24)</code> should return \"Under 25\"');"
        },
        {
          "text": "<code>testLessThan(25)</code> should return \"Under 55\"",
          "testString": "assert(testLessThan(25) === \"Under 55\", '<code>testLessThan(25)</code> should return \"Under 55\"');"
        },
        {
          "text": "<code>testLessThan(54)</code> should return \"Under 55\"",
          "testString": "assert(testLessThan(54) === \"Under 55\", '<code>testLessThan(54)</code> should return \"Under 55\"');"
        },
        {
          "text": "<code>testLessThan(55)</code> should return \"55 or Over\"",
          "testString": "assert(testLessThan(55) === \"55 or Over\", '<code>testLessThan(55)</code> should return \"55 or Over\"');"
        },
        {
          "text": "<code>testLessThan(99)</code> should return \"55 or Over\"",
          "testString": "assert(testLessThan(99) === \"55 or Over\", '<code>testLessThan(99)</code> should return \"55 or Over\"');"
        },
        {
          "text": "You should use the <code>&lt;</code> operator at least twice",
          "testString": "assert(code.match(/val\\s*<\\s*('|\")*\\d+('|\")*/g).length > 1, 'You should use the <code>&lt;</code> operator at least twice');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "La comparación con el operador menor que",
          "description": [
            "El operador <dfn>menor que</dfn> (<code>&lt;</code>) compara los valores de dos números. Si el número a la izquierda es menor que el número de la derecha, este retorna <code>true</code>(verdadero). De otra manera, este retorna <code>false</code>(falso). Como el operador de igualdad, el operador <dfn>menor que</dfn> convierte tipos de datos mientra compara.",
            "<strong>Ejemplos</strong>",
            "<blockquote>2 &lt; 5  // true<br>'3' &lt; 7  // true<br>5 &lt; 5  // false<br>3 &lt; 2  // false<br>'8' &lt; 4  // false</blockquote>",
            "<h4>Instrucciones</h4>",
            "Agregar el operador <code>menor que</code> a las líneas indicadas de modo que las sentencias de retorno tengan sentido."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testLessThan(val) {",
            "  if (val) {  // Change this line",
            "    return \"Under 25\";",
            "  }",
            "  ",
            "  if (val) {  // Change this line",
            "    return \"Under 55\";",
            "  }",
            "",
            "  return \"55 or Over\";",
            "}",
            "",
            "// Change this value to test",
            "testLessThan(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d7",
      "title": "Comparison with the Less Than Or Equal To Operator",
      "description": [
        "The <code>less than or equal to</code> operator (<code>&lt;=</code>) compares the values of two numbers. If the number to the left is less than or equal to the number to the right, it returns <code>true</code>. If the number on the left is greater than the number on the right, it returns <code>false</code>. Like the equality operator, <code>less than or equal to</code> converts data types.",
        "<strong>Examples</strong>",
        "<blockquote>4 &lt;= 5  // true<br>'7' &lt;= 7  // true<br>5 &lt;= 5  // true<br>3 &lt;= 2  // false<br>'8' &lt;= 4  // false</blockquote>",
        "<hr>",
        "Add the <code>less than or equal to</code> operator to the indicated lines so that the return statements make sense."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testLessOrEqual(val) {\n  if (val <= 12) {  // Change this line\n    return \"Smaller Than or Equal to 12\";\n  }\n  \n  if (val <= 24) {  // Change this line\n    return \"Smaller Than or Equal to 24\";\n  }\n\n  return \"More Than 24\";\n}"
      ],
      "tests": [
        {
          "text": "<code>testLessOrEqual(0)</code> should return \"Smaller Than or Equal to 12\"",
          "testString": "assert(testLessOrEqual(0) === \"Smaller Than or Equal to 12\", '<code>testLessOrEqual(0)</code> should return \"Smaller Than or Equal to 12\"');"
        },
        {
          "text": "<code>testLessOrEqual(11)</code> should return \"Smaller Than or Equal to 12\"",
          "testString": "assert(testLessOrEqual(11) === \"Smaller Than or Equal to 12\", '<code>testLessOrEqual(11)</code> should return \"Smaller Than or Equal to 12\"');"
        },
        {
          "text": "<code>testLessOrEqual(12)</code> should return \"Smaller Than or Equal to 12\"",
          "testString": "assert(testLessOrEqual(12) === \"Smaller Than or Equal to 12\", '<code>testLessOrEqual(12)</code> should return \"Smaller Than or Equal to 12\"');"
        },
        {
          "text": "<code>testLessOrEqual(23)</code> should return \"Smaller Than or Equal to 24\"",
          "testString": "assert(testLessOrEqual(23) === \"Smaller Than or Equal to 24\", '<code>testLessOrEqual(23)</code> should return \"Smaller Than or Equal to 24\"');"
        },
        {
          "text": "<code>testLessOrEqual(24)</code> should return \"Smaller Than or Equal to 24\"",
          "testString": "assert(testLessOrEqual(24) === \"Smaller Than or Equal to 24\", '<code>testLessOrEqual(24)</code> should return \"Smaller Than or Equal to 24\"');"
        },
        {
          "text": "<code>testLessOrEqual(25)</code> should return \"More Than 24\"",
          "testString": "assert(testLessOrEqual(25) === \"More Than 24\", '<code>testLessOrEqual(25)</code> should return \"More Than 24\"');"
        },
        {
          "text": "<code>testLessOrEqual(55)</code> should return \"More Than 24\"",
          "testString": "assert(testLessOrEqual(55) === \"More Than 24\", '<code>testLessOrEqual(55)</code> should return \"More Than 24\"');"
        },
        {
          "text": "You should use the <code>&lt;=</code> operator at least twice",
          "testString": "assert(code.match(/val\\s*<=\\s*('|\")*\\d+('|\")*/g).length > 1, 'You should use the <code>&lt;=</code> operator at least twice');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "La comparación con el operador menor o igual",
          "description": [
            "El operador <code>menor o igual</code> (<code>&lt;=</code>) compara los valores de dos números. Si el número a la izquierda es menor o igual que el número de la derecha, este retorna <code>true</code>(verdadero). Si el número a la izquierda es mayor que el número de la derecha, este retorna <code>false</code>(falso). Al igual que el operador de igualdad, <code>menor o igual</code> convierte tipos de datos.",
            "<strong>Ejemplos</strong>",
            "<blockquote>  4 &lt;= 5  // true<br>'7' &lt;= 7  // true<br>&nbsp;&nbsp;5 &lt;= 5  // true<br>&nbsp;&nbsp;3 &lt;= 2  // false<br>'8' &lt;= 4  // false</blockquote>",
            "<h4>Instrucciones</h4>",
            "Agrega el operador <code>menor o igual</code> a las líneas indicadas de modo que las sentencias de retorno tengan sentido."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testLessOrEqual(val) {",
            "  if (val) {  // Change this line",
            "    return \"Smaller Than or Equal to 12\";",
            "  }",
            "  ",
            "  if (val) {  // Change this line",
            "    return \"Smaller Than or Equal to 24\";",
            "  }",
            "",
            "  return \"More Than 24\";",
            "}",
            "",
            "// Change this value to test",
            "testLessOrEqual(10);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d8",
      "title": "Comparisons with the Logical And Operator",
      "description": [
        "Sometimes you will need to test more than one thing at a time. The <dfn>logical and</dfn> operator (<code>&&</code>) returns <code>true</code> if and only if the <dfn>operands</dfn> to the left and right of it are true.",
        "The same effect could be achieved by nesting an if statement inside another if:",
        "<blockquote>if (num > 5) {<br>&nbsp;&nbsp;if (num < 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Yes\";<br>&nbsp;&nbsp;}<br>}<br>return \"No\";</blockquote>",
        "will only return \"Yes\" if <code>num</code> is greater than <code>5</code> and less than <code>10</code>. The same logic can be written as:",
        "<blockquote>if (num > 5 && num < 10) {<br>&nbsp;&nbsp;return \"Yes\";<br>}<br>return \"No\";</blockquote>",
        "<hr>",
        "Combine the two if statements into one statement which will return <code>\"Yes\"</code> if <code>val</code> is less than or equal to <code>50</code> and greater than or equal to <code>25</code>. Otherwise, will return <code>\"No\"</code>."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testLogicalAnd(val) {\n  if (val >= 25 && val <= 50) {\n    return \"Yes\";\n  }\n  return \"No\";\n}"
      ],
      "tests": [
        {
          "text": "You should use the <code>&&</code> operator once",
          "testString": "assert(code.match(/&&/g).length === 1, 'You should use the <code>&&</code> operator once');"
        },
        {
          "text": "You should only have one <code>if</code> statement",
          "testString": "assert(code.match(/if/g).length === 1, 'You should only have one <code>if</code> statement');"
        },
        {
          "text": "<code>testLogicalAnd(0)</code> should return \"No\"",
          "testString": "assert(testLogicalAnd(0) === \"No\", '<code>testLogicalAnd(0)</code> should return \"No\"');"
        },
        {
          "text": "<code>testLogicalAnd(24)</code> should return \"No\"",
          "testString": "assert(testLogicalAnd(24) === \"No\", '<code>testLogicalAnd(24)</code> should return \"No\"');"
        },
        {
          "text": "<code>testLogicalAnd(25)</code> should return \"Yes\"",
          "testString": "assert(testLogicalAnd(25) === \"Yes\", '<code>testLogicalAnd(25)</code> should return \"Yes\"');"
        },
        {
          "text": "<code>testLogicalAnd(30)</code> should return \"Yes\"",
          "testString": "assert(testLogicalAnd(30) === \"Yes\", '<code>testLogicalAnd(30)</code> should return \"Yes\"');"
        },
        {
          "text": "<code>testLogicalAnd(50)</code> should return \"Yes\"",
          "testString": "assert(testLogicalAnd(50) === \"Yes\", '<code>testLogicalAnd(50)</code> should return \"Yes\"');"
        },
        {
          "text": "<code>testLogicalAnd(51)</code> should return \"No\"",
          "testString": "assert(testLogicalAnd(51) === \"No\", '<code>testLogicalAnd(51)</code> should return \"No\"');"
        },
        {
          "text": "<code>testLogicalAnd(75)</code> should return \"No\"",
          "testString": "assert(testLogicalAnd(75) === \"No\", '<code>testLogicalAnd(75)</code> should return \"No\"');"
        },
        {
          "text": "<code>testLogicalAnd(80)</code> should return \"No\"",
          "testString": "assert(testLogicalAnd(80) === \"No\", '<code>testLogicalAnd(80)</code> should return \"No\"');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "La comparación con el operador lógico y",
          "description": [
            "A veces necesitarás probar más de una cosa a la vez. El operador <dfn>lógico y</dfn> (<code>&&</code>) retorna <code>true</code>(verdadero) si y solo si los <dfn>operandos</dfn> a la izquierda y derecha de este son verdaderos.",
            "El mismo efecto podría lograrse anidando una sentencia if dentro de otro if:",
            "<blockquote>if (num > 5) {<br>&nbsp;&nbsp;if (num < 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Yes\";<br>&nbsp;&nbsp;}<br>}<br>return \"No\";</blockquote>",
            "solo retornará \"Yes\" si <code>num</code> está entre <code>6</code> y <code>9</code> (6 y 9 incluidos). La misma lógica puede ser escrita como:",
            "<blockquote>if (num > 5 && num < 10) {<br>&nbsp;&nbsp;return \"Yes\";<br>}<br>return \"No\";</blockquote>",
            "<h4>Instrucciones</h4>",
            "Combina las dos sentencias if dentro de una sentencia la cual retornará <code>\"Yes\"</code> si <code>val</code> es menor o igual a <code>50</code> y mayor o igual a <code>25</code>. De otra manera, retornará <code>\"No\"</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testLogicalAnd(val) {",
            "  // Only change code below this line",
            "",
            "  if (val) {",
            "    if (val) {",
            "      return \"Yes\";",
            "    }",
            "  }",
            "",
            "  // Only change code above this line",
            "  return \"No\";",
            "}",
            "",
            "// Change this value to test",
            "testLogicalAnd(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d9",
      "title": "Comparisons with the Logical Or Operator",
      "description": [
        "The <dfn>logical or</dfn> operator (<code>||</code>) returns <code>true</code> if either of the <dfn>operands</dfn> is <code>true</code>. Otherwise, it returns <code>false</code>.",
        "The <dfn>logical or</dfn> operator is composed of two pipe symbols (<code>|</code>). This can typically be found between your Backspace and Enter keys.",
        "The pattern below should look familiar from prior waypoints:",
        "<blockquote>if (num > 10) {<br>&nbsp;&nbsp;return \"No\";<br>}<br>if (num < 5) {<br>&nbsp;&nbsp;return \"No\";<br>}<br>return \"Yes\";</blockquote>",
        "will return \"Yes\" only if <code>num</code> is between <code>5</code> and <code>10</code> (5 and 10 included). The same logic can be written as:",
        "<blockquote>if (num > 10 || num < 5) {<br>&nbsp;&nbsp;return \"No\";<br>}<br>return \"Yes\";</blockquote>",
        "<hr>",
        "Combine the two <code>if</code> statements into one statement which returns <code>\"Outside\"</code> if <code>val</code> is not between <code>10</code> and <code>20</code>, inclusive. Otherwise, return <code>\"Inside\"</code>."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testLogicalOr(val) {\n  if (val < 10 || val > 20) {\n    return \"Outside\";\n  }\n  return \"Inside\";\n}"
      ],
      "tests": [
        {
          "text": "You should use the <code>||</code> operator once",
          "testString": "assert(code.match(/\\|\\|/g).length === 1, 'You should use the <code>||</code> operator once');"
        },
        {
          "text": "You should only have one <code>if</code> statement",
          "testString": "assert(code.match(/if/g).length === 1, 'You should only have one <code>if</code> statement');"
        },
        {
          "text": "<code>testLogicalOr(0)</code> should return \"Outside\"",
          "testString": "assert(testLogicalOr(0) === \"Outside\", '<code>testLogicalOr(0)</code> should return \"Outside\"');"
        },
        {
          "text": "<code>testLogicalOr(9)</code> should return \"Outside\"",
          "testString": "assert(testLogicalOr(9) === \"Outside\", '<code>testLogicalOr(9)</code> should return \"Outside\"');"
        },
        {
          "text": "<code>testLogicalOr(10)</code> should return \"Inside\"",
          "testString": "assert(testLogicalOr(10) === \"Inside\", '<code>testLogicalOr(10)</code> should return \"Inside\"');"
        },
        {
          "text": "<code>testLogicalOr(15)</code> should return \"Inside\"",
          "testString": "assert(testLogicalOr(15) === \"Inside\", '<code>testLogicalOr(15)</code> should return \"Inside\"');"
        },
        {
          "text": "<code>testLogicalOr(19)</code> should return \"Inside\"",
          "testString": "assert(testLogicalOr(19) === \"Inside\", '<code>testLogicalOr(19)</code> should return \"Inside\"');"
        },
        {
          "text": "<code>testLogicalOr(20)</code> should return \"Inside\"",
          "testString": "assert(testLogicalOr(20) === \"Inside\", '<code>testLogicalOr(20)</code> should return \"Inside\"');"
        },
        {
          "text": "<code>testLogicalOr(21)</code> should return \"Outside\"",
          "testString": "assert(testLogicalOr(21) === \"Outside\", '<code>testLogicalOr(21)</code> should return \"Outside\"');"
        },
        {
          "text": "<code>testLogicalOr(25)</code> should return \"Outside\"",
          "testString": "assert(testLogicalOr(25) === \"Outside\", '<code>testLogicalOr(25)</code> should return \"Outside\"');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "La comparación con el operador lógico o",
          "description": [
            "El operador <dfn>lógico o</dfn> (<code>||</code>) retorna <code>true</code>(verdadero) si cualquiera de los <dfn>operandos</dfn> es <code>true</code>(verdadero). De otra manera, este retorna <code>false</code>(falso).",
            "El patrón de abajo debería ser familiar de los puntos de referencia anteriores:",
            "<blockquote>if (num > 10) {<br>&nbsp;&nbsp;return \"No\";<br>}<br>if (num < 5) {<br>&nbsp;&nbsp;return \"No\";<br>}<br>return \"Yes\";</blockquote>",
            "retornará \"Yes\" solo si <code>num</code> está entre <code>5</code> y <code>10</code> (5 y 10 incluidos). La misma lógica puede ser escrita como:",
            "<blockquote>if (num > 10 || num < 5) {<br>&nbsp;&nbsp;return \"No\";<br>}<br>return \"Yes\";</blockquote>",
            "<h4>Instrucciones</h4>",
            "Combina las dos sentencias <code>if</code> dentro de una sentencia la cual retorne <code>\"Outside\"</code> si <code>val</code> no está entre <code>10</code> y <code>20</code>, inclusive. De otra manera, retorna <code>\"Inside\"</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testLogicalOr(val) {",
            "  // Only change code below this line",
            "",
            "  if (val) {",
            "    return \"Outside\";",
            "  }",
            "",
            "  if (val) {",
            "    return \"Outside\";",
            "  }",
            "",
            "  // Only change code above this line",
            "  return \"Inside\";",
            "}",
            "",
            "// Change this value to test",
            "testLogicalOr(15);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244da",
      "title": "Introducing Else Statements",
      "description": [
        "When a condition for an <code>if</code> statement is true, the block of code following it is executed. What about when that condition is false?  Normally nothing would happen. With an <code>else</code> statement, an alternate block of code can be executed.",
        "<blockquote>if (num > 10) {<br>&nbsp;&nbsp;return \"Bigger than 10\";<br>} else {<br>&nbsp;&nbsp;return \"10 or Less\";<br>}</blockquote>",
        "<hr>",
        "Combine the <code>if</code> statements into a single <code>if/else</code> statement."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testElse(val) {\n  var result = \"\";\n  if(val > 5) {\n    result = \"Bigger than 5\";\n  } else {\n    result = \"5 or Smaller\";\n  }\n  return result;\n}"
      ],
      "tests": [
        {
          "text": "You should only have one <code>if</code> statement in the editor",
          "testString": "assert(code.match(/if/g).length === 1, 'You should only have one <code>if</code> statement in the editor');"
        },
        {
          "text": "You should use an <code>else</code> statement",
          "testString": "assert(/else/g.test(code), 'You should use an <code>else</code> statement');"
        },
        {
          "text": "<code>testElse(4)</code> should return \"5 or Smaller\"",
          "testString": "assert(testElse(4) === \"5 or Smaller\", '<code>testElse(4)</code> should return \"5 or Smaller\"');"
        },
        {
          "text": "<code>testElse(5)</code> should return \"5 or Smaller\"",
          "testString": "assert(testElse(5) === \"5 or Smaller\", '<code>testElse(5)</code> should return \"5 or Smaller\"');"
        },
        {
          "text": "<code>testElse(6)</code> should return \"Bigger than 5\"",
          "testString": "assert(testElse(6) === \"Bigger than 5\", '<code>testElse(6)</code> should return \"Bigger than 5\"');"
        },
        {
          "text": "<code>testElse(10)</code> should return \"Bigger than 5\"",
          "testString": "assert(testElse(10) === \"Bigger than 5\", '<code>testElse(10)</code> should return \"Bigger than 5\"');"
        },
        {
          "text": "Do not change the code above or below the lines.",
          "testString": "assert(/var result = \"\";/.test(code) && /return result;/.test(code), 'Do not change the code above or below the lines.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Introducción de las sentencias else",
          "description": [
            "Cuando una condición de una sentencia <code>if</code> es verdadera, el siguiente bloque de código es ejecutado. ¿Y cuando esa condición es falsa? Normalmente nada pasaría. Con una sentencia <code>else</code>(además), un bloque alternativo de código puede ser ejecutado.",
            "<blockquote>if (num > 10) {<br>&nbsp;&nbsp;return \"Más grande que 10\";<br>} else {<br>&nbsp;&nbsp;return \"10 o Menos\";<br>}</blockquote>",
            "<h4>Instrucciones</h4>",
            "Combina las sentencias <code>if</code> dentro de una sola sentencia <code>if/else</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testElse(val) {",
            "  var result = \"\";",
            "  // Only change code below this line",
            "  ",
            "  if (val > 5) {",
            "    result = \"Bigger than 5\";",
            "  }",
            "  ",
            "  if (val <= 5) {",
            "    result = \"5 or Smaller\";",
            "  }",
            "  ",
            "  // Only change code above this line",
            "  return result;",
            "}",
            "",
            "// Change this value to test",
            "testElse(4);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244db",
      "title": "Introducing Else If Statements",
      "description": [
        "If you have multiple conditions that need to be addressed, you can chain <code>if</code> statements together with <code>else if</code> statements.",
        "<blockquote>if (num > 15) {<br>&nbsp;&nbsp;return \"Bigger than 15\";<br>} else if (num < 5) {<br>&nbsp;&nbsp;return \"Smaller than 5\";<br>} else {<br>&nbsp;&nbsp;return \"Between 5 and 15\";<br>}</blockquote>",
        "<hr>",
        "Convert the logic to use <code>else if</code> statements."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testElseIf(val) {\n  if(val > 10) {\n    return \"Greater than 10\";\n  } else if(val < 5) {\n    return \"Smaller than 5\";\n  } else {\n    return \"Between 5 and 10\";\n  }\n}"
      ],
      "tests": [
        {
          "text": "You should have at least two <code>else</code> statements",
          "testString": "assert(code.match(/else/g).length > 1, 'You should have at least two <code>else</code> statements');"
        },
        {
          "text": "You should have at least two <code>if</code> statements",
          "testString": "assert(code.match(/if/g).length > 1, 'You should have at least two <code>if</code> statements');"
        },
        {
          "text": "<code>testElseIf(0)</code> should return \"Smaller than 5\"",
          "testString": "assert(testElseIf(0) === \"Smaller than 5\", '<code>testElseIf(0)</code> should return \"Smaller than 5\"');"
        },
        {
          "text": "<code>testElseIf(5)</code> should return \"Between 5 and 10\"",
          "testString": "assert(testElseIf(5) === \"Between 5 and 10\", '<code>testElseIf(5)</code> should return \"Between 5 and 10\"');"
        },
        {
          "text": "<code>testElseIf(7)</code> should return \"Between 5 and 10\"",
          "testString": "assert(testElseIf(7) === \"Between 5 and 10\", '<code>testElseIf(7)</code> should return \"Between 5 and 10\"');"
        },
        {
          "text": "<code>testElseIf(10)</code> should return \"Between 5 and 10\"",
          "testString": "assert(testElseIf(10) === \"Between 5 and 10\", '<code>testElseIf(10)</code> should return \"Between 5 and 10\"');"
        },
        {
          "text": "<code>testElseIf(12)</code> should return \"Greater than 10\"",
          "testString": "assert(testElseIf(12) === \"Greater than 10\", '<code>testElseIf(12)</code> should return \"Greater than 10\"');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Introducción de las sentencias else if",
          "description": [
            "Si tienes múltiples condiciones que deben abordarse, puedes encadenar sentencias <code>if</code> juntas con sentencias <code>else if</code>.",
            "<blockquote>if (num > 15) {<br>&nbsp;&nbsp;return \"Más grande que 15\";<br>} else if (num < 5) {<br>&nbsp;&nbsp;return \"Más pequeño que 5\";<br>} else {<br>&nbsp;&nbsp;return \"Entre 5 y 15\";<br>}</blockquote>",
            "<h4>Instrucciones</h4>",
            "Convierte la lógica para usar sentencias <code>else if</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testElseIf(val) {",
            "  if (val > 10) {",
            "    return \"Greater than 10\";",
            "  }",
            "  ",
            "  if (val < 5) {",
            "    return \"Smaller than 5\";",
            "  }",
            "  ",
            "  return \"Between 5 and 10\";",
            "}",
            "",
            "// Change this value to test",
            "testElseIf(7);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5690307fddb111c6084545d7",
      "title": "Logical Order in If Else Statements",
      "description": [
        "Order is important in <code>if</code>, <code>else if</code> statements.",
        "The function is executed from top to bottom so you will want to be careful of what statement comes first.",
        "Take these two functions as an example.",
        "Here's the first:",
        "<blockquote>function foo(x) {<br>&nbsp;&nbsp;if (x < 1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Less than one\";<br>&nbsp;&nbsp;} else if (x < 2) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Less than two\";<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Greater than or equal to two\";<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "And the second just switches the order of the statements:",
        "<blockquote>function bar(x) {<br>&nbsp;&nbsp;if (x < 2) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Less than two\";<br>&nbsp;&nbsp;} else if (x < 1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Less than one\";<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Greater than or equal to two\";<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "While these two functions look nearly identical if we pass a number to both we get different outputs.",
        "<blockquote>foo(0) // \"Less than one\"<br>bar(0) // \"Less than two\"</blockquote>",
        "<hr>",
        "Change the order of logic in the function so that it will return the correct statements in all cases."
      ],
      "solutions": [
        "function orderMyLogic(val) {\n  if(val < 5) {\n    return \"Less than 5\";            \n  } else if (val < 10) {\n    return \"Less than 10\";\n  } else {\n    return \"Greater than or equal to 10\";\n  }\n}"
      ],
      "tests": [
        {
          "text": "<code>orderMyLogic(4)</code> should return \"Less than 5\"",
          "testString": "assert(orderMyLogic(4) === \"Less than 5\", '<code>orderMyLogic(4)</code> should return \"Less than 5\"');"
        },
        {
          "text": "<code>orderMyLogic(6)</code> should return \"Less than 10\"",
          "testString": "assert(orderMyLogic(6) === \"Less than 10\", '<code>orderMyLogic(6)</code> should return \"Less than 10\"');"
        },
        {
          "text": "<code>orderMyLogic(11)</code> should return \"Greater than or equal to 10\"",
          "testString": "assert(orderMyLogic(11) === \"Greater than or equal to 10\", '<code>orderMyLogic(11)</code> should return \"Greater than or equal to 10\"');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Orden lógico en sentencias else if",
          "description": [
            "El orden es importante en las sentencia <code>if</code> y <code>else if</code>.",
            "El ciclo es ejecutado de arriba hacia abajo por lo que tendrás que ser cuidadoso de cual sentencia va primero.",
            "Toma estas dos funciones como ejemplo.",
            "Aquí está la primera:",
            "<blockquote>function foo(x) {<br>&nbsp;&nbsp;if (x < 1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Menor que uno\";<br>&nbsp;&nbsp;} else if (x < 2) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Menor que dos\";<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Mayor o igual a dos\";<br>&nbsp;&nbsp;}<br>}</blockquote>",
            "Y el segundo solo cambia el orden de las sentencias:",
            "<blockquote>function bar(x) {<br>&nbsp;&nbsp;if (x < 2) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Menor que dos\";<br>&nbsp;&nbsp;} else if (x < 1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Menor que uno\";<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Mayor o igual a dos\";<br>&nbsp;&nbsp;}<br>}</blockquote>",
            "Mientras esas dos funciones parecen casi idénticas, si nosotros pasamos un número a ambas obtendremos diferentes salidas.",
            "<blockquote>foo(0) // \"Menor que uno\"<br>bar(0) // \"Menor que dos\"</blockquote>",
            "<h4>Instrucciones</h4>",
            "Cambia el orden de la lógica en la función de manera que esta retorne las sentencias correctas en todos los casos."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function orderMyLogic(val) {",
            "  if (val < 10) {",
            "    return \"Less than 10\";",
            "  } else if (val < 5) {",
            "    return \"Less than 5\";",
            "  } else {",
            "    return \"Greater than or equal to 10\";",
            "  }",
            "}",
            "",
            "// Change this value to test",
            "orderMyLogic(7);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244dc",
      "title": "Chaining If Else Statements",
      "description": [
        "<code>if/else</code> statements can be chained together for complex logic. Here is <dfn>pseudocode</dfn> of multiple chained <code>if</code> / <code>else if</code> statements:",
        "<blockquote>if (<em>condition1</em>) {<br>&nbsp;&nbsp;<em>statement1</em><br>} else if (<em>condition2</em>) {<br>&nbsp;&nbsp;<em>statement2</em><br>} else if (<em>condition3</em>) {<br>&nbsp;&nbsp;<em>statement3</em><br>. . .<br>} else {<br>&nbsp;&nbsp;<em>statementN</em><br>}</blockquote>",
        "<hr>",
        "Write chained <code>if</code>/<code>else if</code> statements to fulfill the following conditions:",
        "<code>num &lt;   5</code> - return \"Tiny\"<br><code>num &lt;  10</code> - return \"Small\"<br><code>num &lt; 15</code> - return \"Medium\"<br><code>num &lt; 20</code> - return \"Large\"<br><code>num >= 20</code>  - return \"Huge\""
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testSize(num) {\n  if (num < 5) {\n    return \"Tiny\";\n  } else if (num < 10) {\n    return \"Small\";\n  } else if (num < 15) {\n    return \"Medium\";\n  } else if (num < 20) {\n    return \"Large\";\n  } else {\n    return \"Huge\";\n  }\n}"
      ],
      "tests": [
        {
          "text": "You should have at least four <code>else</code> statements",
          "testString": "assert(code.match(/else/g).length > 3, 'You should have at least four <code>else</code> statements');"
        },
        {
          "text": "You should have at least four <code>if</code> statements",
          "testString": "assert(code.match(/if/g).length > 3, 'You should have at least four <code>if</code> statements');"
        },
        {
          "text": "You should have at least one <code>return</code> statement",
          "testString": "assert(code.match(/return/g).length >= 1, 'You should have at least one <code>return</code> statement');"
        },
        {
          "text": "<code>testSize(0)</code> should return \"Tiny\"",
          "testString": "assert(testSize(0) === \"Tiny\", '<code>testSize(0)</code> should return \"Tiny\"');"
        },
        {
          "text": "<code>testSize(4)</code> should return \"Tiny\"",
          "testString": "assert(testSize(4) === \"Tiny\", '<code>testSize(4)</code> should return \"Tiny\"');"
        },
        {
          "text": "<code>testSize(5)</code> should return \"Small\"",
          "testString": "assert(testSize(5) === \"Small\", '<code>testSize(5)</code> should return \"Small\"');"
        },
        {
          "text": "<code>testSize(8)</code> should return \"Small\"",
          "testString": "assert(testSize(8) === \"Small\", '<code>testSize(8)</code> should return \"Small\"');"
        },
        {
          "text": "<code>testSize(10)</code> should return \"Medium\"",
          "testString": "assert(testSize(10) === \"Medium\", '<code>testSize(10)</code> should return \"Medium\"');"
        },
        {
          "text": "<code>testSize(14)</code> should return \"Medium\"",
          "testString": "assert(testSize(14) === \"Medium\", '<code>testSize(14)</code> should return \"Medium\"');"
        },
        {
          "text": "<code>testSize(15)</code> should return \"Large\"",
          "testString": "assert(testSize(15) === \"Large\", '<code>testSize(15)</code> should return \"Large\"');"
        },
        {
          "text": "<code>testSize(17)</code> should return \"Large\"",
          "testString": "assert(testSize(17) === \"Large\", '<code>testSize(17)</code> should return \"Large\"');"
        },
        {
          "text": "<code>testSize(20)</code> should return \"Huge\"",
          "testString": "assert(testSize(20) === \"Huge\", '<code>testSize(20)</code> should return \"Huge\"');"
        },
        {
          "text": "<code>testSize(25)</code> should return \"Huge\"",
          "testString": "assert(testSize(25) === \"Huge\", '<code>testSize(25)</code> should return \"Huge\"');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Encadenamiento de sentencias else if",
          "description": [
            "Las sentencias <code>if/else</code>(si/de lo contrario) pueden ser encadenadas juntas por una lógica compleja. Aquí está el <dfn>pseudocódigo</dfn> de múltiples sentencias <code>if</code> / <code>else if</code> encadenadas:",
            "<blockquote>if (<em>condicion1</em>) {<br>&nbsp;&nbsp;<em>sentencias1</em><br>} else if (<em>condicion2</em>) {<br>&nbsp;&nbsp;<em>sentencias2</em><br>} else if (<em>condicion3</em>) {<br>&nbsp;&nbsp;<em>sentencias3</em><br>. . .<br>} else {<br>&nbsp;&nbsp;<em>sentenciasN</em><br>}</blockquote>",
            "<h4>Instrucciones</h4>",
            "Escribe sentencias <code>if</code>/<code>else if</code> encadenadas para cumplir las siguientes condiciones:",
            "<code>num &lt;   5</code> - retorna \"Tiny\"<br><code>num &lt;  10</code> - retorna \"Small\"<br><code>num &lt; 15</code> - retorna \"Medium\"<br><code>num &lt; 20</code> - retorna \"Large\"<br><code>num >= 20</code>  - retorna \"Huge\""
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testSize(num) {",
            "  // Only change code below this line",
            "  ",
            "  ",
            "  return \"Change Me\";",
            "  // Only change code above this line",
            "}",
            "",
            "// Change this value to test",
            "testSize(7);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5664820f61c48e80c9fa476c",
      "title": "Golf Code",
      "description": [
        "In the game of <a href=\"https://en.wikipedia.org/wiki/Golf\" target=\"_blank\">golf</a> each hole has a <code>par</code> meaning the average number of <code>strokes</code> a golfer is expected to make in order to sink the ball in a hole to complete the play. Depending on how far above or below <code>par</code> your <code>strokes</code> are, there is a different nickname.",
        "Your function will be passed <code>par</code> and <code>strokes</code> arguments. Return the correct string according to this table which lists the strokes in order of priority; top (highest) to bottom (lowest):",
        "<table class=\"table table-striped\"><thead><tr><th>Strokes</th><th>Return</th></tr></thead><tbody><tr><td>1</td><td>\"Hole-in-one!\"</td></tr><tr><td>&lt;= par - 2</td><td>\"Eagle\"</td></tr><tr><td>par - 1</td><td>\"Birdie\"</td></tr><tr><td>par</td><td>\"Par\"</td></tr><tr><td>par + 1</td><td>\"Bogey\"</td></tr><tr><td>par + 2</td><td>\"Double Bogey\"</td></tr><tr><td>&gt;= par + 3</td><td>\"Go Home!\"</td></tr></tbody></table>",
        "<code>par</code> and <code>strokes</code> will always be numeric and positive. We have added an array of all the names for your convenience."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function golfScore(par, strokes) {\n  if (strokes === 1) {\n    return \"Hole-in-one!\";\n  }\n  \n  if (strokes <= par - 2) {\n    return \"Eagle\";\n  }\n  \n  if (strokes === par - 1) {\n    return \"Birdie\";\n  }\n  \n  if (strokes === par) {\n    return \"Par\";\n  }\n  \n  if (strokes === par + 1) {\n    return \"Bogey\";\n  }\n  \n  if(strokes === par + 2) {\n    return \"Double Bogey\";\n  }\n  \n  return \"Go Home!\";\n}"
      ],
      "tests": [
        {
          "text": "<code>golfScore(4, 1)</code> should return \"Hole-in-one!\"",
          "testString": "assert(golfScore(4, 1) === \"Hole-in-one!\", '<code>golfScore(4, 1)</code> should return \"Hole-in-one!\"');"
        },
        {
          "text": "<code>golfScore(4, 2)</code> should return \"Eagle\"",
          "testString": "assert(golfScore(4, 2) === \"Eagle\", '<code>golfScore(4, 2)</code> should return \"Eagle\"');"
        },
        {
          "text": "<code>golfScore(5, 2)</code> should return \"Eagle\"",
          "testString": "assert(golfScore(5, 2) === \"Eagle\", '<code>golfScore(5, 2)</code> should return \"Eagle\"');"
        },
        {
          "text": "<code>golfScore(4, 3)</code> should return \"Birdie\"",
          "testString": "assert(golfScore(4, 3) === \"Birdie\", '<code>golfScore(4, 3)</code> should return \"Birdie\"');"
        },
        {
          "text": "<code>golfScore(4, 4)</code> should return \"Par\"",
          "testString": "assert(golfScore(4, 4) === \"Par\", '<code>golfScore(4, 4)</code> should return \"Par\"');"
        },
        {
          "text": "<code>golfScore(1, 1)</code> should return \"Hole-in-one!\"",
          "testString": "assert(golfScore(1, 1) === \"Hole-in-one!\", '<code>golfScore(1, 1)</code> should return \"Hole-in-one!\"');"
        },
        {
          "text": "<code>golfScore(5, 5)</code> should return \"Par\"",
          "testString": "assert(golfScore(5, 5) === \"Par\", '<code>golfScore(5, 5)</code> should return \"Par\"');"
        },
        {
          "text": "<code>golfScore(4, 5)</code> should return \"Bogey\"",
          "testString": "assert(golfScore(4, 5) === \"Bogey\", '<code>golfScore(4, 5)</code> should return \"Bogey\"');"
        },
        {
          "text": "<code>golfScore(4, 6)</code> should return \"Double Bogey\"",
          "testString": "assert(golfScore(4, 6) === \"Double Bogey\", '<code>golfScore(4, 6)</code> should return \"Double Bogey\"');"
        },
        {
          "text": "<code>golfScore(4, 7)</code> should return \"Go Home!\"",
          "testString": "assert(golfScore(4, 7) === \"Go Home!\", '<code>golfScore(4, 7)</code> should return \"Go Home!\"');"
        },
        {
          "text": "<code>golfScore(5, 9)</code> should return \"Go Home!\"",
          "testString": "assert(golfScore(5, 9) === \"Go Home!\", '<code>golfScore(5, 9)</code> should return \"Go Home!\"');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Código de golf",
          "description": [
            "En el juego de <a href='https://es.wikipedia.org/wiki/Golf' target='_blank'>golf</a> cada hoyo tiene un <dfn>par</dfn> promedio para el número de <dfn>golpes</dfn> necesarios para meter la pelota. Dependiendo de que tan lejos por encima o por debajo del <code>par</code> estén tus <code>golpes</code>, habrá un sobrenombre diferente.",
            "Tu función pasará un <code>par</code> y el número de <code>golpes</code>, y retornará una cadena de acuerdo a esta tabla (basada en el orden de prioridad - arriba (lo más alto) hacia abajo (lo más bajo)):",
            "<table class=\"table table-striped\"><thead><tr><th>Golpes</th><th>Retorna</th></tr></thead><tbody><tr><td>1</td><td>\"Hole-in-one!\"</td></tr><tr><td>&lt;= par - 2</td><td>\"Eagle\"</td></tr><tr><td>par - 1</td><td>\"Birdie\"</td></tr><tr><td>par</td><td>\"Par\"</td></tr><tr><td>par + 1</td><td>\"Bogey\"</td></tr><tr><td>par + 2</td><td>\"Double Bogey\"</td></tr><tr><td>&gt;= par + 3</td><td>\"Go Home!\"</td></tr></tbody></table>",
            "Tanto <code>par</code> como <code>golpes</code> siempre serán numéricos y positivos."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var names = [\"Hole-in-one!\", \"Eagle\", \"Birdie\", \"Par\", \"Bogey\", \"Double Bogey\", \"Go Home!\"];",
            "function golfScore(par, strokes) {",
            "  // Only change code below this line",
            "  ",
            "  ",
            "  return \"Change Me\";",
            "  // Only change code above this line",
            "}",
            "",
            "// Change these values to test",
            "golfScore(5, 4);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244dd",
      "title": "Selecting from Many Options with Switch Statements",
      "description": [
        "If you have many options to choose from, use a <code>switch</code> statement. A <code>switch</code> statement tests a value and can have many <code>case</code> statements which define various possible values. Statements are executed from the first matched <code>case</code> value until a <code>break</code> is encountered.",
        "Here is a <dfn>pseudocode</dfn> example:",
        "<blockquote>switch(num) {<br>&nbsp;&nbsp;case value1:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement1;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case value2:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement2;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>...<br>&nbsp;&nbsp;case valueN:<br>&nbsp;&nbsp;&nbsp;&nbsp;statementN;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}</blockquote>",
        "<code>case</code> values are tested with strict equality (<code>===</code>). The <code>break</code> tells JavaScript to stop executing statements. If the <code>break</code> is omitted, the next statement will be executed.",
        "<hr>",
        "Write a switch statement which tests <code>val</code> and sets <code>answer</code> for the following conditions:<br><code>1</code> - \"alpha\"<br><code>2</code> - \"beta\"<br><code>3</code> - \"gamma\"<br><code>4</code> - \"delta\""
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function caseInSwitch(val) {\n  var answer = \"\";\n\n  switch(val) {\n    case 1:\n      answer = \"alpha\";\n      break;\n    case 2:\n      answer = \"beta\";\n      break;\n    case 3:\n      answer = \"gamma\";\n      break;\n    case 4:\n      answer = \"delta\";\n  }\n  return answer;  \n}"
      ],
      "tests": [
        {
          "text": "<code>caseInSwitch(1)</code> should have a value of \"alpha\"",
          "testString": "assert(caseInSwitch(1) === \"alpha\", '<code>caseInSwitch(1)</code> should have a value of \"alpha\"');"
        },
        {
          "text": "<code>caseInSwitch(2)</code> should have a value of \"beta\"",
          "testString": "assert(caseInSwitch(2) === \"beta\", '<code>caseInSwitch(2)</code> should have a value of \"beta\"');"
        },
        {
          "text": "<code>caseInSwitch(3)</code> should have a value of \"gamma\"",
          "testString": "assert(caseInSwitch(3) === \"gamma\", '<code>caseInSwitch(3)</code> should have a value of \"gamma\"');"
        },
        {
          "text": "<code>caseInSwitch(4)</code> should have a value of \"delta\"",
          "testString": "assert(caseInSwitch(4) === \"delta\", '<code>caseInSwitch(4)</code> should have a value of \"delta\"');"
        },
        {
          "text": "You should not use any <code>if</code> or <code>else</code> statements",
          "testString": "assert(!/else/g.test(code) || !/if/g.test(code), 'You should not use any <code>if</code> or <code>else</code> statements');"
        },
        {
          "text": "You should have at least 3 <code>break</code> statements",
          "testString": "assert(code.match(/break/g).length > 2, 'You should have at least 3 <code>break</code> statements');"
        }
      ],
      "MDNlinks": [
        "Switch Statement"
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Seleccionar desde diferentes opciones con la sentencia switch",
          "description": [
            "Si tienes varias opciones para elegir, usa una sentencia <code>switch</code>. Una sentencia <code>switch</code> prueba un valor y puede tener varias sentencias <code>case</code> las cuales definen varios posibles valores. Las sentencias son ejecutadas desde el primer valor <code>case</code> igualado hasta que se encuentr un <code>break</code>.",
            "Aquí hay un <dfn>pseudocódigo</dfn> de ejemplo:",
            "<blockquote>switch(num) {<br>&nbsp;&nbsp;case valor1:<br>&nbsp;&nbsp;&nbsp;&nbsp;sentencia1;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case valor2:<br>&nbsp;&nbsp;&nbsp;&nbsp;sentencia2;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>...<br>&nbsp;&nbsp;case valorN:<br>&nbsp;&nbsp;&nbsp;&nbsp;sentenciaN;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}</blockquote>",
            "Los valores <code>case</code> son probados con estricta igualdad (<code>===</code>). El <code>break</code> le dice a JavaScript que pare la ejecución del bloque de sentencias en el que está. Si se omite <code>break</code>, se ejecutará la siguiente sentencia.",
            "<h4>Instrucciones</h4>",
            "Escribe una sentencia <code>switch</code> que pruebe <code>val</code> y establezca <code>answer</code> para las siguientes condiciones:<br><code>1</code> - \"alpha\"<br><code>2</code> - \"beta\"<br><code>3</code> - \"gamma\"<br><code>4</code> - \"delta\""
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function caseInSwitch(val) {",
            "  var answer = \"\";",
            "  // Only change code below this line",
            "  ",
            "  ",
            "  ",
            "  // Only change code above this line  ",
            "  return answer;  ",
            "}",
            "",
            "// Change this value to test",
            "caseInSwitch(1);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244de",
      "title": "Adding a Default Option in Switch Statements",
      "description": [
        "In a <code>switch</code> statement you may not be able to specify all possible values as <code>case</code> statements. Instead, you can add the <code>default</code> statement which will be executed if no matching <code>case</code> statements are found. Think of it like the final <code>else</code> statement in an <code>if/else</code> chain.",
        "A <code>default</code> statement should be the last case.",
        "<blockquote>switch (num) {<br>&nbsp;&nbsp;case value1:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement1;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case value2:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement2;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>...<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;defaultStatement;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}</blockquote>",
        "<hr>",
        "Write a switch statement to set <code>answer</code> for the following conditions:<br><code>\"a\"</code> - \"apple\"<br><code>\"b\"</code> - \"bird\"<br><code>\"c\"</code> - \"cat\"<br><code>default</code> - \"stuff\""
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function switchOfStuff(val) {\n  var answer = \"\";\n\n  switch(val) {\n    case \"a\":\n      answer = \"apple\";\n      break;\n    case \"b\":\n      answer = \"bird\";\n      break;\n    case \"c\":\n      answer = \"cat\";\n      break;\n    default:\n      answer = \"stuff\";\n  }\n  return answer;  \n}"
      ],
      "tests": [
        {
          "text": "<code>switchOfStuff(\"a\")</code> should have a value of \"apple\"",
          "testString": "assert(switchOfStuff(\"a\") === \"apple\", '<code>switchOfStuff(\"a\")</code> should have a value of \"apple\"');"
        },
        {
          "text": "<code>switchOfStuff(\"b\")</code> should have a value of \"bird\"",
          "testString": "assert(switchOfStuff(\"b\") === \"bird\", '<code>switchOfStuff(\"b\")</code> should have a value of \"bird\"');"
        },
        {
          "text": "<code>switchOfStuff(\"c\")</code> should have a value of \"cat\"",
          "testString": "assert(switchOfStuff(\"c\") === \"cat\", '<code>switchOfStuff(\"c\")</code> should have a value of \"cat\"');"
        },
        {
          "text": "<code>switchOfStuff(\"d\")</code> should have a value of \"stuff\"",
          "testString": "assert(switchOfStuff(\"d\") === \"stuff\", '<code>switchOfStuff(\"d\")</code> should have a value of \"stuff\"');"
        },
        {
          "text": "<code>switchOfStuff(4)</code> should have a value of \"stuff\"",
          "testString": "assert(switchOfStuff(4) === \"stuff\", '<code>switchOfStuff(4)</code> should have a value of \"stuff\"');"
        },
        {
          "text": "You should not use any <code>if</code> or <code>else</code> statements",
          "testString": "assert(!/else/g.test(code) || !/if/g.test(code), 'You should not use any <code>if</code> or <code>else</code> statements');"
        },
        {
          "text": "You should use a <code>default</code> statement",
          "testString": "assert(switchOfStuff(\"string-to-trigger-default-case\") === \"stuff\", 'You should use a <code>default</code> statement');"
        },
        {
          "text": "You should have at least 3 <code>break</code> statements",
          "testString": "assert(code.match(/break/g).length > 2, 'You should have at least 3 <code>break</code> statements');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Agregar una opción por omisión (default) en una sentencia switch",
          "description": [
            "En una sentencia <code>switch</code> puede que no seas capaz de especificar todos los posibles valores en las sentencias <code>case</code>. En su lugar, puedes agregar la sentencia <code>default</code> la cual será ejecutada si no es encontrada ninguna coincidencia con alguna sentencia <code>case</code>. Piensa en esto como la última sentencia <code>else</code> en una cadena <code>if/else</code>.",
            "Una sentencia <code>default</code> debería ser el último caso.",
            "<blockquote>switch(num) {<br>&nbsp;&nbsp;case valor1:<br>&nbsp;&nbsp;&nbsp;&nbsp;sentencia1;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case valor2:<br>&nbsp;&nbsp;&nbsp;&nbsp;sentencia2;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>...<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;sentenciaDefault;<br>}</blockquote>",
            "<h4>Instrucciones</h4>",
            "Escribe una sentencia switch para establecer <code>answer</code> para las siguientes condiciones:<br><code>\"a\"</code> - \"apple\"<br><code>\"b\"</code> - \"bird\"<br><code>\"c\"</code> - \"cat\"<br><code>default</code> - \"stuff\""
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/adding-a-default-option-in-switch-statements",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function switchOfStuff(val) {",
            "  var answer = \"\";",
            "  // Only change code below this line",
            "  ",
            "  ",
            "  ",
            "  // Only change code above this line  ",
            "  return answer;  ",
            "}",
            "",
            "// Change this value to test",
            "switchOfStuff(1);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244df",
      "title": "Multiple Identical Options in Switch Statements",
      "description": [
        "If the <code>break</code> statement is omitted from a <code>switch</code> statement's <code>case</code>, the following <code>case</code> statement(s) are executed until a <code>break</code> is encountered. If you have multiple inputs with the same output, you can represent them in a <code>switch</code> statement like this:",
        "<blockquote>switch(val) {<br>&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;case 2:<br>&nbsp;&nbsp;case 3:<br>&nbsp;&nbsp;&nbsp;&nbsp;result = \"1, 2, or 3\";<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case 4:<br>&nbsp;&nbsp;&nbsp;&nbsp;result = \"4 alone\";<br>}</blockquote>",
        "Cases for 1, 2, and 3 will all produce the same result.",
        "<hr>",
        "Write a switch statement to set <code>answer</code> for the following ranges:<br><code>1-3</code> - \"Low\"<br><code>4-6</code> - \"Mid\"<br><code>7-9</code> - \"High\"",
        "<strong>Note</strong><br>You will need to have a <code>case</code> statement for each number in the range."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function sequentialSizes(val) {\n  var answer = \"\";\n  \n  switch(val) {\n    case 1:\n    case 2:\n    case 3:\n      answer = \"Low\";\n      break;\n    case 4:\n    case 5:\n    case 6:\n      answer = \"Mid\";\n      break;\n    case 7:\n    case 8:\n    case 9:\n      answer = \"High\";\n  }\n  \n  return answer;  \n}"
      ],
      "tests": [
        {
          "text": "<code>sequentialSizes(1)</code> should return \"Low\"",
          "testString": "assert(sequentialSizes(1) === \"Low\", '<code>sequentialSizes(1)</code> should return \"Low\"');"
        },
        {
          "text": "<code>sequentialSizes(2)</code> should return \"Low\"",
          "testString": "assert(sequentialSizes(2) === \"Low\", '<code>sequentialSizes(2)</code> should return \"Low\"');"
        },
        {
          "text": "<code>sequentialSizes(3)</code> should return \"Low\"",
          "testString": "assert(sequentialSizes(3) === \"Low\", '<code>sequentialSizes(3)</code> should return \"Low\"');"
        },
        {
          "text": "<code>sequentialSizes(4)</code> should return \"Mid\"",
          "testString": "assert(sequentialSizes(4) === \"Mid\", '<code>sequentialSizes(4)</code> should return \"Mid\"');"
        },
        {
          "text": "<code>sequentialSizes(5)</code> should return \"Mid\"",
          "testString": "assert(sequentialSizes(5) === \"Mid\", '<code>sequentialSizes(5)</code> should return \"Mid\"');"
        },
        {
          "text": "<code>sequentialSizes(6)</code> should return \"Mid\"",
          "testString": "assert(sequentialSizes(6) === \"Mid\", '<code>sequentialSizes(6)</code> should return \"Mid\"');"
        },
        {
          "text": "<code>sequentialSizes(7)</code> should return \"High\"",
          "testString": "assert(sequentialSizes(7) === \"High\", '<code>sequentialSizes(7)</code> should return \"High\"');"
        },
        {
          "text": "<code>sequentialSizes(8)</code> should return \"High\"",
          "testString": "assert(sequentialSizes(8) === \"High\", '<code>sequentialSizes(8)</code> should return \"High\"');"
        },
        {
          "text": "<code>sequentialSizes(9)</code> should return \"High\"",
          "testString": "assert(sequentialSizes(9) === \"High\", '<code>sequentialSizes(9)</code> should return \"High\"');"
        },
        {
          "text": "You should not use any <code>if</code> or <code>else</code> statements",
          "testString": "assert(!/else/g.test(code) || !/if/g.test(code), 'You should not use any <code>if</code> or <code>else</code> statements');"
        },
        {
          "text": "You should have nine <code>case</code> statements",
          "testString": "assert(code.match(/case/g).length === 9, 'You should have nine <code>case</code> statements');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Múltiples opciones idénticas en una sentencias switch",
          "description": [
            "Si la sentencia <code>break</code> es omitida de una sentencia <code>case</code> de un <code>switch</code>, las siguientes sentencias <code>case</code> son ejecutadas hasta que sea encontrado un <code>break</code>. Si tienes multiples entradas con la misma salida, puede representarlas en una sentencia <code>switch</code> así:",
            "<blockquote>switch(val) {<br>&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;case 2:<br>&nbsp;&nbsp;case 3:<br>&nbsp;&nbsp;&nbsp;&nbsp;result = \"1, 2, or 3\";<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case 4:<br>&nbsp;&nbsp;&nbsp;&nbsp;result = \"4 alone\";<br>}</blockquote>",
            "Los casos 1, 2, y 3 producirán el mismo resultado.",
            "<h4>Instrucciones</h4>",
            "Escribe una sentencia <code>switch</code> para establecer <code>answer</code> para los siguientes rangos:<br><code>1-3</code> - \"Low\"<br><code>4-6</code> - \"Mid\"<br><code>7-9</code> - \"High\"",
            "<strong>Nota</strong><br>Necesitarás tener una sentencia <code>case</code> por cada número en el rango."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function sequentialSizes(val) {",
            "  var answer = \"\";",
            "  // Only change code below this line",
            "  ",
            "  ",
            "  ",
            "  // Only change code above this line  ",
            "  return answer;  ",
            "}",
            "",
            "// Change this value to test",
            "sequentialSizes(1);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244e0",
      "title": "Replacing If Else Chains with Switch",
      "description": [
        "If you have many options to choose from, a <code>switch</code> statement can be easier to write than many chained <code>if</code>/<code>else if</code> statements. The following:",
        "<blockquote>if (val === 1) {<br>&nbsp;&nbsp;answer = \"a\";<br>} else if (val === 2) {<br>&nbsp;&nbsp;answer = \"b\";<br>} else {<br>&nbsp;&nbsp;answer = \"c\";<br>}</blockquote>",
        "can be replaced with:",
        "<blockquote>switch(val) {<br>&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;answer = \"a\";<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case 2:<br>&nbsp;&nbsp;&nbsp;&nbsp;answer = \"b\";<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;answer = \"c\";<br>}</blockquote>",
        "<hr>",
        "Change the chained <code>if</code>/<code>else if</code> statements into a <code>switch</code> statement."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function chainToSwitch(val) {\n  var answer = \"\";\n\n  switch(val) {\n    case \"bob\":\n      answer = \"Marley\";\n      break;\n    case 42:\n      answer = \"The Answer\";\n      break;\n    case 1:\n      answer = \"There is no #1\";\n      break;\n    case 99:\n      answer = \"Missed me by this much!\";\n      break;\n    case 7:\n      answer = \"Ate Nine\";\n  }\n  return answer;  \n}"
      ],
      "tests": [
        {
          "text": "You should not use any <code>else</code> statements anywhere in the editor",
          "testString": "assert(!/else/g.test(code), 'You should not use any <code>else</code> statements anywhere in the editor');"
        },
        {
          "text": "You should not use any <code>if</code> statements anywhere in the editor",
          "testString": "assert(!/if/g.test(code), 'You should not use any <code>if</code> statements anywhere in the editor');"
        },
        {
          "text": "You should have at least four <code>break</code> statements",
          "testString": "assert(code.match(/break/g).length >= 4, 'You should have at least four <code>break</code> statements');"
        },
        {
          "text": "<code>chainToSwitch(\"bob\")</code> should be \"Marley\"",
          "testString": "assert(chainToSwitch(\"bob\") === \"Marley\", '<code>chainToSwitch(\"bob\")</code> should be \"Marley\"');"
        },
        {
          "text": "<code>chainToSwitch(42)</code> should be \"The Answer\"",
          "testString": "assert(chainToSwitch(42) === \"The Answer\", '<code>chainToSwitch(42)</code> should be \"The Answer\"');"
        },
        {
          "text": "<code>chainToSwitch(1)</code> should be \"There is no #1\"",
          "testString": "assert(chainToSwitch(1) === \"There is no #1\", '<code>chainToSwitch(1)</code> should be \"There is no #1\"');"
        },
        {
          "text": "<code>chainToSwitch(99)</code> should be \"Missed me by this much!\"",
          "testString": "assert(chainToSwitch(99) === \"Missed me by this much!\", '<code>chainToSwitch(99)</code> should be \"Missed me by this much!\"');"
        },
        {
          "text": "<code>chainToSwitch(7)</code> should be \"Ate Nine\"",
          "testString": "assert(chainToSwitch(7) === \"Ate Nine\", '<code>chainToSwitch(7)</code> should be \"Ate Nine\"');"
        },
        {
          "text": "<code>chainToSwitch(\"John\")</code> should be \"\" (empty string)",
          "testString": "assert(chainToSwitch(\"John\") === \"\", '<code>chainToSwitch(\"John\")</code> should be \"\" (empty string)');"
        },
        {
          "text": "<code>chainToSwitch(156)</code> should be \"\" (empty string)",
          "testString": "assert(chainToSwitch(156) === \"\", '<code>chainToSwitch(156)</code> should be \"\" (empty string)');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Reemplazar cadenas if else con switch",
          "description": [
            "Si tienes varias opciones para elegir, una sentencia <code>switch</code> puede ser más fácil de escribir que varias sentencias <code>if</code>/<code>if else</code> anidadas. Lo siguiente:",
            "<blockquote>if (val === 1) {<br>&nbsp;&nbsp;respuesta = \"a\";<br>} else if (val === 2) {<br>&nbsp;&nbsp;respuesta = \"b\";<br>} else {<br>&nbsp;&nbsp;respuesta = \"c\";<br>}</blockquote>",
            "puede ser reemplazado con:",
            "<blockquote>switch(val) {<br>&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;respuesta = \"a\";<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case 2:<br>&nbsp;&nbsp;&nbsp;&nbsp;respuesta = \"b\";<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;respuesta = \"c\";<br>}</blockquote>",
            "<h4>Instrucciones</h4>",
            "Cambia las sentencias <code>if</code>/<code>if else</code> anidadas dentro de una sentencia <code>switch</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function chainToSwitch(val) {",
            "  var answer = \"\";",
            "  // Only change code below this line",
            "  ",
            "  if (val === \"bob\") {",
            "    answer = \"Marley\";",
            "  } else if (val === 42) {",
            "    answer = \"The Answer\";",
            "  } else if (val === 1) {",
            "    answer = \"There is no #1\";",
            "  } else if (val === 99) {",
            "    answer = \"Missed me by this much!\";",
            "  } else if (val === 7) {",
            "    answer = \"Ate Nine\";",
            "  }",
            "  ",
            "  // Only change code above this line  ",
            "  return answer;  ",
            "}",
            "",
            "// Change this value to test",
            "chainToSwitch(7);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5679ceb97cbaa8c51670a16b",
      "title": "Returning Boolean Values from Functions",
      "description": [
        "You may recall from <a href=\"waypoint-comparison-with-the-equality-operator\" target=\"_blank\">Comparison with the Equality Operator</a> that all comparison operators return a boolean <code>true</code> or <code>false</code> value.",
        "Sometimes people use an if/else statement to do a comparison, like this:",
        "<blockquote>function isEqual(a,b) {<br>&nbsp;&nbsp;if (a === b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "But there's a better way to do this. Since <code>===</code> returns <code>true</code> or <code>false</code>, we can return the result of the comparison:",
        "<blockquote>function isEqual(a,b) {<br>&nbsp;&nbsp;return a === b;<br>}</blockquote>",
        "<hr>",
        "Fix the function <code>isLess</code> to remove the <code>if/else</code> statements."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function isLess(a, b) {\n  return a < b;\n}"
      ],
      "tests": [
        {
          "text": "<code>isLess(10,15)</code> should return <code>true</code>",
          "testString": "assert(isLess(10,15) === true, '<code>isLess(10,15)</code> should return <code>true</code>');"
        },
        {
          "text": "<code>isLess(15,10)</code> should return <code>false</code>",
          "testString": "assert(isLess(15, 10) === false, '<code>isLess(15,10)</code> should return <code>false</code>');"
        },
        {
          "text": "You should not use any <code>if</code> or <code>else</code> statements",
          "testString": "assert(!/if|else/g.test(code), 'You should not use any <code>if</code> or <code>else</code> statements');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Retornar valores booleanos desde funciones",
          "description": [
            "Tal vez recuerdes de <a href=\"waypoint-comparison-with-the-equality-operator\" target=\"_blank\">La comparación con el operador de igualdad</a> que todos los operadores de comparación retornan un valor booleano <code>true</code> (verdadero) o <code>false</code> (falso).",
            "Un <dfn>anti-patrón</dfn> común es usar una sentencia <code>if/else</code> para hacer una comparación y entonces retornar <code>true</code> o <code>false</code>:",
            "<blockquote>function sonIguales(a,b) {<br>&nbsp;&nbsp;if (a === b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>&nbsp;&nbsp;}<br>}</blockquote>",
            "Ya que <code>===</code> returna <code>true</code> (verdadero) o <code>false</code> (falso), podemos simplemente retornar el resultado de la comparación:",
            "<blockquote>function sonIguales(a,b) {<br>&nbsp;&nbsp;return a === b;<br>}</blockquote>",
            "<h4>Instrucciones</h4>",
            "Arregla la función <code>isLess</code> para remover las sentencias <code>if/else</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function isLess(a, b) {",
            "  // Fix this code",
            "  if (a < b) {",
            "    return true;",
            "  } else {",
            "    return false;",
            "  }",
            "}",
            "",
            "// Change these values to test",
            "isLess(10, 15);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c4",
      "title": "Return Early Pattern for Functions",
      "description": [
        "When a <code>return</code> statement is reached, the execution of the current function stops and control returns to the calling location.",
        "<strong>Example</strong>",
        "<blockquote>function myFun() {<br>&nbsp;&nbsp;console.log(\"Hello\");<br>&nbsp;&nbsp;return \"World\";<br>&nbsp;&nbsp;console.log(\"byebye\")<br>}<br>myFun();</blockquote>",
        "The above outputs \"Hello\" to the console, returns \"World\", but <code>\"byebye\"</code> is never output, because the function exits at the <code>return</code> statement.",
        "<hr>",
        "Modify the function <code>abTest</code> so that if <code>a</code> or <code>b</code> are less than <code>0</code> the function will immediately exit with a value of <code>undefined</code>.",
        "<strong>Hint</strong><br>Remember that <a href='http://www.freecodecamp.org/challenges/understanding-uninitialized-variables' target='_blank'><code>undefined</code> is a keyword</a>, not a string."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function abTest(a, b) {\n  if(a < 0 || b < 0) {\n    return undefined;\n  } \n  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));\n}"
      ],
      "tests": [
        {
          "text": "<code>abTest(2,2)</code> should return a number",
          "testString": "assert(typeof abTest(2,2) === 'number' , '<code>abTest(2,2)</code> should return a number');"
        },
        {
          "text": "<code>abTest(2,2)</code> should return <code>8</code>",
          "testString": "assert(abTest(2,2) === 8 , '<code>abTest(2,2)</code> should return <code>8</code>');"
        },
        {
          "text": "<code>abTest(-2,2)</code> should return <code>undefined</code>",
          "testString": "assert(abTest(-2,2) === undefined , '<code>abTest(-2,2)</code> should return <code>undefined</code>');"
        },
        {
          "text": "<code>abTest(2,-2)</code> should return <code>undefined</code>",
          "testString": "assert(abTest(2,-2) === undefined , '<code>abTest(2,-2)</code> should return <code>undefined</code>');"
        },
        {
          "text": "<code>abTest(2,8)</code> should return <code>18</code>",
          "testString": "assert(abTest(2,8) === 18 , '<code>abTest(2,8)</code> should return <code>18</code>');"
        },
        {
          "text": "<code>abTest(3,3)</code> should return <code>12</code>",
          "testString": "assert(abTest(3,3) === 12 , '<code>abTest(3,3)</code> should return <code>12</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Retornar un patrón temprano para funciones",
          "description": [
            "Cuando se alcanza una sentencia <code>return</code>, la ejecución de la presente función se detiene y el control la retorna a la ubicación de la llamada.",
            "<strong>Ejemplo</strong>",
            "<blockquote>function miFuncion() {<br>&nbsp;&nbsp;console.log(\"Hola\");<br>&nbsp;&nbsp;return \"Mundo\";<br>&nbsp;&nbsp;console.log(\"chaochao\")<br>}<br>miFuncion();</blockquote>",
            "Esta presenta en consola \"Hola\", retorna \"Mundo\", pero <code>\"chaochao\"</code> nunca se presenta, porque la función sale con la sentencia <code>return</code>.",
            "<h4>Instrucciones</h4>",
            "Modifica la función <code>abTest</code> de manera que si <code>a</code> o <code>b</code> son menores que <code>0</code> la función saldrá inmediatamente con un valor <code>undefined</code>.",
            "<strong>Pista</strong><br>Recuerda que <a href='http://www.freecodecamp.org/challenges/understanding-uninitialized-variables' target='_blank'><code>undefined</code> es una palabra clave</a>, no una cadena."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "function abTest(a, b) {",
            "  // Only change code below this line",
            "  ",
            "  ",
            "  ",
            "  // Only change code above this line",
            "",
            "  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));",
            "}",
            "",
            "// Change values below to test your code",
            "abTest(2,2);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "565bbe00e9cc8ac0725390f4",
      "title": "Counting Cards",
      "description": [
        "In the casino game Blackjack, a player can gain an advantage over the house by keeping track of the relative number of high and low cards remaining in the deck. This is called <a href='https://en.wikipedia.org/wiki/Card_counting' target='_blank'>Card Counting</a>.",
        "Having more high cards remaining in the deck favors the player. Each card is assigned a value according to the table below. When the count is positive, the player should bet high. When the count is zero or negative, the player should bet low.",
        "<table class=\"table table-striped\"><thead><tr><th>Count Change</th><th>Cards</th></tr></thead><tbody><tr><td>+1</td><td>2, 3, 4, 5, 6</td></tr><tr><td>0</td><td>7, 8, 9</td></tr><tr><td>-1</td><td>10, 'J', 'Q', 'K', 'A'</td></tr></tbody></table>",
        "You will write a card counting function. It will receive a <code>card</code> parameter, which can be a number or a string, and increment or decrement the global <code>count</code> variable according to the card's value (see table). The function will then return a string with the current count and the string <code>Bet</code> if the count is positive, or <code>Hold</code> if the count is zero or negative. The current count and the player's decision (<code>Bet</code> or <code>Hold</code>) should be separated by a single space.",
        "<strong>Example Output</strong><br><code>-3 Hold</code><br><code>5 Bet</code>",
        "<strong>Hint</strong><br>Do NOT reset <code>count</code> to 0 when value is 7, 8, or 9.<br>Do NOT return an array.<br>Do NOT include quotes (single or double) in the output."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var count = 0;\nfunction cc(card) {\n  switch(card) {\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n      count++;\n      break;\n    case 10:\n    case 'J':\n    case 'Q':\n    case 'K':\n    case 'A':\n      count--;\n  }\n  if(count > 0) {\n    return count + \" Bet\";\n  } else {\n    return count + \" Hold\";\n  }\n}"
      ],
      "tests": [
        {
          "text": "Cards Sequence 2, 3, 4, 5, 6 should return <code>5 Bet</code>",
          "testString": "assert((function(){ count = 0; cc(2);cc(3);cc(4);cc(5);var out = cc(6); if(out === \"5 Bet\") {return true;} return false; })(), 'Cards Sequence 2, 3, 4, 5, 6 should return <code>5 Bet</code>');"
        },
        {
          "text": "Cards Sequence 7, 8, 9 should return <code>0 Hold</code>",
          "testString": "assert((function(){ count = 0; cc(7);cc(8);var out = cc(9); if(out === \"0 Hold\") {return true;} return false; })(), 'Cards Sequence 7, 8, 9 should return <code>0 Hold</code>');"
        },
        {
          "text": "Cards Sequence 10, J, Q, K, A should return <code>-5 Hold</code>",
          "testString": "assert((function(){ count = 0; cc(10);cc('J');cc('Q');cc('K');var out = cc('A'); if(out === \"-5 Hold\") {return true;} return false; })(), 'Cards Sequence 10, J, Q, K, A should return <code>-5 Hold</code>');"
        },
        {
          "text": "Cards Sequence 3, 7, Q, 8, A should return <code>-1 Hold</code>",
          "testString": "assert((function(){ count = 0; cc(3);cc(7);cc('Q');cc(8);var out = cc('A'); if(out === \"-1 Hold\") {return true;} return false; })(), 'Cards Sequence 3, 7, Q, 8, A should return <code>-1 Hold</code>');"
        },
        {
          "text": "Cards Sequence 2, J, 9, 2, 7 should return <code>1 Bet</code>",
          "testString": "assert((function(){ count = 0; cc(2);cc('J');cc(9);cc(2);var out = cc(7); if(out === \"1 Bet\") {return true;} return false; })(), 'Cards Sequence 2, J, 9, 2, 7 should return <code>1 Bet</code>');"
        },
        {
          "text": "Cards Sequence 2, 2, 10 should return <code>1 Bet</code>",
          "testString": "assert((function(){ count = 0; cc(2);cc(2);var out = cc(10); if(out === \"1 Bet\") {return true;} return false; })(), 'Cards Sequence 2, 2, 10 should return <code>1 Bet</code>');"
        },
        {
          "text": "Cards Sequence 3, 2, A, 10, K should return <code>-1 Hold</code>",
          "testString": "assert((function(){ count = 0; cc(3);cc(2);cc('A');cc(10);var out = cc('K'); if(out === \"-1 Hold\") {return true;} return false; })(), 'Cards Sequence 3, 2, A, 10, K should return <code>-1 Hold</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Contar cartas",
          "description": [
            "En el juego de casino Blackjack, un jugador puede conseguir ventaja sobre la casa manteniendo un registro del número relativo de cartas altas y bajas restantes en la baraja. Esto es llamado <a href='https://en.wikipedia.org/wiki/Card_counting' target='_blank'>Conteo de Cartas</a>.",
            "Tener más cartas altas restantes en la baraja favorece al jugador. A cada carta se le asigna un valor de acuerdo a la tabla de abajo. Cuando el conteo es positivo, el jugador debe apostar alto. Cuando el conteo es cero o negativo, el jugador debe apostar bajo.",
            "<table class=\"table table-striped\"><thead><tr><th>Valor</th><th>Cartas</th></tr></thead><tbody><tr><td>+1</td><td>2, 3, 4, 5, 6</td></tr><tr><td>0</td><td>7, 8, 9</td></tr><tr><td>-1</td><td>10, 'J', 'Q', 'K','A'</td></tr></tbody></table>",
            "Vas a escribir una función de conteo de cartas. Esta recibirá un parametro <code>card</code> (carta) e incrementa o decrementa la variable <code>count</code> (conteo) global de acuerdo al valor de la carta (ver tabla). La función retornará entonces una cadena con el presente conteo y la cadena <code>Bet</code> si el conteo es positivo o <code>Hold</code> si el conteo es cero o negativo. El presente conteo y la desición del jugador (<code>Bet</code> o <code>Hold</code>) deben quedar separada por un único espacio.",
            "<strong>Ejemplo de Salida</strong><br><code>-3 Hold<br>5 Bet</code>"
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var count = 0;",
            "",
            "function cc(card) {",
            "  // Only change code below this line",
            "  ",
            "  ",
            "  return \"Change Me\";",
            "  // Only change code above this line",
            "}",
            "",
            "// Add/remove calls to test your function.",
            "// Note: Only the last will display",
            "cc(2); cc(3); cc(7); cc('K'); cc('A');"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392d0",
      "title": "Build JavaScript Objects",
      "description": [
        "You may have heard the term <code>object</code> before.",
        "Objects are similar to <code>arrays</code>, except that instead of using indexes to access and modify their data, you access the data in objects through what are called <code>properties</code>.",
        "Objects are useful for storing data in a structured way, and can represent real world objects, like a cat.",
        "Here's a sample cat object:",
        "<blockquote>var cat = {<br>&nbsp;&nbsp;\"name\": \"Whiskers\",<br>&nbsp;&nbsp;\"legs\": 4,<br>&nbsp;&nbsp;\"tails\": 1,<br>&nbsp;&nbsp;\"enemies\": [\"Water\", \"Dogs\"]<br>};</blockquote>",
        "In this example, all the properties are stored as strings, such as - <code>\"name\"</code>, <code>\"legs\"</code>, and <code>\"tails\"</code>. However, you can also use numbers as properties. You can even omit the quotes for single-word string properties, as follows:",
        "<blockquote>var anotherObject = {<br>&nbsp;&nbsp;make: \"Ford\",<br>&nbsp;&nbsp;5: \"five\",<br>&nbsp;&nbsp;\"model\": \"focus\"<br>};</blockquote>",
        "However, if your object has any non-string properties, JavaScript will automatically typecast them as strings.",
        "<hr>",
        "Make an object that represents a dog called <code>myDog</code> which contains the properties <code>\"name\"</code> (a string), <code>\"legs\"</code>, <code>\"tails\"</code> and <code>\"friends\"</code>.",
        "You can set these object properties to whatever values you want, as long <code>\"name\"</code> is a string, <code>\"legs\"</code> and <code>\"tails\"</code> are numbers, and <code>\"friends\"</code> is an array."
      ],
      "solutions": [
        "var myDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]  \n};"
      ],
      "tests": [
        {
          "text": "<code>myDog</code> should contain the property <code>name</code> and it should be a <code>string</code>.",
          "testString": "assert((function(z){if(z.hasOwnProperty(\"name\") && z.name !== undefined && typeof z.name === \"string\"){return true;}else{return false;}})(myDog), '<code>myDog</code> should contain the property <code>name</code> and it should be a <code>string</code>.');"
        },
        {
          "text": "<code>myDog</code> should contain the property <code>legs</code> and it should be a <code>number</code>.",
          "testString": "assert((function(z){if(z.hasOwnProperty(\"legs\") && z.legs !== undefined && typeof z.legs === \"number\"){return true;}else{return false;}})(myDog), '<code>myDog</code> should contain the property <code>legs</code> and it should be a <code>number</code>.');"
        },
        {
          "text": "<code>myDog</code> should contain the property <code>tails</code> and it should be a <code>number</code>.",
          "testString": "assert((function(z){if(z.hasOwnProperty(\"tails\") && z.tails !== undefined && typeof z.tails === \"number\"){return true;}else{return false;}})(myDog), '<code>myDog</code> should contain the property <code>tails</code> and it should be a <code>number</code>.');"
        },
        {
          "text": "<code>myDog</code> should contain the property <code>friends</code> and it should be an <code>array</code>.",
          "testString": "assert((function(z){if(z.hasOwnProperty(\"friends\") && z.friends !== undefined && Array.isArray(z.friends)){return true;}else{return false;}})(myDog), '<code>myDog</code> should contain the property <code>friends</code> and it should be an <code>array</code>.');"
        },
        {
          "text": "<code>myDog</code> should only contain all the given properties.",
          "testString": "assert((function(z){return Object.keys(z).length === 4;})(myDog), '<code>myDog</code> should only contain all the given properties.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Construye objetos en JavaScript",
          "description": [
            "Es posible que haya oído el término <code>objeto</code> antes.",
            "Los objetos son similares a los <code>vectores</code>, excepto que en lugar de utilizar los índices para acceder y modificar sus datos, pueden accederse mediante lo que se llama <code>propiedades</code>.",
            "Esto es un objeto de ejemplo:",
            "<code>var cat = {</code>",
            "<code>&nbsp;&nbsp;\"name\": \"Whiskers\",</code>",
            "<code>&nbsp;&nbsp;\"legs\": 4,</code>",
            "<code>&nbsp;&nbsp;\"tails\": 1,</code>",
            "<code>&nbsp;&nbsp;\"enemies\": [\"Water\", \"Dogs\"]</code>",
            "<code>};</code>",
            "Los objetos son útiles para almacenar datos de manera estructurada, y pueden representar objetos del mundo real, como un gato.",
            "Vamos a tratar de hacer un objeto que representa un perro, lo llamaremos <code>mydog</code> y contendrá las propiedades <code>\"name\"</code> (una cadena con el nombre), <code>\"legs\"</code> (piernas), <code>\"tails\"</code> (colas) y <code>\"friends\" (amigos)</code>. ",
            "Podrás establecer estas propiedades del objeto en los valores que desees, siempre y cuando <code>\"name\"</code> sea una cadena, <code>\"legs\"</code> y <code>\"tails\"</code> sean números, y <code>\"friends\"</code> sea un vector."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourDog = {",
            "  \"name\": \"Camper\",",
            "  \"legs\": 4,",
            "  \"tails\": 1,",
            "  \"friends\": [\"everything!\"]",
            "};",
            "",
            "// Only change code below this line.",
            "",
            "var myDog = {",
            "  ",
            "  ",
            "  ",
            "  ",
            "};"
          ],
          "head": [],
          "tail": [
            "(function(z){return z;})(myDog);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c7",
      "title": "Accessing Object Properties with Dot Notation",
      "description": [
        "There are two ways to access the properties of an object: dot notation (<code>.</code>) and bracket notation (<code>[]</code>), similar to an array.",
        "Dot notation is what you use when you know the name of the property you're trying to access ahead of time.",
        "Here is a sample of using dot notation (<code>.</code>) to read an object's property:",
        "<blockquote>var myObj = {<br>&nbsp;&nbsp;prop1: \"val1\",<br>&nbsp;&nbsp;prop2: \"val2\"<br>};<br>var prop1val = myObj.prop1; // val1<br>var prop2val = myObj.prop2; // val2</blockquote>",
        "<hr>",
        "Read in the property values of <code>testObj</code> using dot notation. Set the variable <code>hatValue</code> equal to the object's property <code>hat</code> and set the variable <code>shirtValue</code> equal to the object's property <code>shirt</code>."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var testObj = {\n  \"hat\": \"ballcap\",\n  \"shirt\": \"jersey\",\n  \"shoes\": \"cleats\"\n};\n\nvar hatValue = testObj.hat;  \nvar shirtValue = testObj.shirt;"
      ],
      "tests": [
        {
          "text": "<code>hatValue</code> should be a string",
          "testString": "assert(typeof hatValue === 'string' , '<code>hatValue</code> should be a string');"
        },
        {
          "text": "The value of <code>hatValue</code> should be <code>\"ballcap\"</code>",
          "testString": "assert(hatValue === 'ballcap' , 'The value of <code>hatValue</code> should be <code>\"ballcap\"</code>');"
        },
        {
          "text": "<code>shirtValue</code> should be a string",
          "testString": "assert(typeof shirtValue === 'string' , '<code>shirtValue</code> should be a string');"
        },
        {
          "text": "The value of <code>shirtValue</code> should be <code>\"jersey\"</code>",
          "testString": "assert(shirtValue === 'jersey' , 'The value of <code>shirtValue</code> should be <code>\"jersey\"</code>');"
        },
        {
          "text": "You should use dot notation twice",
          "testString": "assert(code.match(/testObj\\.\\w+/g).length > 1, 'You should use dot notation twice');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Acceder a propiedades de objetos con el operador punto",
          "description": [
            "Hay dos maneras de acceder a las propiedades de un objeto: con el operador punto (<code>.</code>) y con la notación corchete (<code>[]</code>), similar al caso de un vector.",
            "El operador punto es el que usas cuando de antemano sabes el nombre de la propiedad que estás intentando acceder.",
            "Aquí está un ejemplo del uso del operador punto (<code>.</code>) para leer una propiedad de un objeto:",
            "<blockquote>var miObj = {<br>&nbsp;&nbsp;prop1: \"val1\",<br>&nbsp;&nbsp;prop2: \"val2\"<br>};<br>var prop1val = miObj.prop1; // val1<br>var prop2val = miObj.prop2; // val2</blockquote>",
            "<h4>Instrucciones</h4>",
            "Lee los valores de propiedades de <code>testObj</code> usando notación punto. Asigna la variable <code>hatValue</code> igual a la propiedad objeto <code>hat</code> y asigna la variable <code>shirtValue</code> igual a la propiedad objeto <code>shirt</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "var testObj = {",
            "  \"hat\": \"ballcap\",",
            "  \"shirt\": \"jersey\",",
            "  \"shoes\": \"cleats\"",
            "};",
            "",
            "// Only change code below this line",
            "",
            "var hatValue = testObj;      // Change this line",
            "var shirtValue = testObj;    // Change this line"
          ],
          "head": [],
          "tail": [
            "(function(a,b) { return \"hatValue = '\" + a + \"', shirtValue = '\" + b + \"'\"; })(hatValue,shirtValue);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c8",
      "title": "Accessing Object Properties with Bracket Notation",
      "description": [
        "The second way to access the properties of an object is bracket notation (<code>[]</code>). If the property of the object you are trying to access has a space in its name, you will need to use bracket notation.",
        "However, you can still use bracket notation on object properties without spaces.",
        "Here is a sample of using bracket notation to read an object's property:",
        "<blockquote>var myObj = {<br>&nbsp;&nbsp;\"Space Name\": \"Kirk\",<br>&nbsp;&nbsp;\"More Space\": \"Spock\",<br>&nbsp;&nbsp;\"NoSpace\": \"USS Enterprise\"<br>};<br>myObj[\"Space Name\"]; // Kirk<br>myObj['More Space']; // Spock<br>myObj[\"NoSpace\"];    // USS Enterprise</blockquote>",
        "Note that property names with spaces in them must be in quotes (single or double).",
        "<hr>",
        "Read the values of the properties <code>\"an entree\"</code> and <code>\"the drink\"</code> of <code>testObj</code> using bracket notation and assign them to <code>entreeValue</code> and <code>drinkValue</code> respectively."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var testObj = {\n  \"an entree\": \"hamburger\",\n  \"my side\": \"veggies\",\n  \"the drink\": \"water\"\n};\nvar entreeValue = testObj[\"an entree\"];\nvar drinkValue = testObj['the drink'];"
      ],
      "tests": [
        {
          "text": "<code>entreeValue</code> should be a string",
          "testString": "assert(typeof entreeValue === 'string' , '<code>entreeValue</code> should be a string');"
        },
        {
          "text": "The value of <code>entreeValue</code> should be <code>\"hamburger\"</code>",
          "testString": "assert(entreeValue === 'hamburger' , 'The value of <code>entreeValue</code> should be <code>\"hamburger\"</code>');"
        },
        {
          "text": "<code>drinkValue</code> should be a string",
          "testString": "assert(typeof drinkValue === 'string' , '<code>drinkValue</code> should be a string');"
        },
        {
          "text": "The value of <code>drinkValue</code> should be <code>\"water\"</code>",
          "testString": "assert(drinkValue === 'water' , 'The value of <code>drinkValue</code> should be <code>\"water\"</code>');"
        },
        {
          "text": "You should use bracket notation twice",
          "testString": "assert(code.match(/testObj\\s*?\\[('|\")[^'\"]+\\1\\]/g).length > 1, 'You should use bracket notation twice');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Acceder a las propiedades de objetos con la notación corchete",
          "description": [
            "La segunda manera de acceder a las propiedades de un objeto es con la notación corchete (<code>[]</code>). Si el nombre de la propiedad del objeto que estás intentando acceder tiene un espacio, necesitarás usar la notación corchete.",
            "Aquí está un ejemplo del uso de la notación corchete para leer una propiedad de un objeto:",
            "<blockquote>var miObj = {<br>&nbsp;&nbsp;\"Nombre con espacio\": \"Kirk\",<br>&nbsp;&nbsp;\"Mas espacio\": \"Spock\"<br>};<br>miObj[\"Nombre con espacio\"]; // Kirk<br>miObj['Mas espacio']; // Spock</blockquote>",
            "Nota que los nombres de propiedades con espacios tienen que estar entre comillas (apóstrofes o comillas).",
            "<h4>Instrucciones</h4>",
            "Lee los valores de las propiedades <code>\"an entree\"</code> y <code>\"the drink\"</code> de <code>testObj</code> usando la notación corchete."
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/accessing-objects-properties-with-bracket-notation",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "var testObj = {",
            "  \"an entree\": \"hamburger\",",
            "  \"my side\": \"veggies\",",
            "  \"the drink\": \"water\"",
            "};",
            "",
            "// Only change code below this line",
            "",
            "var entreeValue = testObj;   // Change this line",
            "var drinkValue = testObj;    // Change this line"
          ],
          "head": [],
          "tail": [
            "(function(a,b) { return \"entreeValue = '\" + a + \"', drinkValue = '\" + b + \"'\"; })(entreeValue,drinkValue);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c9",
      "title": "Accessing Object Properties with Variables",
      "description": [
        "Another use of bracket notation on objects is to access a property which is stored as the value of a variable. This can be very useful for iterating through an object's properties or when accessing a lookup table.",
        "Here is an example of using a variable to access a property:",
        "<blockquote>var dogs = {<br>&nbsp;&nbsp;Fido: \"Mutt\",\n  Hunter: \"Doberman\",\n  Snoopie: \"Beagle\"<br>};<br>var myDog = \"Hunter\";<br>var myBreed = dogs[myDog];<br>console.log(myBreed); // \"Doberman\"</blockquote>",
        "Another way you can use this concept is when the property's name is collected dynamically during the program execution, as follows:",
        "<blockquote>var someObj = {<br>&nbsp;&nbsp;propName: \"John\"<br>};<br>function propPrefix(str) {<br>&nbsp;&nbsp;var s = \"prop\";<br>&nbsp;&nbsp;return s + str;<br>}<br>var someProp = propPrefix(\"Name\"); // someProp now holds the value 'propName'<br>console.log(someObj[someProp]); // \"John\"</blockquote>",
        "Note that we do <em>not</em> use quotes around the variable name when using it to access the property because we are using the <em>value</em> of the variable, not the <em>name</em>.",
        "<hr>",
        "Use the <code>playerNumber</code> variable to look up player <code>16</code> in <code>testObj</code> using bracket notation. Then assign that name to the <code>player</code> variable."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var testObj = {\n  12: \"Namath\",\n  16: \"Montana\",\n  19: \"Unitas\"\n};\nvar playerNumber = 16;\nvar player = testObj[playerNumber];"
      ],
      "tests": [
        {
          "text": "<code>playerNumber</code> should be a number",
          "testString": "assert(typeof playerNumber === 'number', '<code>playerNumber</code> should be a number');"
        },
        {
          "text": "The variable <code>player</code> should be a string",
          "testString": "assert(typeof player === 'string', 'The variable <code>player</code> should be a string');"
        },
        {
          "text": "The value of <code>player</code> should be \"Montana\"",
          "testString": "assert(player === 'Montana', 'The value of <code>player</code> should be \"Montana\"');"
        },
        {
          "text": "You should use bracket notation to access <code>testObj</code>",
          "testString": "assert(/testObj\\s*?\\[.*?\\]/.test(code),'You should use bracket notation to access <code>testObj</code>');"
        },
        {
          "text": "You should not assign the value <code>Montana</code> to the variable <code>player</code> directly.",
          "testString": "assert(!code.match(/player\\s*=\\s*\"|\\'\\s*Montana\\s*\"|\\'\\s*;/gi),'You should not assign the value <code>Montana</code> to the variable <code>player</code> directly.');"
        },
        {
          "text": "You should be using the variable <code>playerNumber</code> in your bracket notation",
          "testString": "assert(/testObj\\s*?\\[\\s*playerNumber\\s*\\]/.test(code),'You should be using the variable <code>playerNumber</code> in your bracket notation');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Acceder a propiedades de objetos con variables",
          "description": [
            "Otro uso de la notación corchete sobre objetos es usar una variable para acceder a una propiedad. Esto puede ser muy útil en iteraciones sobre la lista de propiedades de un objetos o para hacer operaciones de búsqueda.",
            "Aquí está un ejemplo del uso de una variable para acceder a una propiedad:",
            "<blockquote>var algunaProp = \"propNombre\";<br>var miObj = {<br>&nbsp;&nbsp;propNombre: \"Algún valor\"<br >}<br>miObj[algunaProp]; // \"Algún valor\"</blockquote>",
            "Aquí hay uno más:",
            "<blockquote>var miPerro = \"Cazador\";<br>var perros = {<br>&nbsp;&nbsp;Fido: \"Mutt\",\n  Cazador: \"Doberman\",\n  Snoopie: \"Beagle\"<br >}<br>var raza = perros[miPerro]; // \"Cazador\"<br>console.log(raza)// \"Doberman\"</blockquote>",
            "Nota que <em>no</em> usamos comillas alrededor del nombre de la variable (<code>miPerro</code>) cuando la usamos para acceder a la propiedad (<code>perros[miPerro]</code> porque estamos usando el <em>valor</em> de la variable y no su <em>nombre</em>",
            "<h4>Instrucciones</h4>",
            "Usa la variable <code>playerNumber</code> para buscar y asignar a <code>player</code> el jugador <code>16</code> de <code>testObj</code>, usa la notación corchete."
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/accessing-objects-properties-with-variables",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "var testObj = {",
            "  12: \"Namath\",",
            "  16: \"Montana\",",
            "  19: \"Unitas\"",
            "};",
            "",
            "// Only change code below this line;",
            "",
            "var playerNumber;       // Change this Line",
            "var player = testObj;   // Change this Line"
          ],
          "head": [],
          "tail": [
            "if(typeof player !== \"undefined\"){(function(v){return v;})(player);}"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392d1",
      "title": "Updating Object Properties",
      "description": [
        "After you've created a JavaScript object, you can update its properties at any time just like you would update any other variable. You can use either dot or bracket notation to update.",
        "For example, let's look at <code>ourDog</code>:",
        "<blockquote>var ourDog = {<br>&nbsp;&nbsp;\"name\": \"Camper\",<br>&nbsp;&nbsp;\"legs\": 4,<br>&nbsp;&nbsp;\"tails\": 1,<br>&nbsp;&nbsp;\"friends\": [\"everything!\"]<br>};</blockquote>",
        "Since he's a particularly happy dog, let's change his name to \"Happy Camper\". Here's how we update his object's name property:",
        "<code>ourDog.name = \"Happy Camper\";</code> or",
        "<code>ourDog[\"name\"] = \"Happy Camper\";</code>",
        "Now when we evaluate <code>ourDog.name</code>, instead of getting \"Camper\", we'll get his new name, \"Happy Camper\".",
        "<hr>",
        "Update the <code>myDog</code> object's name property. Let's change her name from \"Coder\" to \"Happy Coder\". You can use either dot or bracket notation."
      ],
      "solutions": [
        "var myDog = {\n  \"name\": \"Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\nmyDog.name = \"Happy Coder\";"
      ],
      "tests": [
        {
          "text": "Update <code>myDog</code>&apos;s <code>\"name\"</code> property to equal \"Happy Coder\".",
          "testString": "assert(/happy coder/gi.test(myDog.name), 'Update <code>myDog</code>&apos;s <code>\"name\"</code> property to equal \"Happy Coder\".');"
        },
        {
          "text": "Do not edit the <code>myDog</code> definition",
          "testString": "assert(/\"name\": \"Coder\"/.test(code), 'Do not edit the <code>myDog</code> definition');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Actualiza las propiedades de un objeto en JavaScript",
          "description": [
            "Después de que hayas creado un objeto de JavaScript, puedes actualizar sus propiedades en cualquier momento, tal y como harías con cualquier otra variable.",
            "Por ejemplo, echemos un vistazo a <code>ourDog</code>:",
            "<code>var ourDog = {</code>",
            "<code>&nbsp;&nbsp;\"name\": \"Camper\",</code>",
            "<code>&nbsp;&nbsp;\"legs\": 4,</code>",
            "<code>&nbsp;&nbsp;\"tails\": 1,</code>",
            "<code>&nbsp;&nbsp;\"friends\": [\"everything!\"]</code>",
            "<code>};</code>",
            "Dado que es un perro particularmente feliz, vamos a cambiar su nombre a \"Happy Camper\". Así es como actualizamos la propiedad nombre del objeto: ",
            "<code>ourDog.name = \"Happy Camper\";</code>",
            "Ahora, cuando ejecutemos <code>return ourDog.name</code>, en lugar de obtener \"Camper\", vamos a recibir su nuevo nombre, \"Happy Camper\".",
            "<h4>Instrucciones</h4>",
            "Vamos a actualizar la propiedad del objeto <code>mydog</code>. Cambiemos su nombre de \"Coder\" a \"Happy Coder\"."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourDog = {",
            "  \"name\": \"Camper\",",
            "  \"legs\": 4,",
            "  \"tails\": 1,",
            "  \"friends\": [\"everything!\"]",
            "};",
            "",
            "ourDog.name = \"Happy Camper\";",
            "",
            "// Setup",
            "var myDog = {",
            "  \"name\": \"Coder\",",
            "  \"legs\": 4,",
            "  \"tails\": 1,",
            "  \"friends\": [\"freeCodeCamp Campers\"]",
            "};",
            "",
            "// Only change code below this line.",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return z;})(myDog);"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392d2",
      "title": "Add New Properties to a JavaScript Object",
      "description": [
        "You can add new properties to existing JavaScript objects the same way you would modify them.",
        "Here's how we would add a <code>\"bark\"</code> property to <code>ourDog</code>:",
        "<code>ourDog.bark = \"bow-wow\";</code> ",
        "or",
        "<code>ourDog[\"bark\"] = \"bow-wow\";</code>",
        "Now when we evaluate <code>ourDog.bark</code>, we'll get his bark, \"bow-wow\".",
        "<hr>",
        "Add a <code>\"bark\"</code> property to <code>myDog</code> and set it to a dog sound, such as \"woof\". You may use either dot or bracket notation."
      ],
      "solutions": [
        "var myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\nmyDog.bark = \"Woof Woof\";"
      ],
      "tests": [
        {
          "text": "Add the property <code>\"bark\"</code> to <code>myDog</code>.",
          "testString": "assert(myDog.bark !== undefined, 'Add the property <code>\"bark\"</code> to <code>myDog</code>.');"
        },
        {
          "text": "Do not add <code>\"bark\"</code> to the setup section",
          "testString": "assert(!/bark[^\\n]:/.test(code), 'Do not add <code>\"bark\"</code> to the setup section');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Añade nuevas propiedades a un objeto JavaScript",
          "description": [
            "Puedes añadir nuevas propiedades a objetos existente de la misma forma que usarías para modificarlos.",
            "Así es como añadimos una propiedad <code>\"bark\"</code> (ladra) a nuestro objeto <code>ourDog</code>:",
            "<code>ourDog.bark = \"bow-wow\";</code>",
            "Ahora, cuando ejecutemos <code>return ourDog.bark</code>, vamos a recbir su ladrido, \" bow-wow \".",
            "<h4>Instrucciones</h4>",
            "Vamos a añadir una propiedad <code>ladra</code> a <code>myDog</code> y a ponerle un sonido de perro, tal como \"woof\"."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourDog = {",
            "  \"name\": \"Camper\",",
            "  \"legs\": 4,",
            "  \"tails\": 1,",
            "  \"friends\": [\"everything!\"]",
            "};",
            "",
            "ourDog.bark = \"bow-wow\";",
            "",
            "// Setup",
            "var myDog = {",
            "  \"name\": \"Happy Coder\",",
            "  \"legs\": 4,",
            "  \"tails\": 1,",
            "  \"friends\": [\"freeCodeCamp Campers\"]",
            "};",
            "",
            "// Only change code below this line.",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return z;})(myDog);"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392d3",
      "title": "Delete Properties from a JavaScript Object",
      "description": [
        "We can also delete properties from objects like this:",
        "<code>delete ourDog.bark;</code>",
        "<hr>",
        "Delete the <code>\"tails\"</code> property from <code>myDog</code>. You may use either dot or bracket notation."
      ],
      "solutions": [
        "var ourDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"],\n  \"bark\": \"bow-wow\"\n};\nvar myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"],\n  \"bark\": \"woof\"\n};\ndelete myDog.tails;"
      ],
      "tests": [
        {
          "text": "Delete the property <code>\"tails\"</code> from <code>myDog</code>.",
          "testString": "assert(typeof myDog === \"object\" && myDog.tails === undefined, 'Delete the property <code>\"tails\"</code> from <code>myDog</code>.');"
        },
        {
          "text": "Do not modify the <code>myDog</code> setup",
          "testString": "assert(code.match(/\"tails\": 1/g).length > 1, 'Do not modify the <code>myDog</code> setup');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Elimina propiedades de un objeto JavaScript",
          "description": [
            "También podemos eliminar propiedades de los objetos de esta manera:",
            "<code>delete ourDog.bark;</code>",
            "<h4>Instrucciones</h4>",
            "Borremos la propiedad <code>\"tails\"</code> de <code>myDog</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourDog = {",
            "  \"name\": \"Camper\",",
            "  \"legs\": 4,",
            "  \"tails\": 1,",
            "  \"friends\": [\"everything!\"],",
            "  \"bark\": \"bow-wow\"",
            "};",
            "",
            "delete ourDog.bark;",
            "",
            "// Setup",
            "var myDog = {",
            "  \"name\": \"Happy Coder\",",
            "  \"legs\": 4,",
            "  \"tails\": 1,",
            "  \"friends\": [\"freeCodeCamp Campers\"],",
            "  \"bark\": \"woof\"",
            "};",
            "",
            "// Only change code below this line.",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return z;})(myDog);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ca",
      "title": "Using Objects for Lookups",
      "description": [
        "Objects can be thought of as a key/value storage, like a dictionary. If you have tabular data, you can use an object to \"lookup\" values rather than a <code>switch</code> statement or an <code>if/else</code> chain. This is most useful when you know that your input data is limited to a certain range.",
        "Here is an example of a simple reverse alphabet lookup:",
        "<blockquote>var alpha = {<br>&nbsp;&nbsp;1:\"Z\",<br>&nbsp;&nbsp;2:\"Y\",<br>&nbsp;&nbsp;3:\"X\",<br>&nbsp;&nbsp;4:\"W\",<br>&nbsp;&nbsp;...<br>&nbsp;&nbsp;24:\"C\",<br>&nbsp;&nbsp;25:\"B\",<br>&nbsp;&nbsp;26:\"A\"<br>};<br>alpha[2]; // \"Y\"<br>alpha[24]; // \"C\"<br><br>var value = 2;<br>alpha[value]; // \"Y\"</blockquote>",
        "<hr>",
        "Convert the switch statement into an object called <code>lookup</code>. Use it to look up <code>val</code> and assign the associated string to the <code>result</code> variable."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function phoneticLookup(val) {\n  var result = \"\";\n\n  var lookup = {\n    alpha: \"Adams\",\n    bravo: \"Boston\",\n    charlie: \"Chicago\",\n    delta: \"Denver\",\n    echo: \"Easy\",\n    foxtrot: \"Frank\"\n  };\n\n  result = lookup[val];\n\n  return result;\n}"
      ],
      "tests": [
        {
          "text": "<code>phoneticLookup(\"alpha\")</code> should equal <code>\"Adams\"</code>",
          "testString": "assert(phoneticLookup(\"alpha\") === 'Adams', '<code>phoneticLookup(\"alpha\")</code> should equal <code>\"Adams\"</code>');"
        },
        {
          "text": "<code>phoneticLookup(\"bravo\")</code> should equal <code>\"Boston\"</code>",
          "testString": "assert(phoneticLookup(\"bravo\") === 'Boston', '<code>phoneticLookup(\"bravo\")</code> should equal <code>\"Boston\"</code>');"
        },
        {
          "text": "<code>phoneticLookup(\"charlie\")</code> should equal <code>\"Chicago\"</code>",
          "testString": "assert(phoneticLookup(\"charlie\") === 'Chicago', '<code>phoneticLookup(\"charlie\")</code> should equal <code>\"Chicago\"</code>');"
        },
        {
          "text": "<code>phoneticLookup(\"delta\")</code> should equal <code>\"Denver\"</code>",
          "testString": "assert(phoneticLookup(\"delta\") === 'Denver', '<code>phoneticLookup(\"delta\")</code> should equal <code>\"Denver\"</code>');"
        },
        {
          "text": "<code>phoneticLookup(\"echo\")</code> should equal <code>\"Easy\"</code>",
          "testString": "assert(phoneticLookup(\"echo\") === 'Easy', '<code>phoneticLookup(\"echo\")</code> should equal <code>\"Easy\"</code>');"
        },
        {
          "text": "<code>phoneticLookup(\"foxtrot\")</code> should equal <code>\"Frank\"</code>",
          "testString": "assert(phoneticLookup(\"foxtrot\") === 'Frank', '<code>phoneticLookup(\"foxtrot\")</code> should equal <code>\"Frank\"</code>');"
        },
        {
          "text": "<code>phoneticLookup(\"\")</code> should equal <code>undefined</code>",
          "testString": "assert(typeof phoneticLookup(\"\") === 'undefined', '<code>phoneticLookup(\"\")</code> should equal <code>undefined</code>');"
        },
        {
          "text": "You should not modify the <code>return</code> statement",
          "testString": "assert(code.match(/return\\sresult;/), 'You should not modify the <code>return</code> statement');"
        },
        {
          "text": "You should not use <code>case</code>, <code>switch</code>, or <code>if</code> statements",
          "testString": "assert(!/case|switch|if/g.test(code), 'You should not use <code>case</code>, <code>switch</code>, or <code>if</code> statements'); "
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Usar objetos para búsquedas",
          "description": [
            "Los objetos pueden ser considerados como un almacenamiento llave/valor, como un diccionario. Si tienes datos tabulados, puedes almacenarlos en un objeto para después \"buscar\" valores, en lugar de emplear una sentencia <code>switch</code> o una secuencia de <code>if/else</code>. Esto es más útil cuando sabes que tus datos de entrada son limitados a un cierto rango.",
            "Aquí está un ejemplo de una simple búsqueda inversa de alfabeto:",
            "<blockquote>var alfa = {<br>&nbsp;&nbsp;1:\"Z\",<br>&nbsp;&nbsp;2:\"Y\",<br>&nbsp;&nbsp;3:\"X\",<br>&nbsp;&nbsp;4:\"W\",<br>&nbsp;&nbsp;...<br>&nbsp;&nbsp;24:\"C\",<br>&nbsp;&nbsp;25:\"B\",<br>&nbsp;&nbsp;26:\"A\"<br>};<br>alfa[2]; // \"Y\"<br>alfa[24]; // \"C\"<br><br>var valor = 2;<br>alfa[valor]; // \"Y\"</blockquote>",
            "<h4>Instrucciones</h4>",
            "Convierte la sentencia switch en una tabla de búsqueda llamada <code>lookup</code>. Usala para buscar <code>val</code> y asigna la cadena asociada a la variable <code>result</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "function phoneticLookup(val) {",
            "  var result = \"\";",
            "",
            "  // Only change code below this line",
            "  switch(val) {",
            "    case \"alpha\": ",
            "      result = \"Adams\";",
            "      break;",
            "    case \"bravo\": ",
            "      result = \"Boston\";",
            "      break;",
            "    case \"charlie\": ",
            "      result = \"Chicago\";",
            "      break;",
            "    case \"delta\": ",
            "      result = \"Denver\";",
            "      break;",
            "    case \"echo\": ",
            "      result = \"Easy\";",
            "      break;",
            "    case \"foxtrot\": ",
            "      result = \"Frank\";",
            "  }",
            "",
            "  // Only change code above this line",
            "  return result;",
            "}",
            "",
            "// Change this value to test",
            "phoneticLookup(\"charlie\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "567af2437cbaa8c51670a16c",
      "title": "Testing Objects for Properties",
      "description": [
        "Sometimes it is useful to check if the property of a given object exists or not. We can use the <code>.hasOwnProperty(propname)</code> method of objects to determine if that object has the given property name. <code>.hasOwnProperty()</code> returns <code>true</code> or <code>false</code> if the property is found or not.",
        "<strong>Example</strong>",
        "<blockquote>var myObj = {<br>&nbsp;&nbsp;top: \"hat\",<br>&nbsp;&nbsp;bottom: \"pants\"<br>};<br>myObj.hasOwnProperty(\"top\");    // true<br>myObj.hasOwnProperty(\"middle\"); // false</blockquote>",
        "<hr>",
        "Modify the function <code>checkObj</code> to test <code>myObj</code> for <code>checkProp</code>. If the property is found, return that property's value. If not, return <code>\"Not Found\"</code>."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myObj = {\n  gift: \"pony\",\n  pet: \"kitten\",\n  bed: \"sleigh\"\n};\nfunction checkObj(checkProp) {\n  if(myObj.hasOwnProperty(checkProp)) {\n    return myObj[checkProp];\n  } else {\n    return \"Not Found\";\n  }\n}"
      ],
      "tests": [
        {
          "text": "<code>checkObj(\"gift\")</code> should return  <code>\"pony\"</code>.",
          "testString": "assert(checkObj(\"gift\") === \"pony\", '<code>checkObj(\"gift\")</code> should return  <code>\"pony\"</code>.');"
        },
        {
          "text": "<code>checkObj(\"pet\")</code> should return  <code>\"kitten\"</code>.",
          "testString": "assert(checkObj(\"pet\") === \"kitten\", '<code>checkObj(\"pet\")</code> should return  <code>\"kitten\"</code>.');"
        },
        {
          "text": "<code>checkObj(\"house\")</code> should return  <code>\"Not Found\"</code>.",
          "testString": "assert(checkObj(\"house\") === \"Not Found\", '<code>checkObj(\"house\")</code> should return  <code>\"Not Found\"</code>.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Probar si un objeto tiene cierta propiedad",
          "description": [
            "A veces es útil revisar si cierta propiedad existe o no en un objeto dado. Podemos usar el método de objetos <code>.hasOwnProperty(nomprop)</code> para determinar si un objeto tiene la propiedad <code>nomprop</code>. <code>.hasOwnProperty()</code> retorna <code>true</code> o <code>false</code> si la propiedad es encontrada o no.",
            "<strong>Ejemplo</strong>",
            "<blockquote>var miObj = {<br>&nbsp;&nbsp;arriba: \"sombrero\",<br>&nbsp;&nbsp;abajo: \"pantalones\"<br>};<br>miObj.hasOwnProperty(\"arriba\");    // true<br>miObj.hasOwnProperty(\"medio\"); // false</blockquote>",
            "<h4>Instrucciones</h4>",
            "Modifica la función <code>checkObj</code> que prueba si <code>myObj</code> tiene la propiedad <code>checkProp</code>. Si la propiedad es encontrada, retorna el valor de esa propiedad. Si no, retorna <code>\"Not Found\"</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "var myObj = {",
            "  gift: \"pony\",",
            "  pet: \"kitten\",",
            "  bed: \"sleigh\"",
            "};",
            "",
            "function checkObj(checkProp) {",
            "  // Your Code Here",
            "  ",
            "  return \"Change Me!\";",
            "}",
            "",
            "// Test your code by modifying these values",
            "checkObj(\"gift\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244cb",
      "title": "Manipulating Complex Objects",
      "description": [
        "Sometimes you may want to store data in a flexible <dfn>Data Structure</dfn>. A JavaScript object is one way to handle flexible data. They allow for arbitrary combinations of <dfn>strings</dfn>, <dfn>numbers</dfn>, <dfn>booleans</dfn>, <dfn>arrays</dfn>, <dfn>functions</dfn>, and <dfn>objects</dfn>.",
        "Here's an example of a complex data structure:",
        "<blockquote>var ourMusic = [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\"artist\": \"Daft Punk\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"title\": \"Homework\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"release_year\": 1997,<br>&nbsp;&nbsp;&nbsp;&nbsp;\"formats\": [ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"CD\", <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Cassette\", <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"LP\"<br>&nbsp;&nbsp;&nbsp;&nbsp;],<br>&nbsp;&nbsp;&nbsp;&nbsp;\"gold\": true<br>&nbsp;&nbsp;}<br>];</blockquote>",
        "This is an array which contains one object inside. The object has various pieces of <dfn>metadata</dfn> about an album. It also has a nested <code>\"formats\"</code> array. If you want to add more album records, you can do this by adding records to the top level array.",
        "Objects hold data in a property, which has a key-value format. In the example above, <code>\"artist\": \"Daft Punk\"</code> is a property that has a key of <code>\"artist\"</code> and a value of <code>\"Daft Punk\"</code>.",
        "<a href='http://www.json.org/' target=_blank>JavaScript Object Notation</a> or <code>JSON</code> is a related data interchange format used to store data.",
        "<blockquote>{<br>&nbsp;&nbsp;\"artist\": \"Daft Punk\",<br>&nbsp;&nbsp;\"title\": \"Homework\",<br>&nbsp;&nbsp;\"release_year\": 1997,<br>&nbsp;&nbsp;\"formats\": [ <br>&nbsp;&nbsp;&nbsp;&nbsp;\"CD\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Cassette\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"LP\"<br>&nbsp;&nbsp;],<br>&nbsp;&nbsp;\"gold\": true<br>}</blockquote>",
        "<strong>Note</strong><br>You will need to place a comma after every object in the array, unless it is the last object in the array.",
        "<hr>",
        "Add a new album to the <code>myMusic</code> array. Add <code>artist</code> and <code>title</code> strings, <code>release_year</code> number, and a <code>formats</code> array of strings."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [ \n      \"CS\", \n      \"8T\", \n      \"LP\" ],\n    \"gold\": true\n  }, \n  {\n    \"artist\": \"ABBA\",\n    \"title\": \"Ring Ring\",\n    \"release_year\": 1973,\n    \"formats\": [ \n      \"CS\", \n      \"8T\", \n      \"LP\",\n    \"CD\",\n  ]\n  }\n];"
      ],
      "tests": [
        {
          "text": "<code>myMusic</code> should be an array",
          "testString": "assert(Array.isArray(myMusic), '<code>myMusic</code> should be an array');"
        },
        {
          "text": "<code>myMusic</code> should have at least two elements",
          "testString": "assert(myMusic.length > 1, '<code>myMusic</code> should have at least two elements');"
        },
        {
          "text": "<code>myMusic[1]</code> should be an object",
          "testString": "assert(typeof myMusic[1] === 'object', '<code>myMusic[1]</code> should be an object');"
        },
        {
          "text": "<code>myMusic[1]</code> should have at least 4 properties",
          "testString": "assert(Object.keys(myMusic[1]).length > 3, '<code>myMusic[1]</code> should have at least 4 properties');"
        },
        {
          "text": "<code>myMusic[1]</code> should contain an <code>artist</code> property which is a string",
          "testString": "assert(myMusic[1].hasOwnProperty('artist') && typeof myMusic[1].artist === 'string', '<code>myMusic[1]</code> should contain an <code>artist</code> property which is a string');"
        },
        {
          "text": "<code>myMusic[1]</code> should  contain a <code>title</code> property which is a string",
          "testString": "assert(myMusic[1].hasOwnProperty('title') && typeof myMusic[1].title === 'string', '<code>myMusic[1]</code> should  contain a <code>title</code> property which is a string');"
        },
        {
          "text": "<code>myMusic[1]</code> should contain a <code>release_year</code> property which is a number",
          "testString": "assert(myMusic[1].hasOwnProperty('release_year') && typeof myMusic[1].release_year === 'number', '<code>myMusic[1]</code> should contain a <code>release_year</code> property which is a number');"
        },
        {
          "text": "<code>myMusic[1]</code> should contain a <code>formats</code> property which is an array",
          "testString": "assert(myMusic[1].hasOwnProperty('formats') && Array.isArray(myMusic[1].formats), '<code>myMusic[1]</code> should contain a <code>formats</code> property which is an array');"
        },
        {
          "text": "<code>formats</code> should be an array of strings with at least two elements",
          "testString": "assert(myMusic[1].formats.every(function(item) { return (typeof item === \"string\")}) && myMusic[1].formats.length > 1, '<code>formats</code> should be an array of strings with at least two elements');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Manipula objetos complicados",
          "description": [
            "Los objetos JavaScript son flexibles porque permiten <dfn>Estructuras de Datos</dfn> con combinaciones arbitrarias de <dfn>cadenas</dfn>, <dfn>números</dfn>, <dfn>booleanos</dfn>, <dfn>vectores</dfn>, <dfn>funciones</dfn>, y <dfn>objetos</dfn>.",
            "Aquí está un ejemplo de un objeto complicado:",
            "<blockquote>var nuestraMusica = [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\"artista\": \"Daft Punk\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"titulo\": \"Homework\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"año_publicacion\": 1997,<br>&nbsp;&nbsp;&nbsp;&nbsp;\"formatos\": [ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"CD\", <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Cassette\", <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"LP\" ],<br>&nbsp;&nbsp;&nbsp;&nbsp;\"oro\": true<br>&nbsp;&nbsp;}<br>];</blockquote>",
            "Este es un vector de objetos con diversos <dfn>metadatos</dfn> acerca de un álbum musical. Además tiene anidado un vector <code>formatos</code>. En el vector de nivel superior, pueden añadirse otros registros del álbum.",
            "<strong>Nota</strong><br>En vectores que tengan más de un objeto, necesitarás separar un objeto de otro mediante comas.",
            "<h4>Instrucciones</h4>",
            "Agrega un nuevo álbum al objeto <code>myMusic</code>. Agrega las cadenas <code>artist</code> y <code>title</code>, el número <code>release_year</code> y un vector de cadenas <code>formats</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var myMusic = [",
            "  {",
            "    \"artist\": \"Billy Joel\",",
            "    \"title\": \"Piano Man\",",
            "    \"release_year\": 1973,",
            "    \"formats\": [ ",
            "      \"CD\",",
            "      \"8T\",",
            "      \"LP\"",
            "    ],",
            "    \"gold\": true",
            "  }",
            "  // Add record here",
            "];",
            ""
          ],
          "head": [],
          "tail": [
            "(function(x){ if (Array.isArray(x)) { return JSON.stringify(x); } return \"myMusic is not an array\"})(myMusic);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244cc",
      "title": "Accessing Nested Objects",
      "description": [
        "The sub-properties of objects can be accessed by chaining together the dot or bracket notation.",
        "Here is a nested object:",
        "<blockquote>var ourStorage = {<br>&nbsp;&nbsp;\"desk\": {<br>&nbsp;&nbsp;&nbsp;&nbsp;\"drawer\": \"stapler\"<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;\"cabinet\": {<br>&nbsp;&nbsp;&nbsp;&nbsp;\"top drawer\": { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"folder1\": \"a file\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"folder2\": \"secrets\"<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;\"bottom drawer\": \"soda\"<br>&nbsp;&nbsp;}<br>};<br>ourStorage.cabinet[\"top drawer\"].folder2;  // \"secrets\"<br>ourStorage.desk.drawer; // \"stapler\"</blockquote>",
        "<hr>",
        "Access the <code>myStorage</code> object and assign the contents of the <code>glove box</code> property to the <code>gloveBoxContents</code> variable. Use bracket notation for properties with a space in their name."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myStorage = {  \n  \"car\":{  \n    \"inside\":{  \n      \"glove box\":\"maps\",\n      \"passenger seat\":\"crumbs\"\n    },\n    \"outside\":{  \n      \"trunk\":\"jack\"\n    }\n  }\n};\nvar gloveBoxContents = myStorage.car.inside[\"glove box\"];"
      ],
      "tests": [
        {
          "text": "<code>gloveBoxContents</code> should equal \"maps\"",
          "testString": "assert(gloveBoxContents === \"maps\", '<code>gloveBoxContents</code> should equal \"maps\"');"
        },
        {
          "text": "Use dot and bracket notation to access <code>myStorage</code>",
          "testString": "assert(/=\\s*myStorage\\.car\\.inside\\[\\s*(\"|')glove box\\1\\s*\\]/g.test(code), 'Use dot and bracket notation to access <code>myStorage</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Acceder a objetos anidados",
          "description": [
            "Las sub-propiedades de los objetos pueden ser accesadas mediante encadenamiento de la notación punto o corchete.",
            "Aquí está un objeto anidado:",
            "<blockquote>var nuestroAlmacen = {<br>&nbsp;&nbsp;\"escritorio\": {<br>&nbsp;&nbsp;&nbsp;&nbsp;\"cajon\": \"grapadora\"<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;\"armario\": {<br>&nbsp;&nbsp;&nbsp;&nbsp;\"cajón superior\": { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"legajador1\": \"un archivo\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"legajador2\": \"secretos\"<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;\"cajón inferior\": \"gaseosa\"<br>&nbsp;&nbsp;}<br>}<br>nuestroAlmacen.armario[\"cajón superior\"].legajador2;  // \"secretos\"<br>nuestroAlmacen.escritorio.cajon; // \"grapadora\"</blockquote>",
            "<h4>Instrucciones</h4>",
            "Accede al objeto <code>myStorage</code> para recuperar el contenido de <code>glove box</code>. Usa notación corchete para las propiedades con un espacio en su nombre."
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/accessing-nested-objects-in-json",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "var myStorage = {",
            "  \"car\": {",
            "    \"inside\": {",
            "      \"glove box\": \"maps\",",
            "      \"passenger seat\": \"crumbs\"",
            "     },",
            "    \"outside\": {",
            "      \"trunk\": \"jack\"",
            "    }",
            "  }",
            "};",
            "",
            "var gloveBoxContents = undefined; // Change this line",
            ""
          ],
          "head": [],
          "tail": [
            "(function(x) { ",
            "  if(typeof x != 'undefined') { ",
            "    return \"gloveBoxContents = \" + x;",
            "  }",
            "  return \"gloveBoxContents is undefined\";",
            "})(gloveBoxContents);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244cd",
      "title": "Accessing Nested Arrays",
      "description": [
        "As we have seen in earlier examples, objects can contain both nested objects and nested arrays. Similar to accessing nested objects, Array bracket notation can be chained to access nested arrays.",
        "Here is an example of how to access a nested array:",
        "<blockquote>var ourPets = [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;animalType: \"cat\",<br>&nbsp;&nbsp;&nbsp;&nbsp;names: [<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Meowzer\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Fluffy\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Kit-Cat\"<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;animalType: \"dog\",<br>&nbsp;&nbsp;&nbsp;&nbsp;names: [<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Spot\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Bowser\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Frankie\"<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;}<br>];<br>ourPets[0].names[1]; // \"Fluffy\"<br>ourPets[1].names[0]; // \"Spot\"</blockquote>",
        "<hr>",
        "Retrieve the second tree from the variable <code>myPlants</code> using object dot and array bracket notation."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myPlants = [\n  { \n    type: \"flowers\",\n    list: [\n      \"rose\",\n      \"tulip\",\n      \"dandelion\"\n    ]\n  },\n  {\n    type: \"trees\",\n    list: [\n      \"fir\",\n      \"pine\",\n      \"birch\"\n    ]\n  }  \n];\n\n// Only change code below this line\n\nvar secondTree = myPlants[1].list[1];"
      ],
      "tests": [
        {
          "text": "<code>secondTree</code> should equal \"pine\"",
          "testString": "assert(secondTree === \"pine\", '<code>secondTree</code> should equal \"pine\"');"
        },
        {
          "text": "Use dot and bracket notation to access <code>myPlants</code>",
          "testString": "assert(/=\\s*myPlants\\[1\\].list\\[1\\]/.test(code), 'Use dot and bracket notation to access <code>myPlants</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Acceder a vectores anidados",
          "description": [
            "Como hemos visto en ejemplos anteriores, los objetos pueden contener objetos anidados y vectores anidados. De forma similar a acceder a objetos anidados, la notación corchete en vectores puede ser encadenada para acceder a vectores anidados.",
            "Aquí está un ejemplo de como acceder a un vector anidado:",
            "<blockquote>var nuestrasMascotas = { <br>&nbsp;&nbsp;\"gatos\": [<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Maullador\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Blandito\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Kit-Cat\"<br>&nbsp;&nbsp;],<br>&nbsp;&nbsp;\"perros\": [<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Mancha\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Bowser\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Frankie\"<br>&nbsp;&nbsp;]<br>};<br>nuestrasMascotas.cats[1]; // \"Blandito\"<br>nuestrasMascotas.dogs[0]; // \"Mancha\"</blockquote>",
            "<h4>Instrucciones</h4>",
            "Recupera el segundo arbol de la variable <code>myPlants</code> usando notación punto para objetos y notación corchete para vectores."
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/access-array-data-with-indexes",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "var myPlants = [",
            "  { ",
            "    type: \"flowers\",",
            "    list: [",
            "      \"rose\",",
            "      \"tulip\",",
            "      \"dandelion\"",
            "    ]",
            "  },",
            "  {",
            "    type: \"trees\",",
            "    list: [",
            "      \"fir\",",
            "      \"pine\",",
            "      \"birch\"",
            "    ]",
            "  }  ",
            "];",
            "",
            "// Only change code below this line",
            "",
            "var secondTree = \"\"; // Change this line",
            ""
          ],
          "head": [],
          "tail": [
            "(function(x) { ",
            "  if(typeof x != 'undefined') { ",
            "    return \"secondTree = \" + x;",
            "  }",
            "  return \"secondTree is undefined\";",
            "})(secondTree);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244cf",
      "title": "Record Collection",
      "description": [
        "You are given a JSON object representing a part of your musical album collection. Each album has several properties and a unique id number as its key. Not all albums have complete information.",
        "Write a function which takes an album's <code>id</code> (like <code>2548</code>), a property <code>prop</code> (like <code>\"artist\"</code> or <code>\"tracks\"</code>), and a <code>value</code> (like <code>\"Addicted to Love\"</code>) to modify the data in this collection.",
        "If <code>prop</code> isn't <code>\"tracks\"</code> and <code>value</code> isn't empty (<code>\"\"</code>), update or set the <code>value</code> for that record album's property.",
        "Your function must always return the entire collection object.",
        "There are several rules for handling incomplete data:",
        "If <code>prop</code> is <code>\"tracks\"</code> but the album doesn't have a <code>\"tracks\"</code> property, create an empty array before adding the new value to the album's corresponding property.",
        "If <code>prop</code> is <code>\"tracks\"</code> and <code>value</code> isn't empty (<code>\"\"</code>), push the <code>value</code> onto the end of the album's existing <code>tracks</code> array.",
        "If <code>value</code> is empty (<code>\"\"</code>), delete the given <code>prop</code> property from the album.",
        "<strong>Hints</strong><br>Use <code>bracket notation</code> when <a href=\"javascript-algorithms-and-data-structures/basic-javascript/accessing-object-properties-with-variables\" target=\"_blank\">accessing object properties with variables</a>.",
        "Push is an array method you can read about on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\" target=\"_blank\">Mozilla Developer Network</a>.",
        "You may refer back to <a href=\"javascript-algorithms-and-data-structures/basic-javascript/manipulating-complex-objects\" target=\"_blank\">Manipulating Complex Objects</a> Introducing JavaScript Object Notation (JSON) for a refresher."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var collection = {\n    2548: {\n      album: \"Slippery When Wet\",\n      artist: \"Bon Jovi\",\n      tracks: [ \n        \"Let It Rock\", \n        \"You Give Love a Bad Name\" \n      ]\n    },\n    2468: {\n      album: \"1999\",\n      artist: \"Prince\",\n      tracks: [ \n        \"1999\", \n        \"Little Red Corvette\" \n      ]\n    },\n    1245: {\n      artist: \"Robert Palmer\",\n      tracks: [ ]\n    },\n    5439: {\n      album: \"ABBA Gold\"\n    }\n};\n// Keep a copy of the collection for tests\nvar collectionCopy = JSON.parse(JSON.stringify(collection));\n\n// Only change code below this line\nfunction updateRecords(id, prop, value) {\n  if(value === \"\") delete collection[id][prop];\n  else if(prop === \"tracks\") {\n    collection[id][prop] = collection[id][prop] || [];\n    collection[id][prop].push(value);\n  } else {\n    collection[id][prop] = value;\n  }\n  \n  return collection;\n}"
      ],
      "tests": [
        {
          "text": "After <code>updateRecords(5439, \"artist\", \"ABBA\")</code>, <code>artist</code> should be <code>\"ABBA\"</code>",
          "testString": "collection = collectionCopy; assert(updateRecords(5439, \"artist\", \"ABBA\")[5439][\"artist\"] === \"ABBA\", 'After <code>updateRecords(5439, \"artist\", \"ABBA\")</code>, <code>artist</code> should be <code>\"ABBA\"</code>');"
        },
        {
          "text": "After <code>updateRecords(5439, \"tracks\", \"Take a Chance on Me\")</code>, <code>tracks</code> should have <code>\"Take a Chance on Me\"</code> as the last element.",
          "testString": "assert(updateRecords(5439, \"tracks\", \"Take a Chance on Me\")[5439][\"tracks\"].pop() === \"Take a Chance on Me\", 'After <code>updateRecords(5439, \"tracks\", \"Take a Chance on Me\")</code>, <code>tracks</code> should have <code>\"Take a Chance on Me\"</code> as the last element.');"
        },
        {
          "text": "After <code>updateRecords(2548, \"artist\", \"\")</code>, <code>artist</code> should not be set",
          "testString": "updateRecords(2548, \"artist\", \"\"); assert(!collection[2548].hasOwnProperty(\"artist\"), 'After <code>updateRecords(2548, \"artist\", \"\")</code>, <code>artist</code> should not be set');"
        },
        {
          "text": "After <code>updateRecords(1245, \"tracks\", \"Addicted to Love\")</code>, <code>tracks</code> should have <code>\"Addicted to Love\"</code> as the last element.",
          "testString": "assert(updateRecords(1245, \"tracks\", \"Addicted to Love\")[1245][\"tracks\"].pop() === \"Addicted to Love\", 'After <code>updateRecords(1245, \"tracks\", \"Addicted to Love\")</code>, <code>tracks</code> should have <code>\"Addicted to Love\"</code> as the last element.');"
        },
        {
          "text": "After <code>updateRecords(2468, \"tracks\", \"Free\")</code>, <code>tracks</code> should have <code>\"1999\"</code> as the first element.",
          "testString": "assert(updateRecords(2468, \"tracks\", \"Free\")[2468][\"tracks\"][0] === \"1999\", 'After <code>updateRecords(2468, \"tracks\", \"Free\")</code>, <code>tracks</code> should have <code>\"1999\"</code> as the first element.');"
        },
        {
          "text": "After <code>updateRecords(2548, \"tracks\", \"\")</code>, <code>tracks</code> should not be set",
          "testString": "updateRecords(2548, \"tracks\", \"\"); assert(!collection[2548].hasOwnProperty(\"tracks\"), 'After <code>updateRecords(2548, \"tracks\", \"\")</code>, <code>tracks</code> should not be set');"
        },
        {
          "text": "After <code>updateRecords(1245, \"album\", \"Riptide\")</code>, <code>album</code> should be <code>\"Riptide\"</code>",
          "testString": "assert(updateRecords(1245, \"album\", \"Riptide\")[1245][\"album\"] === \"Riptide\", 'After <code>updateRecords(1245, \"album\", \"Riptide\")</code>, <code>album</code> should be <code>\"Riptide\"</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Colección de registros",
          "description": [
            "Se te da un objeto que representa (una pequeña parte de) tu colección de grabaciones. Cada álbum es identificado por un número id único y tiene varias propiedades. No todos los álbumes tienen la información completa.",
            "Escribe una función que reciba un <code>id</code>, una propiedad (<code>prop</code>) y un valor (<code>value</code>).",
            "Para el <code>id</code> dado, en la colección <code>collection</code>:",
            "Si el valor <code>value</code> no está en blanco (<code>value !== \"\"</code>) y <code>prop</code> no es <code>\"tracks\"</code> entonces actualiza o establece el valor de la propiedad <code>prop</code>.",
            "Si la propiedad <code>prop</code> es <code>\"tracks\"</code> y <code>value</code> no está en blanco, empuja (<em>push</em>) el valor <code>value</code> al final del vector <code>tracks</code>.",
            "Si el valor <code>value</code> está en blanco, elimina esa <code>prop</code>.",
            "Siempre retorna el objeto <code>collection</code> entero.",
            "<strong>Nota</strong><br>No olvides usar <code>notación corchete</code> cuando <a href=\"javascript-algorithms-and-data-structures/basic-javascript/accessing-object-properties-with-variables\" target=\"_blank\">accedes a propiedades de objetos con variables</a>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "var collection = {",
            "    \"2548\": {",
            "      \"album\": \"Slippery When Wet\",",
            "      \"artist\": \"Bon Jovi\",",
            "      \"tracks\": [ ",
            "        \"Let It Rock\", ",
            "        \"You Give Love a Bad Name\" ",
            "      ]",
            "    },",
            "    \"2468\": {",
            "      \"album\": \"1999\",",
            "      \"artist\": \"Prince\",",
            "      \"tracks\": [ ",
            "        \"1999\", ",
            "        \"Little Red Corvette\" ",
            "      ]",
            "    },",
            "    \"1245\": {",
            "      \"artist\": \"Robert Palmer\",",
            "      \"tracks\": [ ]",
            "    },",
            "    \"5439\": {",
            "      \"album\": \"ABBA Gold\"",
            "    }",
            "};",
            "// Keep a copy of the collection for tests",
            "var collectionCopy = JSON.parse(JSON.stringify(collection));",
            "",
            "// Only change code below this line",
            "function updateRecords(id, prop, value) {",
            "  ",
            "  ",
            "  return collection;",
            "}",
            "",
            "// Alter values below to test your code",
            "updateRecords(5439, \"artist\", \"ABBA\");",
            ""
          ],
          "head": [],
          "tail": [
            ";(function(x) { return \"collection = \\n\" + JSON.stringify(x, '\\n', 2); })(collection);"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb1bdef",
      "title": "Iterate with JavaScript While Loops",
      "description": [
        "You can run the same code multiple times by using a loop.",
        "The first type of loop we will learn is called a \"<code>while</code>\" loop because it runs \"while\" a specified condition is true and stops once that condition is no longer true.",
        "<blockquote>var ourArray = [];<br>var i = 0;<br>while(i &#60; 5) {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>}</blockquote>",
        "Let's try getting a while loop to work by pushing values to an array.",
        "<hr>",
        "Push the numbers 0 through 4 to <code>myArray</code> using a <code>while</code> loop."
      ],
      "solutions": [
        "var myArray = [];\nvar i = 0;\nwhile(i < 5) {\n  myArray.push(i);\n  i++;\n}"
      ],
      "tests": [
        {
          "text": "You should be using a <code>while</code> loop for this.",
          "testString": "assert(code.match(/while/g), 'You should be using a <code>while</code> loop for this.');"
        },
        {
          "text": "<code>myArray</code> should equal <code>[0,1,2,3,4]</code>.",
          "testString": "assert.deepEqual(myArray, [0,1,2,3,4], '<code>myArray</code> should equal <code>[0,1,2,3,4]</code>.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Iterar con JavaScript con ciclos while",
          "description": [
            "Puede ejecutar el mismo código varias veces mediante el uso de un ciclo.",
            "Otro tipo de ciclo de JavaScript se llama un ciclo \"while\", ya que se ejecuta, \"mientras que\" algo sea cierto y se detiene una vez que ya no sea así.",
            "<code>var ourArray = [];</code>",
            "<code>var i = 0;</code>",
            "<code>while(i < 5) {</code>",
            "<code>&nbsp;&nbsp;ourArray.push(i);</code>",
            "<code>&nbsp;&nbsp;i++;</code>",
            "<code>}</code>",
            "Intentemos que un ciclo <code>while</code> empuje valores en un vector.",
            "<h4>Instrucciones</h4>",
            "Empuja los números de 0 a 4 para <code>myArray</code> utilizando un ciclo <code>while</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "var myArray = [];",
            "",
            "// Only change code below this line.",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb5bdef",
      "title": "Iterate with JavaScript For Loops",
      "description": [
        "You can run the same code multiple times by using a loop.",
        "The most common type of JavaScript loop is called a \"<code>for loop</code>\" because it runs \"for\" a specific number of times.",
        "For loops are declared with three optional expressions separated by semicolons:",
        "<code>for ([initialization]; [condition]; [final-expression])</code>",
        "The <code>initialization</code> statement is executed one time only before the loop starts. It is typically used to define and setup your loop variable.",
        "The <code>condition</code> statement is evaluated at the beginning of every loop iteration and will continue as long as it evaluates to <code>true</code>. When <code>condition</code> is <code>false</code> at the start of the iteration, the loop will stop executing. This means if <code>condition</code> starts as <code>false</code>, your loop will never execute.",
        "The <code>final-expression</code> is executed at the end of each loop iteration, prior to the next <code>condition</code> check and is usually used to increment or decrement your loop counter.",
        "In the following example we initialize with <code>i = 0</code> and iterate while our condition <code>i &#60; 5</code> is true. We'll increment <code>i</code> by <code>1</code> in each loop iteration with <code>i++</code> as our <code>final-expression</code>.",
        "<blockquote>var ourArray = [];<br>for (var i = 0; i &#60; 5; i++) {<br>&nbsp;&nbsp;ourArray.push(i);<br>}</blockquote>",
        "<code>ourArray</code> will now contain <code>[0,1,2,3,4]</code>.",
        "<hr>",
        "Use a <code>for</code> loop to work to push the values 1 through 5 onto <code>myArray</code>."
      ],
      "solutions": [
        "var ourArray = [];\nfor (var i = 0; i < 5; i++) {\n  ourArray.push(i);\n}\nvar myArray = [];\nfor (var i = 1; i < 6; i++) {\n  myArray.push(i);\n}"
      ],
      "tests": [
        {
          "text": "You should be using a <code>for</code> loop for this.",
          "testString": "assert(code.match(/for\\s*\\(/g).length > 1, 'You should be using a <code>for</code> loop for this.');"
        },
        {
          "text": "<code>myArray</code> should equal <code>[1,2,3,4,5]</code>.",
          "testString": "assert.deepEqual(myArray, [1,2,3,4,5], '<code>myArray</code> should equal <code>[1,2,3,4,5]</code>.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Iterar en JavaScript con ciclos for",
          "description": [
            "Puede ejecutar el mismo código varias veces mediante el uso de un ciclo.",
            "El tipo más común de bucle de JavaScript se llama \"ciclo for\"porque se ejecuta \"por\" (for) un número específico de veces.",
            "Los ciclos for se declaran con tres expresiones opcionales separadas por punto y coma:",
            "<code>for ([inicialización]; [condición]; [expresión-final])</code>",
            "La <code>inicialización</code> se ejecuta sólo una vez antes de que empiece el ciclo. Normalmente se utiliza para definir e inicializar su variable de ciclo. ",
            "La expresión <code>condición</code> se evalúa al principio de cada iteración del ciclo y continuará en el ciclo siempre y cuando sea verdadera (<code>true</code>). Cuando la <code>condición</code> sea falsa (<code>false</code>) al comienzo de la iteración, se detendrá la ejecución del ciclo.  Esto significa que si la <code>condición</code> inicia en el valor falso <code>false</code>, el ciclo no se ejecutará. ",
            "La <code>expresión final</code> se ejecuta al final de cada repetición del ciclo, antes del siguiente chequeo de la <code>condición</code> y se utiliza generalmente para aumentar o disminuir el contador del ciclo.",
            "En el siguiente ejemplo inicializamos con <code>i = 0</code> e iteramos mientras nuestra condición <code>i <5</code> sea verdadera.  Vamos a incrementar <code>i</code> en <code>1</code> en cada iteración del ciclo con <code>i++</code> como nuestra <code>expresión final</code>. ",
            "<code>var ourArray = [];</code>",
            "<code>for (var i = 0; i < 5; i++) {</code>",
            "<code>&nbsp;&nbsp;ourArray.push(i);</code>",
            "<code>}</code>",
            "<code>ourArray</code> ahora contendrá <code>[0,1,2,3,4]</code>.",
            "<h4>Instrucciones</h4>",
            "Vamos a utilizar un ciclo <code>for</code> para empujar los valores del 1 al 5 en <code>myArray</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourArray = [];",
            "",
            "for (var i = 0; i < 5; i++) {",
            "  ourArray.push(i);",
            "}",
            "",
            "// Setup",
            "var myArray = [];",
            "",
            "// Only change code below this line.",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "if (typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          ]
        }
      }
    },
    {
      "id": "56104e9e514f539506016a5c",
      "title": "Iterate Odd Numbers With a For Loop",
      "description": [
        "For loops don't have to iterate one at a time. By changing our <code>final-expression</code>, we can count by even numbers.",
        "We'll start at <code>i = 0</code> and loop while <code>i &#60; 10</code>. We'll increment <code>i</code> by 2 each loop with <code>i += 2</code>.",
        "<blockquote>var ourArray = [];<br>for (var i = 0; i &#60; 10; i += 2) {<br>&nbsp;&nbsp;ourArray.push(i);<br>}</blockquote>",
        "<code>ourArray</code> will now contain <code>[0,2,4,6,8]</code>.",
        "Let's change our <code>initialization</code> so we can count by odd numbers.",
        "<hr>",
        "Push the odd numbers from 1 through 9 to <code>myArray</code> using a <code>for</code> loop."
      ],
      "solutions": [
        "var ourArray = [];\nfor (var i = 0; i < 10; i += 2) {\n  ourArray.push(i);\n}\nvar myArray = [];\nfor (var i = 1; i < 10; i += 2) {\n  myArray.push(i);\n}"
      ],
      "tests": [
        {
          "text": "You should be using a <code>for</code> loop for this.",
          "testString": "assert(code.match(/for\\s*\\(/g).length > 1, 'You should be using a <code>for</code> loop for this.');"
        },
        {
          "text": "<code>myArray</code> should equal <code>[1,3,5,7,9]</code>.",
          "testString": "assert.deepEqual(myArray, [1,3,5,7,9], '<code>myArray</code> should equal <code>[1,3,5,7,9]</code>.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Itera por los números pares con un ciclo for",
          "description": [
            "Los ciclos <code>for</code> no siempre iteran incrementado de a uno. Cambiando nuestra <code>expresión final</code>, podemos contar los números pares.",
            "Vamos a empezar con <code>i = 0</code> e iterar mientras <code>i <10</code>.  Vamos a incrementar <code>i</code> de a 2 en cada iteración <code>i + = 2</code>. ",
            "<code>var ourArray = [];</code>",
            "<code>for (var i = 0; i < 10; i += 2) {</code>",
            "<code>&nbsp;&nbsp;ourArray.push(i);</code>",
            "<code>}</code>",
            "<code>ourArray</code> ahora contendrá <code>[0,2,4,6,8]</code>.",
            "Vamos a cambiar nuestra <code>inicialización</code> y <code>expresión final</code> para que podamos contar los números impares.",
            "<h4>Instrucciones</h4>",
            "Empuja los números impares del 1 al 9 en <code>myArray</code> utilizando un ciclo <code>for</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourArray = [];",
            "",
            "for (var i = 0; i < 10; i += 2) {",
            "  ourArray.push(i);",
            "}",
            "",
            "// Setup",
            "var myArray = [];",
            "",
            "// Only change code below this line.",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          ]
        }
      }
    },
    {
      "id": "56105e7b514f539506016a5e",
      "title": "Count Backwards With a For Loop",
      "description": [
        "A for loop can also count backwards, so long as we can define the right conditions.",
        "In order to count backwards by twos, we'll need to change our <code>initialization</code>, <code>condition</code>, and <code>final-expression</code>.",
        "We'll start at <code>i = 10</code> and loop while <code>i &#62; 0</code>. We'll decrement <code>i</code> by 2 each loop with <code>i -= 2</code>.",
        "<blockquote>var ourArray = [];<br>for (var i=10; i &#62; 0; i-=2) {<br>&nbsp;&nbsp;ourArray.push(i);<br>}</blockquote>",
        "<code>ourArray</code> will now contain <code>[10,8,6,4,2]</code>.",
        "Let's change our <code>initialization</code> and <code>final-expression</code> so we can count backward by twos by odd numbers.",
        "<hr>",
        "Push the odd numbers from 9 through 1 to <code>myArray</code> using a <code>for</code> loop."
      ],
      "solutions": [
        "var ourArray = [];\nfor (var i = 10; i > 0; i -= 2) {\n  ourArray.push(i);\n}\nvar myArray = [];\nfor (var i = 9; i > 0; i -= 2) {\n  myArray.push(i);\n}"
      ],
      "tests": [
        {
          "text": "You should be using a <code>for</code> loop for this.",
          "testString": "assert(code.match(/for\\s*\\(/g).length > 1, 'You should be using a <code>for</code> loop for this.');"
        },
        {
          "text": "You should be using the array method <code>push</code>.",
          "testString": "assert(code.match(/myArray.push/), 'You should be using the array method <code>push</code>.');"
        },
        {
          "text": "<code>myArray</code> should equal <code>[9,7,5,3,1]</code>.",
          "testString": "assert.deepEqual(myArray, [9,7,5,3,1], '<code>myArray</code> should equal <code>[9,7,5,3,1]</code>.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Cuenta hacia atrás con un ciclo for",
          "description": [
            "Un ciclo también puede contar hacia atrás, siempre y cuando definamos las condiciones adecuadas.",
            "Para contar hacia atrás de dos en dos, tendremos que cambiar nuestra <code>inicialización</code>, la <code>condición</code> y la <code>última-expresión</code>.",
            "Vamos a empezar con <code>i = 10</code> e iteraremos mientras <code>i > 0</code>.  Vamos a decrementar <code>i</code> de a 2 por cada iteración con <code>i -= 2</code>. ",
            "<code>var ourArray = [];</code>",
            "<code>for (var i = 10; i > 0; i -= 2) {</code>",
            "<code>&nbsp;&nbsp;ourArray.push(i);</code>",
            "<code>}</code>",
            "<code>ourArray</code> ahora contendrá <code>[10,8,6,4,2]</code>.",
            "Vamos a cambiar nuestra <code>inicialización</code> y la <code>expresión final</code> para que podamos contar hacia atrás de dos en dos pero números impares.",
            "<h4>Instrucciones</h4>",
            "Empuja los números impares del 9 a 1 en <code>myArray</code> utilizando un ciclo <code>for</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourArray = [];",
            "",
            "for (var i = 10; i > 0; i -= 2) {",
            "  ourArray.push(i);",
            "}",
            "",
            "// Setup",
            "var myArray = [];",
            "",
            "// Only change code below this line.",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          ]
        }
      }
    },
    {
      "id": "5675e877dbd60be8ad28edc6",
      "title": "Iterate Through an Array with a For Loop",
      "description": [
        "A common task in JavaScript is to iterate through the contents of an array. One way to do that is with a <code>for</code> loop. This code will output each element of the array <code>arr</code> to the console:",
        "<blockquote>var arr = [10,9,8,7,6];<br>for (var i = 0; i < arr.length; i++) {<br>&nbsp;&nbsp; console.log(arr[i]);<br>}</blockquote>",
        "Remember that Arrays have zero-based numbering, which means the last index of the array is length - 1. Our <dfn>condition</dfn> for this loop is <code>i < arr.length</code>, which stops when <code>i</code> is at length - 1.",
        "<hr>",
        "Declare and initialize a variable <code>total</code> to <code>0</code>. Use a <code>for</code> loop to add the value of each element of the <code>myArr</code> array to <code>total</code>."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var ourArr = [ 9, 10, 11, 12];\nvar ourTotal = 0;\n\nfor (var i = 0; i < ourArr.length; i++) {\n  ourTotal += ourArr[i];\n}\n\nvar myArr = [ 2, 3, 4, 5, 6];\nvar total = 0;\n\nfor (var i = 0; i < myArr.length; i++) {\n  total += myArr[i];\n}"
      ],
      "tests": [
        {
          "text": "<code>total</code> should be declared and initialized to 0",
          "testString": "assert(code.match(/var.*?total\\s*=\\s*0.*?;/), '<code>total</code> should be declared and initialized to 0');"
        },
        {
          "text": "<code>total</code> should equal 20",
          "testString": "assert(total === 20, '<code>total</code> should equal 20');"
        },
        {
          "text": "You should use a <code>for</code> loop to iterate through <code>myArr</code>",
          "testString": "assert(code.match(/for\\s*\\(/g).length > 1 && code.match(/myArr\\s*\\[/), 'You should use a <code>for</code> loop to iterate through <code>myArr</code>');"
        },
        {
          "text": "Do not set <code>total</code> to 20 directly",
          "testString": "assert(!code.match(/total[\\s\\+\\-]*=\\s*(\\d(?!\\s*[;,])|[1-9])/g), 'Do not set <code>total</code> to 20 directly');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Iterar a través de un vector con un ciclo for",
          "description": [
            "Una tarea común en JavaScript es iterar a traves del contenido de un vector. Una manera de hacerlo es con un ciclo <code>for</code>. Este código imprimirá cada elemento del vector <code>arr</code> en la consola:",
            "<blockquote>var arr = [10,9,8,7,6];<br>for (var i=0; i < arr.length; i++) {<br>&nbsp;&nbsp; console.log(arr[i]);<br>}</blockquote>",
            "Recuerda que los vectores tienen numeración que comienza en cero, la cual significa que el último índice del vector es su longitud - 1. Nuestra <dfn>condición</dfn> para este ciclo es <code>i < arr.length</code>, que lo detendrá cuando <code>i</code> sea la longitud - 1.",
            "<h4>Instrucciones</h4>",
            "Declara e inicializa una variable <code>total</code> en <code>0</code>. Usa un ciclo <code>for</code> para añadir el valor de cada elemento del vector <code>myArr</code> a <code>total</code>."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "var ourArr = [ 9, 10, 11, 12];",
            "var ourTotal = 0;",
            "",
            "for (var i = 0; i < ourArr.length; i++) {",
            "  ourTotal += ourArr[i];",
            "}",
            "",
            "// Setup",
            "var myArr = [ 2, 3, 4, 5, 6];",
            "",
            "// Only change code below this line",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){if(typeof total !== 'undefined') { return \"total = \" + total; } else { return \"total is undefined\";}})()"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244e1",
      "title": "Nesting For Loops",
      "description": [
        "If you have a multi-dimensional array, you can use the same logic as the prior waypoint to loop through both the array and any sub-arrays. Here is an example:",
        "<blockquote>var arr = [<br>&nbsp;&nbsp;[1,2], [3,4], [5,6]<br>];<br>for (var i=0; i &lt; arr.length; i++) {<br>&nbsp;&nbsp;for (var j=0; j &lt; arr[i].length; j++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(arr[i][j]);<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "This outputs each sub-element in <code>arr</code> one at a time. Note that for the inner loop, we are checking the <code>.length</code> of <code>arr[i]</code>, since <code>arr[i]</code> is itself an array.",
        "<hr>",
        "Modify function <code>multiplyAll</code> so that it multiplies the <code>product</code> variable by each number in the sub-arrays of <code>arr</code>"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function multiplyAll(arr) {\n  var product = 1;\n  for (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      product *= arr[i][j];\n    }\n  }\n  return product;\n}\n\nmultiplyAll([[1,2],[3,4],[5,6,7]]);"
      ],
      "tests": [
        {
          "text": "<code>multiplyAll([[1],[2],[3]])</code> should return <code>6</code>",
          "testString": "assert(multiplyAll([[1],[2],[3]]) === 6, '<code>multiplyAll([[1],[2],[3]])</code> should return <code>6</code>');"
        },
        {
          "text": "<code>multiplyAll([[1,2],[3,4],[5,6,7]])</code> should return <code>5040</code>",
          "testString": "assert(multiplyAll([[1,2],[3,4],[5,6,7]]) === 5040, '<code>multiplyAll([[1,2],[3,4],[5,6,7]])</code> should return <code>5040</code>');"
        },
        {
          "text": "<code>multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]])</code> should return <code>54</code>",
          "testString": "assert(multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]]) === 54, '<code>multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]])</code> should return <code>54</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Anidar ciclos for",
          "description": [
            "Si tienes una matriz multi-dimensional, puedes usar la misma lógica del punto anterior para iterar a través de un vector y cualquier sub-vector. Aquí está un ejemplo:",
            "<blockquote>var arr = [<br>&nbsp;&nbsp;[1,2], [3,4], [5,6]<br>];<br>for (var i=0; i &lt; arr.length; i++) {<br>&nbsp;&nbsp;for (var j=0; j &lt; arr[i].length; j++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(arr[i][j]);<br>&nbsp;&nbsp;}<br>}</blockquote>",
            "Esto imprime cada sub-elemento en <code>arr</code> uno a la vez. Nota que en el ciclo interior, estamos comprobando la longitud <code>.length</code> de <code>arr[i]</code>, ya que <code>arr[i]</code> es por si mismo un vector.",
            "<h4>Instrucciones</h4>",
            "Modifica la función <code>multiplyAll</code> de manera que esta multiplique la variable <code>product</code> por cada número en los sub-vectores de <code>arr</code>"
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function multiplyAll(arr) {",
            "  var product = 1;",
            "  // Only change code below this line",
            "  ",
            "  // Only change code above this line",
            "  return product;",
            "}",
            "",
            "// Modify values below to test your code",
            "multiplyAll([[1,2],[3,4],[5,6,7]]);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a2efd662fb457916e1fe604",
      "title": "Iterate with JavaScript Do...While Loops",
      "description": [
        "You can run the same code multiple times by using a loop.",
        "The next type of loop you will learn is called a \"<code>do...while</code>\" loop because it first will \"<code>do</code>\" one pass of the code inside the loop no matter what, and then it runs \"<code>while</code>\" a specified condition is true and stops once that condition is no longer true. Let's look at an example.",
        "<blockquote>var ourArray = [];<br>var i = 0;<br>do {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>} while (i < 5);</blockquote>",
        "This behaves just as you would expect with any other type of loop, and the resulting array will look like <code>[0, 1, 2, 3, 4]</code>. However, what makes the <code>do...while</code> different from other loops is how it behaves when the condition fails on the first check. Let's see this in action.",
        "Here is a regular while loop that will run the code in the loop as long as <code>i < 5</code>.",
        "<blockquote>var ourArray = []; <br>var i = 5;<br>while (i < 5) {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>}</blockquote>",
        "Notice that we initialize the value of <code>i</code> to be 5. When we execute the next line, we notice that <code>i</code> is not less than 5. So we do not execute the code inside the loop. The result is that <code>ourArray</code> will end up with nothing added to it, so it will still look like this <code>[]</code> when all the code in the example above finishes running.",
        "Now, take a look at a <code>do...while</code> loop.",
        "<blockquote>var ourArray = []; <br>var i = 5;<br>do {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>} while (i < 5);</blockquote>",
        "In this case, we initialize the value of <code>i</code> as 5, just like we did with the while loop. When we get to the next line, there is no check for the value of <code>i</code>, so we go to the code inside the curly braces and execute it. We will add one element to the array and increment <code>i</code> before we get to the condition check. Then, when we get to checking if <code>i < 5</code> see that <code>i</code> is now 6, which fails the conditional check. So we exit the loop and are done. At the end of the above example, the value of <code>ourArray</code> is <code>[5]</code>.",
        "Essentially, a <code>do...while</code> loop ensures that the code inside the loop will run at least once.",
        "Let's try getting a <code>do...while</code> loop to work by pushing values to an array.",
        "<hr>",
        "Change the <code>while</code> loop in the code to a <code>do...while</code> loop so that the loop will push the number 10 to <code>myArray</code>, and <code>i</code> will be equal to <code>11</code> when your code finishes running."
      ],
      "solutions": [
        "var myArray = [];\nvar i = 10;\ndo {\n  myArray.push(i);\n  i++;\n} while (i < 5)"
      ],
      "tests": [
        {
          "text": "You should be using a <code>do...while</code> loop for this.",
          "testString": "assert(code.match(/do/g), 'You should be using a <code>do...while</code> loop for this.');"
        },
        {
          "text": "<code>myArray</code> should equal <code>[10]</code>.",
          "testString": "assert.deepEqual(myArray, [10], '<code>myArray</code> should equal <code>[10]</code>.');"
        },
        {
          "text": "<code>i</code> should equal <code>11</code>",
          "testString": "assert.deepEqual(i, 11, '<code>i</code> should equal <code>11</code>');"
        }
      ],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Setup",
            "var myArray = [];",
            "var i = 10;",
            "",
            "// Only change code below this line.",
            "",
            "while (i < 5) {",
            "  myArray.push(i);",
            "  i++;",
            "}",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          ]
        }
      }
    },
    {
      "id": "5688e62ea601b2482ff8422b",
      "title": "Profile Lookup",
      "description": [
        "We have an array of objects representing different people in our contacts lists.",
        "A <code>lookUpProfile</code> function that takes <code>name</code> and a property (<code>prop</code>) as arguments has been pre-written for you.",
        "The function should check if <code>name</code> is an actual contact's <code>firstName</code> and the given property (<code>prop</code>) is a property of that contact.",
        "If both are true, then return the \"value\" of that property.",
        "If <code>name</code> does not correspond to any contacts then return <code>\"No such contact\"</code>",
        "If <code>prop</code> does not correspond to any valid properties of a contact found to match <code>name</code> then return <code>\"No such property\"</code>"
      ],
      "releasedOn": "January 8, 2016",
      "solutions": [
        "var contacts = [\n    {\n        \"firstName\": \"Akira\",\n        \"lastName\": \"Laine\",\n        \"number\": \"0543236543\",\n        \"likes\": [\"Pizza\", \"Coding\", \"Brownie Points\"]\n    },\n    {\n        \"firstName\": \"Harry\",\n        \"lastName\": \"Potter\",\n        \"number\": \"0994372684\",\n        \"likes\": [\"Hogwarts\", \"Magic\", \"Hagrid\"]\n    },\n    {\n        \"firstName\": \"Sherlock\",\n        \"lastName\": \"Holmes\",\n        \"number\": \"0487345643\",\n        \"likes\": [\"Intriguing Cases\", \"Violin\"]\n    },\n    {\n        \"firstName\": \"Kristian\",\n        \"lastName\": \"Vos\",\n        \"number\": \"unknown\",\n        \"likes\": [\"JavaScript\", \"Gaming\", \"Foxes\"]\n    },\n];\n\n\n//Write your function in between these comments\nfunction lookUpProfile(name, prop){\n    for(var i in contacts){\n      if(contacts[i].firstName === name) {\n        return contacts[i][prop] || \"No such property\";\n      }\n    }\n   return \"No such contact\";\n}\n//Write your function in between these comments\n\nlookUpProfile(\"Akira\", \"likes\");"
      ],
      "tests": [
        {
          "text": "<code>\"Kristian\", \"lastName\"</code> should return <code>\"Vos\"</code>",
          "testString": "assert(lookUpProfile('Kristian','lastName') === \"Vos\", '<code>\"Kristian\", \"lastName\"</code> should return <code>\"Vos\"</code>');"
        },
        {
          "text": "<code>\"Sherlock\", \"likes\"</code> should return <code>[\"Intriguing Cases\", \"Violin\"]</code>",
          "testString": "assert.deepEqual(lookUpProfile(\"Sherlock\", \"likes\"), [\"Intriguing Cases\", \"Violin\"], '<code>\"Sherlock\", \"likes\"</code> should return <code>[\"Intriguing Cases\", \"Violin\"]</code>');"
        },
        {
          "text": "<code>\"Harry\",\"likes\"</code> should return an array",
          "testString": "assert(typeof lookUpProfile(\"Harry\", \"likes\") === \"object\", '<code>\"Harry\",\"likes\"</code> should return an array');"
        },
        {
          "text": "<code>\"Bob\", \"number\"</code> should return \"No such contact\"",
          "testString": "assert(lookUpProfile(\"Bob\", \"number\") === \"No such contact\", '<code>\"Bob\", \"number\"</code> should return \"No such contact\"');"
        },
        {
          "text": "<code>\"Bob\", \"potato\"</code> should return \"No such contact\"",
          "testString": "assert(lookUpProfile(\"Bob\", \"potato\") === \"No such contact\", '<code>\"Bob\", \"potato\"</code> should return \"No such contact\"');"
        },
        {
          "text": "<code>\"Akira\", \"address\"</code> should return \"No such property\"",
          "testString": "assert(lookUpProfile(\"Akira\", \"address\") === \"No such property\", '<code>\"Akira\", \"address\"</code> should return \"No such property\"');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Búsqueda de perfiles",
          "description": [
            "Tenemos un vector de objetos que representan diferentes personas en nuestra lista de contactos.",
            "Una función <code>lookUp</code> que recibe el nombre (<code>firstName</code>) y una propiedad (<code>prop</code>) como argumentos ya ha sido escrita previamente para ti.",
            "La función debe comprobar si <code>firstName</code> es un nombre (<code>firstName</code>) de algún contacto y si la propiedad dada (<code>prop</code>) es una propiedad de ese contacto.",
            "Si ambos son verdaderos, entonces retorna el valor (<code>value</code>) de esa propiedad.",
            "Si <code>firstName</code> no corresponde a ningun contacto entonces retorna <code>\"No such contact\"</code>",
            "Si <code>prop</code> no corresponde a ninguna propiedad válida entonces retorna <code>\"No such property\"</code>",
            ""
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "//Setup",
            "var contacts = [",
            "    {",
            "        \"firstName\": \"Akira\",",
            "        \"lastName\": \"Laine\",",
            "        \"number\": \"0543236543\",",
            "        \"likes\": [\"Pizza\", \"Coding\", \"Brownie Points\"]",
            "    },",
            "    {",
            "        \"firstName\": \"Harry\",",
            "        \"lastName\": \"Potter\",",
            "        \"number\": \"0994372684\",",
            "        \"likes\": [\"Hogwarts\", \"Magic\", \"Hagrid\"]",
            "    },",
            "    {",
            "        \"firstName\": \"Sherlock\",",
            "        \"lastName\": \"Holmes\",",
            "        \"number\": \"0487345643\",",
            "        \"likes\": [\"Intriguing Cases\", \"Violin\"]",
            "    },",
            "    {",
            "        \"firstName\": \"Kristian\",",
            "        \"lastName\": \"Vos\",",
            "        \"number\": \"unknown\",",
            "        \"likes\": [\"JavaScript\", \"Gaming\", \"Foxes\"]",
            "    }",
            "];",
            "",
            "",
            "function lookUpProfile(name, prop){",
            "// Only change code below this line",
            "",
            "// Only change code above this line",
            "}",
            "",
            "// Change these values to test your function",
            "lookUpProfile(\"Akira\", \"likes\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb9bdef",
      "title": "Generate Random Fractions with JavaScript",
      "description": [
        "Random numbers are useful for creating random behavior.",
        "JavaScript has a <code>Math.random()</code> function that generates a random decimal number between <code>0</code> (inclusive) and not quite up to <code>1</code> (exclusive). Thus <code>Math.random()</code> can return a <code>0</code> but never quite return a <code>1</code>",
        "<strong>Note</strong><br>Like <a href='storing-values-with-the-assignment-operator' target='_blank'>Storing Values with the Equal Operator</a>, all function calls will be resolved before the <code>return</code> executes, so we can <code>return</code> the value of the <code>Math.random()</code> function.",
        "<hr>",
        "Change <code>randomFraction</code> to return a random number instead of returning <code>0</code>."
      ],
      "solutions": [
        "function randomFraction() {\n  return Math.random();\n}"
      ],
      "tests": [
        {
          "text": "<code>randomFraction</code> should return a random number.",
          "testString": "assert(typeof randomFraction() === \"number\", '<code>randomFraction</code> should return a random number.');"
        },
        {
          "text": "The number returned by <code>randomFraction</code> should be a decimal.",
          "testString": "assert((randomFraction()+''). match(/\\./g), 'The number returned by <code>randomFraction</code> should be a decimal.');"
        },
        {
          "text": "You should be using <code>Math.random</code> to generate the random decimal number.",
          "testString": "assert(code.match(/Math\\.random/g).length >= 0, 'You should be using <code>Math.random</code> to generate the random decimal number.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Generar fracciones al azar con JavaScript",
          "description": [
            "Los números aleatorios son útiles para crear un comportamiento aleatorio.",
            "JavaScript tiene una función <code>Math.random()</code> que genera un número decimal aleatorio.",
            "<h4>Instrucciones</h4>",
            "Cambia <code>randomFraction</code> para que devuelva un número al azar en lugar de devolver <code>0</code>.",
            "Ten en cuenta que puedes retornar lo retornado por una función, igual que harías para devolver una variable o valor."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function randomFraction() {",
            "",
            "  // Only change code below this line.",
            "",
            "  return 0;",
            "",
            "  // Only change code above this line.",
            "}"
          ],
          "head": [],
          "tail": [
            "(function(){return randomFraction();})();"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c12feddfaeb1bdef",
      "title": "Generate Random Whole Numbers with JavaScript",
      "description": [
        "It's great that we can generate random decimal numbers, but it's even more useful if we use it to generate random whole numbers.",
        "<ol><li>Use <code>Math.random()</code> to generate a random decimal.</li><li>Multiply that random decimal by <code>20</code>.</li><li>Use another function, <code>Math.floor()</code> to round the number down to its nearest whole number.</li></ol>",
        "Remember that <code>Math.random()</code> can never quite return a <code>1</code> and, because we're rounding down, it's impossible to actually get <code>20</code>. This technique will give us a whole number between <code>0</code> and <code>19</code>.",
        "Putting everything together, this is what our code looks like:",
        "<code>Math.floor(Math.random() * 20);</code>",
        "We are calling <code>Math.random()</code>, multiplying the result by 20, then passing the value to <code>Math.floor()</code> function to round the value down to the nearest whole number.",
        "<hr>",
        "Use this technique to generate and return a random whole number between <code>0</code> and <code>9</code>."
      ],
      "solutions": [
        "var randomNumberBetween0and19 = Math.floor(Math.random() * 20);\nfunction randomWholeNum() {\n  return Math.floor(Math.random() * 10);\n}"
      ],
      "tests": [
        {
          "text": "The result of <code>randomWholeNum</code> should be a whole number.",
          "testString": "assert(typeof randomWholeNum() === \"number\" && (function(){var r = randomWholeNum();return Math.floor(r) === r;})(), 'The result of <code>randomWholeNum</code> should be a whole number.');"
        },
        {
          "text": "You should be using <code>Math.random</code> to generate a random number.",
          "testString": "assert(code.match(/Math.random/g).length > 1, 'You should be using <code>Math.random</code> to generate a random number.');"
        },
        {
          "text": "You should have multiplied the result of <code>Math.random</code> by 10 to make it a number that is between zero and nine.",
          "testString": "assert(code.match(/\\s*?Math.random\\s*?\\(\\s*?\\)\\s*?\\*\\s*?10[\\D]\\s*?/g) || code.match(/\\s*?10\\s*?\\*\\s*?Math.random\\s*?\\(\\s*?\\)\\s*?/g), 'You should have multiplied the result of <code>Math.random</code> by 10 to make it a number that is between zero and nine.');"
        },
        {
          "text": "You should use <code>Math.floor</code> to remove the decimal part of the number.",
          "testString": "assert(code.match(/Math.floor/g).length > 1, 'You should use <code>Math.floor</code> to remove the decimal part of the number.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Genera números aleatorios enteros con JavaScript",
          "description": [
            "Es muy bueno que podamos generar números decimales al azar, pero es aún más útil si lo utilizamos para generar números enteros aleatorios.",
            "En primer lugar, vamos a usar <code>Math.random()</code> para generar un decimal aleatorio.",
            "Entonces vamos a multiplicar este decimal azar por 20.",
            "Por último, vamos a usar otra función, <code>Math.floor()</code> para redondear el número hasta su número entero más próximo.",
            "Esta técnica nos da un número entero entre 0 y 19.",
            "Tenga en cuenta que debido a que estamos redondeando, es imposible obtener 20.",
            "Poniendo todo junto, así es como se ve nuestro código:",
            "<code>Math.floor(Math.random() * 20);</code>",
            "¿Ves como <code>Math.floor</code> toma <code>(Math.random() * 20)</code> como su argumento? Así es - puedes pasar el resultado de un función como argumento de otra función.",
            "<h4>Instrucciones</h4>",
            "Usa esta técnica para generar y devolver un número entero aleatorio entre 0 y 9."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var randomNumberBetween0and19 = Math.floor(Math.random() * 20);",
            "",
            "function randomWholeNum() {",
            "",
            "  // Only change code below this line.",
            "",
            "  return Math.random();",
            "}"
          ],
          "head": [],
          "tail": [
            "(function(){return randomWholeNum();})();"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c12feddfaeb2bdef",
      "title": "Generate Random Whole Numbers within a Range",
      "description": [
        "Instead of generating a random number between zero and a given number like we did before, we can generate a random number that falls within a range of two specific numbers.",
        "To do this, we'll define a minimum number <code>min</code> and a maximum number <code>max</code>.",
        "Here's the formula we'll use. Take a moment to read it and try to understand what this code is doing:",
        "<code>Math.floor(Math.random() * (max - min + 1)) + min</code>",
        "<hr>",
        "Create a function called <code>randomRange</code> that takes a range <code>myMin</code> and <code>myMax</code> and returns a random number that's greater than or equal to <code>myMin</code>, and is less than or equal to <code>myMax</code>, inclusive."
      ],
      "solutions": [
        "function randomRange(myMin, myMax) {\n  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;\n}"
      ],
      "tests": [
        {
          "text": "The lowest random number that can be generated by <code>randomRange</code> should be equal to your minimum number, <code>myMin</code>.",
          "testString": "assert(calcMin === 5, 'The lowest random number that can be generated by <code>randomRange</code> should be equal to your minimum number, <code>myMin</code>.');"
        },
        {
          "text": "The highest random number that can be generated by <code>randomRange</code> should be equal to your maximum number, <code>myMax</code>.",
          "testString": "assert(calcMax === 15, 'The highest random number that can be generated by <code>randomRange</code> should be equal to your maximum number, <code>myMax</code>.');"
        },
        {
          "text": "The random number generated by <code>randomRange</code> should be an integer, not a decimal.",
          "testString": "assert(randomRange(0,1) % 1 === 0 , 'The random number generated by <code>randomRange</code> should be an integer, not a decimal.');"
        },
        {
          "text": "<code>randomRange</code> should use both <code>myMax</code> and <code>myMin</code>, and return a random number in your range.",
          "testString": "assert((function(){if(code.match(/myMax/g).length > 1 && code.match(/myMin/g).length > 2 && code.match(/Math.floor/g) && code.match(/Math.random/g)){return true;}else{return false;}})(), '<code>randomRange</code> should use both <code>myMax</code> and <code>myMin</code>, and return a random number in your range.');"
        }
      ],
      "challengeType": 1,
      "translations": {
        "es": {
          "title": "Genera números aleatorios enteros dentro de un rango",
          "description": [
            "En lugar de generar un número aleatorio entre cero y un número dado como lo hicimos antes, podemos generar un número aleatorio que caiga dentro de un rango de dos números específicos.",
            "Para ello, vamos a definir un número mínimo <code>min</code> y un número máximo <code>max</code>.",
            "He aquí la fórmula que utilizaremos. Tómate un momento para leer y tratar de entender lo que el código está haciendo: ",
            "<code>Math.floor(Math.random() * (max - min + 1)) + min</code>",
            "Definir dos variables: <code>myMin</code> y <code>myMax</code>, y asignales valores enteros.",
            "<h4>Instrucciones</h4>",
            "A continuación, crea una función llamada <code>myFunction</code> que devuelva un número aleatorio mayor o igual a <code>myMin</code>, y menor o igual a <code>myMax</code>. "
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Example",
            "function ourRandomRange(ourMin, ourMax) {",
            "",
            "  return Math.floor(Math.random() * (ourMax - ourMin + 1)) + ourMin;",
            "}",
            "",
            "ourRandomRange(1, 9);",
            "",
            "// Only change code below this line.",
            "",
            "function randomRange(myMin, myMax) {",
            "",
            "  return 0; // Change this line",
            "",
            "}",
            "",
            "// Change these values to test your function",
            "var myRandom = randomRange(5, 15);"
          ],
          "head": [],
          "tail": [
            "var calcMin = 100;",
            "var calcMax = -100;",
            "for(var i = 0; i < 100; i++) {",
            "  var result = randomRange(5,15);",
            "  calcMin = Math.min(calcMin, result);",
            "  calcMax = Math.max(calcMax, result);",
            "}",
            "(function(){",
            "  if(typeof myRandom === 'number') {",
            "    return \"myRandom = \" + myRandom;",
            "  } else {",
            "    return \"myRandom undefined\";",
            "  }",
            "})();"
          ]
        }
      }
    },
    {
      "id": "587d7b7e367417b2b2512b23",
      "title": "Use the parseInt Function",
      "description": [
        "The <code>parseInt()</code> function parses a string and returns an integer. Here's an example:",
        "<code>var a = parseInt(\"007\");</code>",
        "The above function converts the string \"007\" to an integer 7. If the first character in the string can't be converted into a number, then it returns <code>NaN</code>.",
        "<hr>",
        "Use <code>parseInt()</code> in the <code>convertToInteger</code> function so it converts the input string <code>str</code> into an integer, and returns it."
      ],
      "solutions": [],
      "tests": [
        {
          "text": "<code>convertToInteger</code> should use the <code>parseInt()</code> function",
          "testString": "assert(/parseInt/g.test(code), '<code>convertToInteger</code> should use the <code>parseInt()</code> function');"
        },
        {
          "text": "<code>convertToInteger(\"56\")</code> should return a number",
          "testString": "assert(typeof(convertToInteger(\"56\")) === \"number\", '<code>convertToInteger(\"56\")</code> should return a number');"
        },
        {
          "text": "<code>convertToInteger(\"56\")</code> should return 56",
          "testString": "assert(convertToInteger(\"56\") === 56, '<code>convertToInteger(\"56\")</code> should return 56');"
        },
        {
          "text": "<code>convertToInteger(\"77\")</code> should return 77",
          "testString": "assert(convertToInteger(\"77\") === 77, '<code>convertToInteger(\"77\")</code> should return 77');"
        },
        {
          "text": "<code>convertToInteger(\"JamesBond\")</code> should return NaN",
          "testString": "assert.isNaN(convertToInteger(\"JamesBond\"), '<code>convertToInteger(\"JamesBond\")</code> should return NaN');"
        }
      ],
      "challengeType": 1,
      "translations": {},
      "releasedOn": "February 17, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function convertToInteger(str) {",
            "  ",
            "}",
            "",
            "convertToInteger(\"56\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7e367417b2b2512b22",
      "title": "Use the parseInt Function with a Radix",
      "description": [
        "The <code>parseInt()</code> function parses a string and returns an integer. It takes a second argument for the radix, which specifies the base of the number in the string. The radix can be an integer between 2 and 36.",
        "The function call looks like:",
        "<code>parseInt(string, radix);</code>",
        "And here's an example:",
        "<code>var a = parseInt(\"11\", 2);</code>",
        "The radix variable says that \"11\" is in the binary system, or base 2. This example converts the string \"11\" to an integer 3.",
        "<hr>",
        "Use <code>parseInt()</code> in the <code>convertToInteger</code> function so it converts a binary number to an integer and returns it."
      ],
      "solutions": [],
      "tests": [
        {
          "text": "<code>convertToInteger</code> should use the <code>parseInt()</code> function",
          "testString": "assert(/parseInt/g.test(code), '<code>convertToInteger</code> should use the <code>parseInt()</code> function');"
        },
        {
          "text": "<code>convertToInteger(\"10011\")</code> should return a number",
          "testString": "assert(typeof(convertToInteger(\"10011\")) === \"number\", '<code>convertToInteger(\"10011\")</code> should return a number');"
        },
        {
          "text": "<code>convertToInteger(\"10011\")</code> should return 19",
          "testString": "assert(convertToInteger(\"10011\") === 19, '<code>convertToInteger(\"10011\")</code> should return 19');"
        },
        {
          "text": "<code>convertToInteger(\"111001\")</code> should return 57",
          "testString": "assert(convertToInteger(\"111001\") === 57, '<code>convertToInteger(\"111001\")</code> should return 57');"
        },
        {
          "text": "<code>convertToInteger(\"JamesBond\")</code> should return NaN",
          "testString": "assert.isNaN(convertToInteger(\"JamesBond\"), '<code>convertToInteger(\"JamesBond\")</code> should return NaN');"
        }
      ],
      "challengeType": 1,
      "releasedOn": "February 17, 2017",
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function convertToInteger(str) {",
            "  ",
            "}",
            "",
            "convertToInteger(\"10011\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7e367417b2b2512b24",
      "title": "Use the Conditional (Ternary) Operator",
      "description": [
        "The <dfn>conditional operator</dfn>, also called the <dfn>ternary operator</dfn>, can be used as a one line if-else expression.",
        "The syntax is:",
        "<code>condition ? statement-if-true : statement-if-false;</code>",
        "The following function uses an if-else statement to check a condition:",
        "<blockquote>function findGreater(a, b) {<br>&nbsp;&nbsp;if(a > b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"a is greater\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"b is greater\";<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "This can be re-written using the <code>conditional operator</code>:",
        "<blockquote>function findGreater(a, b) {<br>&nbsp;&nbsp;return a > b ? \"a is greater\" : \"b is greater\";<br>}</blockquote>",
        "<hr>",
        "Use the <code>conditional operator</code> in the <code>checkEqual</code> function to check if two numbers are equal or not. The function should return either true or false."
      ],
      "solutions": [],
      "tests": [
        {
          "text": "<code>checkEqual</code> should use the <code>conditional operator</code>",
          "testString": "assert(/.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?/gi.test(code), '<code>checkEqual</code> should use the <code>conditional operator</code>');"
        },
        {
          "text": "<code>checkEqual(1, 2)</code> should return false",
          "testString": "assert(checkEqual(1, 2) === false, '<code>checkEqual(1, 2)</code> should return false');"
        },
        {
          "text": "<code>checkEqual(1, 1)</code> should return true",
          "testString": "assert(checkEqual(1, 1) === true, '<code>checkEqual(1, 1)</code> should return true');"
        },
        {
          "text": "<code>checkEqual(1, -1)</code> should return false",
          "testString": "assert(checkEqual(1, -1) === false, '<code>checkEqual(1, -1)</code> should return false');"
        }
      ],
      "challengeType": 1,
      "releasedOn": "February 17, 2017",
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function checkEqual(a, b) {",
            "  ",
            "}",
            "",
            "checkEqual(1, 2);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7e367417b2b2512b21",
      "title": "Use Multiple Conditional (Ternary) Operators",
      "description": [
        "In the previous challenge, you used a single <code>conditional operator</code>. You can also chain them together to check for multiple conditions.",
        "The following function uses if, else if, and else statements to check multiple conditions:",
        "<blockquote>function findGreaterOrEqual(a, b) {<br>&nbsp;&nbsp;if(a === b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"a and b are equal\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else if(a > b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"a is greater\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"b is greater\";<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "The above function can be re-written using multiple <code>conditional operators</code>:",
        "<blockquote>function findGreaterOrEqual(a, b) {<br>&nbsp;&nbsp;return (a === b) ? \"a and b are equal\" : (a > b) ? \"a is greater\" : \"b is greater\";<br>}</blockquote>",
        "<hr>",
        "Use multiple <code>conditional operators</code> in the <code>checkSign</code> function to check if a number is positive, negative or zero."
      ],
      "solutions": [],
      "tests": [
        {
          "text": "<code>checkSign</code> should use multiple <code>conditional operators</code>",
          "testString": "assert(/.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?/gi.test(code), '<code>checkSign</code> should use multiple <code>conditional operators</code>');"
        },
        {
          "text": "<code>checkSign(10)</code> should return \"positive\". Note that capitalization matters",
          "testString": "assert(checkSign(10) === 'positive', '<code>checkSign(10)</code> should return \"positive\". Note that capitalization matters');"
        },
        {
          "text": "<code>checkSign(-12)</code> should return \"negative\". Note that capitalization matters",
          "testString": "assert(checkSign(-12) === 'negative', '<code>checkSign(-12)</code> should return \"negative\". Note that capitalization matters');"
        },
        {
          "text": "<code>checkSign(0)</code> should return \"zero\". Note that capitalization matters",
          "testString": "assert(checkSign(0) === 'zero', '<code>checkSign(0)</code> should return \"zero\". Note that capitalization matters');"
        }
      ],
      "challengeType": 1,
      "releasedOn": "February 17, 2017",
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function checkSign(num) {",
            "  ",
            "}",
            "",
            "checkSign(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7e367417b2b2512b20",
      "title": "Use an Array to Store a Collection of Data",
      "description": [
        "The below is an example of the simplest implementation of an array data structure. This is known as a <dfn>one-dimensional array</dfn>, meaning it only has one level, or that it does not have any other arrays nested within it. Notice it contains <dfn>booleans</dfn>, <dfn>strings</dfn>, and <dfn>numbers</dfn>, among other valid JavaScript data types:",
        "<blockquote>let simpleArray = ['one', 2, 'three’, true, false, undefined, null];<br>console.log(simpleArray.length);<br>// logs 7</blockquote>",
        "All array's have a length property, which as shown above, can be very easily accessed with the syntax <code>Array.length</code>.",
        "A more complex implementation of an array can be seen below. This is known as a <dfn>multi-dimensional array</dfn>, or an array that contains other arrays. Notice that this array also contains JavaScript <dfn>objects</dfn>, which we will examine very closely in our next section, but for now, all you need to know is that arrays are also capable of storing complex objects.",
        "<blockquote>let complexArray = [<br>&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;one: 1,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;two: 2<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;three: 3,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;four: 4<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;],<br>&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a: \"a\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b: \"b\"<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c: \"c\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d: “d”<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;]<br>];</blockquote>",
        "<hr>",
        "We have defined a variable called <code>yourArray</code>. Complete the statement by assigning an array of at least 5 elements in length to the <code>yourArray</code> variable. Your array should contain at least one <dfn>string</dfn>, one <dfn>number</dfn>, and one <dfn>boolean</dfn>."
      ],
      "tests": [
        {
          "text": "yourArray is an array",
          "testString": "assert.strictEqual(Array.isArray(yourArray), true, 'yourArray is an array');"
        },
        {
          "text": "<code>yourArray</code> is at least 5 elements long",
          "testString": "assert.isAtLeast(yourArray.length, 5, '<code>yourArray</code> is at least 5 elements long');"
        },
        {
          "text": "<code>yourArray</code> contains at least one <code>boolean</code>",
          "testString": "assert(yourArray.filter( el => typeof el === 'boolean').length >= 1, '<code>yourArray</code> contains at least one <code>boolean</code>');"
        },
        {
          "text": "<code>yourArray</code> contains at least one <code>number</code>",
          "testString": "assert(yourArray.filter( el => typeof el === 'number').length >= 1, '<code>yourArray</code> contains at least one <code>number</code>');"
        },
        {
          "text": "<code>yourArray</code> contains at least one <code>string</code>",
          "testString": "assert(yourArray.filter( el => typeof el === 'string').length >= 1, '<code>yourArray</code> contains at least one <code>string</code>');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let yourArray; // change this line"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a661e0f1068aca922b3ef17",
      "title": "Access an Array's Contents Using Bracket Notation",
      "description": [
        "The fundamental feature of any data structure is, of course, the ability to not only store data, but to be able to retrieve that data on command. So, now that we've learned how to create an array, let's begin to think about how we can access that array's information.",
        "When we define a simple array as seen below, there are 3 items in it:",
        "<blockquote>let ourArray = [\"a\", \"b\", \"c\"];</blockquote>",
        "In an array, each array item has an <dfn>index</dfn>.  This index doubles as the position of that item in the array, and how you reference it. However, it is important to note, that JavaScript arrays are <dfn>zero-indexed</dfn>, meaning that the first element of an array is actually at the <em><strong>zeroth</strong></em> position, not the first.",
        "In order to retrieve an element from an array we can enclose an index in brackets and append it to the end of an array, or more commonly, to a variable which references an array object. This is known as <dfn>bracket notation</dfn>.",
        "For example, if we want to retrieve the <code>\"a\"</code> from <code>ourArray</code> and assign it to a variable, we can do so with the following code:",
        "<blockquote>let ourVariable = ourArray[0];<br>// ourVariable equals \"a\"</blockquote>",
        "In addition to accessing the value associated with an index, you can also <em>set</em> an index to a value using the same notation:",
        "<blockquote>ourArray[1] = \"not b anymore\";<br>// ourArray now equals [\"a\", \"not b anymore\", \"c\"];</blockquote>",
        "Using bracket notation, we have now reset the item at index 1 from <code>\"b\"</code>, to <code>\"not b anymore\"</code>.",
        "<hr>",
        "In order to complete this challenge, set the 2nd position (index <code>1</code>) of <code>myArray</code> to anything you want, besides <code>\"b\"</code>."
      ],
      "tests": [
        {
          "text": "<code>myArray[0]</code> is equal to <code>\"a\"</code>",
          "testString": "assert.strictEqual(myArray[0], \"a\", '<code>myArray[0]</code> is equal to <code>\"a\"</code>');"
        },
        {
          "text": "<code>myArray[1]</code> is no longer set to <code>\"b\"</code>",
          "testString": "assert.notStrictEqual(myArray[1], \"b\", '<code>myArray[1]</code> is no longer set to <code>\"b\"</code>');"
        },
        {
          "text": "<code>myArray[2]</code> is equal to <code>\"c\"</code>",
          "testString": "assert.strictEqual(myArray[2], \"c\", '<code>myArray[2]</code> is equal to <code>\"c\"</code>');"
        },
        {
          "text": "<code>myArray[3]</code> is equal to <code>\"d\"</code>",
          "testString": "assert.strictEqual(myArray[3], \"d\", '<code>myArray[3]</code> is equal to <code>\"d\"</code>');"
        }
      ],
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let myArray = [\"a\", \"b\", \"c\", \"d\"];",
            "// change code below this line",
            "",
            "//change code above this line",
            "console.log(myArray);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78b2367417b2b2512b0e",
      "title": "Add Items to an Array with push() and unshift()",
      "description": [
        "An array's length, like the data types it can contain, is not fixed. Arrays can be defined with a length of any number of elements, and elements can be added or removed over time; in other words, arrays are <dfn>mutable</dfn>. In this challenge, we will look at two methods with which we can programmatically modify an array: <code>Array.push()</code> and <code>Array.unshift()</code>. ",
        "Both methods take one or more elements as parameters and add those elements to the array the method is being called on; the <code>push()</code> method adds elements to the end of an array, and <code>unshift()</code> adds elements to the beginning. Consider the following:",
        "<blockquote>let twentyThree = 'XXIII';<br>let romanNumerals = ['XXI', 'XXII'];<br><br>romanNumerals.unshift('XIX', 'XX');<br>// now equals ['XIX', 'XX', 'XXI', 'XXII']<br><br>romanNumerals.push(twentyThree);<br>// now equals ['XIX', 'XX', 'XXI', 'XXII', 'XXIII']",
        "Notice that we can also pass variables, which allows us even greater flexibility in dynamically modifying our array's data.",
        "<hr>",
        "We have defined a function, <code>mixedNumbers</code>, which we are passing an array as an argument. Modify the function by using <code>push()</code> and <code>unshift()</code> to add <code>'I', 2, 'three'</code> to the beginning of the array and <code>7, 'VIII', 9</code> to the end so that the returned array contains representations of the numbers 1-9 in order."
      ],
      "tests": [
        {
          "text": "<code>mixedNumbers([\"IV\", 5, \"six\"])</code> should now return <code>[\"I\", 2, \"three\", \"IV\", 5, \"six\", 7, \"VIII\", 9]</code>",
          "testString": "assert.deepEqual(mixedNumbers(['IV', 5, 'six']), ['I', 2, 'three', 'IV', 5, 'six', 7, 'VIII', 9], '<code>mixedNumbers([\"IV\", 5, \"six\"])</code> should now return <code>[\"I\", 2, \"three\", \"IV\", 5, \"six\", 7, \"VIII\", 9]</code>');"
        },
        {
          "text": "The <code>mixedNumbers</code> function should utilize the <code>push()</code> method",
          "testString": "assert.notStrictEqual(mixedNumbers.toString().search(/\\.push\\(/), -1, 'The <code>mixedNumbers</code> function should utilize the <code>push()</code> method');"
        },
        {
          "text": "The <code>mixedNumbers</code> function should utilize the <code>unshift()</code> method",
          "testString": "assert.notStrictEqual(mixedNumbers.toString().search(/\\.unshift\\(/), -1, 'The <code>mixedNumbers</code> function should utilize the <code>unshift()</code> method');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function mixedNumbers(arr) {",
            "  // change code below this line",
            "",
            "  // change code above this line",
            "  return arr;",
            "}",
            "",
            "// do not change code below this line",
            "console.log(mixedNumbers(['IV', 5, 'six']));"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78b2367417b2b2512b0f",
      "title": "Remove Items from an Array with pop() and shift()",
      "description": [
        "Both <code>push()</code> and <code>unshift()</code> have corresponding methods that are nearly functional opposites: <code>pop()</code> and <code>shift()</code>. As you may have guessed by now, instead of adding, <code>pop()</code> <em>removes</em> an element from the end of an array, while <code>shift()</code> removes an element from the beginning. The key difference between <code>pop()</code> and <code>shift()</code> and their cousins <code>push()</code> and <code>unshift()</code>, is that neither method takes parameters, and each only allows an array to be modified by a single element at a time.",
        "Let's take a look:",
        "<blockquote>let greetings = ['whats up?', 'hello', 'see ya!'];<br><br>greetings.pop();<br>// now equals ['whats up?', 'hello']<br><br>greetings.shift();<br>// now equals ['hello']</blockquote>",
        "We can also return the value of the removed element with either method like this:",
        "<blockquote>let popped = greetings.pop();<br>// returns 'hello'<br>// greetings now equals []</blockquote>",
        "<hr>",
        "We have defined a function, <code>popShift</code>, which takes an array as an argument and returns a new array. Modify the function, using <code>pop()</code> and <code>shift()</code>, to remove the first and last elements of the argument array, and assign the removed elements to their corresponding variables, so that the returned array contains their values."
      ],
      "tests": [
        {
          "text": "<code>popShift([\"challenge\", \"is\", \"not\", \"complete\"])</code> should return <code>[\"challenge\", \"complete\"]</code>",
          "testString": "assert.deepEqual(popShift(['challenge', 'is', 'not', 'complete']), [\"challenge\", \"complete\"], '<code>popShift([\"challenge\", \"is\", \"not\", \"complete\"])</code> should return <code>[\"challenge\", \"complete\"]</code>');"
        },
        {
          "text": "The <code>popShift</code> function should utilize the <code>pop()</code> method",
          "testString": "assert.notStrictEqual(popShift.toString().search(/\\.pop\\(/), -1, 'The <code>popShift</code> function should utilize the <code>pop()</code> method');"
        },
        {
          "text": "The <code>popShift</code> function should utilize the <code>shift()</code> method",
          "testString": "assert.notStrictEqual(popShift.toString().search(/\\.shift\\(/), -1, 'The <code>popShift</code> function should utilize the <code>shift()</code> method');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function popShift(arr) {",
            "  let popped; // change this line",
            "  let shifted; // change this line",
            "  return [shifted, popped];",
            "}",
            "",
            "// do not change code below this line",
            "console.log(popShift(['challenge', 'is', 'not', 'complete']));"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78b2367417b2b2512b10",
      "title": "Remove Items Using splice()",
      "description": [
        "Ok, so we've learned how to remove elements from the beginning and end of arrays using <code>shift()</code> and <code>pop()</code>, but what if we want to remove an element from somewhere in the middle? Or remove more than one element at once? Well, that's where <code>splice()</code> comes in. <code>splice()</code> allows us to do just that: <strong>remove any number of consecutive elements</strong> from anywhere in an array.",
        "<code>splice()</code> can take up to 3 parameters, but for now, we'll focus on just the first 2. The first two parameters of <code>splice()</code> are integers which represent indexes, or positions, of the array that <code>splice()</code> is being called upon. And remember, arrays are <em>zero-indexed</em>, so to indicate the first element of an array, we would use <code>0</code>. <code>splice()</code>'s first parameter represents the index on the array from which to begin removing elements, while the second parameter indicates the number of elements to delete. For example:",
        "<blockquote>let array = ['today', 'was', 'not', 'so', 'great'];<br><br>array.splice(2, 2);<br>// remove 2 elements beginning with the 3rd element<br>// array now equals ['today', 'was', 'great']</blockquote>",
        "<code>splice()</code> not only modifies the array it's being called on, but it also returns a new array containing the value of the removed elements:",
        "<blockquote>let array = ['I', 'am', 'feeling', 'really', 'happy'];<br><br>let newArray = array.splice(3, 2);<br>// newArray equals ['really', 'happy']</blockquote>",
        "<hr>",
        "We've defined a function, <code>sumOfTen</code>, which takes an array as an argument and returns the sum of that array's elements. Modify the function, using <code>splice()</code>, so that it returns a value of <code>10</code>."
      ],
      "tests": [
        {
          "text": "<code>sumOfTen</code> should return 10",
          "testString": "assert.strictEqual(sumOfTen([2, 5, 1, 5, 2, 1]), 10, '<code>sumOfTen</code> should return 10');"
        },
        {
          "text": "The <code>sumOfTen</code> function should utilize the <code>splice()</code> method",
          "testString": "assert.notStrictEqual(sumOfTen.toString().search(/\\.splice\\(/), -1, 'The <code>sumOfTen</code> function should utilize the <code>splice()</code> method');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function sumOfTen(arr) {",
            "  // change code below this line",
            "  ",
            "  // change code above this line",
            "  return arr.reduce((a, b) => a + b);",
            "}",
            "",
            "// do not change code below this line",
            "console.log(sumOfTen([2, 5, 1, 5, 2, 1]));"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78b3367417b2b2512b11",
      "title": "Add Items Using splice()",
      "description": [
        "Remember in the last challenge we mentioned that <code>splice()</code> can take up to three parameters? Well, we can go one step further with <code>splice()</code> &mdash; in addition to removing elements, we can use that third parameter, which represents one or more elements, to <em>add</em> them as well. This can be incredibly useful for quickly switching out an element, or a set of elements, for another. For instance, let's say you're storing a color scheme for a set of DOM elements in an array, and want to dynamically change a color based on some action:",
        "<blockquote>function colorChange(arr, index, newColor) {<br>&nbsp;&nbsp;arr.splice(index, 1, newColor);<br>&nbsp;&nbsp;return arr;<br>}<br><br>let colorScheme = ['#878787', '#a08794', '#bb7e8c', '#c9b6be', '#d1becf'];<br><br>colorScheme = colorChange(colorScheme, 2, '#332327');<br>// we have removed '#bb7e8c' and added '#332327' in its place<br>// colorScheme now equals ['#878787', '#a08794', '#332327', '#c9b6be', '#d1becf']</blockquote>",
        "This function takes an array of hex values, an index at which to remove an element, and the new color to replace the removed element with. The return value is an array containing a newly modified color scheme! While this example is a bit oversimplified, we can see the value that utilizing <code>splice()</code> to its maximum potential can have.",
        "<hr>",
        "We have defined a function, <code>htmlColorNames</code>, which takes an array of HTML colors as an argument. Modify the function using <code>splice()</code> to remove the first two elements of the array and add <code>'DarkSalmon'</code> and <code>'BlanchedAlmond'</code> in their respective places."
      ],
      "tests": [
        {
          "text": "<code>htmlColorNames</code> should return <code>[\"DarkSalmon\", \"BlanchedAlmond\", \"LavenderBlush\", \"PaleTurqoise\", \"FireBrick\"]</code>",
          "testString": "assert.deepEqual(htmlColorNames(['DarkGoldenRod', 'WhiteSmoke', 'LavenderBlush', 'PaleTurqoise', 'FireBrick']), ['DarkSalmon', 'BlanchedAlmond', 'LavenderBlush', 'PaleTurqoise', 'FireBrick'], '<code>htmlColorNames</code> should return <code>[\"DarkSalmon\", \"BlanchedAlmond\", \"LavenderBlush\", \"PaleTurqoise\", \"FireBrick\"]</code>');"
        },
        {
          "text": "The <code>htmlColorNames</code> function should utilize the <code>splice()</code> method",
          "testString": "assert(/.splice/.test(code), 'The <code>htmlColorNames</code> function should utilize the <code>splice()</code> method');"
        },
        {
          "text": "You should not use <code>shift()</code> or <code>unshift()</code>.",
          "testString": "assert(!/shift|unshift/.test(code), 'You should not use <code>shift()</code> or <code>unshift()</code>.');"
        },
        {
          "text": "You should not use array bracket notation.",
          "testString": "assert(!/\\[\\d\\]\\s*=/.test(code), 'You should not use array bracket notation.');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function htmlColorNames(arr) {",
            "  // change code below this line",
            "  ",
            "  // change code above this line",
            "  return arr;",
            "} ",
            " ",
            "// do not change code below this line",
            "console.log(htmlColorNames(['DarkGoldenRod', 'WhiteSmoke', 'LavenderBlush', 'PaleTurqoise', 'FireBrick']));"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7a367417b2b2512b12",
      "title": "Copy Array Items Using slice()",
      "description": [
        "The next method we will cover is <code>slice()</code>. <code>slice()</code>, rather than modifying an array, copies, or <em>extracts</em>, a given number of elements to a new array, leaving the array it is called upon untouched. <code>slice()</code> takes only 2 parameters &mdash; the first is the index at which to begin extraction, and the second is the index at which to stop extraction (extraction will occur up to, but not including the element at this index). Consider this:",
        "<blockquote>let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];<br><br>let todaysWeather = weatherConditions.slice(1, 3);<br>// todaysWeather equals ['snow', 'sleet'];<br>// weatherConditions still equals ['rain', 'snow', 'sleet', 'hail', 'clear']<br></blockquote>",
        "In effect, we have created a new array by extracting elements from an existing array.",
        "<hr>",
        "We have defined a function, <code>forecast</code>, that takes an array as an argument. Modify the function using <code>slice()</code> to extract information from the argument array and return a new array that contains the elements <code>'warm'</code> and <code>'sunny'</code>."
      ],
      "tests": [
        {
          "text": "<code>forecast</code> should return <code>[\"warm\", \"sunny\"]",
          "testString": "assert.deepEqual(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']), ['warm', 'sunny'], '<code>forecast</code> should return <code>[\"warm\", \"sunny\"]');"
        },
        {
          "text": "The <code>forecast</code> function should utilize the <code>slice()</code> method",
          "testString": "assert(/\\.slice\\(/.test(code), 'The <code>forecast</code> function should utilize the <code>slice()</code> method');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function forecast(arr) {",
            "  // change code below this line",
            "  ",
            "  return arr;",
            "}",
            "",
            "// do not change code below this line",
            "console.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']));"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7b367417b2b2512b13",
      "title": "Copy an Array with the Spread Operator",
      "description": [
        "While <code>slice()</code> allows us to be selective about what elements of an array to copy, among several other useful tasks, ES6's new <dfn>spread operator</dfn> allows us to easily copy <em>all</em> of an array's elements, in order, with a simple and highly readable syntax. The spread syntax simply looks like this: <code>...</code>",
        "In practice, we can use the spread operator to copy an array like so:",
        "<blockquote>let thisArray = [true, true, undefined, false, null];<br>let thatArray = [...thisArray];<br>// thatArray equals [true, true, undefined, false, null]<br>// thisArray remains unchanged, and is identical to thatArray</blockquote>",
        "<hr>",
        "We have defined a function, <code>copyMachine</code> which takes <code>arr</code> (an array) and <code>num</code> (a number) as arguments. The function is supposed to return a new array made up of <code>num</code> copies of <code>arr</code>. We have done most of the work for you, but it doesn't work quite right yet. Modify the function using spread syntax so that it works correctly (hint: another method we have already covered might come in handy here!)."
      ],
      "tests": [
        {
          "text": "<code>copyMachine([true, false, true], 2)</code> should return <code>[[true, false, true], [true, false, true]]</code>",
          "testString": "assert.deepEqual(copyMachine([true, false, true], 2), [[true, false, true], [true, false, true]], '<code>copyMachine([true, false, true], 2)</code> should return <code>[[true, false, true], [true, false, true]]</code>');"
        },
        {
          "text": "<code>copyMachine([1, 2, 3], 5)</code> should return <code>[[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]</code>",
          "testString": "assert.deepEqual(copyMachine([1, 2, 3], 5), [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]], '<code>copyMachine([1, 2, 3], 5)</code> should return <code>[[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]</code>');"
        },
        {
          "text": "<code>copyMachine([true, true, null], 1)</code> should return <code>[[true, true, null]]</code>",
          "testString": "assert.deepEqual(copyMachine([true, true, null], 1), [[true, true, null]], '<code>copyMachine([true, true, null], 1)</code> should return <code>[[true, true, null]]</code>');"
        },
        {
          "text": "<code>copyMachine([\"it works\"], 3)</code> should return <code>[[\"it works\"], [\"it works\"], [\"it works\"]]</code>",
          "testString": "assert.deepEqual(copyMachine(['it works'], 3), [['it works'], ['it works'], ['it works']], '<code>copyMachine([\"it works\"], 3)</code> should return <code>[[\"it works\"], [\"it works\"], [\"it works\"]]</code>');"
        },
        {
          "text": "The <code>copyMachine</code> function should utilize the <code>spread operator</code> with array <code>arr</code>",
          "testString": "assert.notStrictEqual(copyMachine.toString().indexOf('.concat(_toConsumableArray(arr))'), -1, 'The <code>copyMachine</code> function should utilize the <code>spread operator</code> with array <code>arr</code>');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function copyMachine(arr, num) {",
            "  let newArr = [];",
            "  while (num >= 1) {",
            "    // change code below this line",
            "",
            "    // change code above this line",
            "    num--;",
            "  }",
            "  return newArr;",
            "}",
            "",
            "// change code here to test different cases:",
            "console.log(copyMachine([true, false, true], 2));"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7b367417b2b2512b17",
      "title": "Combine Arrays with the Spread Operator",
      "description": [
        "Another huge advantage of the <dfn>spread</dfn> operator, is the ability to combine arrays, or to insert all the elements of one array into another, at any index. With more traditional syntaxes, we can concatenate arrays, but this only allows us to combine arrays at the end of one, and at the start of another. Spread syntax makes the following operation extremely simple:",
        "<blockquote>let thisArray = ['sage', 'rosemary', 'parsley', 'thyme'];<br><br>let thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];<br>// thatArray now equals ['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander']</blockquote>",
        "Using spread syntax, we have just achieved an operation that would have been more more complex and more verbose had we used traditional methods.",
        "<hr>",
        "We have defined a function <code>spreadOut</code> that returns the variable <code>sentence</code>, modify the function using the <dfn>spread</dfn> operator so that it returns the array <code>['learning', 'to', 'code', 'is', 'fun']</code>."
      ],
      "tests": [
        {
          "text": "<code>spreadOut</code> should return <code>[\"learning\", \"to\", \"code\", \"is\", \"fun\"]</code>",
          "testString": "assert.deepEqual(spreadOut(), ['learning', 'to', 'code', 'is', 'fun'], '<code>spreadOut</code> should return <code>[\"learning\", \"to\", \"code\", \"is\", \"fun\"]</code>');"
        },
        {
          "text": "The <code>spreadOut</code> function should utilize spread syntax",
          "testString": "assert.notStrictEqual(spreadOut.toString().search(/[...]/), -1, 'The <code>spreadOut</code> function should utilize spread syntax');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function spreadOut() {",
            "  let fragment = ['to', 'code'];",
            "  let sentence; // change this line",
            "  return sentence;",
            "}",
            "",
            "// do not change code below this line",
            "console.log(spreadOut());"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7b367417b2b2512b14",
      "title": "Check For The Presence of an Element With indexOf()",
      "description": [
        "Since arrays can be changed, or <em>mutated</em>, at any time, there's no guarantee about where a particular piece of data will be on a given array, or if that element even still exists. Luckily, JavaScript provides us with another built-in method, <code>indexOf()</code>, that allows us to quickly and easily check for the presence of an element on an array. <code>indexOf()</code> takes an element as a parameter, and when called, it returns the position, or index, of that element, or <code>-1</code> if the element does not exist on the array.",
        "For example:",
        "<blockquote>let fruits = ['apples', 'pears', 'oranges', 'peaches', 'pears'];<br><br>fruits.indexOf('dates') // returns -1<br>fruits.indexOf('oranges') // returns 2<br>fruits.indexOf('pears') // returns 1, the first index at which the element exists</blockquote>",
        "<hr>",
        "<code>indexOf()</code> can be incredibly useful for quickly checking for the presence of an element on an array. We have defined a function, <code>quickCheck</code>, that takes an array and an element as arguments. Modify the function using <code>indexOf()</code> so that it returns <code>true</code> if the passed element exists on the array, and <code>false</code> if it does not."
      ],
      "tests": [
        {
          "text": "<code>quickCheck([\"squash\", \"onions\", \"shallots\"], \"mushrooms\")</code> should return <code>false</code>",
          "testString": "assert.strictEqual(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'), false, '<code>quickCheck([\"squash\", \"onions\", \"shallots\"], \"mushrooms\")</code> should return <code>false</code>');"
        },
        {
          "text": "<code>quickCheck([\"squash\", \"onions\", \"shallots\"], \"onions\")</code> should return <code>true</code>",
          "testString": "assert.strictEqual(quickCheck(['squash', 'onions', 'shallots'], 'onions'), true, '<code>quickCheck([\"squash\", \"onions\", \"shallots\"], \"onions\")</code> should return <code>true</code>');"
        },
        {
          "text": "<code>quickCheck([3, 5, 9, 125, 45, 2], 125)</code> should return <code>true</code>",
          "testString": "assert.strictEqual(quickCheck([3, 5, 9, 125, 45, 2], 125), true, '<code>quickCheck([3, 5, 9, 125, 45, 2], 125)</code> should return <code>true</code>');"
        },
        {
          "text": "<code>quickCheck([true, false, false], undefined)</code> should return <code>false</code>",
          "testString": "assert.strictEqual(quickCheck([true, false, false], undefined), false, '<code>quickCheck([true, false, false], undefined)</code> should return <code>false</code>');"
        },
        {
          "text": "The <code>quickCheck</code> function should utilize the <code>indexOf()</code> method",
          "testString": "assert.notStrictEqual(quickCheck.toString().search(/\\.indexOf\\(/), -1, 'The <code>quickCheck</code> function should utilize the <code>indexOf()</code> method');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function quickCheck(arr, elem) {",
            "  // change code below this line",
            "",
            "  // change code above this line",
            "}",
            "",
            "// change code here to test different cases:",
            "console.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7b367417b2b2512b15",
      "title": "Iterate Through All an Array's Items Using For Loops",
      "description": [
        "Sometimes when working with arrays, it is very handy to be able to iterate through each item to find one or more elements that we might need, or to manipulate an array based on which data items meet a certain set of criteria. JavaScript offers several built in methods that each iterate over arrays in slightly different ways to achieve different results (such as <code>every()</code>, <code>forEach()</code>, <code>map()</code>, etc.), however the technique which is most flexible and offers us the greatest amount of control is a simple <code>for</code> loop.",
        "Consider the following:",
        "<blockquote>function greaterThanTen(arr) {<br>&nbsp;&nbsp;let newArr = [];<br>&nbsp;&nbsp;for (let i = 0; i < arr.length; i++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (arr[i] > 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newArr.push(arr[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return newArr;<br>}<br><br>greaterThanTen([2, 12, 8, 14, 80, 0, 1]);<br>// returns [12, 14, 80]</blockquote>",
        "Using a <code>for</code> loop, this function iterates through and accesses each element of the array, and subjects it to a simple test that we have created. In this way, we have easily and programmatically determined which data items are greater than <code>10</code>, and returned a new array containing those items.",
        "<hr>",
        "We have defined a function, <code>filteredArray</code>, which takes <code>arr</code>, a nested array, and <code>elem</code> as arguments, and returns a new array. <code>elem</code> represents an element that may or may not be present on one or more of the arrays nested within <code>arr</code>. Modify the function, using a <code>for</code> loop, to return a filtered version of the passed array such that any array nested within <code>arr</code> containing <code>elem</code> has been removed."
      ],
      "tests": [
        {
          "text": "<code>filteredArray([[10, 8, 3], [14, 6, 23], [3, 18, 6]], 18)</code> should return <code>[ [10, 8, 3], [14, 6, 23] ]</code>",
          "testString": "assert.deepEqual(filteredArray([ [10, 8, 3], [14, 6, 23], [3, 18, 6] ], 18), [[10, 8, 3], [14, 6, 23]], '<code>filteredArray([[10, 8, 3], [14, 6, 23], [3, 18, 6]], 18)</code> should return <code>[ [10, 8, 3], [14, 6, 23] ]</code>');"
        },
        {
          "text": "<code>filteredArray([ [\"trumpets\", 2], [\"flutes\", 4], [\"saxophones\", 2] ], 2)</code> should return <code>[ [\"flutes\", 4] ]</code>",
          "testString": "assert.deepEqual(filteredArray([ ['trumpets', 2], ['flutes', 4], ['saxophones', 2] ], 2), [['flutes', 4]], '<code>filteredArray([ [\"trumpets\", 2], [\"flutes\", 4], [\"saxophones\", 2] ], 2)</code> should return <code>[ [\"flutes\", 4] ]</code>');"
        },
        {
          "text": "<code>filteredArray([ [\"amy\", \"beth\", \"sam\"], [\"dave\", \"sean\", \"peter\"] ], \"peter\")</code> should return <code>[ [\"amy\", \"beth\", \"sam\"] ]</code>",
          "testString": "assert.deepEqual(filteredArray([['amy', 'beth', 'sam'], ['dave', 'sean', 'peter']], 'peter'), [['amy', 'beth', 'sam']], '<code>filteredArray([ [\"amy\", \"beth\", \"sam\"], [\"dave\", \"sean\", \"peter\"] ], \"peter\")</code> should return <code>[ [\"amy\", \"beth\", \"sam\"] ]</code>');"
        },
        {
          "text": "<code>filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3)</code> should return <code>[ ]</code>",
          "testString": "assert.deepEqual(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3), [], '<code>filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3)</code> should return <code>[ ]</code>');"
        },
        {
          "text": "The <code>filteredArray</code> function should utilize a <code>for</code> loop",
          "testString": "assert.notStrictEqual(filteredArray.toString().search(/for/), -1, 'The <code>filteredArray</code> function should utilize a <code>for</code> loop');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function filteredArray(arr, elem) {",
            "  let newArr = [];",
            "  // change code below this line",
            "",
            "  // change code above this line",
            "  return newArr;",
            "}",
            "",
            "// change code here to test different cases:",
            "console.log(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3));"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7b367417b2b2512b16",
      "title": "Create complex multi-dimensional arrays",
      "description": [
        "Awesome! You have just learned a ton about arrays! This has been a fairly high level overview, and there is plenty more to learn about working with arrays, much of which you will see in later sections. But before moving on to looking at <dfn>Objects</dfn>, lets take one more look, and see how arrays can become a bit more complex than what we have seen in previous challenges.",
        "One of the most powerful features when thinking of arrays as data structures, is that arrays can contain, or even be completely made up of other arrays. We have seen arrays that contain arrays in previous challenges, but fairly simple ones. However, arrays can contain an infinite depth of arrays that can contain other arrays, each with their own arbitrary levels of depth, and so on. In this way, an array can very quickly become very complex data structure, known as a <dfn>multi-dimensional</dfn>, or nested array. Consider the following example:",
        "<blockquote>let nestedArray = [ // top, or first level - the outer most array<br>&nbsp;&nbsp;['deep'], // an array within an array, 2 levels of depth<br>&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;['deeper'], ['deeper'] // 2 arrays nested 3 levels deep<br>&nbsp;&nbsp;],<br>&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;['deepest'], ['deepest'] // 2 arrays nested 4 levels deep<br>&nbsp;&nbsp;&nbsp;&nbsp;],<br>&nbsp;&nbsp;&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;['deepest-est?'] // an array nested 5 levels deep<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;]<br>];</blockquote>",
        "While this example may seem convoluted, this level of complexity is not unheard of, or even unusual, when dealing with large amounts of data.",
        "However, we can still very easily access the deepest levels of an array this complex with bracket notation:",
        "<blockquote>console.log(nestedArray[2][1][0][0][0]);<br>// logs: deepest-est?</blockquote>",
        "And now that we know where that piece of data is, we can reset it if we need to:",
        "<blockquote>nestedArray[2][1][0][0][0] = 'deeper still';<br><br>console.log(nestedArray[2][1][0][0][0]);<br>// now logs: deeper still</blockquote>",
        "<hr>",
        "We have defined a variable, <code>myNestedArray</code>, set equal to an array. Modify <code>myNestedArray</code>, using any combination of <dfn>strings</dfn>, <dfn>numbers</dfn>, and <dfn>booleans</dfn> for data elements, so that it has exactly five levels of depth (remember, the outer-most array is level 1). Somewhere on the third level, include the string <code>'deep'</code>, on the fourth level, include the string <code>'deeper'</code>, and on the fifth level, include the string <code>'deepest'</code>."
      ],
      "tests": [
        {
          "text": "<code>myNestedArray</code> should contain only numbers, booleans, and strings as data elements",
          "testString": "assert.strictEqual((function(arr) { let flattened = (function flatten(arr) { const flat = [].concat(...arr); return flat.some (Array.isArray) ? flatten(flat) : flat; })(arr); for (let i = 0; i < flattened.length; i++) { if ( typeof flattened[i] !== 'number' && typeof flattened[i] !== 'string' && typeof flattened[i] !== 'boolean') { return false } } return true })(myNestedArray), true, '<code>myNestedArray</code> should contain only numbers, booleans, and strings as data elements');"
        },
        {
          "text": "<code>myNestedArray</code> should have exactly 5 levels of depth",
          "testString": "assert.strictEqual((function(arr) {let depth = 0;function arrayDepth(array, i, d) { if (Array.isArray(array[i])) {  arrayDepth(array[i], 0, d + 1);} else {  depth = (d > depth) ? d : depth;}if (i < array.length) {  arrayDepth(array, i + 1, d);}  }arrayDepth(arr, 0, 0);return depth;})(myNestedArray), 4, '<code>myNestedArray</code> should have exactly 5 levels of depth');"
        },
        {
          "text": "<code>myNestedArray</code> should contain exactly one occurrence of the string <code>\"deep\"</code> on an array nested 3 levels deep",
          "testString": "assert((function howDeep(array, target, depth = 0) {return array.reduce((combined, current) => {if (Array.isArray(current)) {  return combined.concat(howDeep(current, target, depth + 1));} else if (current === target) {  return combined.concat(depth);} else {  return combined;}}, []);})(myNestedArray, 'deep').length === 1 && (function howDeep(array, target, depth = 0) {return array.reduce((combined, current) => {if (Array.isArray(current)) {  return combined.concat(howDeep(current, target, depth + 1));} else if (current === target) {  return combined.concat(depth);} else {  return combined;}}, []);})(myNestedArray, 'deep')[0] === 2, '<code>myNestedArray</code> should contain exactly one occurrence of the string <code>\"deep\"</code> on an array nested 3 levels deep');"
        },
        {
          "text": "<code>myNestedArray</code> should contain exactly one occurrence of the string <code>\"deeper\"</code> on an array nested 4 levels deep",
          "testString": "assert((function howDeep(array, target, depth = 0) {return array.reduce((combined, current) => {if (Array.isArray(current)) {  return combined.concat(howDeep(current, target, depth + 1));} else if (current === target) {  return combined.concat(depth);} else {  return combined;}}, []);})(myNestedArray, 'deeper').length === 1 && (function howDeep(array, target, depth = 0) {return array.reduce((combined, current) => {if (Array.isArray(current)) {  return combined.concat(howDeep(current, target, depth + 1));} else if (current === target) {  return combined.concat(depth);} else {  return combined;}}, []);})(myNestedArray, 'deeper')[0] === 3, '<code>myNestedArray</code> should contain exactly one occurrence of the string <code>\"deeper\"</code> on an array nested 4 levels deep');"
        },
        {
          "text": "<code>myNestedArray</code> should contain exactly one occurrence of the string <code>\"deepest\"</code> on an array nested 5 levels deep",
          "testString": "assert((function howDeep(array, target, depth = 0) {return array.reduce((combined, current) => {if (Array.isArray(current)) {  return combined.concat(howDeep(current, target, depth + 1));} else if (current === target) {  return combined.concat(depth);} else {  return combined;}}, []);})(myNestedArray, 'deepest').length === 1 && (function howDeep(array, target, depth = 0) {return array.reduce((combined, current) => {if (Array.isArray(current)) {  return combined.concat(howDeep(current, target, depth + 1));} else if (current === target) {  return combined.concat(depth);} else {  return combined;}}, []);})(myNestedArray, 'deepest')[0] === 4, '<code>myNestedArray</code> should contain exactly one occurrence of the string <code>\"deepest\"</code> on an array nested 5 levels deep');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let myNestedArray = [",
            "  // change code below this line",
            "  ['unshift', false, 1, 2, 3, 'complex', 'nested'],",
            "  ['loop', 'shift', 6, 7, 1000, 'method'],",
            "  ['concat', false, true, 'spread', 'array'],",
            "  ['mutate', 1327.98, 'splice', 'slice', 'push'],",
            "  ['iterate', 1.3849, 7, '8.4876', 'arbitrary', 'depth']",
            "  // change code above this line",
            "];"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7c367417b2b2512b18",
      "title": "Add Key-Value Pairs to JavaScript Objects",
      "description": [
        "At their most basic, objects are just collections of <dfn>key-value pairs</dfn>, or in other words, pieces of data mapped to unique identifiers that we call <dfn>properties</dfn> or <dfn>keys</dfn>. Let's take a look at a very simple example:",
        "<blockquote>let FCC_User = {<br>&nbsp;&nbsp;username: 'awesome_coder',<br>&nbsp;&nbsp;followers: 572,<br>&nbsp;&nbsp;points: 1741,<br>&nbsp;&nbsp;completedProjects: 15<br>};</blockquote>",
        "The above code defines an object called <code>FCC_User</code> that has four <dfn>properties</dfn>, each of which map to a specific value. If we wanted to know the number of <code>followers</code> <code>FCC_User</code> has, we can access that property by writing:",
        "<blockquote>let userData = FCC_User.followers;<br>// userData equals 572</blockquote>",
        "This is called <dfn>dot notation</dfn>. Alternatively, we can also access the property with brackets, like so:",
        "<blockquote>let userData = FCC_User['followers']<br>// userData equals 572</blockquote>",
        "Notice that with <dfn>bracket notation</dfn>, we enclosed <code>followers</code> in quotes. This is because the brackets actually allow us to pass a variable in to be evaluated as a property name (hint: keep this in mind for later!). Had we passed <code>followers</code> in without the quotes, the JavaScript engine would have attempted to evaluate it as a variable, and a <code>ReferenceError: followers is not defined</code> would have been thrown.",
        "<hr>",
        "Using the same syntax, we can also <em><strong>add new</strong></em> key-value pairs to objects. We've created a <code>foods</code> object with three entries. Add three more entries: <code>bananas</code> with a value of <code>13</code>, <code>grapes</code> with a value of <code>35</code>, and <code>strawberries</code> with a value of <code>27</code>."
      ],
      "tests": [
        {
          "text": "<code>foods</code> is an object",
          "testString": "assert(typeof foods === 'object', '<code>foods</code> is an object');"
        },
        {
          "text": "The <code>foods</code> object has a key <code>\"bananas\"</code> with a value of <code>13</code>",
          "testString": "assert(foods.bananas === 13, 'The <code>foods</code> object has a key <code>\"bananas\"</code> with a value of <code>13</code>');"
        },
        {
          "text": "The <code>foods</code> object has a key <code>\"grapes\"</code> with a value of <code>35</code>",
          "testString": "assert(foods.grapes === 35, 'The <code>foods</code> object has a key <code>\"grapes\"</code> with a value of <code>35</code>');"
        },
        {
          "text": "The <code>foods</code> object has a key <code>\"strawberries\"</code> with a value of <code>27</code>",
          "testString": "assert(foods.strawberries === 27, 'The <code>foods</code> object has a key <code>\"strawberries\"</code> with a value of <code>27</code>');"
        },
        {
          "text": "The key-value pairs should be set using dot or bracket notation",
          "testString": "assert(code.search(/bananas:/) === -1 && code.search(/grapes:/) === -1 && code.search(/strawberries:/) === -1, 'The key-value pairs should be set using dot or bracket notation');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let foods = {",
            "  apples: 25,",
            "  oranges: 32,",
            "  plums: 28",
            "};",
            "",
            "// change code below this line",
            "",
            "// change code above this line",
            "",
            "console.log(foods);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7c367417b2b2512b19",
      "title": "Modify an Object Nested Within an Object",
      "description": [
        "Now let's take a look at a slightly more complex object. Object properties can be nested to an arbitrary depth, and their values can be any type of data supported by JavaScript, including arrays and even other objects. Consider the following:",
        "<blockquote>let nestedObject = {<br>&nbsp;&nbsp;id: 28802695164,<br>&nbsp;&nbsp;date: 'December 31, 2016',<br>&nbsp;&nbsp;data: {<br>&nbsp;&nbsp;&nbsp;&nbsp;totalUsers: 99,<br>&nbsp;&nbsp;&nbsp;&nbsp;online: 80,<br>&nbsp;&nbsp;&nbsp;&nbsp;onlineStatus: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;active: 67,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;away: 13<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>};</blockquote>",
        "<code>nestedObject</code> has three unique keys: <code>id</code>, whose value is a number, <code>date</code> whose value is a string, and <code>data</code>, whose value is an object which has yet another object nested within it. While structures can quickly become complex, we can still use the same notations to access the information we need.",
        "<hr>",
        "Here we've defined an object, <code>userActivity</code>, which includes another object nested within it. You can modify properties on this nested object in the same way you modified properties in the last challenge. Set the value of the <code>online</code> key to <code>45</code>."
      ],
      "tests": [
        {
          "text": "<code>userActivity</code> has <code>id</code>, <code>date</code> and <code>data</code> properties",
          "testString": "assert('id' in userActivity && 'date' in userActivity && 'data' in userActivity, '<code>userActivity</code> has <code>id</code>, <code>date</code> and <code>data</code> properties');"
        },
        {
          "text": "<code>userActivity</code> has a <code>data</code> key set to an object with keys <code>totalUsers</code> and <code>online</code>",
          "testString": "assert('totalUsers' in userActivity.data && 'online' in userActivity.data, '<code>userActivity</code> has a <code>data</code> key set to an object with keys <code>totalUsers</code> and <code>online</code>');"
        },
        {
          "text": "The <code>online</code> property nested in the <code>data</code> key of <code>userActivity</code> should be set to <code>45</code>",
          "testString": "assert(userActivity.data.online === 45, 'The <code>online</code> property nested in the <code>data</code> key of <code>userActivity</code> should be set to <code>45</code>');"
        },
        {
          "text": "The <code>online</code> property is set using dot or bracket notation",
          "testString": "assert.strictEqual(code.search(/online: 45/), -1, 'The <code>online</code> property is set using dot or bracket notation');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let userActivity = {",
            "  id: 23894201352,",
            "  date: 'January 1, 2017',",
            "  data: {",
            "    totalUsers: 51,",
            "    online: 42",
            "  }",
            "};",
            "",
            "// change code below this line",
            "",
            "// change code above this line",
            "",
            "console.log(userActivity);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7c367417b2b2512b1a",
      "title": "Access Property Names with Bracket Notation",
      "description": [
        "In the first object challenge we mentioned the use of bracket notation as a way to access property values using the evaluation of a variable. For instance, imagine that our <code>foods</code> object is being used in a program for a supermarket cash register. We have some function that sets the <code>selectedFood</code> and we want to check our <code>foods</code> object for the presence of that food. This might look like:",
        "<blockquote>let selectedFood = getCurrentFood(scannedItem);<br>let inventory = foods[selectedFood];</blockquote>",
        "This code will evaluate the value stored in the <code>selectedFood</code> variable and return the value of that key in the <code>foods</code> object, or <code>undefined</code> if it is not present. Bracket notation is very useful because sometimes object properties are not known before runtime or we need to access them in a more dynamic way.",
        "<hr>",
        "We've defined a function, <code>checkInventory</code>, which receives a scanned item as an argument. Return the current value of the <code>scannedItem</code> key in the <code>foods</code> object. You can assume that only valid keys will be provided as an argument to <code>checkInventory</code>."
      ],
      "tests": [
        {
          "text": "<code>checkInventory</code> is a function",
          "testString": "assert.strictEqual(typeof checkInventory, 'function', '<code>checkInventory</code> is a function');"
        },
        {
          "text": "The <code>foods</code> object should have only the following key-value pairs: <code>apples: 25</code>, <code>oranges: 32</code>, <code>plums: 28</code>, <code>bananas: 13</code>, <code>grapes: 35</code>, <code>strawberries: 27</code>",
          "testString": "assert.deepEqual(foods, {apples: 25, oranges: 32, plums: 28, bananas: 13, grapes: 35, strawberries: 27}, 'The <code>foods</code> object should have only the following key-value pairs: <code>apples: 25</code>, <code>oranges: 32</code>, <code>plums: 28</code>, <code>bananas: 13</code>, <code>grapes: 35</code>, <code>strawberries: 27</code>');"
        },
        {
          "text": "<code>checkInventory(\"apples\")</code> should return <code>25</code>",
          "testString": "assert.strictEqual(checkInventory('apples'), 25, '<code>checkInventory(\"apples\")</code> should return <code>25</code>');"
        },
        {
          "text": "<code>checkInventory(\"bananas\")</code> should return <code>13</code>",
          "testString": "assert.strictEqual(checkInventory('bananas'), 13, '<code>checkInventory(\"bananas\")</code> should return <code>13</code>');"
        },
        {
          "text": "<code>checkInventory(\"strawberries\")</code> should return <code>27</code>",
          "testString": "assert.strictEqual(checkInventory('strawberries'), 27, '<code>checkInventory(\"strawberries\")</code> should return <code>27</code>');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let foods = {",
            "  apples: 25,",
            "  oranges: 32,",
            "  plums: 28,",
            "  bananas: 13,",
            "  grapes: 35,",
            "  strawberries: 27",
            "};",
            "// do not change code above this line",
            "",
            "function checkInventory(scannedItem) {",
            "  // change code below this line",
            "",
            "}",
            "",
            "// change code below this line to test different cases:",
            "console.log(checkInventory(\"apples\"));"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7c367417b2b2512b1b",
      "title": "Use the delete Keyword to Remove Object Properties",
      "description": [
        "Now you know what objects are and their basic features and advantages. In short, they are key-value stores which provide a flexible, intuitive way to structure data, <strong><em>and</em></strong>, they provide very fast lookup time. Throughout the rest of these challenges, we will describe several common operations you can perform on objects so you can become comfortable applying these useful data structures in your programs.",
        "In earlier challenges, we have both added to and modified an object's key-value pairs. Here we will see how we can <em>remove</em> a key-value pair from an object.",
        "Let's revisit our <code>foods</code> object example one last time. If we wanted to remove the <code>apples</code> key, we can remove it by using the <code>delete</code> keyword like this:",
        "<blockquote>delete foods.apples;</blockquote>",
        "<hr>",
        "Use the delete keyword to remove the <code>oranges</code>, <code>plums</code>, and <code>strawberries</code> keys from the <code>foods</code> object."
      ],
      "tests": [
        {
          "text": "The <code>foods</code> object only has three keys: <code>apples</code>, <code>grapes</code>, and <code>bananas</code>",
          "testString": "assert(!foods.hasOwnProperty('oranges') && !foods.hasOwnProperty('plums') && !foods.hasOwnProperty('strawberries') && Object.keys(foods).length === 3, 'The <code>foods</code> object only has three keys: <code>apples</code>, <code>grapes</code>, and <code>bananas</code>');"
        },
        {
          "text": "The <code>oranges</code>, <code>plums</code>, and <code>strawberries</code> keys are removed using <code>delete</code>",
          "testString": "assert(code.search(/oranges:/) !== -1 && code.search(/plums:/) !== -1 && code.search(/strawberries:/) !== -1, 'The <code>oranges</code>, <code>plums</code>, and <code>strawberries</code> keys are removed using <code>delete</code>');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let foods = {",
            "  apples: 25,",
            "  oranges: 32,",
            "  plums: 28,",
            "  bananas: 13,",
            "  grapes: 35,",
            "  strawberries: 27",
            "};",
            "",
            "// change code below this line",
            "",
            "// change code above this line",
            "",
            "console.log(foods);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7d367417b2b2512b1c",
      "title": "Check if an Object has a Property",
      "description": [
        "Now we can add, modify, and remove keys from objects. But what if we just wanted to know if an object has a specific property? JavaScript provides us with two different ways to do this. One uses the <code>hasOwnProperty()</code> method and the other uses the <code>in</code> keyword. If we have an object <code>users</code> with a property of <code>Alan</code>, we could check for its presence in either of the following ways:",
        "<blockquote>users.hasOwnProperty('Alan');<br>'Alan' in users;<br>// both return true</blockquote>",
        "<hr>",
        "We've created an object, <code>users</code>, with some users in it and a function <code>isEveryoneHere</code>, which we pass the <code>users</code> object to as an argument. Finish writing this function so that it returns <code>true</code> only if the <code>users</code> object contains all four names, <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code>, as keys, and <code>false</code> otherwise."
      ],
      "tests": [
        {
          "text": "The <code>users</code> object only contains the keys <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code>",
          "testString": "assert('Alan' in users && 'Jeff' in users && 'Sarah' in users && 'Ryan' in users && Object.keys(users).length === 4, 'The <code>users</code> object only contains the keys <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code>');"
        },
        {
          "text": "The function <code>isEveryoneHere</code> returns <code>true</code> if <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code> are properties on the <code>users</code> object",
          "testString": "assert(isEveryoneHere(users) === true, 'The function <code>isEveryoneHere</code> returns <code>true</code> if <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code> are properties on the <code>users</code> object');"
        },
        {
          "text": "The function <code>isEveryoneHere</code> returns <code>false</code> if <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code> are not properties on the <code>users</code> object",
          "testString": "assert((function() { delete users.Alan; delete users.Jeff; delete users.Sarah; delete users.Ryan; return isEveryoneHere(users) })() === false, 'The function <code>isEveryoneHere</code> returns <code>false</code> if <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code> are not properties on the <code>users</code> object');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let users = {",
            "  Alan: {",
            "    age: 27,",
            "    online: true",
            "  },",
            "  Jeff: {",
            "    age: 32,",
            "    online: true",
            "  },",
            "  Sarah: {",
            "    age: 48,",
            "    online: true",
            "  },",
            "  Ryan: {",
            "    age: 19,",
            "    online: true",
            "  }",
            "};",
            "",
            "function isEveryoneHere(obj) {",
            "  // change code below this line",
            "",
            "  // change code above this line",
            "}",
            "",
            "console.log(isEveryoneHere(users));"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7d367417b2b2512b1d",
      "title": " Iterate Through the Keys of an Object with a for...in Statement",
      "description": [
        "Sometimes you may need to iterate through all the keys within an object. This requires a specific syntax in JavaScript called a <dfn>for...in</dfn> statement. For our <code>users</code> object, this could look like:",
        "<blockquote>for (let user in users) {<br>&nbsp;&nbsp;console.log(user);<br>};<br><br>// logs:<br>Alan<br>Jeff<br>Sarah<br>Ryan</blockquote>",
        "In this statement, we defined a variable <code>user</code>, and as you can see, this variable was reset during each iteration to each of the object's keys as the statement looped through the object, resulting in each user's name being printed to the console.",
        "<strong>NOTE:</strong><br>Objects do not maintain an ordering to stored keys like arrays do; thus a keys position on an object, or the relative order in which it appears, is irrelevant when referencing or accessing that key.",
        "<hr>",
        "We've defined a function, <code>countOnline</code>; use a <dfn>for...in</dfn> statement within this function to loop through the users in the <code>users</code> object and return the number of users whose <code>online</code> property is set to <code>true</code>."
      ],
      "tests": [
        {
          "text": "The <code>users</code> object contains users <code>Jeff</code> and <code>Ryan</code> with <code>online</code> set to <code>true</code> and users <code>Alan</code> and <code>Sarah</code> with <code>online</code> set to <code>false</code>",
          "testString": "assert(users.Alan.online === false && users.Jeff.online === true &&  users.Sarah.online === false &&  users.Ryan.online === true, 'The <code>users</code> object contains users <code>Jeff</code> and <code>Ryan</code> with <code>online</code> set to <code>true</code> and users <code>Alan</code> and <code>Sarah</code> with <code>online</code> set to <code>false</code>');"
        },
        {
          "text": "The function <code>countOnline</code> returns the number of users with the <code>online</code> property set to <code>true</code>",
          "testString": "assert((function() { users.Harry = {online: true}; users.Sam = {online: true}; users.Carl = {online: true}; return countOnline(users) })() === 5, 'The function <code>countOnline</code> returns the number of users with the <code>online</code> property set to <code>true</code>');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let users = {",
            "  Alan: {",
            "    age: 27,",
            "    online: false",
            "  },",
            "  Jeff: {",
            "    age: 32,",
            "    online: true",
            "  },",
            "  Sarah: {",
            "    age: 48,",
            "    online: false",
            "  },",
            "  Ryan: {",
            "    age: 19,",
            "    online: true",
            "  }",
            "};",
            "",
            "function countOnline(obj) {",
            "  // change code below this line",
            "",
            "  // change code above this line",
            "}",
            "",
            "console.log(countOnline(users));"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7d367417b2b2512b1e",
      "title": "Generate an Array of All Object Keys with Object.keys()",
      "description": [
        "We can also generate an array which contains all the keys stored in an object using the <code>Object.keys()</code> method and passing in an object as the argument. This will return an array with strings representing each property in the object. Again, there will be no specific order to the entries in the array.",
        "<hr>",
        "Finish writing the <code>getArrayOfUsers</code> function so that it returns an array containing all the properties in the object it receives as an argument."
      ],
      "tests": [
        {
          "text": "The <code>users</code> object only contains the keys <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code>",
          "testString": "assert('Alan' in users && 'Jeff' in users && 'Sarah' in users && 'Ryan' in users && Object.keys(users).length === 4, 'The <code>users</code> object only contains the keys <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code>');"
        },
        {
          "text": "The <code>getArrayOfUsers</code> function returns an array which contains all the keys in the <code>users</code> object",
          "testString": "assert((function() { users.Sam = {}; users.Lewis = {}; let R = getArrayOfUsers(users); return (R.indexOf('Alan') !== -1 && R.indexOf('Jeff') !== -1 && R.indexOf('Sarah') !== -1 && R.indexOf('Ryan') !== -1 && R.indexOf('Sam') !== -1 && R.indexOf('Lewis') !== -1); })() === true, 'The <code>getArrayOfUsers</code> function returns an array which contains all the keys in the <code>users</code> object');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let users = {",
            "  Alan: {",
            "    age: 27,",
            "    online: false",
            "  },",
            "  Jeff: {",
            "    age: 32,",
            "    online: true",
            "  },",
            "  Sarah: {",
            "    age: 48,",
            "    online: false",
            "  },",
            "  Ryan: {",
            "    age: 19,",
            "    online: true",
            "  }",
            "};",
            "",
            "function getArrayOfUsers(obj) {",
            "  // change code below this line",
            "",
            "  // change code above this line",
            "}",
            "",
            "console.log(getArrayOfUsers(users));"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7d367417b2b2512b1f",
      "title": "Modify an Array Stored in an Object",
      "description": [
        "Now you've seen all the basic operations for JavaScript objects. You can add, modify, and remove key-value pairs, check if keys exist, and iterate over all the keys in an object. As you continue learning JavaScript you will see even more versatile applications of objects. Additionally, the optional Advanced Data Structures lessons later in the curriculum also cover the ES6 <dfn>Map</dfn> and <dfn>Set</dfn> objects, both of which are similar to ordinary objects but provide some additional features. Now that you've learned the basics of arrays and objects, you're fully prepared to begin tackling more complex problems using JavaScript!",
        "<hr>",
        "Take a look at the object we've provided in the code editor. The <code>user</code> object contains three keys. The <code>data</code> key contains five keys, one of which contains an array of <code>friends</code>. From this, you can see how flexible objects are as data structures. We've started writing a function <code>addFriend</code>. Finish writing it so that it takes a <code>user</code> object and adds the name of the <code>friend</code> argument to the array stored in <code>user.data.friends</code> and returns that array."
      ],
      "tests": [
        {
          "text": "The <code>user</code> object has <code>name</code>, <code>age</code>, and <code>data</code> keys",
          "testString": "assert('name' in user && 'age' in user && 'data' in user, 'The <code>user</code> object has <code>name</code>, <code>age</code>, and <code>data</code> keys');"
        },
        {
          "text": "The <code>addFriend</code> function accepts a <code>user</code> object and a <code>friend</code> string as arguments and adds the friend to the array of <code>friends</code> in the <code>user</code> object",
          "testString": "assert((function() { let L1 = user.data.friends.length; addFriend(user, 'Sean'); let L2 = user.data.friends.length; return (L2 === L1 + 1); })(), 'The <code>addFriend</code> function accepts a <code>user</code> object and a <code>friend</code> string as arguments and adds the friend to the array of <code>friends</code> in the <code>user</code> object');"
        },
        {
          "text": "<code>addFriend(user, \"Pete\")</code> should return <code>[\"Sam\", \"Kira\", \"Tomo\", \"Pete\"]</code>",
          "testString": "assert.deepEqual((function() { delete user.data.friends; user.data.friends = ['Sam', 'Kira', 'Tomo']; return addFriend(user, 'Pete') })(), ['Sam', 'Kira', 'Tomo', 'Pete'], '<code>addFriend(user, \"Pete\")</code> should return <code>[\"Sam\", \"Kira\", \"Tomo\", \"Pete\"]</code>');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let user = {",
            "  name: 'Kenneth',",
            "  age: 28,",
            "  data: {",
            "    username: 'kennethCodesAllDay',",
            "    joinDate: 'March 26, 2016',",
            "    organization: 'freeCodeCamp',",
            "    friends: [",
            "      'Sam',",
            "      'Kira',",
            "      'Tomo'",
            "    ],",
            "    location: {",
            "      city: 'San Francisco',",
            "      state: 'CA',",
            "      country: 'USA'",
            "    }",
            "  }",
            "};",
            "",
            "function addFriend(userObj, friend) {",
            "  // change code below this line  ",
            "",
            "  // change code above this line",
            "}",
            "",
            "console.log(addFriend(user, 'Pete'));"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b3",
      "title": "Convert Celsius to Fahrenheit",
      "description": [
        "The algorithm to convert from Celsius to Fahrenheit is the temperature in Celsius times <code>9/5</code>, plus <code>32</code>.",
        "You are given a variable <code>celsius</code> representing a temperature in Celsius. Use the variable <code>fahrenheit</code> already defined and assign it the Fahrenheit temperature equivalent to the given Celsius temperature. Use the algorithm mentioned above to help convert the Celsius temperature to Fahrenheit.",
        "Don't worry too much about the function and return statements as they will be covered in future challenges. For now, only use operators that you have already learned."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function convertToF(celsius) {\n  let fahrenheit = celsius * 9/5 + 32;\n\n  return fahrenheit;\n}\n\nconvertToF(30);\n"
      ],
      "tests": [
        {
          "text": "<code>convertToF(0)</code> should return a number",
          "testString": "assert(typeof convertToF(0) === 'number', '<code>convertToF(0)</code> should return a number');"
        },
        {
          "text": "<code>convertToF(-30)</code> should return a value of <code>-22</code>",
          "testString": "assert(convertToF(-30) === -22, '<code>convertToF(-30)</code> should return a value of <code>-22</code>');"
        },
        {
          "text": "<code>convertToF(-10)</code> should return a value of <code>14</code>",
          "testString": "assert(convertToF(-10) === 14, '<code>convertToF(-10)</code> should return a value of <code>14</code>');"
        },
        {
          "text": "<code>convertToF(0)</code> should return a value of <code>32</code>",
          "testString": "assert(convertToF(0) === 32, '<code>convertToF(0)</code> should return a value of <code>32</code>');"
        },
        {
          "text": "<code>convertToF(20)</code> should return a value of <code>68</code>",
          "testString": "assert(convertToF(20) === 68, '<code>convertToF(20)</code> should return a value of <code>68</code>');"
        },
        {
          "text": "<code>convertToF(30)</code> should return a value of <code>86</code>",
          "testString": "assert(convertToF(30) === 86, '<code>convertToF(30)</code> should return a value of <code>86</code>');"
        }
      ],
      "challengeType": 1,
      "isRequired": true,
      "translations": {
        "es": {
          "title": "Convierte celsius a fahrenheit",
          "description": [
            "Para probar tu aprendizaje, crearás una solucion \"desde cero\". Coloca tu código entre las líneas indicadas y este será probado contra multiples casos de prueba.",
            "El algoritmo para convertir de Celsius a Fahrenheit consiste en multiplicar la temperatura en grados Celsius por 9/5 y al resultado agregarle 32.",
            "Se te da una variable <code>celsius</code> representando una temperatura en Celsius. Crea una variable <code>fahrenheit</code> y aplica el algoritmo para asignar la correspondiente temperatura en Fahrenheit."
          ]
        },
        "pt-br": {
          "title": "Converta Celsius para Fahrenheit",
          "description": [
            "O algoritmo para converter de Celsius para Fahrenheit é a temperatura em Celsius vezes <code>9/5</code> mais <code>32</code>.",
            "Você recebe uma variável <code>celsius</code> representando uma temperatura em Celsius. Use a variável <code>fahrenheit</code> já definida e aplique o algoritmo para atribuir a ela a temperatura correspondente em Fahrenheit."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function convertToF(celsius) {",
            "  let fahrenheit;",
            "  return fahrenheit;",
            "}",
            "",
            "convertToF(30);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a202eed8fc186c8434cb6d61",
      "title": "Reverse a String",
      "description": [
        "Reverse the provided string.",
        "You may need to turn the string into an array before you can reverse it.",
        "Your result must be a string.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>reverseString(\"hello\")</code> should return a string.",
          "testString": "assert(typeof reverseString(\"hello\") === \"string\", '<code>reverseString(\"hello\")</code> should return a string.');"
        },
        {
          "text": "<code>reverseString(\"hello\")</code> should become <code>\"olleh\"</code>.",
          "testString": "assert(reverseString(\"hello\") === \"olleh\", '<code>reverseString(\"hello\")</code> should become <code>\"olleh\"</code>.');"
        },
        {
          "text": "<code>reverseString(\"Howdy\")</code> should become <code>\"ydwoH\"</code>.",
          "testString": "assert(reverseString(\"Howdy\") === \"ydwoH\", '<code>reverseString(\"Howdy\")</code> should become <code>\"ydwoH\"</code>.');"
        },
        {
          "text": "<code>reverseString(\"Greetings from Earth\")</code> should return <code>\"htraE morf sgniteerG\"</code>.",
          "testString": "assert(reverseString(\"Greetings from Earth\") === \"htraE morf sgniteerG\", '<code>reverseString(\"Greetings from Earth\")</code> should return <code>\"htraE morf sgniteerG\"</code>.');"
        }
      ],
      "isRequired": true,
      "solutions": [
        "function reverseString(str) {\n  return str.split('').reverse().join('');\n}\n\nreverseString(\"hello\");\n"
      ],
      "MDNlinks": [
        "Global String Object",
        "String.prototype.split()",
        "Array.prototype.reverse()",
        "Array.prototype.join()"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Invierte el texto",
          "description": [
            "Invierte la cadena de texto que se te provee",
            "Puede que necesites convertir la cadena de texto en un arreglo antes de que puedas invertirla",
            "El resultado debe ser una cadena de texto",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "pt-br": {
          "title": "Inverta uma string",
          "description": [
            "Inverta a string fornecida.",
            "Talvez você tenha que transformar a string num array antes de invertê-la.",
            "Seu resultado deve ser uma string.",
            "Lembre-se de <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se ficar travado. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function reverseString(str) {",
            "  return str;",
            "}",
            "",
            "reverseString(\"hello\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a302f7aae1aa3152a5b413bc",
      "title": "Factorialize a Number",
      "description": [
        "Return the factorial of the provided integer.",
        "If the integer is represented with the letter n, a factorial is the product of all positive integers less than or equal to n.",
        "Factorials are often represented with the shorthand notation <code>n!</code>",
        "For example: <code>5! = 1 * 2 * 3 * 4 * 5 = 120</code>",
        "Only integers greater than or equal to zero will be supplied to the function.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>factorialize(5)</code> should return a number.",
          "testString": "assert(typeof factorialize(5) === 'number', '<code>factorialize(5)</code> should return a number.');"
        },
        {
          "text": "<code>factorialize(5)</code> should return 120.",
          "testString": "assert(factorialize(5) === 120, '<code>factorialize(5)</code> should return 120.');"
        },
        {
          "text": "<code>factorialize(10)</code> should return 3628800.",
          "testString": "assert(factorialize(10) === 3628800, '<code>factorialize(10)</code> should return 3628800.');"
        },
        {
          "text": "<code>factorialize(20)</code> should return 2432902008176640000.",
          "testString": "assert(factorialize(20) === 2432902008176640000, '<code>factorialize(20)</code> should return 2432902008176640000.');"
        },
        {
          "text": "<code>factorialize(0)</code> should return 1.",
          "testString": "assert(factorialize(0) === 1, '<code>factorialize(0)</code> should return 1.');"
        }
      ],
      "isRequired": true,
      "solutions": [
        "function factorialize(num) {\n  return num < 1 ? 1 : num * factorialize(num - 1);\n}\n\nfactorialize(5);\n"
      ],
      "MDNlinks": [
        "Arithmetic Operators"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Factoriza un número",
          "description": [
            "Crea una función que devuelva el factorial del número entero que se te provee",
            "El factorial de un número entero positivo n es la multiplicación de todos los enteros positivos menores o iguales a n",
            "Los factoriales son comúnmente representados con la notación <code>n!</code>",
            "Por ejemplo: <code>5! = 1 * 2 * 3 * 4 * 5 = 120</code>",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "pt-br": {
          "title": "Determine o fatorial de um número",
          "description": [
            "Retorne o fatorial do inteiro fornecido.",
            "Se o inteiro é representado pela letra n, o seu fatorial é o produto de todos os inteiros positivos menores ou iguais a n.",
            "Por exemplo: <code>5! = 1 * 2 * 3 * 4 * 5 = 120</code>",
            "Apenas inteiros maiores ou iguais a zero serão fornecidos à função.",
            "Lembre-se de <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se ficar travado. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function factorialize(num) {",
            "  return num;",
            "}",
            "",
            "factorialize(5);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a26cbbe9ad8655a977e1ceb5",
      "title": "Find the Longest Word in a String",
      "description": [
        "Return the length of the longest word in the provided sentence.",
        "Your response should be a number.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>findLongestWordLength(\"The quick brown fox jumped over the lazy dog\")</code> should return a number.",
          "testString": "assert(typeof findLongestWordLength(\"The quick brown fox jumped over the lazy dog\") === \"number\", '<code>findLongestWordLength(\"The quick brown fox jumped over the lazy dog\")</code> should return a number.');"
        },
        {
          "text": "<code>findLongestWordLength(\"The quick brown fox jumped over the lazy dog\")</code> should return 6.",
          "testString": "assert(findLongestWordLength(\"The quick brown fox jumped over the lazy dog\") === 6, '<code>findLongestWordLength(\"The quick brown fox jumped over the lazy dog\")</code> should return 6.');"
        },
        {
          "text": "<code>findLongestWordLength(\"May the force be with you\")</code> should return 5.",
          "testString": "assert(findLongestWordLength(\"May the force be with you\") === 5, '<code>findLongestWordLength(\"May the force be with you\")</code> should return 5.');"
        },
        {
          "text": "<code>findLongestWordLength(\"Google do a barrel roll\")</code> should return 6.",
          "testString": "assert(findLongestWordLength(\"Google do a barrel roll\") === 6, '<code>findLongestWordLength(\"Google do a barrel roll\")</code> should return 6.');"
        },
        {
          "text": "<code>findLongestWordLength(\"What is the average airspeed velocity of an unladen swallow\")</code> should return 8.",
          "testString": "assert(findLongestWordLength(\"What is the average airspeed velocity of an unladen swallow\") === 8, '<code>findLongestWordLength(\"What is the average airspeed velocity of an unladen swallow\")</code> should return 8.');"
        },
        {
          "text": "<code>findLongestWordLength(\"What if we try a super-long word such as otorhinolaryngology\")</code> should return 19.",
          "testString": "assert(findLongestWordLength(\"What if we try a super-long word such as otorhinolaryngology\") === 19, '<code>findLongestWordLength(\"What if we try a super-long word such as otorhinolaryngology\")</code> should return 19.');"
        }
      ],
      "isRequired": true,
      "solutions": [
        "function findLongestWordLength(str) {\n  return str.split(' ').sort((a, b) => b.length - a.length)[0].length;\n}\n\nfindLongestWordLength(\"The quick brown fox jumped over the lazy dog\");\n"
      ],
      "MDNlinks": [
        "String.prototype.split()",
        "String.length"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Encuentra la palabra más larga",
          "description": [
            "Crea una función que devuelva la longitud de la palabra más larga en una frase dada",
            "El resultado debe ser un número",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "pt-br": {
          "title": "Encontre a palavra mais longa de uma string",
          "description": [
            "Retorne o tamanho da palavra mais longa da frase fornecida.",
            "Sua resposta deve ser um número.",
            "Lembre-se de <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se ficar travado. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function findLongestWordLength(str) {",
            "  return str.length;",
            "}",
            "",
            "findLongestWordLength(\"The quick brown fox jumped over the lazy dog\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a789b3483989747d63b0e427",
      "title": "Return Largest Numbers in Arrays",
      "description": [
        "Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.",
        "Remember, you can iterate through an array with a simple for loop, and access each member with array syntax <code>arr[i]</code>.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> should return an array.",
          "testString": "assert(largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]).constructor === Array, '<code>largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> should return an array.');"
        },
        {
          "text": "<code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> should return <code>[27, 5, 39, 1001]</code>.",
          "testString": "assert.deepEqual(largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]]), [27, 5, 39, 1001], '<code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> should return <code>[27, 5, 39, 1001]</code>.');"
        },
        {
          "text": "<code>largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]])</code> should return <code>[9, 35, 97, 1000000]</code>.",
          "testString": "assert.deepEqual(largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]]), [9, 35, 97, 1000000], '<code>largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]])</code> should return <code>[9, 35, 97, 1000000]</code>.');"
        },
        {
          "text": "<code>largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]])</code> should return <code>[25, 48, 21, -3]</code>.",
          "testString": "assert.deepEqual(largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]]), [25, 48, 21, -3], '<code>largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]])</code> should return <code>[25, 48, 21, -3]</code>.');"
        }
      ],
      "isRequired": true,
      "solutions": [
        "function largestOfFour(arr) {\n  return arr.map(subArr => Math.max.apply(null, subArr));\n}\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);\n"
      ],
      "MDNlinks": [
        "Comparison Operators"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Devuelve el mayor entero de cada arreglo",
          "description": [
            "Crea una función que devuelva un arreglo que contenga el mayor de los números de cada sub-arreglo que recibe. Para simplificar las cosas, el arreglo que recibirá tendrá exactamente 4 sub-arreglos",
            "Recuerda que puedes iterar a través de un arreglo con un búcle simple, y acceder a cada miembro utilizando la sintaxis arr[i].",
            "Si escribes tu propio test con Chai.js, asegúrate de utilizar un operador de igualdad estricto en lugar de un operador de igualdad cuando compares arreglos. ",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "pt-br": {
          "title": "Retorne os maiores números de arrays",
          "description": [
            "Retorne um array contendo o maior número de cada sub-array fornecido. Para simplificar, o array fornecido conterá exatamente 4 sub-arrays.",
            "Lembre-se, você pode iterar por um array com um simples <code>for</code> e acessar cada membro do array com a sintaxe <code>arr[i]</code>.",
            "Lembre-se de <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se ficar travado. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function largestOfFour(arr) {",
            "  // You can do this!",
            "  return arr;",
            "}",
            "",
            "largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "acda2fb1324d9b0fa741e6b5",
      "title": "Confirm the Ending",
      "description": [
        "Check if a string (first argument, <code>str</code>) ends with the given target string (second argument, <code>target</code>).",
        "This challenge <em>can</em> be solved with the <code>.endsWith()</code> method, which was introduced in ES2015. But for the purpose of this challenge, we would like you to use one of the JavaScript substring methods instead.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>confirmEnding(\"Bastian\", \"n\")</code> should return true.",
          "testString": "assert(confirmEnding(\"Bastian\", \"n\") === true, '<code>confirmEnding(\"Bastian\", \"n\")</code> should return true.');"
        },
        {
          "text": "<code>confirmEnding(\"Congratulation\", \"on\")</code> should return true.",
          "testString": "assert(confirmEnding(\"Congratulation\", \"on\") === true, '<code>confirmEnding(\"Congratulation\", \"on\")</code> should return true.');"
        },
        {
          "text": "<code>confirmEnding(\"Connor\", \"n\")</code> should return false.",
          "testString": "assert(confirmEnding(\"Connor\", \"n\") === false, '<code>confirmEnding(\"Connor\", \"n\")</code> should return false.');"
        },
        {
          "text": "<code>confirmEnding(\"Walking on water and developing software from a specification are easy if both are frozen\"&#44; \"specification\"&#41;</code> should return false.",
          "testString": "assert(confirmEnding(\"Walking on water and developing software from a specification are easy if both are frozen\", \"specification\") === false, '<code>confirmEnding(\"Walking on water and developing software from a specification are easy if both are frozen\"&#44; \"specification\"&#41;</code> should return false.');"
        },
        {
          "text": "<code>confirmEnding(\"He has to give me a new name\", \"name\")</code> should return true.",
          "testString": "assert(confirmEnding(\"He has to give me a new name\", \"name\") === true, '<code>confirmEnding(\"He has to give me a new name\", \"name\")</code> should return true.');"
        },
        {
          "text": "<code>confirmEnding(\"Open sesame\", \"same\")</code> should return true.",
          "testString": "assert(confirmEnding(\"Open sesame\", \"same\") === true, '<code>confirmEnding(\"Open sesame\", \"same\")</code> should return true.');"
        },
        {
          "text": "<code>confirmEnding(\"Open sesame\", \"pen\")</code> should return false.",
          "testString": "assert(confirmEnding(\"Open sesame\", \"pen\") === false, '<code>confirmEnding(\"Open sesame\", \"pen\")</code> should return false.');"
        },
        {
          "text": "<code>confirmEnding(\"Open sesame\", \"game\")</code> should return false.",
          "testString": "assert(confirmEnding(\"Open sesame\", \"game\") === false, '<code>confirmEnding(\"Open sesame\", \"game\")</code> should return false.');"
        },
        {
          "text": "<code>confirmEnding(\"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing\", \"mountain\")</code> should return false.",
          "testString": "assert(confirmEnding(\"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing\", \"mountain\") === false, '<code>confirmEnding(\"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing\", \"mountain\")</code> should return false.');"
        },
        {
          "text": "<code>confirmEnding(\"Abstraction\", \"action\")</code> should return true.",
          "testString": "assert(confirmEnding(\"Abstraction\", \"action\") === true, '<code>confirmEnding(\"Abstraction\", \"action\")</code> should return true.');"
        },
        {
          "text": "Do not use the built-in method <code>.endsWith()</code> to solve the challenge.",
          "testString": "assert(!(/\\.endsWith\\(.*?\\)\\s*?;?/.test(code)) && !(/\\['endsWith'\\]/.test(code)), 'Do not use the built-in method <code>.endsWith()</code> to solve the challenge.');"
        }
      ],
      "isRequired": true,
      "solutions": [
        "function confirmEnding(str, target) {\n  return str.substring(str.length - target.length) === target;\n}\n\nconfirmEnding(\"Bastian\", \"n\");\n"
      ],
      "MDNlinks": [
        "String.prototype.substr()",
        "String.prototype.substring()"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Confirma la terminación",
          "description": [
            "Verifica si una cadena de texto (primer argumento) termina con otra cadena de texto (segundo argumento).",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "pt-br": {
          "title": "Confirme o final",
          "description": [
            "Verifique se uma string (primeiro argumento, <code>str</code>) termina com a string alvo fornecida (segundo argumento, <code>target</code>).",
            "Esse desafio <em>pode</em> ser resolvido com o método <code>.endsWith()</code>, que foi introduzido na ES2015. Mas para o propósito desse desafio, nós gostaríamos que, ao invés dele, você usasse algum dos métodos de substring do JavaScript.",
            "Lembre-se de <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se ficar travado. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function confirmEnding(str, target) {",
            "  // \"Never give up and good luck will find you.\"",
            "  // -- Falcor",
            "  return str;",
            "}",
            "",
            "confirmEnding(\"Bastian\", \"n\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "afcc8d540bea9ea2669306b6",
      "title": "Repeat a String Repeat a String",
      "description": [
        "Repeat a given string <code>str</code> (first argument) for <code>num</code> times (second argument). Return an empty string if <code>num</code> is not a positive number.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>repeatStringNumTimes(\"*\", 3)</code> should return <code>\"***\"</code>.",
          "testString": "assert(repeatStringNumTimes(\"*\", 3) === \"***\", '<code>repeatStringNumTimes(\"*\", 3)</code> should return <code>\"***\"</code>.');"
        },
        {
          "text": "<code>repeatStringNumTimes(\"abc\", 3)</code> should return <code>\"abcabcabc\"</code>.",
          "testString": "assert(repeatStringNumTimes(\"abc\", 3) === \"abcabcabc\", '<code>repeatStringNumTimes(\"abc\", 3)</code> should return <code>\"abcabcabc\"</code>.');"
        },
        {
          "text": "<code>repeatStringNumTimes(\"abc\", 4)</code> should return <code>\"abcabcabcabc\"</code>.",
          "testString": "assert(repeatStringNumTimes(\"abc\", 4) === \"abcabcabcabc\", '<code>repeatStringNumTimes(\"abc\", 4)</code> should return <code>\"abcabcabcabc\"</code>.');"
        },
        {
          "text": "<code>repeatStringNumTimes(\"abc\", 1)</code> should return <code>\"abc\"</code>.",
          "testString": "assert(repeatStringNumTimes(\"abc\", 1) === \"abc\", '<code>repeatStringNumTimes(\"abc\", 1)</code> should return <code>\"abc\"</code>.');"
        },
        {
          "text": "<code>repeatStringNumTimes(\"*\", 8)</code> should return <code>\"********\"</code>.",
          "testString": "assert(repeatStringNumTimes(\"*\", 8) === \"********\", '<code>repeatStringNumTimes(\"*\", 8)</code> should return <code>\"********\"</code>.');"
        },
        {
          "text": "<code>repeatStringNumTimes(\"abc\", -2)</code> should return <code>\"\"</code>.",
          "testString": "assert(repeatStringNumTimes(\"abc\", -2) === \"\", '<code>repeatStringNumTimes(\"abc\", -2)</code> should return <code>\"\"</code>.');"
        },
        {
          "text": "The built-in <code>repeat()</code>-method should not be used",
          "testString": "assert(!/\\.repeat/g.test(code), 'The built-in <code>repeat()</code>-method should not be used');"
        }
      ],
      "isRequired": true,
      "solutions": [
        "function repeatStringNumTimes(str, num) {\n  if (num < 0) return '';\n  return num === 1 ? str : str + repeatStringNumTimes(str, num-1);\n}\n\nrepeatStringNumTimes(\"abc\", 3);\n"
      ],
      "MDNlinks": [
        "Global String Object"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Repite el Texto Repite el Texto",
          "description": [
            "Repite una cadena de texto dada (primer argumento) <code>num</code> veces (segundo argumento). Retorna una cadena de texto vacía si <code>num</code> es un número negativo.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "pt-br": {
          "title": "Repita uma string Repita uma string",
          "description": [
            "Repita uma string <code>str</code> dada (primeiro argumento) <code>num</code> vezes (segundo argumento). Retorne uma string vazia se <code>num</code> não for um número positivo.",
            "Lembre-se de <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se ficar travado. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function repeatStringNumTimes(str, num) {",
            "  // repeat after me",
            "  return str;",
            "}",
            "",
            "repeatStringNumTimes(\"abc\", 3);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "ac6993d51946422351508a41",
      "title": "Truncate a String",
      "description": [
        "Truncate a string (first argument) if it is longer than the given maximum string length (second argument). Return the truncated string with a <code>...</code> ending.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>truncateString(\"A-tisket a-tasket A green and yellow basket\", 8)</code> should return \"A-tisket...\".",
          "testString": "assert(truncateString(\"A-tisket a-tasket A green and yellow basket\", 8) === \"A-tisket...\", '<code>truncateString(\"A-tisket a-tasket A green and yellow basket\", 8)</code> should return \"A-tisket...\".');"
        },
        {
          "text": "<code>truncateString(\"Peter Piper picked a peck of pickled peppers\", 11)</code> should return \"Peter Piper...\".",
          "testString": "assert(truncateString(\"Peter Piper picked a peck of pickled peppers\", 11) === \"Peter Piper...\", '<code>truncateString(\"Peter Piper picked a peck of pickled peppers\", 11)</code> should return \"Peter Piper...\".');"
        },
        {
          "text": "<code>truncateString(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length)</code> should return \"A-tisket a-tasket A green and yellow basket\".",
          "testString": "assert(truncateString(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length) === \"A-tisket a-tasket A green and yellow basket\", '<code>truncateString(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length)</code> should return \"A-tisket a-tasket A green and yellow basket\".');"
        },
        {
          "text": "<code>truncateString(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length + 2)</code> should return \"A-tisket a-tasket A green and yellow basket\".",
          "testString": "assert(truncateString('A-tisket a-tasket A green and yellow basket', 'A-tisket a-tasket A green and yellow basket'.length + 2) === 'A-tisket a-tasket A green and yellow basket', '<code>truncateString(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length + 2)</code> should return \"A-tisket a-tasket A green and yellow basket\".');"
        },
        {
          "text": "<code>truncateString(\"A-\", 1)</code> should return \"A...\".",
          "testString": "assert(truncateString(\"A-\", 1) === \"A...\", '<code>truncateString(\"A-\", 1)</code> should return \"A...\".');"
        },
        {
          "text": "<code>truncateString(\"Absolutely Longer\", 2)</code> should return \"Ab...\".",
          "testString": "assert(truncateString(\"Absolutely Longer\", 2) === \"Ab...\", '<code>truncateString(\"Absolutely Longer\", 2)</code> should return \"Ab...\".');"
        }
      ],
      "isRequired": true,
      "solutions": [
        "function truncateString(str, num) {\n  if (num >= str.length) {\n    return str;\n  }\n\n  return str.slice(0, num) + '...';\n}\n\ntruncateString(\"A-tisket a-tasket A green and yellow basket\", 8);\n"
      ],
      "MDNlinks": [
        "String.prototype.slice()"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Trunca una Cadena de Texto",
          "description": [
            "Trunca una cadena de texto (primer argumento) si su longitud es mayor que un máximo de caracteres dado (segundo argumento). Devuelve la cadena de texto truncada con una terminación \"...\".",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "pt-br": {
          "title": "Trunque uma string",
          "description": [
            "Trunque uma string (primeiro argumento) se ela for mais longa do que o comprimento máximo dado (segundo argumento). Retorne a string truncada com um <code>...</code> no final.",
            "Lembre-se de <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se ficar travado. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function truncateString(str, num) {",
            "  // Clear out that junk in your trunk",
            "  return str;",
            "}",
            "",
            "truncateString(\"A-tisket a-tasket A green and yellow basket\", 8);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a6e40f1041b06c996f7b2406",
      "title": "Finders Keepers",
      "description": [
        "Create a function that looks through an array (first argument) and returns the first element in the array that passes a truth test (second argument). If no element passes the test, return undefined.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function findElement(arr, func) {\n  let num;\n\n  arr.some(e => {\n    if (func(e)) {\n      num = e;\n      return true;\n    }\n  });\n\n  return num;\n}\n\nfindElement([1, 2, 3, 4], num => num % 2 === 0);\n"
      ],
      "tests": [
        {
          "text": "<code>findElement([1, 3, 5, 8, 9, 10], function(num) { return num % 2 === 0; })</code> should return 8.",
          "testString": "assert.strictEqual(findElement([1, 3, 5, 8, 9, 10], function(num) { return num % 2 === 0; }), 8, '<code>findElement([1, 3, 5, 8, 9, 10], function(num) { return num % 2 === 0; })</code> should return 8.');"
        },
        {
          "text": "<code>findElement([1, 3, 5, 9], function(num) { return num % 2 === 0; })</code> should return undefined.",
          "testString": "assert.strictEqual(findElement([1, 3, 5, 9], function(num) { return num % 2 === 0; }), undefined, '<code>findElement([1, 3, 5, 9], function(num) { return num % 2 === 0; })</code> should return undefined.');"
        }
      ],
      "MDNlinks": [
        "Array.prototype.filter()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Buscando la verdad",
          "description": [
            "Crea una función que busque dentro de un vector (primer argumento) y que devuelva el primer elemento que pase una prueba de verdad (segundo argumento).",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "pt-br": {
          "title": "Achado não é roubado",
          "description": [
            "Crie uma função que itera sobre um array (primeiro argumento) e retorna o primeiro elemento do array que retornar <code>true</code> para uma função de teste (segundo argumento). Se nenhum elemento passar no teste, retorne <code>undefined</code>.",
            "Lembre-se de <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se ficar travado. Escreva seu próprio código."
          ]
        },
        "fr": {
          "title": "Détecteur de mensonges",
          "description": [
            "Crée une fonction qui parcourt un tableau (premier argument) et renvoie le premier élément du tableau qui passe le test (second argument).",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function findElement(arr, func) {",
            "  let num = 0;",
            "  return num;",
            "}",
            "",
            "findElement([1, 2, 3, 4], num => num % 2 === 0);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a77dbc43c33f39daa4429b4f",
      "title": "Boo who",
      "description": [
        "Check if a value is classified as a boolean primitive. Return true or false.",
        "Boolean primitives are true and false.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function booWho(bool) {\n  return typeof bool === \"boolean\";\n}\n\nbooWho(null);"
      ],
      "tests": [
        {
          "text": "<code>booWho(true)</code> should return true.",
          "testString": "assert.strictEqual(booWho(true), true, '<code>booWho(true)</code> should return true.');"
        },
        {
          "text": "<code>booWho(false)</code> should return true.",
          "testString": "assert.strictEqual(booWho(false), true, '<code>booWho(false)</code> should return true.');"
        },
        {
          "text": "<code>booWho([1, 2, 3])</code> should return false.",
          "testString": "assert.strictEqual(booWho([1, 2, 3]), false, '<code>booWho([1, 2, 3])</code> should return false.');"
        },
        {
          "text": "<code>booWho([].slice)</code> should return false.",
          "testString": "assert.strictEqual(booWho([].slice), false, '<code>booWho([].slice)</code> should return false.');"
        },
        {
          "text": "<code>booWho({ \"a\": 1 })</code> should return false.",
          "testString": "assert.strictEqual(booWho({ \"a\": 1 }), false, '<code>booWho({ \"a\": 1 })</code> should return false.');"
        },
        {
          "text": "<code>booWho(1)</code> should return false.",
          "testString": "assert.strictEqual(booWho(1), false, '<code>booWho(1)</code> should return false.');"
        },
        {
          "text": "<code>booWho(NaN)</code> should return false.",
          "testString": "assert.strictEqual(booWho(NaN), false, '<code>booWho(NaN)</code> should return false.');"
        },
        {
          "text": "<code>booWho(\"a\")</code> should return false.",
          "testString": "assert.strictEqual(booWho(\"a\"), false, '<code>booWho(\"a\")</code> should return false.');"
        },
        {
          "text": "<code>booWho(\"true\")</code> should return false.",
          "testString": "assert.strictEqual(booWho(\"true\"), false, '<code>booWho(\"true\")</code> should return false.');"
        },
        {
          "text": "<code>booWho(\"false\")</code> should return false.",
          "testString": "assert.strictEqual(booWho(\"false\"), false, '<code>booWho(\"false\")</code> should return false.');"
        }
      ],
      "MDNlinks": [
        "Boolean Objects"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "¡Bu!",
          "description": [
            "Crea una función que verifique si el valor que se le pasa es de tipo booleano. Haz que la función devuelva true o false según corresponda.",
            "Los primitivos booleanos primitivos son: true y false",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "pt-br": {
          "title": "Bu!",
          "description": [
            "Verifique se um valor é classificado como um primitivo booleano. Retorne <code>true</code> ou <code>false</code>.",
            "Primitivos booleanos são <code>true</code> e <code>false</code>.",
            "Lembre-se de <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se ficar travado. Tente programar em par. Escreva seu próprio código."
          ]
        },
        "fr": {
          "title": "Boo !",
          "description": [
            "Crée une fonction qui vérifie qu'une valeur est de type booléen. Renvoie true ou false.",
            "Les primitives booléennes sont true ou false.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function booWho(bool) {",
            "  // What is the new fad diet for ghost developers? The Boolean.",
            "  return bool;",
            "}",
            "",
            "booWho(null);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "ab6137d4e35944e21037b769",
      "title": "Title Case a Sentence",
      "description": [
        "Return the provided string with the first letter of each word capitalized. Make sure the rest of the word is in lower case.",
        "For the purpose of this exercise, you should also capitalize connecting words like \"the\" and \"of\".",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>titleCase(\"I&#39;m a little tea pot\")</code> should return a string.",
          "testString": "assert(typeof titleCase(\"I'm a little tea pot\") === \"string\", '<code>titleCase(\"I&#39;m a little tea pot\")</code> should return a string.');"
        },
        {
          "text": "<code>titleCase(\"I&#39;m a little tea pot\")</code> should return <code>I&#39;m A Little Tea Pot</code>.",
          "testString": "assert(titleCase(\"I'm a little tea pot\") === \"I'm A Little Tea Pot\", '<code>titleCase(\"I&#39;m a little tea pot\")</code> should return <code>I&#39;m A Little Tea Pot</code>.');"
        },
        {
          "text": "<code>titleCase(\"sHoRt AnD sToUt\")</code> should return <code>Short And Stout</code>.",
          "testString": "assert(titleCase(\"sHoRt AnD sToUt\") === \"Short And Stout\", '<code>titleCase(\"sHoRt AnD sToUt\")</code> should return <code>Short And Stout</code>.');"
        },
        {
          "text": "<code>titleCase(\"HERE IS MY HANDLE HERE IS MY SPOUT\")</code> should return <code>Here Is My Handle Here Is My Spout</code>.",
          "testString": "assert(titleCase(\"HERE IS MY HANDLE HERE IS MY SPOUT\") === \"Here Is My Handle Here Is My Spout\", '<code>titleCase(\"HERE IS MY HANDLE HERE IS MY SPOUT\")</code> should return <code>Here Is My Handle Here Is My Spout</code>.');"
        }
      ],
      "isRequired": true,
      "solutions": [
        "function titleCase(str) {\n  return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.substring(1).toLowerCase()).join(' ');\n}\n\ntitleCase(\"I'm a little tea pot\");\n"
      ],
      "MDNlinks": [
        "String.prototype.split()"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Aplica formato de título",
          "description": [
            "Crea una función que devuelva la cadena de texto que recibe con la primera letra de cada palabra en mayúscula. Asegúrate de que el resto de las letras sean minúsculas",
            "Para este ejercicio, también debes poner en mayúscula conectores como \"the\" y \"of\".",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "pt-br": {
          "title": "Transforme Uma String Num Título",
          "description": [
            "Retorne a string fornecida com a primeira letra de cada palavra em maiúsculo. Certifique-se de que o resto da palavra esteja minúsculo.",
            "Para o propósito desse exercício, você também deve deixar maiúscula a primeira letra das palavras de ligação como \"the\" e \"of\".",
            "Lembre-se de <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se ficar travado. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function titleCase(str) {",
            "  return str;",
            "}",
            "",
            "titleCase(\"I'm a little tea pot\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "579e2a2c335b9d72dd32e05c",
      "title": "Slice and Splice",
      "description": [
        "You are given two arrays and an index.",
        "Use the array methods <code>slice</code> and <code>splice</code> to copy each element of the first array into the second array, in order.",
        "Begin inserting elements at index <code>n</code> of the second array.",
        "Return the resulting array. The input arrays should remain the same after the function runs.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>frankenSplice([1, 2, 3], [4, 5], 1)</code> should return <code>[4, 1, 2, 3, 5]</code>.",
          "testString": "assert.deepEqual(frankenSplice([1, 2, 3], [4, 5], 1), [4, 1, 2, 3, 5], '<code>frankenSplice([1, 2, 3], [4, 5], 1)</code> should return <code>[4, 1, 2, 3, 5]</code>.');"
        },
        {
          "text": "<code>frankenSplice([1, 2], [\"a\", \"b\"], 1)</code> should return <code>[\"a\", 1, 2, \"b\"]</code>.",
          "testString": "assert.deepEqual(frankenSplice(testArr1, testArr2, 1), [\"a\", 1, 2, \"b\"], '<code>frankenSplice([1, 2], [\"a\", \"b\"], 1)</code> should return <code>[\"a\", 1, 2, \"b\"]</code>.');"
        },
        {
          "text": "<code>frankenSplice([\"claw\", \"tentacle\"], [\"head\", \"shoulders\", \"knees\", \"toes\"], 2)</code> should return <code>[\"head\", \"shoulders\", \"claw\", \"tentacle\", \"knees\", \"toes\"]</code>.",
          "testString": "assert.deepEqual(frankenSplice([\"claw\", \"tentacle\"], [\"head\", \"shoulders\", \"knees\", \"toes\"], 2), [\"head\", \"shoulders\", \"claw\", \"tentacle\", \"knees\", \"toes\"], '<code>frankenSplice([\"claw\", \"tentacle\"], [\"head\", \"shoulders\", \"knees\", \"toes\"], 2)</code> should return <code>[\"head\", \"shoulders\", \"claw\", \"tentacle\", \"knees\", \"toes\"]</code>.');"
        },
        {
          "text": "All elements from the first array should be added to the second array in their original order.",
          "testString": "assert.deepEqual(frankenSplice([1, 2, 3, 4], [], 0), [1, 2, 3, 4], 'All elements from the first array should be added to the second array in their original order.');"
        },
        {
          "text": "The first array should remain the same after the function runs.",
          "testString": "assert(testArr1[0] === 1 && testArr1[1] === 2, 'The first array should remain the same after the function runs.');"
        },
        {
          "text": "The second array should remain the same after the function runs.",
          "testString": "assert(testArr2[0] === \"a\" && testArr2[1] === \"b\", 'The second array should remain the same after the function runs.');"
        }
      ],
      "isRequired": true,
      "isBeta": true,
      "solutions": [
        "function frankenSplice(arr1, arr2, n) {\n  // It's alive. It's alive!\n  let result = arr2.slice();\n  for (let i = 0; i < arr1.length; i++) {\n    result.splice(n+i, 0, arr1[i]);\n  }\n  return result;\n}\n\nfrankenSplice([1, 2, 3], [4, 5], 1);\n"
      ],
      "MDNlinks": [
        "Array.prototype.slice()",
        "Array.prototype.splice()"
      ],
      "challengeType": 5,
      "translations": {
        "pt-br": {
          "title": "Slice e splice",
          "description": [
            "Você recebe dois arrays e um índice.",
            "Use os métodos de array <code>slice</code> e <code>splice</code> para copiar cada elemento do primeiro array para o segundo array, em ordem.",
            "Comece a inserir elementos no índice <code>n</code> do segundo array.",
            "Lembre-se de <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se ficar travado. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function frankenSplice(arr1, arr2, n) {",
            "  // It's alive. It's alive!",
            "  return arr2;",
            "}",
            "",
            "frankenSplice([1, 2, 3], [4, 5, 6], 1);"
          ],
          "head": [],
          "tail": [
            "let testArr1 = [1, 2];",
            "let testArr2 = [\"a\", \"b\"];"
          ]
        }
      }
    },
    {
      "id": "adf08ec01beb4f99fc7a68f2",
      "title": "Falsy Bouncer",
      "description": [
        "Remove all falsy values from an array.",
        "Falsy values in JavaScript are <code>false</code>, <code>null</code>, <code>0</code>, <code>\"\"</code>, <code>undefined</code>, and <code>NaN</code>.",
        "Hint: Try converting each value to a Boolean.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>bouncer([7, \"ate\", \"\", false, 9])</code> should return <code>[7, \"ate\", 9]</code>.",
          "testString": "assert.deepEqual(bouncer([7, \"ate\", \"\", false, 9]), [7, \"ate\", 9], '<code>bouncer([7, \"ate\", \"\", false, 9])</code> should return <code>[7, \"ate\", 9]</code>.');"
        },
        {
          "text": "<code>bouncer([\"a\", \"b\", \"c\"])</code> should return <code>[\"a\", \"b\", \"c\"]</code>.",
          "testString": "assert.deepEqual(bouncer([\"a\", \"b\", \"c\"]), [\"a\", \"b\", \"c\"], '<code>bouncer([\"a\", \"b\", \"c\"])</code> should return <code>[\"a\", \"b\", \"c\"]</code>.');"
        },
        {
          "text": "<code>bouncer([false, null, 0, NaN, undefined, \"\"])</code> should return <code>[]</code>.",
          "testString": "assert.deepEqual(bouncer([false, null, 0, NaN, undefined, \"\"]), [], '<code>bouncer([false, null, 0, NaN, undefined, \"\"])</code> should return <code>[]</code>.');"
        },
        {
          "text": "<code>bouncer([1, null, NaN, 2, undefined])</code> should return <code>[1, 2]</code>.",
          "testString": "assert.deepEqual(bouncer([1, null, NaN, 2, undefined]), [1, 2], '<code>bouncer([1, null, NaN, 2, undefined])</code> should return <code>[1, 2]</code>.');"
        }
      ],
      "isRequired": true,
      "solutions": [
        "function bouncer(arr) {\n  return arr.filter(e => e);\n}\n\nbouncer([7, \"ate\", \"\", false, 9]);\n"
      ],
      "MDNlinks": [
        "Boolean Objects",
        "Array.prototype.filter()"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Detector de Mentiras",
          "description": [
            "Remueve todos los valores falsy de un arreglo dado",
            "En JavaScript, los valores falsy son los siguientes: <code>false</code>, <code>null</code>, <code>0</code>, <code>\"\"</code>, <code>undefined</code>, y <code>NaN</code>.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "pt-br": {
          "title": "Detector de mentiras",
          "description": [
            "Remova todos os valores falsos de um array.",
            "Valores falsos em JavaScript são <code>false</code>, <code>null</code>, <code>0</code>, <code>\"\"</code>, <code>undefined</code> e <code>NaN</code>.",
            "Dica: Tente converter cada valor para um booleano.",
            "Lembre-se de <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se ficar travado. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function bouncer(arr) {",
            "  // Don't show a false ID to this bouncer.",
            "  return arr;",
            "}",
            "",
            "bouncer([7, \"ate\", \"\", false, 9]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a24c1a4622e3c05097f71d67",
      "title": "Where do I Belong",
      "description": [
        "Return the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted. The returned value should be a number.",
        "For example, <code>getIndexToIns([1,2,3,4], 1.5)</code> should return <code>1</code> because it is greater than <code>1</code> (index 0), but less than <code>2</code> (index 1).",
        "Likewise, <code>getIndexToIns([20,3,5], 19)</code> should return <code>2</code> because once the array has been sorted it will look like <code>[3,5,20]</code> and <code>19</code> is less than <code>20</code> (index 2) and greater than <code>5</code> (index 1).",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return <code>3</code>.",
          "testString": "assert(getIndexToIns([10, 20, 30, 40, 50], 35) === 3, '<code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return <code>3</code>.');"
        },
        {
          "text": "<code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return a number.",
          "testString": "assert(typeof(getIndexToIns([10, 20, 30, 40, 50], 35)) === \"number\", '<code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return a number.');"
        },
        {
          "text": "<code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return <code>2</code>.",
          "testString": "assert(getIndexToIns([10, 20, 30, 40, 50], 30) === 2, '<code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return <code>2</code>.');"
        },
        {
          "text": "<code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return a number.",
          "testString": "assert(typeof(getIndexToIns([10, 20, 30, 40, 50], 30)) === \"number\", '<code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return a number.');"
        },
        {
          "text": "<code>getIndexToIns([40, 60], 50)</code> should return <code>1</code>.",
          "testString": "assert(getIndexToIns([40, 60], 50) === 1, '<code>getIndexToIns([40, 60], 50)</code> should return <code>1</code>.');"
        },
        {
          "text": "<code>getIndexToIns([40, 60], 50)</code> should return a number.",
          "testString": "assert(typeof(getIndexToIns([40, 60], 50)) === \"number\", '<code>getIndexToIns([40, 60], 50)</code> should return a number.');"
        },
        {
          "text": "<code>getIndexToIns([3, 10, 5], 3)</code> should return <code>0</code>.",
          "testString": "assert(getIndexToIns([3, 10, 5], 3) === 0, '<code>getIndexToIns([3, 10, 5], 3)</code> should return <code>0</code>.');"
        },
        {
          "text": "<code>getIndexToIns([3, 10, 5], 3)</code> should return a number.",
          "testString": "assert(typeof(getIndexToIns([3, 10, 5], 3)) === \"number\", '<code>getIndexToIns([3, 10, 5], 3)</code> should return a number.');"
        },
        {
          "text": "<code>getIndexToIns([5, 3, 20, 3], 5)</code> should return <code>2</code>.",
          "testString": "assert(getIndexToIns([5, 3, 20, 3], 5) === 2, '<code>getIndexToIns([5, 3, 20, 3], 5)</code> should return <code>2</code>.');"
        },
        {
          "text": "<code>getIndexToIns([5, 3, 20, 3], 5)</code> should return a number.",
          "testString": "assert(typeof(getIndexToIns([5, 3, 20, 3], 5)) === \"number\", '<code>getIndexToIns([5, 3, 20, 3], 5)</code> should return a number.');"
        },
        {
          "text": "<code>getIndexToIns([2, 20, 10], 19)</code> should return <code>2</code>.",
          "testString": "assert(getIndexToIns([2, 20, 10], 19) === 2, '<code>getIndexToIns([2, 20, 10], 19)</code> should return <code>2</code>.');"
        },
        {
          "text": "<code>getIndexToIns([2, 20, 10], 19)</code> should return a number.",
          "testString": "assert(typeof(getIndexToIns([2, 20, 10], 19)) === \"number\", '<code>getIndexToIns([2, 20, 10], 19)</code> should return a number.');"
        },
        {
          "text": "<code>getIndexToIns([2, 5, 10], 15)</code> should return <code>3</code>.",
          "testString": "assert(getIndexToIns([2, 5, 10], 15) === 3, '<code>getIndexToIns([2, 5, 10], 15)</code> should return <code>3</code>.');"
        },
        {
          "text": "<code>getIndexToIns([2, 5, 10], 15)</code> should return a number.",
          "testString": "assert(typeof(getIndexToIns([2, 5, 10], 15)) === \"number\", '<code>getIndexToIns([2, 5, 10], 15)</code> should return a number.');"
        },
        {
          "text": "<code>getIndexToIns([], 1)</code> should return <code>0</code>.",
          "testString": "assert(getIndexToIns([], 1) === 0, '<code>getIndexToIns([], 1)</code> should return <code>0</code>.');"
        },
        {
          "text": "<code>getIndexToIns([], 1)</code> should return a number.",
          "testString": "assert(typeof(getIndexToIns([], 1)) === \"number\", '<code>getIndexToIns([], 1)</code> should return a number.');"
        }
      ],
      "isRequired": true,
      "solutions": [
        "function getIndexToIns(arr, num) {\n  arr = arr.sort((a, b) => a - b);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= num) {\n      return i;\n    }\n  }\n\n  return arr.length;\n}\n\ngetIndexToIns([40, 60], 50);\n"
      ],
      "MDNlinks": [
        "Array.prototype.sort()"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "¿Cuál es mi Asiento?",
          "description": [
            "Devuelve el menor índice en el que un valor (segundo argumento) debe ser insertado en un arreglo (primer argumento) una vez ha sido ordenado.",
            "Por ejemplo, where([1,2,3,4], 1.5) debe devolver 1 porque el segundo argumento de la función (1.5) es mayor que 1 (con índice 0 en el arreglo), pero menor que 2 (con índice 1).",
            "Mientras que <code>where([20,3,5], 19)</code> debe devolver <code>2</code> porque una vez ordenado el arreglo se verá com <code>[3,5,20]</code> y <code>19</code> es menor que <code>20</code> (índice 2) y mayor que <code>5</code> (índice 1).",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "pt-br": {
          "title": "Onde é meu lugar?",
          "description": [
            "Retorne o menor índice no qual um valor (segundo argumento) deve ser inserido num array (primeiro argumento) depois que ele foi ordenado. O valor retornado deve ser um número.",
            "Por exemplo, <code>getIndexToIns([1,2,3,4], 1.5)</code> deve retornar <code>1</code> porque <code>1.5</code> é maior que <code>1</code> (índice 0), mas menor que <code>2</code> (índice 1).",
            "Da mesma forma, <code>getIndexToIns([20,3,5], 19)</code> deve retornar <code>2</code> porque, depois de ordenado, o array será <code>[3,5,20]</code> e <code>19</code> é menor que <code>20</code> (índice 2) e maior que <code>5</code> (index 1).",
            "Lembre-se de <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se ficar travado. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function getIndexToIns(arr, num) {",
            "  // Find my place in this sorted array.",
            "  return num;",
            "}",
            "",
            "getIndexToIns([40, 60], 50);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "af2170cad53daa0770fabdea",
      "title": "Mutations",
      "description": [
        "Return true if the string in the first element of the array contains all of the letters of the string in the second element of the array.",
        "For example, <code>[\"hello\", \"Hello\"]</code>, should return true because all of the letters in the second string are present in the first, ignoring case.",
        "The arguments <code>[\"hello\", \"hey\"]</code> should return false because the string \"hello\" does not contain a \"y\".",
        "Lastly, <code>[\"Alien\", \"line\"]</code>, should return true because all of the letters in \"line\" are present in \"Alien\".",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>mutation([\"hello\", \"hey\"])</code> should return false.",
          "testString": "assert(mutation([\"hello\", \"hey\"]) === false, '<code>mutation([\"hello\", \"hey\"])</code> should return false.');"
        },
        {
          "text": "<code>mutation([\"hello\", \"Hello\"])</code> should return true.",
          "testString": "assert(mutation([\"hello\", \"Hello\"]) === true, '<code>mutation([\"hello\", \"Hello\"])</code> should return true.');"
        },
        {
          "text": "<code>mutation([\"zyxwvutsrqponmlkjihgfedcba\", \"qrstu\"])</code> should return true.",
          "testString": "assert(mutation([\"zyxwvutsrqponmlkjihgfedcba\", \"qrstu\"]) === true, '<code>mutation([\"zyxwvutsrqponmlkjihgfedcba\", \"qrstu\"])</code> should return true.');"
        },
        {
          "text": "<code>mutation([\"Mary\", \"Army\"])</code> should return true.",
          "testString": "assert(mutation([\"Mary\", \"Army\"]) === true, '<code>mutation([\"Mary\", \"Army\"])</code> should return true.');"
        },
        {
          "text": "<code>mutation([\"Mary\", \"Aarmy\"])</code> should return true.",
          "testString": "assert(mutation([\"Mary\", \"Aarmy\"]) === true, '<code>mutation([\"Mary\", \"Aarmy\"])</code> should return true.');"
        },
        {
          "text": "<code>mutation([\"Alien\", \"line\"])</code> should return true.",
          "testString": "assert(mutation([\"Alien\", \"line\"]) === true, '<code>mutation([\"Alien\", \"line\"])</code> should return true.');"
        },
        {
          "text": "<code>mutation([\"floor\", \"for\"])</code> should return true.",
          "testString": "assert(mutation([\"floor\", \"for\"]) === true, '<code>mutation([\"floor\", \"for\"])</code> should return true.');"
        },
        {
          "text": "<code>mutation([\"hello\", \"neo\"])</code> should return false.",
          "testString": "assert(mutation([\"hello\", \"neo\"]) === false, '<code>mutation([\"hello\", \"neo\"])</code> should return false.');"
        },
        {
          "text": "<code>mutation([\"voodoo\", \"no\"])</code> should return false.",
          "testString": "assert(mutation([\"voodoo\", \"no\"]) === false, '<code>mutation([\"voodoo\", \"no\"])</code> should return false.');"
        }
      ],
      "isRequired": true,
      "solutions": [
        "function mutation(arr) {\n  let hash = Object.create(null);\n\n  arr[0].toLowerCase().split('').forEach(c => hash[c] = true);\n\n  return !arr[1].toLowerCase().split('').filter(c => !hash[c]).length;\n}\n\nmutation([\"hello\", \"hey\"]);\n"
      ],
      "MDNlinks": [
        "String.prototype.indexOf()"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Mutaciones",
          "description": [
            "Crea una función que devuelva <code>true</code> si la cadena de texto del primer elemento de un arreglo contiene todas las letras de la cadena de texto del segundo elemento del arreglo.",
            "Por ejemplo, <code>[\"hello\", \"Hello\"]</code>, debe devolver <code>true</code> porque todas las letras en la segunda cadena de texto están presentes en la primera, sin distinguir entre mayúsculas y minúsculas.",
            "En el caso de <code>[\"hello\", \"hey\"]</code> la función debe devolver false porque la cadena de texto \"hello\" no contiene una \"y\".",
            "Finalmente, <code>[\"Alien\", \"line\"]</code>, la función debe devolver <code>true</code> porque todas las letras en \"line\" están presentes en \"Alien\".",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "pt-br": {
          "title": "Mutações",
          "description": [
            "Retorne <code>true</code> se a string no primeiro elemento do array contiver todas as letras da string no segundo elemento do array.",
            "Por exemplo, para os argumentos <code>[\"hello\", \"Hello\"]</code>, sua função deve retornar <code>true</code>, porque todas as letras da segunda string estão presentes na primeira, ignorando maiúsculas e minúsculas.",
            "Para os argumentos <code>[\"hello\", \"hey\"]</code>, sua função deve retornar <code>false</code> porque a string \"hello\" não contém um \"y\".",
            "Finalmente, para <code>[\"Alien\", \"line\"]</code>, sua função deve retornar <code>true</code> porque todas as letras em \"line\" estão presentes em \"Alien\".",
            "Lembre-se de <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se ficar travado. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function mutation(arr) {",
            "  return arr;",
            "}",
            "",
            "mutation([\"hello\", \"hey\"]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a9bd25c716030ec90084d8a1",
      "title": "Chunky Monkey",
      "description": [
        "Write a function that splits an array (first argument) into groups the length of <code>size</code> (second argument) and returns them as a two-dimensional array.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>chunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2)</code> should return <code>[[\"a\", \"b\"], [\"c\", \"d\"]]</code>.",
          "testString": "assert.deepEqual(chunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2), [[\"a\", \"b\"], [\"c\", \"d\"]], '<code>chunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2)</code> should return <code>[[\"a\", \"b\"], [\"c\", \"d\"]]</code>.');"
        },
        {
          "text": "<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3)</code> should return <code>[[0, 1, 2], [3, 4, 5]]</code>.",
          "testString": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3), [[0, 1, 2], [3, 4, 5]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3)</code> should return <code>[[0, 1, 2], [3, 4, 5]]</code>.');"
        },
        {
          "text": "<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2)</code> should return <code>[[0, 1], [2, 3], [4, 5]]</code>.",
          "testString": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2), [[0, 1], [2, 3], [4, 5]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2)</code> should return <code>[[0, 1], [2, 3], [4, 5]]</code>.');"
        },
        {
          "text": "<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4)</code> should return <code>[[0, 1, 2, 3], [4, 5]]</code>.",
          "testString": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4), [[0, 1, 2, 3], [4, 5]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4)</code> should return <code>[[0, 1, 2, 3], [4, 5]]</code>.');"
        },
        {
          "text": "<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3)</code> should return <code>[[0, 1, 2], [3, 4, 5], [6]]</code>.",
          "testString": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3), [[0, 1, 2], [3, 4, 5], [6]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3)</code> should return <code>[[0, 1, 2], [3, 4, 5], [6]]</code>.');"
        },
        {
          "text": "<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4)</code> should return <code>[[0, 1, 2, 3], [4, 5, 6, 7], [8]]</code>.",
          "testString": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4), [[0, 1, 2, 3], [4, 5, 6, 7], [8]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4)</code> should return <code>[[0, 1, 2, 3], [4, 5, 6, 7], [8]]</code>.');"
        },
        {
          "text": "<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2)</code> should return <code>[[0, 1], [2, 3], [4, 5], [6, 7], [8]]</code>.",
          "testString": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2), [[0, 1], [2, 3], [4, 5], [6, 7], [8]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2)</code> should return <code>[[0, 1], [2, 3], [4, 5], [6, 7], [8]]</code>.');"
        }
      ],
      "isRequired": true,
      "solutions": [
        "function chunkArrayInGroups(arr, size) {\n  let out = [];\n\n  for (let i = 0; i < arr.length; i += size) {\n    out.push(arr.slice(i, i + size));\n  }\n\n  return out;\n}\n\nchunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);\n"
      ],
      "MDNlinks": [
        "Array.prototype.push()",
        "Array.prototype.slice()"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "En mil Pedazos",
          "description": [
            "Escribe una función que parta un arreglo (primer argumento) en fragmentos de una longitud dada (segundo argumento) y los devuelva en forma de un arreglo bidimensional.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "pt-br": {
          "title": "Em pedaços",
          "description": [
            "Escreva uma função que divide um array (primeiro argumento) em grupos de comprimento <code>size</code> (segundo argumento) e retorna esses grupos num array bidimensional.",
            "Lembre-se de <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se ficar travado. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function chunkArrayInGroups(arr, size) {",
            "  // Break it up.",
            "  return arr;",
            "}",
            "",
            "chunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dac367417b2b2512b73",
      "title": "Create a Basic JavaScript Object",
      "description": [
        "Think about things people see everyday, like cars, shops, and birds. These are all <code>objects</code>: tangible things people can observe and interact with.",
        "What are some qualities of these <code>objects</code>? A car has wheels. Shops sell items. Birds have wings.",
        "These qualities, or <code>properties</code>, define what makes up an <code>object</code>. Note that similar <code>objects</code> share the same <code>properties</code>, but may have different values for those <code>properties</code>. For example, all cars have wheels, but not all cars have the same number of wheels.",
        "<code>Objects</code> in JavaScript are used to model real-world objects, giving them <code>properties</code> and behavior just like their real-world counterparts. Here's an example using these concepts to create a <code>duck</code> <code>object</code>:",
        "<blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2<br>};</blockquote>",
        "This <code>duck</code> <code>object</code> has two property/value pairs: a <code>name</code> of \"Aflac\" and a <code>numLegs</code> of 2.",
        "<hr>",
        "Create a <code>dog</code> <code>object</code> with <code>name</code> and <code>numLegs</code> properties, and set them to a string and a number, respectively."
      ],
      "tests": [
        {
          "text": "<code>dog</code> should be an <code>object</code>.",
          "testString": "assert(typeof(dog) === 'object', '<code>dog</code> should be an <code>object</code>.');"
        },
        {
          "text": "<code>dog</code> should have a <code>name</code> property set to a <code>string</code>.",
          "testString": "assert(typeof(dog.name) === 'string', '<code>dog</code> should have a <code>name</code> property set to a <code>string</code>.');"
        },
        {
          "text": "<code>dog</code> should have a <code>numLegs</code> property set to a <code>number</code>.",
          "testString": "assert(typeof(dog.numLegs) === 'number', '<code>dog</code> should have a <code>numLegs</code> property set to a <code>number</code>.');"
        }
      ],
      "solutions": [
        "let dog = {\n  name: '',\n  numLegs: 4\n};"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let dog = {",
            "  ",
            "};"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dac367417b2b2512b74",
      "title": "Use Dot Notation to Access the Properties of an Object",
      "description": [
        "The last challenge created an <code>object</code> with various <code>properties</code>, now you'll see how to access the values of those <code>properties</code>. Here's an example:",
        "<blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2<br>};<br>console.log(duck.name);<br>// This prints \"Aflac\" to the console</blockquote>",
        "Dot notation is used on the <code>object</code> name, <code>duck</code>, followed by the name of the <code>property</code>, <code>name</code>, to access the value of \"Aflac\".",
        "<hr>",
        "Print both <code>properties</code> of the <code>dog</code> object below to your console."
      ],
      "tests": [
        {
          "text": "Your should use <code>console.log</code> to print the value for the <code>name</code> property of the <code>dog</code> object.",
          "testString": "assert(/console.log\\(.*dog\\.name.*\\)/g.test(code), 'Your should use <code>console.log</code> to print the value for the <code>name</code> property of the <code>dog</code> object.');"
        },
        {
          "text": "Your should use <code>console.log</code> to print the value for the <code>numLegs</code> property of the <code>dog</code> object.",
          "testString": "assert(/console.log\\(.*dog\\.numLegs.*\\)/g.test(code), 'Your should use <code>console.log</code> to print the value for the <code>numLegs</code> property of the <code>dog</code> object.');"
        }
      ],
      "solutions": [
        "let dog = {\n  name: \"Spot\",\n  numLegs: 4\n};\nconsole.log(dog.name);\nconsole.log(dog.numLegs);"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let dog = {",
            "  name: \"Spot\",",
            "  numLegs: 4",
            "};",
            "// Add your code below this line",
            "",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dad367417b2b2512b75",
      "title": "Create a Method on an Object",
      "description": [
        "<code>Objects</code> can have a special type of <code>property</code>, called a <code>method</code>.",
        "<code>Methods</code> are <code>properties</code> that are functions. This adds different behavior to an <code>object</code>. Here is the <code>duck</code> example with a method:",
        "<blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2,<br>&nbsp;&nbsp;sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}<br>};<br>duck.sayName();<br>// Returns \"The name of this duck is Aflac.\"</blockquote>",
        "The example adds the <code>sayName</code> <code>method</code>, which is a function that returns a sentence giving the name of the <code>duck</code>.",
        "Notice that the <code>method</code> accessed the <code>name</code> property in the return statement using <code>duck.name</code>. The next challenge will cover another way to do this.",
        "<hr>",
        "Using the <code>dog</code> <code>object</code>, give it a method called <code>sayLegs</code>. The method should return the sentence \"This dog has 4 legs.\""
      ],
      "tests": [
        {
          "text": "<code>dog.sayLegs()</code> should be a function.",
          "testString": "assert(typeof(dog.sayLegs) === 'function', '<code>dog.sayLegs()</code> should be a function.');"
        },
        {
          "text": "<code>dog.sayLegs()</code> should return the given string - note that punctuation and spacing matter.",
          "testString": "assert(dog.sayLegs() === 'This dog has 4 legs.', '<code>dog.sayLegs()</code> should return the given string - note that punctuation and spacing matter.');"
        }
      ],
      "solutions": [
        "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs () {\n    return 'This dog has ' + this.numLegs + ' legs.';\n  }\n};\n\ndog.sayLegs();"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let dog = {",
            "  name: \"Spot\",",
            "  numLegs: 4,",
            "  ",
            "};",
            "",
            "dog.sayLegs();"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dad367417b2b2512b76",
      "title": "Make Code More Reusable with the this Keyword",
      "description": [
        "The last challenge introduced a <code>method</code> to the <code>duck</code> object. It used <code>duck.name</code> dot notation to access the value for the <code>name</code> property within the return statement:",
        "<code>sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}</code>",
        "While this is a valid way to access the object's property, there is a pitfall here. If the variable name changes, any code referencing the original name would need to be updated as well. In a short object definition, it isn't a problem, but if an object has many references to its properties there is a greater chance for error.",
        "A way to avoid these issues is with the <code>this</code> keyword:",
        "<blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2,<br>&nbsp;&nbsp;sayName: function() {return \"The name of this duck is \" + this.name + \".\";}<br>};</blockquote>",
        "<code>this</code> is a deep topic, and the above example is only one way to use it. In the current context, <code>this</code> refers to the object that the method is associated with: <code>duck</code>.",
        "If the object's name is changed to <code>mallard</code>, it is not necessary to find all the references to <code>duck</code> in the code. It makes the code reusable and easier to read.",
        "<hr>",
        "Modify the <code>dog.sayLegs</code> method to remove any references to <code>dog</code>. Use the <code>duck</code> example for guidance."
      ],
      "tests": [
        {
          "text": "<code>dog.sayLegs()</code> should return the given string.",
          "testString": "assert(dog.sayLegs() === 'This dog has 4 legs.', '<code>dog.sayLegs()</code> should return the given string.');"
        },
        {
          "text": "Your code should use the <code>this</code> keyword to access the <code>numLegs</code> property of <code>dog</code>.",
          "testString": "assert(code.match(/this\\.numLegs/g), 'Your code should use the <code>this</code> keyword to access the <code>numLegs</code> property of <code>dog</code>.');"
        }
      ],
      "solutions": [
        "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs () {\n    return 'This dog has ' + this.numLegs + ' legs.';\n  }\n};\n\ndog.sayLegs();"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let dog = {",
            "  name: \"Spot\",",
            "  numLegs: 4,",
            "  sayLegs: function() {return \"This dog has \" + dog.numLegs + \" legs.\";}",
            "};",
            "",
            "dog.sayLegs();"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dad367417b2b2512b77",
      "title": "Define a Constructor Function",
      "description": [
        "<code>Constructors</code> are functions that create new objects. They define properties and behaviors that will belong to the new object. Think of them as a blueprint for the creation of new objects.",
        "Here is an example of a <code>constructor</code>:",
        "<blockquote>function Bird() {<br>&nbsp;&nbsp;this.name = \"Albert\";<br>&nbsp;&nbsp;this.color = \"blue\";<br>&nbsp;&nbsp;this.numLegs = 2;<br>}</blockquote>",
        "This <code>constructor</code> defines a <code>Bird</code> object with properties <code>name</code>, <code>color</code>, and <code>numLegs</code> set to Albert, blue, and 2, respectively.",
        "<code>Constructors</code> follow a few conventions:",
        "<ul><li><code>Constructors</code> are defined with a capitalized name to distinguish them from other functions that are not <code>constructors</code>.</li><li><code>Constructors</code> use the keyword <code>this</code> to set properties of the object they will create. Inside the <code>constructor</code>, <code>this</code> refers to the new object it will create.</li><li><code>Constructors</code> define properties and behaviors instead of returning a value as other functions might.</li></ul>",
        "<hr>",
        "Create a <code>constructor</code>, <code>Dog</code>, with properties <code>name</code>, <code>color</code>, and <code>numLegs</code> that are set to a string, a string, and a number, respectively."
      ],
      "tests": [
        {
          "text": "<code>Dog</code> should have a <code>name</code> property set to a string.",
          "testString": "assert(typeof (new Dog()).name === 'string', '<code>Dog</code> should have a <code>name</code> property set to a string.');"
        },
        {
          "text": "<code>Dog</code> should have a <code>color</code> property set to a string.",
          "testString": "assert(typeof (new Dog()).color === 'string', '<code>Dog</code> should have a <code>color</code> property set to a string.');"
        },
        {
          "text": "<code>Dog</code> should have a <code>numLegs</code> property set to a number.",
          "testString": "assert(typeof (new Dog()).numLegs === 'number', '<code>Dog</code> should have a <code>numLegs</code> property set to a number.');"
        }
      ],
      "solutions": [
        "function Dog (name, color, numLegs) {\n  this.name = 'name';\n  this.color = 'color';\n  this.numLegs = 4;\n}"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dad367417b2b2512b78",
      "title": "Use a Constructor to Create Objects",
      "description": [
        "Here's the <code>Bird</code> constructor from the previous challenge:",
        "<blockquote>function Bird() {<br>&nbsp;&nbsp;this.name = \"Albert\";<br>&nbsp;&nbsp;this.color  = \"blue\";<br>&nbsp;&nbsp;this.numLegs = 2;<br>&nbsp;&nbsp;// \"this\" inside the constructor always refers to the object being created<br>}<br><br>let blueBird = new Bird();</blockquote>",
        "Notice that the <code>new</code> operator is used when calling a constructor. This tells JavaScript to create a new <code>instance</code> of <code>Bird</code> called <code>blueBird</code>. Without the <code>new</code> operator, <code>this</code> inside the constructor would not point to the newly created object, giving unexpected results.",
        "Now <code>blueBird</code> has all the properties defined inside the <code>Bird</code> constructor:",
        "<blockquote>blueBird.name; // => Albert<br>blueBird.color; // => blue<br>blueBird.numLegs; // => 2</blockquote>",
        "Just like any other object, its properties can be accessed and modified:",
        "<blockquote>blueBird.name = 'Elvira';<br>blueBird.name; // => Elvira</blockquote>",
        "<hr>",
        "Use the <code>Dog</code> constructor from the last lesson to create a new instance of <code>Dog</code>, assigning it to a variable <code>hound</code>."
      ],
      "tests": [
        {
          "text": "<code>hound</code> should be created using the <code>Dog</code> constructor.",
          "testString": "assert(hound instanceof Dog, '<code>hound</code> should be created using the <code>Dog</code> constructor.');"
        },
        {
          "text": "Your code should use the <code>new</code> operator to create an <code>instance</code> of <code>Dog</code>.",
          "testString": "assert(code.match(/new/g), 'Your code should use the <code>new</code> operator to create an <code>instance</code> of <code>Dog</code>.');"
        }
      ],
      "solutions": [
        "function Dog() {\n  this.name = \"Rupert\";\n  this.color = \"brown\";\n  this.numLegs = 4;\n}\nconst hound = new Dog();"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Dog() {",
            "  this.name = \"Rupert\";",
            "  this.color = \"brown\";",
            "  this.numLegs = 4;",
            "}",
            "// Add your code below this line",
            "",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dae367417b2b2512b79",
      "title": "Extend Constructors to Receive Arguments",
      "description": [
        "The <code>Bird</code> and <code>Dog</code> constructors from last challenge worked well. However, notice that all <code>Birds</code> that are created with the <code>Bird</code> constructor are automatically named Albert, are blue in color, and have two legs. What if you want birds with different values for name and color? It's possible to change the properties of each bird manually but that would be a lot of work:",
        "<blockquote>let swan = new Bird();<br>swan.name = \"Carlos\";<br>swan.color = \"white\";</blockquote>",
        "Suppose you were writing a program to keep track of hundreds or even thousands of different birds in an aviary. It would take a lot of time to create all the birds, then change the properties to different values for every one.",
        "To more easily create different <code>Bird</code> objects, you can design your Bird constructor to accept parameters:",
        "<blockquote>function Bird(name, color) {<br>&nbsp;&nbsp;this.name = name;<br>&nbsp;&nbsp;this.color = color;<br>&nbsp;&nbsp;this.numLegs = 2;<br>}</blockquote>",
        "Then pass in the values as arguments to define each unique bird into the <code>Bird</code> constructor:",
        "<code>let cardinal = new Bird(\"Bruce\", \"red\");</code>",
        "This gives a new instance of <code>Bird</code> with name and color properties set to Bruce and red, respectively. The <code>numLegs</code> property is still set to 2.",
        "The <code>cardinal</code> has these properties:",
        "<blockquote>cardinal.name // => Bruce<br>cardinal.color // => red<br>cardinal.numLegs // => 2</blockquote>",
        "The constructor is more flexible. It's now possible to define the properties for each <code>Bird</code> at the time it is created, which is one way that JavaScript constructors are so useful. They group objects together based on shared characteristics and behavior and define a blueprint that automates their creation.",
        "<hr>",
        "Create another <code>Dog</code> constructor. This time, set it up to take the parameters <code>name</code> and <code>color</code>, and have the property <code>numLegs</code> fixed at 4. Then create a new <code>Dog</code> saved in a variable <code>terrier</code>. Pass it two strings as arguments for the <code>name</code> and <code>color</code> properties."
      ],
      "tests": [
        {
          "text": "<code>Dog</code> should receive an argument for <code>name</code>.",
          "testString": "assert((new Dog('Clifford')).name === 'Clifford', '<code>Dog</code> should receive an argument for <code>name</code>.');"
        },
        {
          "text": "<code>Dog</code> should receive an argument for <code>color</code>.",
          "testString": "assert((new Dog('Clifford', 'yellow')).color === 'yellow', '<code>Dog</code> should receive an argument for <code>color</code>.');"
        },
        {
          "text": "<code>Dog</code> should have property <code>numLegs</code> set to 4.",
          "testString": "assert((new Dog('Clifford')).numLegs === 4, '<code>Dog</code> should have property <code>numLegs</code> set to 4.');"
        },
        {
          "text": "<code>terrier</code> should be created using the <code>Dog</code> constructor.",
          "testString": "assert(terrier instanceof Dog, '<code>terrier</code> should be created using the <code>Dog</code> constructor.');"
        }
      ],
      "solutions": [
        "function Dog (name, color) {\n  this.numLegs = 4;\n  this.name = name;\n  this.color = color;\n}\n\nconst terrier = new Dog();"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Dog() {",
            "  ",
            "}",
            "",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dae367417b2b2512b7a",
      "title": "Verify an Object's Constructor with instanceof",
      "description": [
        "Anytime a constructor function creates a new object, that object is said to be an <code>instance</code> of its constructor. JavaScript gives a convenient way to verify this with the <code>instanceof</code> operator. <code>instanceof</code> allows you to compare an object to a constructor, returning <code>true</code> or <code>false</code> based on whether or not that object was created with the constructor. Here's an example:",
        "<blockquote>let Bird = function(name, color) {<br>&nbsp;&nbsp;this.name = name;<br>&nbsp;&nbsp;this.color = color;<br>&nbsp;&nbsp;this.numLegs = 2;<br>}<br><br>let crow = new Bird(\"Alexis\", \"black\");<br><br>crow instanceof Bird; // => true</blockquote>",
        "If an object is created without using a constructor, <code>instanceof</code> will verify that it is not an instance of that constructor:",
        "<blockquote>let canary = {<br>&nbsp;&nbsp;name: \"Mildred\",<br>&nbsp;&nbsp;color: \"Yellow\",<br>&nbsp;&nbsp;numLegs: 2<br>};<br><br>canary instanceof Bird; // => false</blockquote>",
        "<hr>",
        "Create a new instance of the <code>House</code> constructor, calling it <code>myHouse</code> and passing a number of bedrooms. Then, use <code>instanceof</code> to verify that it is an instance of <code>House</code>."
      ],
      "tests": [
        {
          "text": "<code>myHouse</code> should have a <code>numBedrooms</code> attribute set to a number.",
          "testString": "assert(typeof myHouse.numBedrooms === 'number', '<code>myHouse</code> should have a <code>numBedrooms</code> attribute set to a number.');"
        },
        {
          "text": "Be sure to verify that <code>myHouse</code> is an instance of <code>House</code> using the <code>instanceof</code> operator.",
          "testString": "assert(/myHouse\\s*instanceof\\s*House/.test(code), 'Be sure to verify that <code>myHouse</code> is an instance of <code>House</code> using the <code>instanceof</code> operator.');"
        }
      ],
      "solutions": [
        "function House(numBedrooms) {\n  this.numBedrooms = numBedrooms;\n}\nconst myHouse = new House(4);\nconsole.log(myHouse instanceof House);"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "/* jshint expr: true */",
            "",
            "function House(numBedrooms) {",
            "  this.numBedrooms = numBedrooms;",
            "}",
            "",
            "// Add your code below this line",
            "",
            "",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dae367417b2b2512b7b",
      "title": "Understand Own Properties",
      "description": [
        "In the following example, the <code>Bird</code> constructor defines two properties: <code>name</code> and <code>numLegs</code>:",
        "<blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name  = name;<br>&nbsp;&nbsp;this.numLegs = 2;<br>}<br><br>let duck = new Bird(\"Donald\");<br>let canary = new Bird(\"Tweety\");</blockquote>",
        "<code>name</code> and <code>numLegs</code> are called <code>own</code> properties, because they are defined directly on the instance object. That means that <code>duck</code> and <code>canary</code> each has its own separate copy of these properties.",
        "In fact every instance of <code>Bird</code> will have its own copy of these properties.",
        "The following code adds all of the <code>own</code> properties of <code>duck</code> to the array <code>ownProps</code>:",
        "<blockquote>let ownProps = [];<br><br>for (let property in duck) {<br>&nbsp;&nbsp;if(duck.hasOwnProperty(property)) {<br>&nbsp;&nbsp;&nbsp;&nbsp;ownProps.push(property);<br>&nbsp;&nbsp;}<br>}<br><br>console.log(ownProps); // prints [ \"name\", \"numLegs\" ]</blockquote>",
        "<hr>",
        "Add the <code>own</code> properties of <code>canary</code> to the array <code>ownProps</code>."
      ],
      "tests": [
        {
          "text": "<code>ownProps</code> should include the values <code>\"numLegs\"</code> and <code>\"name\"</code>.",
          "testString": "assert(ownProps.indexOf('name') !== -1 && ownProps.indexOf('numLegs') !== -1, '<code>ownProps</code> should include the values <code>\"numLegs\"</code> and <code>\"name\"</code>.');"
        },
        {
          "text": "Solve this challenge without using the built in method <code>Object.keys()</code>.",
          "testString": "assert(!/\\Object.keys/.test(code), 'Solve this challenge without using the built in method <code>Object.keys()</code>.');"
        }
      ],
      "solutions": [
        "function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\nfunction getOwnProps (obj) {\n  const props = [];\n  \n  for (let prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      props.push(prop);\n    }\n  }\n  \n  return props;\n}\n\nconst ownProps = getOwnProps(canary);"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Bird(name) {",
            "  this.name = name;",
            "  this.numLegs = 2;",
            "}",
            "",
            "let canary = new Bird(\"Tweety\");",
            "let ownProps = [];",
            "// Add your code below this line",
            "",
            "",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dae367417b2b2512b7c",
      "title": "Use Prototype Properties to Reduce Duplicate Code",
      "description": [
        "Since <code>numLegs</code> will probably have the same value for all instances of <code>Bird</code>, you essentially have a duplicated variable <code>numLegs</code> inside each <code>Bird</code> instance.",
        "This may not be an issue when there are only two instances, but imagine if there are millions of instances. That would be a lot of duplicated variables.",
        "A better way is to use <code>Bird’s</code> <code>prototype</code>. The <code>prototype</code> is an object that is shared among ALL instances of <code>Bird</code>. Here's how to add <code>numLegs</code> to the <code>Bird prototype</code>:",
        "<blockquote>Bird.prototype.numLegs = 2;</blockquote>",
        "Now all instances of <code>Bird</code> have the <code>numLegs</code> property.",
        "<blockquote>console.log(duck.numLegs);  // prints 2<br>console.log(canary.numLegs);  // prints 2</blockquote>",
        "Since all instances automatically have the properties on the <code>prototype</code>, think of a <code>prototype</code> as a \"recipe\" for creating objects.",
        "Note that the <code>prototype</code> for <code>duck</code> and <code>canary</code> is part of the <code>Bird</code> constructor as <code>Bird.prototype</code>. Nearly every object in JavaScript has a <code>prototype</code> property which is part of the constructor function that created it.",
        "<hr>",
        "Add a <code>numLegs</code> property to the <code>prototype</code> of <code>Dog</code>"
      ],
      "tests": [
        {
          "text": "<code>beagle</code> should have a <code>numLegs</code> property.",
          "testString": "assert(beagle.numLegs !== undefined, '<code>beagle</code> should have a <code>numLegs</code> property.');"
        },
        {
          "text": "<code>beagle.numLegs</code> should be a number.",
          "testString": "assert(typeof(beagle.numLegs) === 'number' , '<code>beagle.numLegs</code> should be a number.');"
        },
        {
          "text": "<code>numLegs</code> should be a <code>prototype</code> property not an <code>own</code> property.",
          "testString": "assert(beagle.hasOwnProperty('numLegs') === false, '<code>numLegs</code> should be a <code>prototype</code> property not an <code>own</code> property.');"
        }
      ],
      "solutions": [
        "function Dog (name) {\n  this.name = name;\n}\nDog.prototype.numLegs = 4;\nlet beagle = new Dog(\"Snoopy\");"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Dog(name) {",
            "  this.name = name;",
            "}",
            "",
            "",
            "",
            "// Add your code above this line",
            "let beagle = new Dog(\"Snoopy\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7daf367417b2b2512b7d",
      "title": "Iterate Over All Properties",
      "description": [
        "You have now seen two kinds of properties: <code>own</code> properties and <code>prototype</code> properties. <code>Own</code> properties are defined directly on the object instance itself. And <code>prototype</code> properties are defined on the <code>prototype</code>.",
        "<blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name = name;  //own property<br>}<br><br>Bird.prototype.numLegs = 2; // prototype property<br><br>let duck = new Bird(\"Donald\");</blockquote>",
        "Here is how you add <code>duck’s</code> <code>own</code> properties to the array <code>ownProps</code> and <code>prototype</code> properties to the array <code>prototypeProps</code>:",
        "<blockquote>let ownProps = [];<br>let prototypeProps = [];<br><br>for (let property in duck) {<br>&nbsp;&nbsp;if(duck.hasOwnProperty(property)) {<br>&nbsp;&nbsp;&nbsp;&nbsp;ownProps.push(property);<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;prototypeProps.push(property);<br>&nbsp;&nbsp;}<br>}<br><br>console.log(ownProps); // prints [\"name\"]<br>console.log(prototypeProps); // prints [\"numLegs\"]</blockquote>",
        "<hr>",
        "Add all of the <code>own</code> properties of <code>beagle</code> to the array <code>ownProps</code>. Add all of the <code>prototype</code> properties of <code>Dog</code> to the array <code>prototypeProps</code>."
      ],
      "tests": [
        {
          "text": "The <code>ownProps</code> array should include <code>\"name\"</code>.",
          "testString": "assert(ownProps.indexOf('name') !== -1, 'The <code>ownProps</code> array should include <code>\"name\"</code>.');"
        },
        {
          "text": "The <code>prototypeProps</code> array should include <code>\"numLegs\"</code>.",
          "testString": "assert(prototypeProps.indexOf('numLegs') !== -1, 'The <code>prototypeProps</code> array should include <code>\"numLegs\"</code>.');"
        },
        {
          "text": "Solve this challenge without using the built in method <code>Object.keys()</code>.",
          "testString": "assert(!/\\Object.keys/.test(code), 'Solve this challenge without using the built in method <code>Object.keys()</code>.');"
        }
      ],
      "solutions": [
        "function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.numLegs = 4;\n\nlet beagle = new Dog(\"Snoopy\");\n\nlet ownProps = [];\nlet prototypeProps = [];\nfor (let prop in beagle) {\n  if (beagle.hasOwnProperty(prop)) {\n    ownProps.push(prop);\n  } else {\n    prototypeProps.push(prop);\n  }\n}"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Dog(name) {",
            "  this.name = name;",
            "}",
            "",
            "Dog.prototype.numLegs = 4;",
            "",
            "let beagle = new Dog(\"Snoopy\");",
            "",
            "let ownProps = [];",
            "let prototypeProps = [];",
            "",
            "// Add your code below this line ",
            "",
            "",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7daf367417b2b2512b7e",
      "title": "Understand the Constructor Property",
      "description": [
        "There is a special <code>constructor</code> property located on the object instances <code>duck</code> and <code>beagle</code> that were created in the previous challenges:",
        "<blockquote>let duck = new Bird();<br>let beagle = new Dog();<br><br>console.log(duck.constructor === Bird);  //prints true<br>console.log(beagle.constructor === Dog);  //prints true</blockquote>",
        "Note that the <code>constructor</code> property is a reference to the constructor function that created the instance.",
        "The advantage of the <code>constructor</code> property is that it's possible to check for this property to find out what kind of object it is. Here's an example of how this could be used:",
        "<blockquote>function joinBirdFraternity(candidate) {<br>&nbsp;&nbsp;if (candidate.constructor === Bird) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "<strong>Note</strong><br>Since the <code>constructor</code> property can be overwritten (which will be covered in the next two challenges) it’s generally better to use the <code>instanceof</code> method to check the type of an object.",
        "<hr>",
        "Write a <code>joinDogFraternity</code> function that takes a <code>candidate</code> parameter and, using the <code>constructor</code> property, return <code>true</code> if the candidate is a <code>Dog</code>, otherwise return <code>false</code>."
      ],
      "tests": [
        {
          "text": "<code>joinDogFraternity</code> should be defined as a function.",
          "testString": "assert(typeof(joinDogFraternity) === 'function', '<code>joinDogFraternity</code> should be defined as a function.');"
        },
        {
          "text": "<code>joinDogFraternity</code> should return true if<code>candidate</code> is an instance of <code>Dog</code>.",
          "testString": "assert(joinDogFraternity(new Dog(\"\")) === true, '<code>joinDogFraternity</code> should return true if<code>candidate</code> is an instance of <code>Dog</code>.');"
        },
        {
          "text": "<code>joinDogFraternity</code> should use the <code>constructor</code> property.",
          "testString": "assert(/\\.constructor/.test(code) && !/instanceof/.test(code), '<code>joinDogFraternity</code> should use the <code>constructor</code> property.');"
        }
      ],
      "solutions": [
        "function Dog(name) {\n  this.name = name;\n}\nfunction joinDogFraternity(candidate) {\n  return candidate.constructor === Dog;\n}"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Dog(name) {",
            "  this.name = name;",
            "}",
            "",
            "// Add your code below this line",
            "function joinDogFraternity(candidate) {",
            "  ",
            "}",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7daf367417b2b2512b7f",
      "title": "Change the Prototype to a New Object",
      "description": [
        "Up until now you have been adding properties to the <code>prototype</code> individually:",
        "<blockquote>Bird.prototype.numLegs = 2;</blockquote>",
        "This becomes tedious after more than a few properties.",
        "<blockquote>Bird.prototype.eat = function() {<br>&nbsp;&nbsp;console.log(\"nom nom nom\");<br>}<br><br>Bird.prototype.describe = function() {<br>&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>}</blockquote>",
        "A more efficient way is to set the <code>prototype</code> to a new object that already contains the properties. This way, the properties are added all at once:",
        "<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;numLegs: 2, <br>&nbsp;&nbsp;eat: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"nom nom nom\");<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote>",
        "<hr>",
        "Add the property <code>numLegs</code> and the two methods <code>eat()</code> and <code>describe()</code> to the <code>prototype</code> of <code>Dog</code> by setting the <code>prototype</code> to a new object."
      ],
      "tests": [
        {
          "text": "<code>Dog.prototype</code> should be set to a new object.",
          "testString": "assert((/Dog\\.prototype\\s*?=\\s*?{/).test(code), '<code>Dog.prototype</code> should be set to a new object.');"
        },
        {
          "text": "<code>Dog.prototype</code> should have the property <code>numLegs</code>.",
          "testString": "assert(Dog.prototype.numLegs !== undefined, '<code>Dog.prototype</code> should have the property <code>numLegs</code>.');"
        },
        {
          "text": "<code>Dog.prototype</code> should have the method <code>eat()</code>.",
          "testString": "assert(typeof Dog.prototype.eat === 'function', '<code>Dog.prototype</code> should have the method <code>eat()</code>.'); "
        },
        {
          "text": "<code>Dog.prototype</code> should have the method <code>describe()</code>.",
          "testString": "assert(typeof Dog.prototype.describe === 'function', '<code>Dog.prototype</code> should have the method <code>describe()</code>.'); "
        }
      ],
      "solutions": [
        "function Dog(name) {\n  this.name = name; \n}\nDog.prototype = {\nnumLegs: 4,\n  eat () {\n    console.log('nom nom nom');\n  },\n  describe () {\n    console.log('My name is ' + this.name);\n  }\n};"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Dog(name) {",
            "  this.name = name; ",
            "}",
            "",
            "Dog.prototype = {",
            "  // Add your code below this line",
            "  ",
            "};"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7daf367417b2b2512b80",
      "title": "Remember to Set the Constructor Property when Changing the Prototype",
      "description": [
        "There is one crucial side effect of manually setting the <code>prototype</code> to a new object. It erased the <code>constructor</code> property! The code in the previous challenge would print the following for <code>duck</code>:",
        "<blockquote>console.log(duck.constructor)<br>// prints ‘undefined’ - Oops!</blockquote>",
        "To fix this, whenever a prototype is manually set to a new object, remember to define the <code>constructor</code> property:",
        "<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird, // define the constructor property<br>&nbsp;&nbsp;numLegs: 2,<br>&nbsp;&nbsp;eat: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"nom nom nom\");<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name); <br>&nbsp;&nbsp;}<br>};</blockquote>",
        "<hr>",
        "Define the <code>constructor</code> property on the <code>Dog</code> <code>prototype</code>."
      ],
      "tests": [
        {
          "text": "<code>Dog.prototype</code> should set the <code>constructor</code> property.",
          "testString": "assert(Dog.prototype.constructor === Dog, '<code>Dog.prototype</code> should set the <code>constructor</code> property.');"
        }
      ],
      "solutions": [
        "function Dog(name) {\n  this.name = name; \n}\nDog.prototype = {\n  constructor: Dog,\n  numLegs: 2, \n  eat: function() {\n    console.log(\"nom nom nom\"); \n  }, \n  describe: function() {\n    console.log(\"My name is \" + this.name); \n  }\n};"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Dog(name) {",
            "  this.name = name; ",
            "}",
            "",
            "// Modify the code below this line",
            "Dog.prototype = {",
            "  ",
            "  numLegs: 2, ",
            "  eat: function() {",
            "    console.log(\"nom nom nom\"); ",
            "  }, ",
            "  describe: function() {",
            "    console.log(\"My name is \" + this.name); ",
            "  }",
            "};"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7db0367417b2b2512b81",
      "title": "Understand Where an Object’s Prototype Comes From",
      "description": [
        "Just like people inherit genes from their parents, an object inherits its <code>prototype</code> directly from the constructor function that created it. For example, here the <code>Bird</code> constructor creates the <code>duck</code> object:",
        "<blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name = name;<br>}<br><br>let duck = new Bird(\"Donald\");</blockquote>",
        "<code>duck</code> inherits its <code>prototype</code> from the <code>Bird</code> constructor function. You can show this relationship with the <code>isPrototypeOf</code> method:",
        "<blockquote>Bird.prototype.isPrototypeOf(duck);<br>// returns true</blockquote>",
        "<hr>",
        "Use <code>isPrototypeOf</code> to check the <code>prototype</code> of <code>beagle</code>."
      ],
      "tests": [
        {
          "text": "Show that <code>Dog.prototype</code> is the <code>prototype</code> of <code>beagle</code>",
          "testString": "assert(/Dog\\.prototype\\.isPrototypeOf\\(beagle\\)/.test(code), 'Show that <code>Dog.prototype</code> is the <code>prototype</code> of <code>beagle</code>');"
        }
      ],
      "solutions": [
        "function Dog(name) {\n  this.name = name;\n}\nlet beagle = new Dog(\"Snoopy\");\nDog.prototype.isPrototypeOf(beagle);"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Dog(name) {",
            "  this.name = name;",
            "}",
            "",
            "let beagle = new Dog(\"Snoopy\");",
            "",
            "// Add your code below this line",
            "",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7db0367417b2b2512b82",
      "title": "Understand the Prototype Chain",
      "description": [
        "All objects in JavaScript (with a few exceptions) have a <code>prototype</code>. Also, an object’s <code>prototype</code> itself is an object.",
        "<blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name = name;<br>}<br><br>typeof Bird.prototype; // => object</blockquote>",
        "Because a <code>prototype</code> is an object, a <code>prototype</code> can have its own <code>prototype</code>! In this case, the <code>prototype</code> of <code>Bird.prototype</code> is <code>Object.prototype</code>:",
        "<blockquote>Object.prototype.isPrototypeOf(Bird.prototype);<br>// returns true</blockquote>",
        "How is this useful? You may recall the <code>hasOwnProperty</code> method from a previous challenge:",
        "<blockquote>let duck = new Bird(\"Donald\");<br>duck.hasOwnProperty(\"name\"); // => true</blockquote>",
        "The <code>hasOwnProperty</code> method is defined in <code>Object.prototype</code>, which can be accessed by <code>Bird.prototype</code>, which can then be accessed by <code>duck</code>. This is an example of the <code>prototype</code> chain.",
        "In this <code>prototype</code> chain, <code>Bird</code> is the <code>supertype</code> for <code>duck</code>, while <code>duck</code> is the <code>subtype</code>. <code>Object</code> is a <code>supertype</code> for both <code>Bird</code> and <code>duck</code>.",
        "<code>Object</code> is a <code>supertype</code> for all objects in JavaScript. Therefore, any object can use the <code>hasOwnProperty</code> method.",
        "<hr>",
        "Modify the code to show the correct prototype chain."
      ],
      "tests": [
        {
          "text": "Your code should show that <code>Object.prototype</code> is the prototype of <code>Dog.prototype</code>\")",
          "testString": "assert(/Object\\.prototype\\.isPrototypeOf/.test(code), \"Your code should show that <code>Object.prototype</code> is the prototype of <code>Dog.prototype</code>\");"
        }
      ],
      "solutions": [
        "function Dog(name) {\n  this.name = name;\n}\nlet beagle = new Dog(\"Snoopy\");\nDog.prototype.isPrototypeOf(beagle);\nObject.prototype.isPrototypeOf(Dog.prototype);"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Dog(name) {",
            "  this.name = name;",
            "}",
            "",
            "let beagle = new Dog(\"Snoopy\");",
            "",
            "Dog.prototype.isPrototypeOf(beagle);  // => true",
            "",
            "// Fix the code below so that it evaluates to true",
            "???.isPrototypeOf(Dog.prototype);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7db0367417b2b2512b83",
      "title": "Use Inheritance So You Don't Repeat Yourself",
      "description": [
        "There's a principle in programming called <code>Don't Repeat Yourself (DRY)</code>. The reason repeated code is a problem is because any change requires fixing code in multiple places. This usually means more work for programmers and more room for errors.",
        "Notice in the example below that the <code>describe</code> method is shared by <code>Bird</code> and <code>Dog</code>:",
        "<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird,<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};<br><br>Dog.prototype = {<br>&nbsp;&nbsp;constructor: Dog,<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote>",
        "The <code>describe</code> method is repeated in two places. The code can be edited to follow the <code>DRY</code> principle by creating a <code>supertype</code> (or parent) called <code>Animal</code>:",
        "<blockquote>function Animal() { };<br><br>Animal.prototype = {<br>&nbsp;&nbsp;constructor: Animal, <br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote>",
        "Since <code>Animal</code> includes the <code>describe</code> method, you can remove it from <code>Bird</code> and <code>Dog</code>:",
        "<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird<br>};<br><br>Dog.prototype = {<br>&nbsp;&nbsp;constructor: Dog<br>};</blockquote>",
        "<hr>",
        "The <code>eat</code> method is repeated in both <code>Cat</code> and <code>Bear</code>. Edit the code in the spirit of <code>DRY</code> by moving the <code>eat</code> method to the <code>Animal</code> <code>supertype</code>."
      ],
      "tests": [
        {
          "text": "<code>Animal.prototype</code> should have the <code>eat</code> property.",
          "testString": "assert(Animal.prototype.hasOwnProperty('eat'), '<code>Animal.prototype</code> should have the <code>eat</code> property.');"
        },
        {
          "text": "<code>Bear.prototype</code> should not have the <code>eat</code> property.",
          "testString": "assert(!(Bear.prototype.hasOwnProperty('eat')), '<code>Bear.prototype</code> should not have the <code>eat</code> property.');"
        },
        {
          "text": "<code>Cat.prototype</code> should not have the <code>eat</code> property.",
          "testString": "assert(!(Cat.prototype.hasOwnProperty('eat')), '<code>Cat.prototype</code> should not have the <code>eat</code> property.');"
        }
      ],
      "solutions": [
        "function Cat(name) {\n  this.name = name; \n}\n\nCat.prototype = {\n  constructor: Cat\n};\n\nfunction Bear(name) {\n  this.name = name; \n}\n\nBear.prototype = {\n  constructor: Bear\n};\n\nfunction Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Cat(name) {",
            "  this.name = name; ",
            "}",
            "",
            "Cat.prototype = {",
            "  constructor: Cat, ",
            "  eat: function() {",
            "    console.log(\"nom nom nom\");",
            "  }",
            "};",
            "",
            "function Bear(name) {",
            "  this.name = name; ",
            "}",
            "",
            "Bear.prototype = {",
            "  constructor: Bear, ",
            "  eat: function() {",
            "    console.log(\"nom nom nom\");",
            "  }",
            "};",
            "",
            "function Animal() { }",
            "",
            "Animal.prototype = {",
            "  constructor: Animal,",
            "  ",
            "};"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7db0367417b2b2512b84",
      "title": "Inherit Behaviors from a Supertype",
      "description": [
        "In the previous challenge, you created a <code>supertype</code> called <code>Animal</code> that defined behaviors shared by all animals:",
        "<blockquote>function Animal() { }<br>Animal.prototype.eat = function() {<br>&nbsp;&nbsp;console.log(\"nom nom nom\");<br>};</blockquote>",
        "This and the next challenge will cover how to reuse <code>Animal's</code> methods inside <code>Bird</code> and <code>Dog</code> without defining them again. It uses a technique called <code>inheritance</code>.",
        "This challenge covers the first step: make an instance of the <code>supertype</code> (or parent).",
        "You already know one way to create an instance of <code>Animal</code> using the <code>new</code> operator:",
        "<blockquote>let animal = new Animal();</blockquote>",
        "There are some disadvantages when using this syntax for <code>inheritance</code>, which are too complex for the scope of this challenge. Instead, here's an alternative approach without those disadvantages:",
        "<blockquote>let animal = Object.create(Animal.prototype);</blockquote>",
        "<code>Object.create(obj)</code> creates a new object, and sets <code>obj</code> as the new object's <code>prototype</code>. Recall that the <code>prototype</code> is like the \"recipe\" for creating an object. By setting the <code>prototype</code> of <code>animal</code> to be <code>Animal's</code> <code>prototype</code>, you are effectively giving the <code>animal</code> instance the same \"recipe\" as any other instance of <code>Animal</code>.",
        "<blockquote>animal.eat(); // prints \"nom nom nom\"<br>animal instanceof Animal; // => true</blockquote>",
        "<hr>",
        "Use <code>Object.create</code> to make two instances of <code>Animal</code> named <code>duck</code> and <code>beagle</code>."
      ],
      "tests": [
        {
          "text": "The <code>duck</code> variable should be defined.",
          "testString": "assert(typeof duck !== \"undefined\", 'The <code>duck</code> variable should be defined.');"
        },
        {
          "text": "The <code>beagle</code> variable should be defined.",
          "testString": "assert(typeof beagle !== \"undefined\", 'The <code>beagle</code> variable should be defined.');"
        },
        {
          "text": "<code>duck</code> should have a <code>prototype</code> of <code>Animal</code>.",
          "testString": "assert(duck instanceof Animal, '<code>duck</code> should have a <code>prototype</code> of <code>Animal</code>.');"
        },
        {
          "text": "<code>beagle</code> should have a <code>prototype</code> of <code>Animal</code>.",
          "testString": "assert(beagle instanceof Animal, '<code>beagle</code> should have a <code>prototype</code> of <code>Animal</code>.');"
        }
      ],
      "solutions": [
        "function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal, \n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\nlet duck = Object.create(Animal.prototype);\nlet beagle = Object.create(Animal.prototype);\n\nduck.eat();\nbeagle.eat();"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Animal() { }",
            "",
            "Animal.prototype = {",
            "  constructor: Animal, ",
            "  eat: function() {",
            "    console.log(\"nom nom nom\");",
            "  }",
            "};",
            "",
            "// Add your code below this line",
            "",
            "let duck; // Change this line",
            "let beagle; // Change this line",
            "",
            "duck.eat(); // Should print \"nom nom nom\"",
            "beagle.eat(); // Should print \"nom nom nom\" "
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7db1367417b2b2512b85",
      "title": "Set the Child's Prototype to an Instance of the Parent",
      "description": [
        "In the previous challenge you saw the first step for inheriting behavior from the <code>supertype</code> (or parent) <code>Animal</code>: making a new instance of <code>Animal</code>.",
        "This challenge covers the next step: set the <code>prototype</code> of the <code>subtype</code> (or child)&mdash;in this case, <code>Bird</code>&mdash;to be an instance of <code>Animal</code>.",
        "<blockquote>Bird.prototype = Object.create(Animal.prototype);</blockquote>",
        "Remember that the <code>prototype</code> is like the \"recipe\" for creating an object. In a way, the recipe for <code>Bird</code> now includes all the key \"ingredients\" from <code>Animal</code>.",
        "<blockquote>let duck = new Bird(\"Donald\");<br>duck.eat(); // prints \"nom nom nom\"</blockquote>",
        "<code>duck</code> inherits all of <code>Animal</code>'s properties, including the <code>eat</code> method.",
        "<hr>",
        "Modify the code so that instances of <code>Dog</code> inherit from <code>Animal</code>."
      ],
      "tests": [
        {
          "text": "<code>Dog.prototype</code> should be an instance of <code>Animal</code>.",
          "testString": "assert(Animal.prototype.isPrototypeOf(Dog.prototype), '<code>Dog.prototype</code> should be an instance of <code>Animal</code>.');"
        }
      ],
      "solutions": [
        "function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Dog() { }\nDog.prototype = Object.create(Animal.prototype);\n\nlet beagle = new Dog();\nbeagle.eat();"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Animal() { }",
            "",
            "Animal.prototype = {",
            "  constructor: Animal,",
            "  eat: function() {",
            "    console.log(\"nom nom nom\");",
            "  }",
            "};",
            "",
            "function Dog() { }",
            "",
            "// Add your code below this line",
            "",
            "",
            "let beagle = new Dog();",
            "beagle.eat();  // Should print \"nom nom nom\""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7db1367417b2b2512b86",
      "title": "Reset an Inherited Constructor Property",
      "description": [
        "When an object inherits its <code>prototype</code> from another object, it also inherits the <code>supertype</code>'s constructor property.",
        "Here's an example:",
        "<blockquote>function Bird() { }<br>Bird.prototype = Object.create(Animal.prototype);<br>let duck = new Bird();<br>duck.constructor // function Animal(){...}</blockquote>",
        "But <code>duck</code> and all instances of <code>Bird</code> should show that they were constructed by <code>Bird</code> and not <code>Animal</code>. To do so, you can manually set <code>Bird's</code> constructor property to the <code>Bird</code> object:",
        "<blockquote>Bird.prototype.constructor = Bird;<br>duck.constructor // function Bird(){...}</blockquote>",
        "<hr>",
        "Fix the code so <code>duck.constructor</code> and <code>beagle.constructor</code> return their respective constructors."
      ],
      "tests": [
        {
          "text": "<code>Bird.prototype</code> should be an instance of <code>Animal</code>.",
          "testString": "assert(Animal.prototype.isPrototypeOf(Bird.prototype), '<code>Bird.prototype</code> should be an instance of <code>Animal</code>.');"
        },
        {
          "text": "<code>duck.constructor</code> should return <code>Bird</code>.",
          "testString": "assert(duck.constructor === Bird, '<code>duck.constructor</code> should return <code>Bird</code>.');"
        },
        {
          "text": "<code>Dog.prototype</code> should be an instance of <code>Animal</code>.",
          "testString": "assert(Animal.prototype.isPrototypeOf(Dog.prototype), '<code>Dog.prototype</code> should be an instance of <code>Animal</code>.');"
        },
        {
          "text": "<code>beagle.constructor</code> should return <code>Dog</code>.",
          "testString": "assert(beagle.constructor === Dog, '<code>beagle.constructor</code> should return <code>Dog</code>.');"
        }
      ],
      "solutions": [
        "function Animal() { }\nfunction Bird() { }\nfunction Dog() { }\nBird.prototype = Object.create(Animal.prototype);\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\nBird.prototype.constructor = Bird;\nlet duck = new Bird();\nlet beagle = new Dog();"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Animal() { }",
            "function Bird() { }",
            "function Dog() { }",
            "",
            "Bird.prototype = Object.create(Animal.prototype);",
            "Dog.prototype = Object.create(Animal.prototype);",
            "",
            "// Add your code below this line",
            "",
            "",
            "",
            "let duck = new Bird();",
            "let beagle = new Dog();"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7db1367417b2b2512b87",
      "title": "Add Methods After Inheritance",
      "description": [
        "A constructor function that inherits its <code>prototype</code> object from a <code>supertype</code> constructor function can still have its own methods in addition to inherited methods.",
        "For example, <code>Bird</code> is a constructor that inherits its <code>prototype</code> from <code>Animal</code>:",
        "<blockquote>function Animal() { }<br>Animal.prototype.eat = function() {<br>&nbsp;&nbsp;console.log(\"nom nom nom\");<br>};<br>function Bird() { }<br>Bird.prototype = Object.create(Animal.prototype);<br>Bird.prototype.constructor = Bird;</blockquote>",
        "In addition to what is inherited from <code>Animal</code>, you want to add behavior that is unique to <code>Bird</code> objects. Here, <code>Bird</code> will get a <code>fly()</code> function. Functions are added to <code>Bird's</code> <code>prototype</code> the same way as any constructor function:",
        "<blockquote>Bird.prototype.fly = function() {<br>&nbsp;&nbsp;console.log(\"I'm flying!\");<br>};</blockquote>",
        "Now instances of <code>Bird</code> will have both <code>eat()</code> and <code>fly()</code> methods:",
        "<blockquote>let duck = new Bird();<br>duck.eat(); // prints \"nom nom nom\"<br>duck.fly(); // prints \"I'm flying!\"</blockquote>",
        "<hr>",
        "Add all necessary code so the <code>Dog</code> object inherits from <code>Animal</code> and the <code>Dog's</code> <code>prototype</code> constructor is set to Dog. Then add a <code>bark()</code> method to the <code>Dog</code> object so that <code>beagle</code> can both <code>eat()</code> and <code>bark()</code>. The <code>bark()</code> method should print \"Woof!\" to the console."
      ],
      "tests": [
        {
          "text": "<code>Animal</code> should not respond to the <code>bark()</code> method.",
          "testString": "assert(typeof Animal.prototype.bark == \"undefined\", '<code>Animal</code> should not respond to the <code>bark()</code> method.');"
        },
        {
          "text": "<code>Dog</code> should inherit the <code>eat()</code> method from <code>Animal</code>.",
          "testString": "assert(typeof Dog.prototype.eat == \"function\", '<code>Dog</code> should inherit the <code>eat()</code> method from <code>Animal</code>.');"
        },
        {
          "text": "<code>Dog</code> should have the <code>bark()</code> method as an <code>own</code> property.",
          "testString": "assert(Dog.prototype.hasOwnProperty('bark'), '<code>Dog</code> should have the <code>bark()</code> method as an <code>own</code> property.');"
        },
        {
          "text": "<code>beagle</code> should be an <code>instanceof</code> <code>Animal</code>.",
          "testString": "assert(beagle instanceof Animal, '<code>beagle</code> should be an <code>instanceof</code> <code>Animal</code>.');"
        },
        {
          "text": "The constructor for <code>beagle</code> should be set to <code>Dog</code>.",
          "testString": "assert(beagle.constructor === Dog, 'The constructor for <code>beagle</code> should be set to <code>Dog</code>.');"
        }
      ],
      "solutions": [
        "function Animal() { }\nAnimal.prototype.eat = function() { console.log(\"nom nom nom\"); };\n\nfunction Dog() { }\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\nDog.prototype.bark = function () {\n  console.log('Woof!');\n};\nlet beagle = new Dog();\n\nbeagle.eat();\nbeagle.bark();"
      ],
      "hints": [
        "Objects inherit methods from other objects by cloning their prototype. The Object.create method will come in handy, and don't forget to reset the constructor property afterward!"
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Animal() { }",
            "Animal.prototype.eat = function() { console.log(\"nom nom nom\"); };",
            "",
            "function Dog() { }",
            "",
            "// Add your code below this line",
            "",
            "",
            "",
            "",
            "// Add your code above this line",
            "",
            "let beagle = new Dog();",
            "",
            "beagle.eat(); // Should print \"nom nom nom\"",
            "beagle.bark(); // Should print \"Woof!\""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7db1367417b2b2512b88",
      "title": "Override Inherited Methods",
      "description": [
        "In previous lessons, you learned that an object can inherit its behavior (methods) from another object by cloning its <code>prototype</code> object:",
        "<blockquote>ChildObject.prototype = Object.create(ParentObject.prototype);</blockquote>",
        "Then the <code>ChildObject</code> received its own methods by chaining them onto its <code>prototype</code>:",
        "<blockquote>ChildObject.prototype.methodName = function() {...};</blockquote>",
        "It's possible to override an inherited method. It's done the same way - by adding a method to <code>ChildObject.prototype</code> using the same method name as the one to override.",
        "Here's an example of <code>Bird</code> overriding the <code>eat()</code> method inherited from <code>Animal</code>:",
        "<blockquote>function Animal() { }<br>Animal.prototype.eat = function() {<br>&nbsp;&nbsp;return \"nom nom nom\";<br>};<br>function Bird() { }<br><br>// Inherit all methods from Animal<br>Bird.prototype = Object.create(Animal.prototype);<br><br>// Bird.eat() overrides Animal.eat()<br>Bird.prototype.eat = function() {<br>&nbsp;&nbsp;return \"peck peck peck\";<br>};</blockquote>",
        "If you have an instance <code>let duck = new Bird();</code> and you call <code>duck.eat()</code>, this is how JavaScript looks for the method on <code>duck’s</code> <code>prototype</code> chain:",
        "1. duck => Is eat() defined here? No.",
        "2. Bird => Is eat() defined here? => Yes. Execute it and stop searching.",
        "3. Animal => eat() is also defined, but JavaScript stopped searching before reaching this level.",
        "4. Object => JavaScript stopped searching before reaching this level.",
        "<hr>",
        "Override the <code>fly()</code> method for <code>Penguin</code> so that it returns \"Alas, this is a flightless bird.\""
      ],
      "tests": [
        {
          "text": "<code>penguin.fly()</code> should return the string \"Alas, this is a flightless bird.\"",
          "testString": "assert(penguin.fly() === \"Alas, this is a flightless bird.\", '<code>penguin.fly()</code> should return the string \"Alas, this is a flightless bird.\"');"
        },
        {
          "text": "The <code>bird.fly()</code> method should return \"I am flying!\"",
          "testString": "assert((new Bird()).fly() === \"I am flying!\", 'The <code>bird.fly()</code> method should return \"I am flying!\"');"
        }
      ],
      "solutions": [
        "function Bird() { }\n\nBird.prototype.fly = function() { return \"I am flying!\"; };\n\nfunction Penguin() { }\nPenguin.prototype = Object.create(Bird.prototype);\nPenguin.prototype.constructor = Penguin;\nPenguin.prototype.fly = () => 'Alas, this is a flightless bird.';\nlet penguin = new Penguin();\nconsole.log(penguin.fly());"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Bird() { }",
            "",
            "Bird.prototype.fly = function() { return \"I am flying!\"; };",
            "",
            "function Penguin() { }",
            "Penguin.prototype = Object.create(Bird.prototype);",
            "Penguin.prototype.constructor = Penguin;",
            "",
            "// Add your code below this line",
            "",
            "",
            "",
            "// Add your code above this line",
            "",
            "let penguin = new Penguin();",
            "console.log(penguin.fly());"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7db2367417b2b2512b89",
      "title": "Use a Mixin to Add Common Behavior Between Unrelated Objects",
      "description": [
        "As you have seen, behavior is shared through inheritance. However, there are cases when inheritance is not the best solution. Inheritance does not work well for unrelated objects like <code>Bird</code> and <code>Airplane</code>. They can both fly, but a <code>Bird</code> is not a type of <code>Airplane</code> and vice versa.",
        "For unrelated objects, it's better to use <code>mixins</code>. A <code>mixin</code> allows other objects to use a collection of functions.",
        "<blockquote>let flyMixin = function(obj) {<br>&nbsp;&nbsp;obj.fly = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Flying, wooosh!\");<br>&nbsp;&nbsp;}<br>};</blockquote>",
        "The <code>flyMixin</code> takes any object and gives it the <code>fly</code> method.",
        "<blockquote>let bird = {<br>&nbsp;&nbsp;name: \"Donald\",<br>&nbsp;&nbsp;numLegs: 2<br>};<br><br>let plane = {<br>&nbsp;&nbsp;model: \"777\",<br>&nbsp;&nbsp;numPassengers: 524<br>};<br><br>flyMixin(bird);<br>flyMixin(plane);</blockquote>",
        "Here <code>bird</code> and <code>plane</code> are passed into <code>flyMixin</code>, which then assigns the <code>fly</code> function to each object. Now <code>bird</code> and <code>plane</code> can both fly:",
        "<blockquote>bird.fly(); // prints \"Flying, wooosh!\"<br>plane.fly(); // prints \"Flying, wooosh!\"</blockquote>",
        "Note how the <code>mixin</code> allows for the same <code>fly</code> method to be reused by unrelated objects <code>bird</code> and <code>plane</code>.",
        "<hr>",
        "Create a <code>mixin</code> named <code>glideMixin</code> that defines a method named <code>glide</code>. Then use the <code>glideMixin</code> to give both <code>bird</code> and <code>boat</code> the ability to glide."
      ],
      "tests": [
        {
          "text": "Your code should declare a <code>glideMixin</code> variable that is a function.",
          "testString": "assert(typeof glideMixin === \"function\", 'Your code should declare a <code>glideMixin</code> variable that is a function.');"
        },
        {
          "text": "Your code should use the <code>glideMixin</code> on the <code>bird</code> object to give it the <code>glide</code> method.",
          "testString": "assert(typeof bird.glide === \"function\", 'Your code should use the <code>glideMixin</code> on the <code>bird</code> object to give it the <code>glide</code> method.');"
        },
        {
          "text": "Your code should use the <code>glideMixin</code> on the <code>boat</code> object to give it the <code>glide</code> method.",
          "testString": "assert(typeof boat.glide === \"function\", 'Your code should use the <code>glideMixin</code> on the <code>boat</code> object to give it the <code>glide</code> method.');"
        }
      ],
      "solutions": [
        "let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet boat = {\n  name: \"Warrior\",\n  type: \"race-boat\"\n};\nfunction glideMixin (obj) {\n  obj.glide = () => 'Gliding!';\n}\n\nglideMixin(bird);\nglideMixin(boat);"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let bird = {",
            "  name: \"Donald\",",
            "  numLegs: 2",
            "};",
            "",
            "let boat = {",
            "  name: \"Warrior\",",
            "  type: \"race-boat\"",
            "};",
            "",
            "// Add your code below this line",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7db2367417b2b2512b8a",
      "title": "Use Closure to Protect Properties Within an Object from Being Modified Externally",
      "description": [
        "In the previous challenge, <code>bird</code> had a public property <code>name</code>. It is considered public because it can be accessed and changed outside of <code>bird</code>'s definition.",
        "<blockquote>bird.name = \"Duffy\";</blockquote>",
        "Therefore, any part of your code can easily change the name of <code>bird</code> to any value. Think about things like passwords and bank accounts being easily changeable by any part of your codebase. That could cause a lot of issues.",
        "The simplest way to make properties private is by creating a variable within the constructor function. This changes the scope of that variable to be within the constructor function versus available globally. This way, the property can only be accessed and changed by methods also within the constructor function.",
        "<blockquote>function Bird() {<br>&nbsp;&nbsp;let hatchedEgg = 10; // private property<br><br>&nbsp;&nbsp;this.getHatchedEggCount = function() { // publicly available method that a bird object can use<br>&nbsp;&nbsp;&nbsp;&nbsp;return hatchedEgg;<br>&nbsp;&nbsp;};<br>}<br>let ducky = new Bird();<br>ducky.getHatchedEggCount(); // returns 10</blockquote>",
        "Here <code>getHachedEggCount</code> is a privileged method, because it has access to the private variable <code>hatchedEgg</code>. This is possible because <code>hatchedEgg</code> is declared in the same context as <code>getHachedEggCount</code>. In JavaScript, a function always has access to the context in which it was created. This is called <code>closure</code>.",
        "<hr>",
        "Change how <code>weight</code> is declared in the <code>Bird</code> function so it is a private variable. Then, create a method <code>getWeight</code> that returns the value of <code>weight</code>."
      ],
      "tests": [
        {
          "text": "The <code>weight</code> property should be a private variable.",
          "testString": "assert(!code.match(/this\\.weight/g), 'The <code>weight</code> property should be a private variable.');"
        },
        {
          "text": "Your code should create a method in <code>Bird</code> called <code>getWeight</code> that returns the <code>weight</code>.",
          "testString": "assert((new Bird()).getWeight() === 15, 'Your code should create a method in <code>Bird</code> called <code>getWeight</code> that returns the <code>weight</code>.');"
        }
      ],
      "solutions": [
        "function Bird() {\n  let weight = 15;\n  \n  this.getWeight = () => weight;\n}"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Bird() {",
            "  this.weight = 15;",
            "  ",
            "  ",
            "}",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7db2367417b2b2512b8b",
      "title": "Understand the Immediately Invoked Function Expression (IIFE)",
      "description": [
        "A common pattern in JavaScript is to execute a function as soon as it is declared:",
        "<blockquote>(function () {<br>&nbsp;&nbsp;console.log(\"Chirp, chirp!\");<br>})(); // this is an anonymous function expression that executes right away<br>// Outputs \"Chirp, chirp!\" immediately</blockquote>",
        "Note that the function has no name and is not stored in a variable. The two parentheses () at the end of the function expression cause it to be immediately executed or invoked. This pattern is known as an <code>immediately invoked function expression</code> or <code>IIFE</code>.",
        "<hr>",
        "Rewrite the function <code>makeNest</code> and remove its call so instead it's an anonymous <code>immediately invoked function expression</code> (<code>IIFE</code>)."
      ],
      "tests": [
        {
          "text": "The function should be anonymous.",
          "testString": "assert(/\\(\\s*?function\\s*?\\(\\s*?\\)\\s*?{/.test(code), 'The function should be anonymous.');"
        },
        {
          "text": "Your function should have parentheses at the end of the expression to call it immediately.",
          "testString": "assert(/}\\s*?\\)\\s*?\\(\\s*?\\)/.test(code), 'Your function should have parentheses at the end of the expression to call it immediately.');"
        }
      ],
      "solutions": [
        "(function () {\n  console.log(\"A cozy nest is ready\");\n})();"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function makeNest() {",
            "  console.log(\"A cozy nest is ready\");",
            "}",
            "",
            "makeNest(); "
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7db2367417b2b2512b8c",
      "title": "Use an IIFE to Create a Module",
      "description": [
        "An <code>immediately invoked function expression</code> (<code>IIFE</code>) is often used to group related functionality into a single object or <code>module</code>. For example, an earlier challenge defined two mixins:",
        "<blockquote>function glideMixin(obj) {<br>&nbsp;&nbsp;obj.glide = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Gliding on the water\");<br>&nbsp;&nbsp;};<br>}<br>function flyMixin(obj) {<br>&nbsp;&nbsp;obj.fly = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Flying, wooosh!\");<br>&nbsp;&nbsp;};<br>}</blockquote>",
        "We can group these <code>mixins</code> into a module as follows:",
        "<blockquote>let motionModule = (function () {<br>&nbsp;&nbsp;return {<br>&nbsp;&nbsp;&nbsp;&nbsp;glideMixin: function (obj) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj.glide = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Gliding on the water\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;flyMixin: function(obj) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj.fly = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Flying, wooosh!\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}) (); // The two parentheses cause the function to be immediately invoked</blockquote>",
        "Note that you have an <code>immediately invoked function expression</code> (<code>IIFE</code>) that returns an object <code>motionModule</code>. This returned object contains all of the <code>mixin</code> behaviors as properties of the object.",
        "The advantage of the <code>module</code> pattern is that all of the motion behaviors can be packaged into a single object that can then be used by other parts of your code. Here is an example using it:",
        "<blockquote>motionModule.glideMixin(duck);<br>duck.glide();</blockquote>",
        "<hr>",
        "Create a <code>module</code> named <code>funModule</code> to wrap the two <code>mixins</code> <code>isCuteMixin</code> and <code>singMixin</code>. <code>funModule</code> should return an object."
      ],
      "tests": [
        {
          "text": "<code>funModule</code> should be defined and return an object.",
          "testString": "assert(typeof funModule === \"object\", '<code>funModule</code> should be defined and return an object.');"
        },
        {
          "text": "<code>funModule.isCuteMixin</code> should access a function.",
          "testString": "assert(typeof funModule.isCuteMixin === \"function\", '<code>funModule.isCuteMixin</code> should access a function.');"
        },
        {
          "text": "<code>funModule.singMixin</code> should access a function.",
          "testString": "assert(typeof funModule.singMixin === \"function\", '<code>funModule.singMixin</code> should access a function.');"
        }
      ],
      "solutions": [
        "const funModule = (function () {\n  return {\n    isCuteMixin: obj => {\n      obj.isCute = () => true;\n    },\n    singMixin: obj => {\n      obj.sing = () => console.log(\"Singing to an awesome tune\");\n    }\n  };\n})();"
      ],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let isCuteMixin = function(obj) {",
            "  obj.isCute = function() {",
            "    return true;",
            "  };",
            "};",
            "let singMixin = function(obj) {",
            "  obj.sing = function() {",
            "    console.log(\"Singing to an awesome tune\");",
            "  };",
            "};"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8d367417b2b2512b5b",
      "title": "Learn About Functional Programming",
      "description": [
        "Functional programming is a style of programming where solutions are simple, isolated functions, without any side effects outside of the function scope.",
        "<code>INPUT -> PROCESS -> OUTPUT</code>",
        "Functional programming is about:",
        "1) Isolated functions - there is no dependence on the state of the program, which includes global variables that are subject to change",
        "2) Pure functions - the same input always gives the same output",
        "3) Functions with limited side effects - any changes, or mutations, to the state of the program outside the function are carefully controlled",
        "<hr>",
        "The members of freeCodeCamp happen to love tea.",
        "In the code editor, the <code>prepareTea</code> and <code>getTea</code> functions are already defined for you. Call the <code>getTea</code> function to get 40 cups of tea for the team, and store them in the <code>tea4TeamFCC</code> variable."
      ],
      "tests": [
        {
          "text": "The <code>tea4TeamFCC</code> variable should hold 40 cups of tea for the team.",
          "testString": "assert(tea4TeamFCC.length === 40, 'The <code>tea4TeamFCC</code> variable should hold 40 cups of tea for the team.');"
        },
        {
          "text": "The <code>tea4TeamFCC</code> variable should hold cups of green tea.",
          "testString": "assert(tea4TeamFCC[0] === 'greenTea', 'The <code>tea4TeamFCC</code> variable should hold cups of green tea.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "/**",
            " * A long process to prepare tea.",
            " * @return {string} A cup of tea.",
            " **/",
            "const prepareTea = () => 'greenTea';",
            "",
            "/**",
            " * Get given number of cups of tea.",
            " * @param {number} numOfCups Number of required cups of tea.",
            " * @return {Array<string>} Given amount of tea cups.",
            " **/",
            "const getTea = (numOfCups) => {",
            "  const teaCups = [];",
            "  ",
            "  for(let cups = 1; cups <= numOfCups; cups += 1) {",
            "    const teaCup = prepareTea();",
            "    teaCups.push(teaCup);",
            "  }",
            "",
            "  return teaCups;",
            "};",
            "",
            "// Add your code below this line",
            "",
            "const tea4TeamFCC = null; // :(",
            "",
            "// Add your code above this line",
            "",
            "console.log(tea4TeamFCC);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8e367417b2b2512b5c",
      "title": "Understand Functional Programming Terminology",
      "description": [
        "The FCC Team had a mood swing and now wants two types of tea: green tea and black tea. General Fact: Client mood swings are pretty common.",
        "With that information, we'll need to revisit the <code>getTea</code> function from last challenge to handle various tea requests. We can modify <code>getTea</code> to accept a function as a parameter to be able to change the type of tea it prepares. This makes <code>getTea</code> more flexible, and gives the programmer more control when client requests change.",
        "But first, let's cover some functional terminology:",
        "<code>Callbacks</code> are the functions that are slipped or passed into another function to decide the invocation of that function. You may have seen them passed to other methods, for example in <code>filter</code>, the callback function tells JavaScript the criteria for how to filter an array.",
        "Functions that can be assigned to a variable, passed into another function, or returned from another function just like any other normal value, are called <code>first class</code> functions. In JavaScript, all functions are <code>first class</code> functions.",
        "The functions that take a function as an argument, or return a function as a return value are called <code>higher order</code> functions.",
        "When the functions are passed in to another function or returned from another function, then those functions which gets passed in or returned can be called a <code>lambda</code>.",
        "<hr>",
        "Prepare 27 cups of green tea and 13 cups of black tea and store them in <code>tea4GreenTeamFCC</code> and <code>tea4BlackTeamFCC</code> variables, respectively. Note that the <code>getTea</code> function has been modified so it now takes a function as the first argument.",
        "Note: The data (the number of cups of tea) is supplied as the last argument. We'll discuss this more in later lessons."
      ],
      "tests": [
        {
          "text": "The <code>tea4GreenTeamFCC</code> variable should hold 27 cups of green tea for the team.",
          "testString": "assert(tea4GreenTeamFCC.length === 27, 'The <code>tea4GreenTeamFCC</code> variable should hold 27 cups of green tea for the team.');"
        },
        {
          "text": "The <code>tea4GreenTeamFCC</code> variable should hold cups of green tea.",
          "testString": "assert(tea4GreenTeamFCC[0] === 'greenTea', 'The <code>tea4GreenTeamFCC</code> variable should hold cups of green tea.');"
        },
        {
          "text": "The <code>tea4BlackTeamFCC</code> variable should hold 13 cups of black tea.",
          "testString": "assert(tea4BlackTeamFCC.length === 13, 'The <code>tea4BlackTeamFCC</code> variable should hold 13 cups of black tea.');"
        },
        {
          "text": "The <code>tea4BlackTeamFCC</code> variable should hold cups of black tea.",
          "testString": "assert(tea4BlackTeamFCC[0] === 'blackTea', 'The <code>tea4BlackTeamFCC</code> variable should hold cups of black tea.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "/**",
            " * A long process to prepare green tea.",
            " * @return {string} A cup of green tea.",
            " **/",
            "const prepareGreenTea = () => 'greenTea';",
            "",
            "/**",
            " * A long process to prepare black tea.",
            " * @return {string} A cup of black tea.",
            " **/",
            "const prepareBlackTea = () => 'blackTea';",
            "",
            "/**",
            " * Get given number of cups of tea.",
            " * @param {function():string} prepareTea The type of tea preparing function.",
            " * @param {number} numOfCups Number of required cups of tea.",
            " * @return {Array<string>} Given amount of tea cups.",
            " **/",
            "const getTea = (prepareTea, numOfCups) => {",
            "  const teaCups = [];",
            "",
            "  for(let cups = 1; cups <= numOfCups; cups += 1) {",
            "    const teaCup = prepareTea();",
            "    teaCups.push(teaCup);",
            "  }",
            "",
            "  return teaCups;",
            "};",
            "",
            "// Add your code below this line",
            "",
            "const tea4GreenTeamFCC = null; // :(",
            "const tea4BlackTeamFCC = null; // :(",
            "",
            "// Add your code above this line",
            "",
            "console.log(",
            "  tea4GreenTeamFCC,",
            "  tea4BlackTeamFCC",
            ");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8e367417b2b2512b5d",
      "title": "Understand the Hazards of Using Imperative Code",
      "description": [
        "Functional programming is a good habit. It keeps your code easy to manage, and saves you from sneaky bugs. But before we get there, let's look at an imperative approach to programming to highlight where you may have issues.",
        "In English (and many other languages), the imperative tense is used to give commands. Similarly, an imperative style in programming is one that gives the computer a set of statements to perform a task.",
        "Often the statements change the state of the program, like updating global variables. A classic example is writing a <code>for</code> loop that gives exact directions to iterate over the indices of an array.",
        "In contrast, functional programming is a form of declarative programming. You tell the computer what you want done by calling a method or function.",
        "JavaScript offers many predefined methods that handle common tasks so you don't need to write out how the computer should perform them. For example, instead of using the <code>for</code> loop mentioned above, you could call the <code>map</code> method which handles the details of iterating over an array. This helps to avoid semantic errors, like the \"Off By One Errors\" that were covered in the Debugging section.",
        "Consider the scenario: you are browsing the web in your browser, and want to track the tabs you have opened. Let's try to model this using some simple object-oriented code.",
        "A Window object is made up of tabs, and you usually have more than one Window open. The titles of each open site in each Window object is held in an array. After working in the browser (opening new tabs, merging windows, and closing tabs), you want to print the tabs that are still open. Closed tabs are removed from the array and new tabs (for simplicity) get added to the end of it.",
        "The code editor shows an implementation of this functionality with functions for <code>tabOpen()</code>, <code>tabClose()</code>, and <code>join()</code>. The array <code>tabs</code> is part of the Window object that stores the name of the open pages.",
        "<h4>Instructions<h4>",
        "Run the code in the editor. It's using a method that has side effects in the program, causing incorrect output. The final list of open tabs should be <code>['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium', 'new tab', 'Netflix', 'YouTube', 'Vine', 'GMail', 'Work mail', 'Docs', 'freeCodeCamp', 'new tab']</code> but the output will be slightly different.",
        "Work through the code and see if you can figure out the problem, then advance to the next challenge to learn more."
      ],
      "tests": [
        {
          "text": "Move ahead to understand the error.",
          "testString": "assert(true, 'Move ahead to understand the error.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// tabs is an array of titles of each site open within the window",
            "var Window = function(tabs) {",
            "  this.tabs = tabs; // we keep a record of the array inside the object",
            "};",
            "",
            "// When you join two windows into one window",
            "Window.prototype.join = function (otherWindow) {",
            "  this.tabs = this.tabs.concat(otherWindow.tabs);",
            "  return this;",
            "};",
            "",
            "// When you open a new tab at the end",
            "Window.prototype.tabOpen = function (tab) {",
            "  this.tabs.push('new tab'); // let's open a new tab for now",
            "  return this;",
            "};",
            "",
            "// When you close a tab",
            "Window.prototype.tabClose = function (index) {",
            "  var tabsBeforeIndex = this.tabs.splice(0, index); // get the tabs before the tab",
            "  var tabsAfterIndex = this.tabs.splice(index); // get the tabs after the tab",
            "",
            "  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex); // join them together ",
            "  return this;",
            " };",
            "",
            "// Let's create three browser windows",
            "var workWindow = new Window(['GMail', 'Inbox', 'Work mail', 'Docs', 'freeCodeCamp']); // Your mailbox, drive, and other work sites",
            "var socialWindow = new Window(['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium']); // Social sites",
            "var videoWindow = new Window(['Netflix', 'YouTube', 'Vimeo', 'Vine']); //  Entertainment sites",
            "",
            "// Now perform the tab opening, closing, and other operations",
            "var finalTabs = socialWindow",
            "                    .tabOpen() // Open a new tab for cat memes",
            "                    .join(videoWindow.tabClose(2)) // Close third tab in video window, and join",
            "                    .join(workWindow.tabClose(1).tabOpen());",
            "",
            "alert(finalTabs.tabs);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8e367417b2b2512b5e",
      "title": "Avoid Mutations and Side Effects Using Functional Programming",
      "description": [
        "If you haven't already figured it out, the issue in the previous challenge was with the <code>splice</code> call in the <code>tabClose()</code> function. Unfortunately, <code>splice</code> changes the original array it is called on, so the second call to it used a modified array, and gave unexpected results.",
        "This is a small example of a much larger pattern - you call a function on a variable, array, or an object, and the function changes the variable or something in the object.",
        "One of the core principle of functional programming is to not change things. Changes lead to bugs. It's easier to prevent bugs knowing that your functions don't change anything, including the function arguments or any global variable.",
        "The previous example didn't have any complicated operations but the <code>splice</code> method changed the original array, and resulted in a bug.",
        "Recall that in functional programming, changing or altering things is called <code>mutation</code>, and the outcome is called a <code>side effect</code>. A function, ideally, should be a <code>pure function</code>, meaning that it does not cause any side effects.",
        "Let's try to master this discipline and not alter any variable or object in our code.",
        "<hr>",
        "Fill in the code for the function <code>incrementer</code> so it returns the value of the global variable <code>fixedValue</code> increased by one."
      ],
      "tests": [
        {
          "text": "Your function <code>incrementer</code> should not change the value of <code>fixedValue</code>.",
          "testString": "assert(fixedValue === 4, 'Your function <code>incrementer</code> should not change the value of <code>fixedValue</code>.');"
        },
        {
          "text": "Your <code>incrementer</code> function should return a value that is one larger than the <code>fixedValue</code> value.",
          "testString": "assert(newValue === 5, 'Your <code>incrementer</code> function should return a value that is one larger than the <code>fixedValue</code> value.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// the global variable",
            "var fixedValue = 4;",
            "",
            "function incrementer () {",
            "  // Add your code below this line",
            "  ",
            "  ",
            "  // Add your code above this line",
            "}",
            "",
            "var newValue = incrementer(); // Should equal 5",
            "console.log(fixedValue); // Should print 4"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8e367417b2b2512b5f",
      "title": "Pass Arguments to Avoid External Dependence in a Function",
      "description": [
        "The last challenge was a step closer to functional programming principles, but there is still something missing.",
        "We didn't alter the global variable value, but the function <code>incrementer</code> would not work without the global variable <code>fixedValue</code> being there.",
        "Another principle of functional programming is to always declare your dependencies explicitly. This means if a function depends on a variable or object being present, then pass that variable or object directly into the function as an argument.",
        "There are several good consequences from this principle. The function is easier to test, you know exactly what input it takes, and it won't depend on anything else in your program.",
        "This can give you more confidence when you alter, remove, or add new code. You would know what you can or cannot change and you can see where the potential traps are.",
        "Finally, the function would always produce the same output for the same set of inputs, no matter what part of the code executes it.",
        "<hr>",
        "Let's update the <code>incrementer</code> function to clearly declare its dependencies.",
        "Write the <code>incrementer</code> function so it takes an argument, and then increases the value by one."
      ],
      "tests": [
        {
          "text": "Your function <code>incrementer</code> should not change the value of <code>fixedValue</code>.",
          "testString": "assert(fixedValue === 4, 'Your function <code>incrementer</code> should not change the value of <code>fixedValue</code>.');"
        },
        {
          "text": "Your <code>incrementer</code> function should take a parameter.",
          "testString": "assert(code.match(/function\\s+?incrementer\\s*?\\(.+?\\)/g), 'Your <code>incrementer</code> function should take a parameter.');"
        },
        {
          "text": "Your <code>incrementer</code> function should return a value that is one larger than the <code>fixedValue</code> value.",
          "testString": "assert(newValue === 5, 'Your <code>incrementer</code> function should return a value that is one larger than the <code>fixedValue</code> value.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// the global variable",
            "var fixedValue = 4;",
            "",
            "// Add your code below this line",
            "function incrementer () {",
            "  ",
            "  ",
            "  // Add your code above this line",
            "}",
            "",
            "var newValue = incrementer(fixedValue); // Should equal 5",
            "console.log(fixedValue); // Should print 4"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8f367417b2b2512b60",
      "title": "Refactor Global Variables Out of Functions",
      "description": [
        "So far, we have seen two distinct principles for functional programming:",
        "1) Don't alter a variable or object - create new variables and objects and return them if need be from a function.",
        "2) Declare function arguments - any computation inside a function depends only on the arguments, and not on any global object or variable.",
        "Adding one to a number is not very exciting, but we can apply these principles when working with arrays or more complex objects.",
        "<hr>",
        "Refactor (rewrite) the code so the global array <code>bookList</code> is not changed inside either function. The <code>add</code> function should add the given <code>bookName</code> to the end of an array. The <code>remove</code> function should remove the given <code>bookName</code> from an array. Both functions should return an array, and any new parameters should be added before the <code>bookName</code> one."
      ],
      "tests": [
        {
          "text": "<code>bookList</code> should not change and still equal <code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.",
          "testString": "assert(JSON.stringify(bookList) === JSON.stringify([\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]), '<code>bookList</code> should not change and still equal <code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.');"
        },
        {
          "text": "<code>newBookList</code> should equal <code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.",
          "testString": "assert(JSON.stringify(newBookList) === JSON.stringify(['The Hound of the Baskervilles', 'On The Electrodynamics of Moving Bodies', 'Philosophiæ Naturalis Principia Mathematica', 'Disquisitiones Arithmeticae', 'A Brief History of Time']), '<code>newBookList</code> should equal <code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.');"
        },
        {
          "text": "<code>newerBookList</code> should equal <code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.",
          "testString": "assert(JSON.stringify(newerBookList) === JSON.stringify(['The Hound of the Baskervilles', 'Philosophiæ Naturalis Principia Mathematica', 'Disquisitiones Arithmeticae']), '<code>newerBookList</code> should equal <code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.');"
        },
        {
          "text": "<code>newestBookList</code> should equal <code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.",
          "testString": "assert(JSON.stringify(newestBookList) === JSON.stringify(['The Hound of the Baskervilles', 'Philosophiæ Naturalis Principia Mathematica', 'Disquisitiones Arithmeticae', 'A Brief History of Time']), '<code>newestBookList</code> should equal <code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [
        "Look at how the functions are called to see the correct order of the parameters.",
        "Consider using the concat method instead of push.",
        "The slice method returns a new array without modifying the original."
      ],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// the global variable",
            "var bookList = [\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"];",
            "",
            "/* This function should add a book to the list and return the list */",
            "// New parameters should come before the bookName one",
            "",
            "// Add your code below this line",
            "function add (bookName) {",
            "  ",
            "  return bookList.push(bookName);",
            "  ",
            "  // Add your code above this line",
            "}",
            "",
            "/* This function should remove a book from the list and return the list */",
            "// New parameters should come before the bookName one",
            "",
            "// Add your code below this line",
            "function remove (bookName) {",
            "  if (bookList.indexOf(bookName) >= 0) {",
            "    ",
            "    return bookList.splice(0, 1, bookName);",
            "    ",
            "    // Add your code above this line",
            "    }",
            "}",
            "",
            "var newBookList = add(bookList, 'A Brief History of Time');",
            "var newerBookList = remove(bookList, 'On The Electrodynamics of Moving Bodies');",
            "var newestBookList = remove(add(bookList, 'A Brief History of Time'), 'On The Electrodynamics of Moving Bodies');",
            "",
            "console.log(bookList);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8f367417b2b2512b61",
      "title": "Use the map Method to Extract Data from an Array",
      "description": [
        "So far we have learned to use pure functions to avoid side effects in a program. Also, we have seen the value in having a function only depend on its input arguments.",
        "This is only the beginning. As its name suggests, functional programming is centered around a theory of functions.",
        "It would make sense to be able to pass them as arguments to other functions, and return a function from another function. Functions are considered <code>First Class Objects</code> in JavaScript, which means they can be used like any other object. They can be saved in variables, stored in an object, or passed as function arguments.",
        "Let's start with some simple array functions, which are methods on the array object prototype. In this exercise we are looking at <code>Array.prototype.map()</code>, or more simply <code>map</code>.",
        "Remember that the <code>map</code> method is a way to iterate over each item in an array. It creates a new array (without changing the original one) after applying a callback function to every element.",
        "<hr>",
        "The <code>watchList</code> array holds objects with information on several movies. Use <code>map</code> to pull the title and rating from <code>watchList</code> and save the new array in the <code>rating</code> variable. The code in the editor currently uses a <code>for</code> loop to do this, replace the loop functionality with your <code>map</code> expression."
      ],
      "tests": [
        {
          "text": "The <code>watchList</code> variable should not change.",
          "testString": "assert(watchList[0].Title === \"Inception\" && watchList[4].Director == \"James Cameron\", 'The <code>watchList</code> variable should not change.');"
        },
        {
          "text": "Your code should not use a <code>for</code> loop.",
          "testString": "assert(!code.match(/for\\s*?\\(.+?\\)/g), 'Your code should not use a <code>for</code> loop.');"
        },
        {
          "text": "Your code should use the <code>map</code> method.",
          "testString": "assert(code.match(/\\.map/g), 'Your code should use the <code>map</code> method.');"
        },
        {
          "text": "<code>rating</code> should equal <code>[{\"title\":\"Inception\",\"rating\":\"8.8\"},{\"title\":\"Interstellar\",\"rating\":\"8.6\"},{\"title\":\"The Dark Knight\",\"rating\":\"9.0\"},{\"title\":\"Batman Begins\",\"rating\":\"8.3\"},{\"title\":\"Avatar\",\"rating\":\"7.9\"}]</code>.",
          "testString": "assert(JSON.stringify(rating) === JSON.stringify([{\"title\":\"Inception\",\"rating\":\"8.8\"},{\"title\":\"Interstellar\",\"rating\":\"8.6\"},{\"title\":\"The Dark Knight\",\"rating\":\"9.0\"},{\"title\":\"Batman Begins\",\"rating\":\"8.3\"},{\"title\":\"Avatar\",\"rating\":\"7.9\"}]), '<code>rating</code> should equal <code>[{\"title\":\"Inception\",\"rating\":\"8.8\"},{\"title\":\"Interstellar\",\"rating\":\"8.6\"},{\"title\":\"The Dark Knight\",\"rating\":\"9.0\"},{\"title\":\"Batman Begins\",\"rating\":\"8.3\"},{\"title\":\"Avatar\",\"rating\":\"7.9\"}]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// the global variable",
            "var watchList = [",
            "                 {  ",
            "                   \"Title\": \"Inception\",",
            "                   \"Year\": \"2010\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"16 Jul 2010\",",
            "                   \"Runtime\": \"148 min\",",
            "                   \"Genre\": \"Action, Adventure, Crime\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Christopher Nolan\",",
            "                   \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Ellen Page, Tom Hardy\",",
            "                   \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",",
            "                   \"Language\": \"English, Japanese, French\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"74\",",
            "                   \"imdbRating\": \"8.8\",",
            "                   \"imdbVotes\": \"1,446,708\",",
            "                   \"imdbID\": \"tt1375666\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {  ",
            "                   \"Title\": \"Interstellar\",",
            "                   \"Year\": \"2014\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"07 Nov 2014\",",
            "                   \"Runtime\": \"169 min\",",
            "                   \"Genre\": \"Adventure, Drama, Sci-Fi\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Jonathan Nolan, Christopher Nolan\",",
            "                   \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",",
            "                   \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",",
            "                   \"Language\": \"English\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"74\",",
            "                   \"imdbRating\": \"8.6\",",
            "                   \"imdbVotes\": \"910,366\",",
            "                   \"imdbID\": \"tt0816692\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {",
            "                   \"Title\": \"The Dark Knight\",",
            "                   \"Year\": \"2008\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"18 Jul 2008\",",
            "                   \"Runtime\": \"152 min\",",
            "                   \"Genre\": \"Action, Adventure, Crime\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",",
            "                   \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",",
            "                   \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",",
            "                   \"Language\": \"English, Mandarin\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"82\",",
            "                   \"imdbRating\": \"9.0\",",
            "                   \"imdbVotes\": \"1,652,832\",",
            "                   \"imdbID\": \"tt0468569\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {  ",
            "                   \"Title\": \"Batman Begins\",",
            "                   \"Year\": \"2005\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"15 Jun 2005\",",
            "                   \"Runtime\": \"140 min\",",
            "                   \"Genre\": \"Action, Adventure\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",",
            "                   \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",",
            "                   \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",",
            "                   \"Language\": \"English, Urdu, Mandarin\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",",
            "                   \"Metascore\": \"70\",",
            "                   \"imdbRating\": \"8.3\",",
            "                   \"imdbVotes\": \"972,584\",",
            "                   \"imdbID\": \"tt0372784\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {",
            "                   \"Title\": \"Avatar\",",
            "                   \"Year\": \"2009\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"18 Dec 2009\",",
            "                   \"Runtime\": \"162 min\",",
            "                   \"Genre\": \"Action, Adventure, Fantasy\",",
            "                   \"Director\": \"James Cameron\",",
            "                   \"Writer\": \"James Cameron\",",
            "                   \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",",
            "                   \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",",
            "                   \"Language\": \"English, Spanish\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"83\",",
            "                   \"imdbRating\": \"7.9\",",
            "                   \"imdbVotes\": \"876,575\",",
            "                   \"imdbID\": \"tt0499549\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                }",
            "];",
            "",
            "// Add your code below this line",
            "",
            "var rating = [];",
            "for(var i=0; i < watchList.length; i++){",
            "  rating.push({title: watchList[i][\"Title\"],  rating: watchList[i][\"imdbRating\"]});",
            "}",
            "",
            "// Add your code above this line",
            "",
            "console.log(rating); "
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8f367417b2b2512b62",
      "title": "Implement map on a Prototype",
      "description": [
        "As you have seen from applying <code>Array.prototype.map()</code>, or simply <code>map()</code> earlier, the <code>map</code> method returns an array of the same length as the one it was called on. It also doesn't alter the original array, as long as its callback function doesn't.",
        "In other words, <code>map</code> is a pure function, and its output depends solely on its inputs. Plus, it takes another function as its argument.",
        "It would teach us a lot about <code>map</code> to try to implement a version of it that behaves exactly like the <code>Array.prototype.map()</code> with a <code>for</code> loop or <code>Array.prototype.forEach()</code>.",
        "Note: A pure function is allowed to alter local variables defined within its scope, although, it's preferable to avoid that as well.",
        "<hr>",
        "Write your own <code>Array.prototype.myMap()</code>, which should behave exactly like <code>Array.prototype.map()</code>. You may use a <code>for</code> loop or the <code>forEach</code> method."
      ],
      "tests": [
        {
          "text": "<code>new_s</code> should equal <code>[46, 130, 196, 10]</code>.",
          "testString": "assert(JSON.stringify(new_s) === JSON.stringify([46, 130, 196, 10]), '<code>new_s</code> should equal <code>[46, 130, 196, 10]</code>.');"
        },
        {
          "text": "Your code should not use the <code>map</code> method.",
          "testString": "assert(!code.match(/\\.map/g), 'Your code should not use the <code>map</code> method.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// the global Array",
            "var s = [23, 65, 98, 5];",
            "",
            "Array.prototype.myMap = function(callback){",
            "  var newArray = [];",
            "  // Add your code below this line",
            "  ",
            "  // Add your code above this line",
            "  return newArray;",
            "",
            "};",
            "",
            "var new_s = s.myMap(function(item){",
            "  return item * 2;",
            "});"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8f367417b2b2512b63",
      "title": "Use the filter Method to Extract Data from an Array",
      "description": [
        "Another useful array function is <code>Array.prototype.filter()</code>, or simply <code>filter()</code>. The <code>filter</code> method returns a new array which is at most as long as the original array, but usually has fewer items.",
        "<code>Filter</code> doesn't alter the original array, just like <code>map</code>. It takes a callback function that applies the logic inside the callback on each element of the array. If an element returns true based on the criteria in the callback function, then it is included in the new array.",
        "<hr>",
        "The variable <code>watchList</code> holds an array of objects with information on several movies. Use a combination of <code>filter</code> and <code>map</code> to return a new array of objects with only <code>title</code> and <code>rating</code> keys, but where <code>imdbRating</code> is greater than or equal to 8.0. Note that the rating values are saved as strings in the object and you may want to convert them into numbers to perform mathematical operations on them."
      ],
      "tests": [
        {
          "text": "The <code>watchList</code> variable should not change.",
          "testString": "assert(watchList[0].Title === \"Inception\" && watchList[4].Director == \"James Cameron\", 'The <code>watchList</code> variable should not change.');"
        },
        {
          "text": "Your code should use the <code>filter</code> method.",
          "testString": "assert(code.match(/\\.filter/g), 'Your code should use the <code>filter</code> method.');"
        },
        {
          "text": "Your code should not use a <code>for</code> loop.",
          "testString": "assert(!code.match(/for\\s*?\\(.+?\\)/g), 'Your code should not use a <code>for</code> loop.');"
        },
        {
          "text": "<code>filteredList</code> should equal <code>[{\"title\": \"Inception\",\"rating\": \"8.8\"},{\"title\": \"Interstellar\",\"rating\": \"8.6\"},{\"title\": \"The Dark Knight\",\"rating\": \"9.0\"},{\"title\": \"Batman Begins\",\"rating\": \"8.3\"}]</code>.",
          "testString": "assert.deepEqual(filteredList, [{\"title\": \"Inception\",\"rating\": \"8.8\"},{\"title\": \"Interstellar\",\"rating\": \"8.6\"},{\"title\": \"The Dark Knight\",\"rating\": \"9.0\"},{\"title\": \"Batman Begins\",\"rating\": \"8.3\"}], '<code>filteredList</code> should equal <code>[{\"title\": \"Inception\",\"rating\": \"8.8\"},{\"title\": \"Interstellar\",\"rating\": \"8.6\"},{\"title\": \"The Dark Knight\",\"rating\": \"9.0\"},{\"title\": \"Batman Begins\",\"rating\": \"8.3\"}]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// the global variable",
            "var watchList = [",
            "                 {  ",
            "                   \"Title\": \"Inception\",",
            "                   \"Year\": \"2010\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"16 Jul 2010\",",
            "                   \"Runtime\": \"148 min\",",
            "                   \"Genre\": \"Action, Adventure, Crime\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Christopher Nolan\",",
            "                   \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Ellen Page, Tom Hardy\",",
            "                   \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",",
            "                   \"Language\": \"English, Japanese, French\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"74\",",
            "                   \"imdbRating\": \"8.8\",",
            "                   \"imdbVotes\": \"1,446,708\",",
            "                   \"imdbID\": \"tt1375666\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {  ",
            "                   \"Title\": \"Interstellar\",",
            "                   \"Year\": \"2014\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"07 Nov 2014\",",
            "                   \"Runtime\": \"169 min\",",
            "                   \"Genre\": \"Adventure, Drama, Sci-Fi\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Jonathan Nolan, Christopher Nolan\",",
            "                   \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",",
            "                   \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",",
            "                   \"Language\": \"English\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"74\",",
            "                   \"imdbRating\": \"8.6\",",
            "                   \"imdbVotes\": \"910,366\",",
            "                   \"imdbID\": \"tt0816692\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {",
            "                   \"Title\": \"The Dark Knight\",",
            "                   \"Year\": \"2008\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"18 Jul 2008\",",
            "                   \"Runtime\": \"152 min\",",
            "                   \"Genre\": \"Action, Adventure, Crime\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",",
            "                   \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",",
            "                   \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",",
            "                   \"Language\": \"English, Mandarin\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"82\",",
            "                   \"imdbRating\": \"9.0\",",
            "                   \"imdbVotes\": \"1,652,832\",",
            "                   \"imdbID\": \"tt0468569\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {  ",
            "                   \"Title\": \"Batman Begins\",",
            "                   \"Year\": \"2005\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"15 Jun 2005\",",
            "                   \"Runtime\": \"140 min\",",
            "                   \"Genre\": \"Action, Adventure\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",",
            "                   \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",",
            "                   \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",",
            "                   \"Language\": \"English, Urdu, Mandarin\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",",
            "                   \"Metascore\": \"70\",",
            "                   \"imdbRating\": \"8.3\",",
            "                   \"imdbVotes\": \"972,584\",",
            "                   \"imdbID\": \"tt0372784\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {",
            "                   \"Title\": \"Avatar\",",
            "                   \"Year\": \"2009\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"18 Dec 2009\",",
            "                   \"Runtime\": \"162 min\",",
            "                   \"Genre\": \"Action, Adventure, Fantasy\",",
            "                   \"Director\": \"James Cameron\",",
            "                   \"Writer\": \"James Cameron\",",
            "                   \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",",
            "                   \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",",
            "                   \"Language\": \"English, Spanish\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"83\",",
            "                   \"imdbRating\": \"7.9\",",
            "                   \"imdbVotes\": \"876,575\",",
            "                   \"imdbID\": \"tt0499549\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                }",
            "];",
            "",
            "// Add your code below this line",
            "",
            "var filteredList;",
            "",
            "// Add your code above this line",
            "",
            "console.log(filteredList); "
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8f367417b2b2512b64",
      "title": "Implement the filter Method on a Prototype",
      "description": [
        "It would teach us a lot about the <code>filter</code> method if we try to implement a version of it that behaves exactly like <code>Array.prototype.filter()</code>. It can use either a <code>for</code> loop or <code>Array.prototype.forEach()</code>.",
        "Note: A pure function is allowed to alter local variables defined within its scope, although, it's preferable to avoid that as well.",
        "<hr>",
        "Write your own <code>Array.prototype.myFilter()</code>, which should behave exactly like <code>Array.prototype.filter()</code>. You may use a <code>for</code> loop or the <code>Array.prototype.forEach()</code> method."
      ],
      "tests": [
        {
          "text": "<code>new_s</code> should equal <code>[23, 65, 5]</code>.",
          "testString": "assert(JSON.stringify(new_s) === JSON.stringify([23, 65, 5]), '<code>new_s</code> should equal <code>[23, 65, 5]</code>.');"
        },
        {
          "text": "Your code should not use the <code>filter</code> method.",
          "testString": "assert(!code.match(/\\.filter/g), 'Your code should not use the <code>filter</code> method.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// the global Array",
            "var s = [23, 65, 98, 5];",
            "",
            "Array.prototype.myFilter = function(callback){",
            "  var newArray = [];",
            "  // Add your code below this line",
            "  ",
            "  // Add your code above this line",
            "  return newArray;",
            "",
            "};",
            "",
            "var new_s = s.myFilter(function(item){",
            "  return item % 2 === 1;",
            "});"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b90367417b2b2512b65",
      "title": "Return Part of an Array Using the slice Method",
      "description": [
        "The <code>slice</code> method returns a copy of certain elements of an array. It can take two arguments, the first gives the index of where to begin the slice, the second is the index for where to end the slice (and it's non-inclusive). If the arguments are not provided, the default is to start at the beginning of the array through the end, which is an easy way to make a copy of the entire array. The <code>slice</code> method does not mutate the original array, but returns a new one.",
        "Here's an example:",
        "<blockquote>var arr = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\"];<br>var newArray = arr.slice(1, 3);<br>// Sets newArray to [\"Dog\", \"Tiger\"]</blockquote>",
        "<hr>",
        "Use the <code>slice</code> method in the <code>sliceArray</code> function to return part of the <code>anim</code> array given the provided <code>beginSlice</code> and <code>endSlice</code> indices. The function should return an array."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>slice</code> method.",
          "testString": "assert(code.match(/\\.slice/g), 'Your code should use the <code>slice</code> method.');"
        },
        {
          "text": "The <code>inputAnim</code> variable should not change.",
          "testString": "assert(JSON.stringify(inputAnim) === JSON.stringify([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"]), 'The <code>inputAnim</code> variable should not change.');"
        },
        {
          "text": "<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 3)</code> should return <code>[\"Dog\", \"Tiger\"]</code>.",
          "testString": "assert(JSON.stringify(sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 3)) === JSON.stringify([\"Dog\", \"Tiger\"]), '<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 3)</code> should return <code>[\"Dog\", \"Tiger\"]</code>.');"
        },
        {
          "text": "<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 0, 1)</code> should return <code>[\"Cat\"]</code>.",
          "testString": "assert(JSON.stringify(sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 0, 1)) === JSON.stringify([\"Cat\"]), '<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 0, 1)</code> should return <code>[\"Cat\"]</code>.');"
        },
        {
          "text": "<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 4)</code> should return <code>[\"Dog\", \"Tiger\", \"Zebra\"]</code>.",
          "testString": "assert(JSON.stringify(sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 4)) === JSON.stringify([\"Dog\", \"Tiger\", \"Zebra\"]), '<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 4)</code> should return <code>[\"Dog\", \"Tiger\", \"Zebra\"]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function sliceArray(anim, beginSlice, endSlice) {",
            "  // Add your code below this line",
            "  ",
            "  ",
            "  // Add your code above this line",
            "}",
            "var inputAnim = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"];",
            "sliceArray(inputAnim, 1, 3);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "9d7123c8c441eeafaeb5bdef",
      "title": "Remove Elements from an Array Using slice Instead of splice",
      "description": [
        "A common pattern while working with arrays is when you want to remove items and keep the rest of the array. JavaScript offers the <code>splice</code> method for this, which takes arguments for the index of where to start removing items, then the number of items to remove. If the second argument is not provided, the default is to remove items through the end. However, the <code>splice</code> method mutates the original array it is called on. Here's an example:",
        "<blockquote>var cities = [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"];<br>cities.splice(3, 1); // Returns \"London\" and deletes it from the cities array<br>// cities is now [\"Chicago\", \"Delhi\", \"Islamabad\", \"Berlin\"]</blockquote>",
        "As we saw in the last challenge, the <code>slice</code> method does not mutate the original array, but returns a new one which can be saved into a variable. Recall that the <code>slice</code> method takes two arguments for the indices to begin and end the slice (the end is non-inclusive), and returns those items in a new array. Using the <code>slice</code> method instead of <code>splice</code> helps to avoid any array-mutating side effects.",
        "<hr>",
        "Rewrite the function <code>nonMutatingSplice</code> by using <code>slice</code> instead of <code>splice</code>. It should limit the provided <code>cities</code> array to a length of 3, and return a new array with only the first three items.",
        "Do not mutate the original array provided to the function."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>slice</code> method.",
          "testString": "assert(code.match(/\\.slice/g), 'Your code should use the <code>slice</code> method.');"
        },
        {
          "text": "Your code should not use the <code>splice</code> method.",
          "testString": "assert(!code.match(/\\.splice/g), 'Your code should not use the <code>splice</code> method.');"
        },
        {
          "text": "The <code>inputCities</code> array should not change.",
          "testString": "assert(JSON.stringify(inputCities) === JSON.stringify([\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"]), 'The <code>inputCities</code> array should not change.');"
        },
        {
          "text": "<code>nonMutatingSplice([\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"])</code> should return <code>[\"Chicago\", \"Delhi\", \"Islamabad\"]</code>.",
          "testString": "assert(JSON.stringify(nonMutatingSplice([\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"])) === JSON.stringify([\"Chicago\", \"Delhi\", \"Islamabad\"]), '<code>nonMutatingSplice([\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"])</code> should return <code>[\"Chicago\", \"Delhi\", \"Islamabad\"]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function nonMutatingSplice(cities) {",
            "  // Add your code below this line",
            "  return cities.splice(3);",
            "  ",
            "  // Add your code above this line",
            "}",
            "var inputCities = [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"];",
            "nonMutatingSplice(inputCities);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7da9367417b2b2512b66",
      "title": "Combine Two Arrays Using the concat Method",
      "description": [
        "<code>Concatenation</code> means to join items end to end. JavaScript offers the <code>concat</code> method for both strings and arrays that work in the same way. For arrays, the method is called on one, then another array is provided as the argument to <code>concat</code>, which is added to the end of the first array. It returns a new array and does not mutate either of the original arrays. Here's an example:",
        "<blockquote>[1, 2, 3].concat([4, 5, 6]);<br>// Returns a new array [1, 2, 3, 4, 5, 6]</blockquote>",
        "<hr>",
        "Use the <code>concat</code> method in the <code>nonMutatingConcat</code> function to concatenate <code>attach</code> to the end of <code>original</code>. The function should return the concatenated array."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>concat</code> method.",
          "testString": "assert(code.match(/\\.concat/g), 'Your code should use the <code>concat</code> method.');"
        },
        {
          "text": "The <code>first</code> array should not change.",
          "testString": "assert(JSON.stringify(first) === JSON.stringify([1, 2, 3]), 'The <code>first</code> array should not change.');"
        },
        {
          "text": "The <code>second</code> array should not change.",
          "testString": "assert(JSON.stringify(second) === JSON.stringify([4, 5]), 'The <code>second</code> array should not change.');"
        },
        {
          "text": "<code>nonMutatingConcat([1, 2, 3], [4, 5])</code> should return <code>[1, 2, 3, 4, 5]</code>.",
          "testString": "assert(JSON.stringify(nonMutatingConcat([1, 2, 3], [4, 5])) === JSON.stringify([1, 2, 3, 4, 5]), '<code>nonMutatingConcat([1, 2, 3], [4, 5])</code> should return <code>[1, 2, 3, 4, 5]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function nonMutatingConcat(original, attach) {",
            "  // Add your code below this line",
            "  ",
            "  ",
            "  // Add your code above this line",
            "}",
            "var first = [1, 2, 3];",
            "var second = [4, 5];",
            "nonMutatingConcat(first, second);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7da9367417b2b2512b67",
      "title": "Add Elements to the End of an Array Using concat Instead of push",
      "description": [
        "Functional programming is all about creating and using non-mutating functions.",
        "The last challenge introduced the <code>concat</code> method as a way to combine arrays into a new one without mutating the original arrays. Compare <code>concat</code> to the <code>push</code> method. <code>Push</code> adds an item to the end of the same array it is called on, which mutates that array. Here's an example:",
        "<blockquote>var arr = [1, 2, 3];<br>arr.push([4, 5, 6]);<br>// arr is changed to [1, 2, 3, [4, 5, 6]]<br>// Not the functional programming way</blockquote>",
        "<code>Concat</code> offers a way to add new items to the end of an array without any mutating side effects.",
        "<hr>",
        "Change the <code>nonMutatingPush</code> function so it uses <code>concat</code> to add <code>newItem</code> to the end of <code>original</code> instead of <code>push</code>. The function should return an array."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>concat</code> method.",
          "testString": "assert(code.match(/\\.concat/g), 'Your code should use the <code>concat</code> method.');"
        },
        {
          "text": "Your code should not use the <code>push</code> method.",
          "testString": "assert(!code.match(/\\.push/g), 'Your code should not use the <code>push</code> method.');"
        },
        {
          "text": "The <code>first</code> array should not change.",
          "testString": "assert(JSON.stringify(first) === JSON.stringify([1, 2, 3]), 'The <code>first</code> array should not change.');"
        },
        {
          "text": "The <code>second</code> array should not change.",
          "testString": "assert(JSON.stringify(second) === JSON.stringify([4, 5]), 'The <code>second</code> array should not change.');"
        },
        {
          "text": "<code>nonMutatingPush([1, 2, 3], [4, 5])</code> should return <code>[1, 2, 3, 4, 5]</code>.",
          "testString": "assert(JSON.stringify(nonMutatingPush([1, 2, 3], [4, 5])) === JSON.stringify([1, 2, 3, 4, 5]), '<code>nonMutatingPush([1, 2, 3], [4, 5])</code> should return <code>[1, 2, 3, 4, 5]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function nonMutatingPush(original, newItem) {",
            "  // Add your code below this line",
            "  return original.push(newItem);",
            "  ",
            "  // Add your code above this line",
            "}",
            "var first = [1, 2, 3];",
            "var second = [4, 5];",
            "nonMutatingPush(first, second);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7da9367417b2b2512b68",
      "title": "Use the reduce Method to Analyze Data",
      "description": [
        "<code>Array.prototype.reduce()</code>, or simply <code>reduce()</code>, is the most general of all array operations in JavaScript. You can solve almost any array processing problem using the <code>reduce</code> method.",
        "This is not the case with the <code>filter</code> and <code>map</code> methods since they do not allow interaction between two different elements of the array. For example, if you want to compare elements of the array, or add them together, <code>filter</code> or <code>map</code> could not process that.",
        "The <code>reduce</code> method allows for more general forms of array processing, and it's possible to show that both <code>filter</code> and <code>map</code> can be derived as a special application of <code>reduce</code>.",
        "However, before we get there, let's practice using <code>reduce</code> first.",
        "<hr>",
        "The variable <code>watchList</code> holds an array of objects with information on several movies. Use <code>reduce</code> to find the average IMDB rating of the movies <strong>directed by Christopher Nolan</strong>. Recall from prior challenges how to <code>filter</code> data and <code>map</code> over it to pull what you need. You may need to create other variables, but save the final average into the variable <code>averageRating</code>. Note that the rating values are saved as strings in the object and need to be converted into numbers before they are used in any mathematical operations."
      ],
      "tests": [
        {
          "text": "The <code>watchList</code> variable should not change.",
          "testString": "assert(watchList[0].Title === \"Inception\" && watchList[4].Director == \"James Cameron\", 'The <code>watchList</code> variable should not change.');"
        },
        {
          "text": "Your code should use the <code>reduce</code> method.",
          "testString": "assert(code.match(/\\.reduce/g), 'Your code should use the <code>reduce</code> method.');"
        },
        {
          "text": "The <code>averageRating</code> should equal 8.675.",
          "testString": "assert(averageRating == 8.675, 'The <code>averageRating</code> should equal 8.675.');"
        },
        {
          "text": "Your code should not use a <code>for</code> loop.",
          "testString": "assert(!code.match(/for\\s*?\\(.*\\)/g), 'Your code should not use a <code>for</code> loop.');"
        }
      ],
      "solutions": [],
      "hints": [
        "Try using .filter() to filter the watchList by Director.",
        "Try using .map() to return an array of ratings.",
        "You can use Number() to convert a string into a number."
      ],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// the global variable",
            "var watchList = [",
            "                 {  ",
            "                   \"Title\": \"Inception\",",
            "                   \"Year\": \"2010\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"16 Jul 2010\",",
            "                   \"Runtime\": \"148 min\",",
            "                   \"Genre\": \"Action, Adventure, Crime\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Christopher Nolan\",",
            "                   \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Ellen Page, Tom Hardy\",",
            "                   \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",",
            "                   \"Language\": \"English, Japanese, French\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"74\",",
            "                   \"imdbRating\": \"8.8\",",
            "                   \"imdbVotes\": \"1,446,708\",",
            "                   \"imdbID\": \"tt1375666\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {  ",
            "                   \"Title\": \"Interstellar\",",
            "                   \"Year\": \"2014\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"07 Nov 2014\",",
            "                   \"Runtime\": \"169 min\",",
            "                   \"Genre\": \"Adventure, Drama, Sci-Fi\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Jonathan Nolan, Christopher Nolan\",",
            "                   \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",",
            "                   \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",",
            "                   \"Language\": \"English\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"74\",",
            "                   \"imdbRating\": \"8.6\",",
            "                   \"imdbVotes\": \"910,366\",",
            "                   \"imdbID\": \"tt0816692\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {",
            "                   \"Title\": \"The Dark Knight\",",
            "                   \"Year\": \"2008\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"18 Jul 2008\",",
            "                   \"Runtime\": \"152 min\",",
            "                   \"Genre\": \"Action, Adventure, Crime\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",",
            "                   \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",",
            "                   \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",",
            "                   \"Language\": \"English, Mandarin\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"82\",",
            "                   \"imdbRating\": \"9.0\",",
            "                   \"imdbVotes\": \"1,652,832\",",
            "                   \"imdbID\": \"tt0468569\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {  ",
            "                   \"Title\": \"Batman Begins\",",
            "                   \"Year\": \"2005\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"15 Jun 2005\",",
            "                   \"Runtime\": \"140 min\",",
            "                   \"Genre\": \"Action, Adventure\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",",
            "                   \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",",
            "                   \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",",
            "                   \"Language\": \"English, Urdu, Mandarin\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",",
            "                   \"Metascore\": \"70\",",
            "                   \"imdbRating\": \"8.3\",",
            "                   \"imdbVotes\": \"972,584\",",
            "                   \"imdbID\": \"tt0372784\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {",
            "                   \"Title\": \"Avatar\",",
            "                   \"Year\": \"2009\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"18 Dec 2009\",",
            "                   \"Runtime\": \"162 min\",",
            "                   \"Genre\": \"Action, Adventure, Fantasy\",",
            "                   \"Director\": \"James Cameron\",",
            "                   \"Writer\": \"James Cameron\",",
            "                   \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",",
            "                   \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",",
            "                   \"Language\": \"English, Spanish\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"83\",",
            "                   \"imdbRating\": \"7.9\",",
            "                   \"imdbVotes\": \"876,575\",",
            "                   \"imdbID\": \"tt0499549\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                }",
            "];",
            "",
            "// Add your code below this line",
            "",
            "var averageRating;",
            "",
            "// Add your code above this line",
            "",
            "console.log(averageRating); "
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7da9367417b2b2512b69",
      "title": "Sort an Array Alphabetically using the sort Method",
      "description": [
        "The <code>sort</code> method sorts the elements of an array according to the callback function.",
        "For example:",
        "<blockquote>function ascendingOrder(arr) {<br>&nbsp;&nbsp;return arr.sort(function(a, b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return a - b;<br>&nbsp;&nbsp;});<br>}<br>ascendingOrder([1, 5, 2, 3, 4]);<br>// Returns [1, 2, 3, 4, 5]<br><br>function reverseAlpha(arr) {<br>&nbsp;&nbsp;return arr.sort(function(a, b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return a < b;<br>&nbsp;&nbsp;});<br>}<br>reverseAlpha(['l', 'h', 'z', 'b', 's']);<br>// Returns ['z', 's', 'l', 'h', 'b']</blockquote>",
        "Note: It's encouraged to provide a callback function to specify how to sort the array items. JavaScript's default sorting method is by string Unicode point value, which may return unexpected results.",
        "<hr>",
        "Use the <code>sort</code> method in the <code>alphabeticalOrder</code> function to sort the elements of <code>arr</code> in alphabetical order."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>sort</code> method.",
          "testString": "assert(code.match(/\\.sort/g), 'Your code should use the <code>sort</code> method.');"
        },
        {
          "text": "<code>alphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"])</code> should return <code>[\"a\", \"a\", \"c\", \"d\", \"g\", \"z\"]</code>.",
          "testString": "assert(JSON.stringify(alphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"])) === JSON.stringify([\"a\", \"a\", \"c\", \"d\", \"g\", \"z\"]), '<code>alphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"])</code> should return <code>[\"a\", \"a\", \"c\", \"d\", \"g\", \"z\"]</code>.');"
        },
        {
          "text": "<code>alphabeticalOrder([\"x\", \"h\", \"a\", \"m\", \"n\", \"m\"])</code> should return <code>[\"a\", \"h\", \"m\", \"m\", \"n\", \"x\"]</code>.",
          "testString": "assert(JSON.stringify(alphabeticalOrder([\"x\", \"h\", \"a\", \"m\", \"n\", \"m\"])) === JSON.stringify([\"a\", \"h\", \"m\", \"m\", \"n\", \"x\"]), '<code>alphabeticalOrder([\"x\", \"h\", \"a\", \"m\", \"n\", \"m\"])</code> should return <code>[\"a\", \"h\", \"m\", \"m\", \"n\", \"x\"]</code>.');"
        },
        {
          "text": "<code>alphabeticalOrder([\"a\", \"a\", \"a\", \"a\", \"x\", \"t\"])</code> should return <code>[\"a\", \"a\", \"a\", \"a\", \"t\", \"x\"]</code>.",
          "testString": "assert(JSON.stringify(alphabeticalOrder([\"a\", \"a\", \"a\", \"a\", \"x\", \"t\"])) === JSON.stringify([\"a\", \"a\", \"a\", \"a\", \"t\", \"x\"]), '<code>alphabeticalOrder([\"a\", \"a\", \"a\", \"a\", \"x\", \"t\"])</code> should return <code>[\"a\", \"a\", \"a\", \"a\", \"t\", \"x\"]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function alphabeticalOrder(arr) {",
            "  // Add your code below this line",
            "  ",
            "  ",
            "  // Add your code above this line",
            "}",
            "alphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7da9367417b2b2512b6a",
      "title": "Return a Sorted Array Without Changing the Original Array",
      "description": [
        "A side effect of the <code>sort</code> method is that it changes the order of the elements in the original array. In other words, it mutates the array in place. One way to avoid this is to first concatenate an empty array to the one being sorted (remember that <code>concat</code> returns a new array), then run the <code>sort</code> method.",
        "<hr>",
        "Use the <code>sort</code> method in the <code>nonMutatingSort</code> function to sort the elements of an array in ascending order. The function should return a new array, and not mutate the <code>globalArray</code> variable."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>sort</code> method.",
          "testString": "assert(code.match(/\\.sort/g), 'Your code should use the <code>sort</code> method.');"
        },
        {
          "text": "Your code should use the <code>concat</code> method.",
          "testString": "assert(code.match(/\\.concat/g), 'Your code should use the <code>concat</code> method.');"
        },
        {
          "text": "The <code>globalArray</code> variable should not change.",
          "testString": "assert(JSON.stringify(globalArray) === JSON.stringify([5, 6, 3, 2, 9]), 'The <code>globalArray</code> variable should not change.');"
        },
        {
          "text": "<code>nonMutatingSort(globalArray)</code> should return <code>[2, 3, 5, 6, 9]</code>.",
          "testString": "assert(JSON.stringify(nonMutatingSort(globalArray)) === JSON.stringify([2, 3, 5, 6, 9]), '<code>nonMutatingSort(globalArray)</code> should return <code>[2, 3, 5, 6, 9]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var globalArray = [5, 6, 3, 2, 9];",
            "function nonMutatingSort(arr) {",
            "  // Add your code below this line",
            "  ",
            "  ",
            "  // Add your code above this line",
            "}",
            "nonMutatingSort(globalArray);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7daa367417b2b2512b6b",
      "title": "Split a String into an Array Using the split Method",
      "description": [
        "The <code>split</code> method splits a string into an array of strings. It takes an argument for the delimiter, which can be a character to use to break up the string or a regular expression. For example, if the delimiter is a space, you get an array of words, and if the delimiter is an empty string, you get an array of each character in the string.",
        "Here are two examples that split one string by spaces, then another by digits using a regular expression:",
        "<blockquote>var str = \"Hello World\";<br>var bySpace = str.split(\" \");<br>// Sets bySpace to [\"Hello\", \"World\"]<br><br>var otherString = \"How9are7you2today\";<br>var byDigits = str.split(/\\d/);<br>// Sets byDigits to [\"How\", \"are\", \"you\", \"today\"]</blockquote>",
        "Since strings are immutable, the <code>split</code> method makes it easier to work with them.",
        "<hr>",
        "Use the <code>split</code> method inside the <code>splitify</code> function to split <code>str</code> into an array of words. The function should return the array. Note that the words are not always separated by spaces, and the array should not contain punctuation."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>split</code> method.",
          "testString": "assert(code.match(/\\.split/g), 'Your code should use the <code>split</code> method.');"
        },
        {
          "text": "<code>splitify(\"Hello World,I-am code\")</code> should return <code>[\"Hello\", \"World\", \"I\", \"am\", \"code\"]</code>.",
          "testString": "assert(JSON.stringify(splitify(\"Hello World,I-am code\")) === JSON.stringify([\"Hello\", \"World\", \"I\", \"am\", \"code\"]), '<code>splitify(\"Hello World,I-am code\")</code> should return <code>[\"Hello\", \"World\", \"I\", \"am\", \"code\"]</code>.');"
        },
        {
          "text": "<code>splitify(\"Earth-is-our home\")</code> should return <code>[\"Earth\", \"is\", \"our\", \"home\"]</code>.",
          "testString": "assert(JSON.stringify(splitify(\"Earth-is-our home\")) === JSON.stringify([\"Earth\", \"is\", \"our\", \"home\"]), '<code>splitify(\"Earth-is-our home\")</code> should return <code>[\"Earth\", \"is\", \"our\", \"home\"]</code>.');"
        },
        {
          "text": "<code>splitify(\"This.is.a-sentence\")</code> should return <code>[\"This\", \"is\", \"a\", \"sentence\"]</code>.",
          "testString": "assert(JSON.stringify(splitify(\"This.is.a-sentence\")) === JSON.stringify([\"This\", \"is\", \"a\", \"sentence\"]), '<code>splitify(\"This.is.a-sentence\")</code> should return <code>[\"This\", \"is\", \"a\", \"sentence\"]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [
        "The regex pre-defined character class for non-alphanumerics is \\W."
      ],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function splitify(str) {",
            "  // Add your code below this line",
            "  ",
            "  ",
            "  // Add your code above this line",
            "}",
            "splitify(\"Hello World,I-am code\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7daa367417b2b2512b6c",
      "title": "Combine an Array into a String Using the join Method",
      "description": [
        "The <code>join</code> method is used to join the elements of an array together to create a string. It takes an argument for the delimiter that is used to separate the array elements in the string.",
        "Here's an example:",
        "<blockquote>var arr = [\"Hello\", \"World\"];<br>var str = arr.join(\" \");<br>// Sets str to \"Hello World\"</blockquote>",
        "<hr>",
        "Use the <code>join</code> method (among others) inside the <code>sentensify</code> function to make a sentence from the words in the string <code>str</code>. The function should return a string. For example, \"I-like-Star-Wars\" would be converted to \"I like Star Wars\". For this challenge, do not use the <code>replace</code> method."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>join</code> method.",
          "testString": "assert(code.match(/\\.join/g), 'Your code should use the <code>join</code> method.');"
        },
        {
          "text": "Your code should not use the <code>replace</code> method.",
          "testString": "assert(!code.match(/\\.replace/g), 'Your code should not use the <code>replace</code> method.');"
        },
        {
          "text": "<code>sentensify(\"May-the-force-be-with-you\")</code> should return a string.",
          "testString": "assert(typeof sentensify(\"May-the-force-be-with-you\") === \"string\", '<code>sentensify(\"May-the-force-be-with-you\")</code> should return a string.');"
        },
        {
          "text": "<code>sentensify(\"May-the-force-be-with-you\")</code> should return <code>\"May the force be with you\"</code>.",
          "testString": "assert(sentensify(\"May-the-force-be-with-you\") === \"May the force be with you\", '<code>sentensify(\"May-the-force-be-with-you\")</code> should return <code>\"May the force be with you\"</code>.');"
        },
        {
          "text": "<code>sentensify(\"The.force.is.strong.with.this.one\")</code> should return <code>\"The force is strong with this one\"</code>.",
          "testString": "assert(sentensify(\"The.force.is.strong.with.this.one\") === \"The force is strong with this one\", '<code>sentensify(\"The.force.is.strong.with.this.one\")</code> should return <code>\"The force is strong with this one\"</code>.');"
        },
        {
          "text": "<code>sentensify(\"There,has,been,an,awakening\")</code> should return <code>\"There has been an awakening\"</code>.",
          "testString": "assert(sentensify(\"There,has,been,an,awakening\") === \"There has been an awakening\", '<code>sentensify(\"There,has,been,an,awakening\")</code> should return <code>\"There has been an awakening\"</code>.');"
        }
      ],
      "solutions": [],
      "hints": [
        "First try to split the given string before applying the join method."
      ],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function sentensify(str) {",
            "  // Add your code below this line",
            "  ",
            "  ",
            "  // Add your code above this line",
            "}",
            "sentensify(\"May-the-force-be-with-you\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dab367417b2b2512b6d",
      "title": "Apply Functional Programming to Convert Strings to URL Slugs",
      "description": [
        "The last several challenges covered a number of useful array and string methods that follow functional programming principles. We've also learned about <code>reduce</code>, which is a powerful method used to reduce problems to simpler forms. From computing averages to sorting, any array operation can be achieved by applying it. Recall that <code>map</code> and <code>filter</code> are special cases of <code>reduce</code>.",
        "Let's combine what we've learned to solve a practical problem.",
        "Many content management sites (CMS) have the titles of a post added to part of the URL for simple bookmarking purposes. For example, if you write a Medium post titled \"Stop Using Reduce\", it's likely the URL would have some form of the title string in it (\".../stop-using-reduce\"). You may have already noticed this on the freeCodeCamp site.",
        "<hr>",
        "Fill in the <code>urlSlug</code> function so it converts a string <code>title</code> and returns the hyphenated version for the URL. You can use any of the methods covered in this section, and don't use <code>replace</code>. Here are the requirements:",
        "The input is a string with spaces and title-cased words",
        "The output is a string with the spaces between words replaced by a hyphen (<code>-</code>)",
        "The output should be all lower-cased letters",
        "The output should not have any spaces"
      ],
      "tests": [
        {
          "text": "The <code>globalTitle</code> variable should not change.",
          "testString": "assert(globalTitle === \"Winter Is Coming\", 'The <code>globalTitle</code> variable should not change.');"
        },
        {
          "text": "Your code should not use the <code>replace</code> method for this challenge.",
          "testString": "assert(!code.match(/\\.replace/g), 'Your code should not use the <code>replace</code> method for this challenge.');"
        },
        {
          "text": "<code>urlSlug(\"Winter Is Coming\")</code> should return <code>\"winter-is-coming\"</code>.",
          "testString": "assert(urlSlug(\"Winter Is Coming\") === \"winter-is-coming\", '<code>urlSlug(\"Winter Is Coming\")</code> should return <code>\"winter-is-coming\"</code>.');"
        },
        {
          "text": "<code>urlSlug(\" Winter Is  &nbsp;Coming\")</code> should return <code>\"winter-is-coming\"</code>.",
          "testString": "assert(urlSlug(\" Winter Is  Coming\") === \"winter-is-coming\", '<code>urlSlug(\" Winter Is  &nbsp;Coming\")</code> should return <code>\"winter-is-coming\"</code>.');"
        },
        {
          "text": "<code>urlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\")</code> should return <code>\"a-mind-needs-books-like-a-sword-needs-a-whetstone\"</code>.",
          "testString": "assert(urlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\") === \"a-mind-needs-books-like-a-sword-needs-a-whetstone\", '<code>urlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\")</code> should return <code>\"a-mind-needs-books-like-a-sword-needs-a-whetstone\"</code>.');"
        },
        {
          "text": "<code>urlSlug(\"Hold The Door\")</code> should return <code>\"hold-the-door\"</code>.",
          "testString": "assert(urlSlug(\"Hold The Door\") === \"hold-the-door\", '<code>urlSlug(\"Hold The Door\")</code> should return <code>\"hold-the-door\"</code>.');"
        }
      ],
      "solutions": [],
      "hints": [
        "When several spaces in a row are split by space, it puts an empty string in the array.",
        "You can use the .toLowerCase() method to make the title all lower case."
      ],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// the global variable",
            "var globalTitle = \"Winter Is Coming\";",
            "",
            "// Add your code below this line",
            "function urlSlug(title) {",
            "  ",
            "  ",
            "}",
            "// Add your code above this line",
            "",
            "var winterComing = urlSlug(globalTitle); // Should be \"winter-is-coming\""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dab367417b2b2512b6e",
      "title": "Use the every Method to Check that Every Element in an Array Meets a Criteria",
      "description": [
        "The <code>every</code> method works with arrays to check if <em>every</em> element passes a particular test. It returns a Boolean value - <code>true</code> if all values meet the criteria, <code>false</code> if not.",
        "For example, the following code would check if every element in the <code>numbers</code> array is less than 10:",
        "<blockquote>var numbers = [1, 5, 8, 0, 10, 11];<br>numbers.every(function(currentValue) {<br>&nbsp;&nbsp;return currentValue < 10;<br>});<br>// Returns false</blockquote>",
        "<hr>",
        "Use the <code>every</code> method inside the <code>checkPositive</code> function to check if every element in <code>arr</code> is positive. The function should return a Boolean value."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>every</code> method.",
          "testString": "assert(code.match(/\\.every/g), 'Your code should use the <code>every</code> method.');"
        },
        {
          "text": "<code>checkPositive([1, 2, 3, -4, 5])</code> should return <code>false</code>.",
          "testString": "assert(!checkPositive([1, 2, 3, -4, 5]), '<code>checkPositive([1, 2, 3, -4, 5])</code> should return <code>false</code>.');"
        },
        {
          "text": "<code>checkPositive([1, 2, 3, 4, 5])</code> should return <code>true</code>.",
          "testString": "assert(checkPositive([1, 2, 3, 4, 5]), '<code>checkPositive([1, 2, 3, 4, 5])</code> should return <code>true</code>.');"
        },
        {
          "text": "<code>checkPositive([1, -2, 3, -4, 5])</code> should return <code>false</code>.",
          "testString": "assert(!checkPositive([1, -2, 3, -4, 5]), '<code>checkPositive([1, -2, 3, -4, 5])</code> should return <code>false</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function checkPositive(arr) {",
            "  // Add your code below this line",
            "  ",
            "  ",
            "  // Add your code above this line",
            "}",
            "checkPositive([1, 2, 3, -4, 5]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dab367417b2b2512b6f",
      "title": "Use the some Method to Check that Any Elements in an Array Meet a Criteria",
      "description": [
        "The <code>some</code> method works with arrays to check if <em>any</em> element passes a particular test. It returns a Boolean value - <code>true</code> if any of the values meet the criteria, <code>false</code> if not.",
        "For example, the following code would check if any element in the <code>numbers</code> array is less than 10:",
        "<blockquote>var numbers = [10, 50, 8, 220, 110, 11];<br>numbers.some(function(currentValue) {<br>&nbsp;&nbsp;return currentValue < 10;<br>});<br>// Returns true</blockquote>",
        "<hr>",
        "Use the <code>some</code> method inside the <code>checkPositive</code> function to check if any element in <code>arr</code> is positive. The function should return a Boolean value."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>some</code> method.",
          "testString": "assert(code.match(/\\.some/g), 'Your code should use the <code>some</code> method.');"
        },
        {
          "text": "<code>checkPositive([1, 2, 3, -4, 5])</code> should return <code>true</code>.",
          "testString": "assert(checkPositive([1, 2, 3, -4, 5]), '<code>checkPositive([1, 2, 3, -4, 5])</code> should return <code>true</code>.');"
        },
        {
          "text": "<code>checkPositive([1, 2, 3, 4, 5])</code> should return <code>true</code>.",
          "testString": "assert(checkPositive([1, 2, 3, 4, 5]), '<code>checkPositive([1, 2, 3, 4, 5])</code> should return <code>true</code>.');"
        },
        {
          "text": "<code>checkPositive([-1, -2, -3, -4, -5])</code> should return <code>false</code>.",
          "testString": "assert(!checkPositive([-1, -2, -3, -4, -5]), '<code>checkPositive([-1, -2, -3, -4, -5])</code> should return <code>false</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function checkPositive(arr) {",
            "  // Add your code below this line",
            "  ",
            "  ",
            "  // Add your code above this line",
            "}",
            "checkPositive([1, 2, 3, -4, 5]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dab367417b2b2512b70",
      "title": "Introduction to Currying and Partial Application",
      "description": [
        "The <code>arity</code> of a function is the number of arguments it requires. <code>Currying</code> a function means to convert a function of N <code>arity</code> into N functions of <code>arity</code> 1.",
        "In other words, it restructures a function so it takes one argument, then returns another function that takes the next argument, and so on.",
        "Here's an example:",
        "<blockquote>//Un-curried function<br>function unCurried(x, y) {<br>&nbsp;&nbsp;return x + y;<br>}<br><br>//Curried function<br>function curried(x) {<br>&nbsp;&nbsp;return function(y) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return x + y;<br>&nbsp;&nbsp;}<br>}<br>curried(1)(2) // Returns 3</blockquote>",
        "This is useful in your program if you can't supply all the arguments to a function at one time. You can save each function call into a variable, which will hold the returned function reference that takes the next argument when it's available. Here's an example using the <code>curried</code> function in the example above:",
        "<blockquote>// Call a curried function in parts:<br>var funcForY = curried(1);<br>console.log(funcForY(2)); // Prints 3</blockquote>",
        "Similarly, <code>partial application</code> can be described as applying a few arguments to a function at a time and returning another function that is applied to more arguments.",
        "Here's an example:",
        "<blockquote>//Impartial function<br>function impartial(x, y, z) {<br>&nbsp;&nbsp;return x + y + z;<br>}<br>var partialFn = impartial.bind(this, 1, 2);<br>partialFn(10); // Returns 13</blockquote>",
        "<hr>",
        "Fill in the body of the <code>add</code> function so it uses currying to add parameters <code>x</code>, <code>y</code>, and <code>z</code>."
      ],
      "tests": [
        {
          "text": "<code>add(10)(20)(30)</code> should return <code>60</code>.",
          "testString": "assert(add(10)(20)(30) === 60, '<code>add(10)(20)(30)</code> should return <code>60</code>.');"
        },
        {
          "text": "<code>add(1)(2)(3)</code> should return <code>6</code>.",
          "testString": "assert(add(1)(2)(3) === 6, '<code>add(1)(2)(3)</code> should return <code>6</code>.');"
        },
        {
          "text": "<code>add(11)(22)(33)</code> should return <code>66</code>.",
          "testString": "assert(add(11)(22)(33) === 66, '<code>add(11)(22)(33)</code> should return <code>66</code>.');"
        },
        {
          "text": "Your code should include a final statement that returns <code>x + y + z</code>.",
          "testString": "assert(code.match(/[xyz]\\s*?\\+\\s*?[xyz]\\s*?\\+\\s*?[xyz]/g), 'Your code should include a final statement that returns <code>x + y + z</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function add(x) {",
            "  // Add your code below this line",
            "  ",
            "  ",
            "  // Add your code above this line",
            "}",
            "add(10)(20)(30);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a3566b1109230028080c9345",
      "title": "Sum All Numbers in a Range",
      "description": [
        "We'll pass you an array of two numbers. Return the sum of those two numbers plus the sum of all the numbers between them.",
        "The lowest number will not always come first.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "hints": [
        "Use Math.max() to find the maximum value of two numbers.",
        "Use Math.min() to find the minimum value of two numbers.",
        "Remember to that you must add all the numbers in between so this would require a way to get those numbers."
      ],
      "solutions": [
        "function sumAll(arr) {\n  var sum = 0;\n  arr.sort(function(a,b) {return a-b;});\n  for (var i = arr[0]; i <= arr[1]; i++) {\n    sum += i; \n  }\n  return sum;\n}"
      ],
      "tests": [
        {
          "text": "<code>sumAll([1, 4])</code> should return a number.",
          "testString": "assert(typeof sumAll([1, 4]) === 'number', '<code>sumAll([1, 4])</code> should return a number.');"
        },
        {
          "text": "<code>sumAll([1, 4])</code> should return 10.",
          "testString": "assert.deepEqual(sumAll([1, 4]), 10, '<code>sumAll([1, 4])</code> should return 10.');"
        },
        {
          "text": "<code>sumAll([4, 1])</code> should return 10.",
          "testString": "assert.deepEqual(sumAll([4, 1]), 10, '<code>sumAll([4, 1])</code> should return 10.');"
        },
        {
          "text": "<code>sumAll([5, 10])</code> should return 45.",
          "testString": "assert.deepEqual(sumAll([5, 10]), 45, '<code>sumAll([5, 10])</code> should return 45.');"
        },
        {
          "text": "<code>sumAll([10, 5])</code> should return 45.",
          "testString": "assert.deepEqual(sumAll([10, 5]), 45, '<code>sumAll([10, 5])</code> should return 45.');"
        }
      ],
      "MDNlinks": [
        "Math.max()",
        "Math.min()",
        "Array.prototype.reduce()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Suma todos los números en un rango",
          "description": [
            "Te pasaremos un vector que contiene dos números. Crea una función que devuelva la suma de esos dos números y todos los números entre ellos.",
            "El número menor no siempre será el primer elemento en el vector.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Additionner tous les nombres d'une série",
          "description": [
            "Nous te passons un tableau de deux nombres. Crée une fonction qui renvoie la somme de ces 2 nombres ainsi que tous les nombres entre ceux-ci.",
            "Le plus petit nombre ne viendra pas forcément en premier.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function sumAll(arr) {",
            "  return 1;",
            "}",
            "",
            "sumAll([1, 4]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a5de63ebea8dbee56860f4f2",
      "title": "Diff Two Arrays",
      "description": [
        "Compare two arrays and return a new array with any items only found in one of the two given arrays, but not both. In other words, return the symmetric difference of the two arrays.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.",
        "<strong>Note</strong><br>You can return the array with its elements in any order."
      ],
      "solutions": [
        "function diffArray(arr1, arr2) {\n  var newArr = [];\n  var h1 = Object.create(null);\n  arr1.forEach(function(e) {\n    h1[e] = e;\n  });\n  \n  var h2 = Object.create(null);\n  arr2.forEach(function(e) {\n    h2[e] = e;\n  });\n  \n  Object.keys(h1).forEach(function(e) {\n     if (!(e in h2)) newArr.push(h1[e]);\n  });\n  Object.keys(h2).forEach(function(e) {\n     if (!(e in h1)) newArr.push(h2[e]);\n  });\n  // Same, same; but different.\n  return newArr;\n}"
      ],
      "tests": [
        {
          "text": "<code>diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5])</code> should return an array.",
          "testString": "assert(typeof diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]) === \"object\", '<code>diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5])</code> should return an array.');"
        },
        {
          "text": "<code>[\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[\"pink wool\"]</code>.",
          "testString": "assert.sameMembers(diffArray([\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]), [\"pink wool\"], '<code>[\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[\"pink wool\"]</code>.');"
        },
        {
          "text": "<code>[\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an array with one item.",
          "testString": "assert(diffArray([\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]).length === 1, '<code>[\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an array with one item.');"
        },
        {
          "text": "<code>[\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[\"diorite\", \"pink wool\"]</code>.",
          "testString": "assert.sameMembers(diffArray([\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]), [\"diorite\", \"pink wool\"], '<code>[\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[\"diorite\", \"pink wool\"]</code>.');"
        },
        {
          "text": "<code>[\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an array with two items.",
          "testString": "assert(diffArray([\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]).length === 2, '<code>[\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an array with two items.');"
        },
        {
          "text": "<code>[\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[]</code>.",
          "testString": "assert.sameMembers(diffArray([\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]), [], '<code>[\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[]</code>.');"
        },
        {
          "text": "<code>[\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an empty array.",
          "testString": "assert(diffArray([\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]).length === 0, '<code>[\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an empty array.');"
        },
        {
          "text": "<code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code> should return <code>[4]</code>.",
          "testString": "assert.sameMembers(diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]), [4], '<code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code> should return <code>[4]</code>.');"
        },
        {
          "text": "<code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code> should return an array with one item.",
          "testString": "assert(diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]).length  === 1, '<code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code> should return an array with one item.');"
        },
        {
          "text": "<code>[1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]</code> should return <code>[\"piglet\", 4]</code>.",
          "testString": "assert.sameMembers(diffArray([1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]), [\"piglet\", 4], '<code>[1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]</code> should return <code>[\"piglet\", 4]</code>.');"
        },
        {
          "text": "<code>[1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]</code> should return an array with two items.",
          "testString": "assert(diffArray([1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]).length === 2, '<code>[1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]</code> should return an array with two items.');"
        },
        {
          "text": "<code>[], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code> should return <code>[\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code>.",
          "testString": "assert.sameMembers(diffArray([], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]), [\"snuffleupagus\", \"cookie monster\", \"elmo\"], '<code>[], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code> should return <code>[\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code>.');"
        },
        {
          "text": "<code>[], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code> should return an array with three items.",
          "testString": "assert(diffArray([], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]).length === 3, '<code>[], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code> should return an array with three items.');"
        },
        {
          "text": "<code>[1, \"calf\", 3, \"piglet\"], [7, \"filly\"]</code> should return <code>[1, \"calf\", 3, \"piglet\", 7, \"filly\"]</code>.",
          "testString": "assert.sameMembers(diffArray([1, \"calf\", 3, \"piglet\"], [7, \"filly\"]), [1, \"calf\", 3, \"piglet\", 7, \"filly\"], '<code>[1, \"calf\", 3, \"piglet\"], [7, \"filly\"]</code> should return <code>[1, \"calf\", 3, \"piglet\", 7, \"filly\"]</code>.');"
        },
        {
          "text": "<code>[1, \"calf\", 3, \"piglet\"], [7, \"filly\"]</code> should return an array with six items.",
          "testString": "assert(diffArray([1, \"calf\", 3, \"piglet\"], [7, \"filly\"]).length === 6, '<code>[1, \"calf\", 3, \"piglet\"], [7, \"filly\"]</code> should return an array with six items.');"
        }
      ],
      "MDNlinks": [
        "Comparison Operators",
        "Array.prototype.slice()",
        "Array.prototype.filter()",
        "Array.prototype.indexOf()",
        "Array.prototype.concat()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Obtén la diferencia entre dos vectores",
          "description": [
            "Crea una función que compare dos vectores y que devuelva un nuevo vector que contenga los elementos que sólo se encuentre en uno de los vectores dados, pero no en ambos En otras palabras, devuelve la diferencia simétrica entre los dos vectores.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Comparer 2 arrays",
          "description": [
            "Compare les 2 tableaux donnés et renvoie un nouvel tableau avec les éléments trouvé dans un seul des deux tableaux, pas dans les deux. En d'autres termes, renvoie la différence symétrique des deux tableaux.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function diffArray(arr1, arr2) {",
            "  var newArr = [];",
            "  // Same, same; but different.",
            "  return newArr;",
            "}",
            "",
            "diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a39963a4c10bc8b4d4f06d7e",
      "title": "Seek and Destroy",
      "description": [
        "You will be provided with an initial array (the first argument in the destroyer function), followed by one or more arguments. Remove all elements from the initial array that are of the same value as these arguments.",
        "<strong>Note</strong><br> You have to use the <code>arguments</code> object.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>destroyer([1, 2, 3, 1, 2, 3], 2, 3)</code> should return <code>[1, 1]</code>.",
          "testString": "assert.deepEqual(destroyer([1, 2, 3, 1, 2, 3], 2, 3), [1, 1], '<code>destroyer([1, 2, 3, 1, 2, 3], 2, 3)</code> should return <code>[1, 1]</code>.');"
        },
        {
          "text": "<code>destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3)</code> should return <code>[1, 5, 1]</code>.",
          "testString": "assert.deepEqual(destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3), [1, 5, 1], '<code>destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3)</code> should return <code>[1, 5, 1]</code>.');"
        },
        {
          "text": "<code>destroyer([3, 5, 1, 2, 2], 2, 3, 5)</code> should return <code>[1]</code>.",
          "testString": "assert.deepEqual(destroyer([3, 5, 1, 2, 2], 2, 3, 5), [1], '<code>destroyer([3, 5, 1, 2, 2], 2, 3, 5)</code> should return <code>[1]</code>.');"
        },
        {
          "text": "<code>destroyer([2, 3, 2, 3], 2, 3)</code> should return <code>[]</code>.",
          "testString": "assert.deepEqual(destroyer([2, 3, 2, 3], 2, 3), [], '<code>destroyer([2, 3, 2, 3], 2, 3)</code> should return <code>[]</code>.');"
        },
        {
          "text": "<code>destroyer([\"tree\", \"hamburger\", 53], \"tree\", 53)</code> should return <code>[\"hamburger\"]</code>.",
          "testString": "assert.deepEqual(destroyer([\"tree\", \"hamburger\", 53], \"tree\", 53), [\"hamburger\"], '<code>destroyer([\"tree\", \"hamburger\", 53], \"tree\", 53)</code> should return <code>[\"hamburger\"]</code>.');"
        },
        {
          "text": "<code>destroyer([\"possum\", \"trollo\", 12, \"safari\", \"hotdog\", 92, 65, \"grandma\", \"bugati\", \"trojan\", \"yacht\"], \"yacht\", \"possum\", \"trollo\", \"safari\", \"hotdog\", \"grandma\", \"bugati\", \"trojan\")</code> should return <code>[12,92,65]</code>.",
          "testString": "assert.deepEqual(destroyer([\"possum\", \"trollo\", 12, \"safari\", \"hotdog\", 92, 65, \"grandma\", \"bugati\", \"trojan\", \"yacht\"], \"yacht\", \"possum\", \"trollo\", \"safari\", \"hotdog\", \"grandma\", \"bugati\", \"trojan\"), [12,92,65], '<code>destroyer([\"possum\", \"trollo\", 12, \"safari\", \"hotdog\", 92, 65, \"grandma\", \"bugati\", \"trojan\", \"yacht\"], \"yacht\", \"possum\", \"trollo\", \"safari\", \"hotdog\", \"grandma\", \"bugati\", \"trojan\")</code> should return <code>[12,92,65]</code>.');"
        }
      ],
      "isRequired": true,
      "solutions": [
        "function destroyer(arr) {\n  var hash = Object.create(null);\n  [].slice.call(arguments, 1).forEach(function(e) {\n    hash[e] = true;\n  });\n  // Remove all the values\n  return arr.filter(function(e) { return !(e in hash);});\n}\n\ndestroyer([1, 2, 3, 1, 2, 3], 2, 3);\n"
      ],
      "MDNlinks": [
        "Arguments object",
        "Array.prototype.filter()"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Buscar y Destruir",
          "description": [
            "Se te proveerá un arreglo inicial (el primer argumento en la función <code>destroyer</code>), seguido por uno o más argumentos. Elimina todos los elementos del arreglo inicial que tengan el mismo valor que el resto de argumentos.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "pt-br": {
          "title": "Buscar e Destruir",
          "description": [
            "Será fornecido a você uma matriz inicial (o primeiro argumento da função destroyer), seguido por um ou mais argumentos. Remova todos os elementos da matriz inicial que possuem o mesmo valor desses argumentos.",
            "<strong>Nota</strong><br> Você precisa usar o objeto <code>arguments</code>.",
            "Lembre-se de usar <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Ler-Pesquisar-Perguntar</a> se você ficar travado. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function destroyer(arr) {",
            "  // Remove all the values",
            "  return arr;",
            "}",
            "",
            "destroyer([1, 2, 3, 1, 2, 3], 2, 3);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a8e512fbe388ac2f9198f0fa",
      "title": "Wherefore art thou",
      "description": [
        "Make a function that looks through an array of objects (first argument) and returns an array of all objects that have matching name and value pairs (second argument). Each name and value pair of the source object has to be present in the object from the collection if it is to be included in the returned array.",
        "For example, if the first argument is <code>[{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }]</code>, and the second argument is <code>{ last: \"Capulet\" }</code>, then you must return the third object from the array (the first argument), because it contains the name and its value, that was passed on as the second argument.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "solutions": [
        "function whatIsInAName(collection, source) {\n  var arr = [];\n  var keys = Object.keys(source);\n  collection.forEach(function(e) {\n    if(keys.every(function(key) {return e[key] === source[key];})) {\n      arr.push(e);  \n    }\n  });\n  return arr;\n}"
      ],
      "tests": [
        {
          "text": "<code>whatIsInAName([{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }], { last: \"Capulet\" })</code> should return <code>[{ first: \"Tybalt\", last: \"Capulet\" }]</code>.",
          "testString": "assert.deepEqual(whatIsInAName([{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }], { last: \"Capulet\" }), [{ first: \"Tybalt\", last: \"Capulet\" }], '<code>whatIsInAName([{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }], { last: \"Capulet\" })</code> should return <code>[{ first: \"Tybalt\", last: \"Capulet\" }]</code>.');"
        },
        {
          "text": "<code>whatIsInAName([{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }], { \"apple\": 1 })</code> should return <code>[{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }]</code>.",
          "testString": "assert.deepEqual(whatIsInAName([{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }], { \"apple\": 1 }), [{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }], '<code>whatIsInAName([{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }], { \"apple\": 1 })</code> should return <code>[{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }]</code>.');"
        },
        {
          "text": "<code>whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"bat\": 2 })</code> should return <code>[{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }]</code>.",
          "testString": "assert.deepEqual(whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"bat\": 2 }), [{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], '<code>whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"bat\": 2 })</code> should return <code>[{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }]</code>.');"
        },
        {
          "text": "<code>whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"cookie\": 2 })</code> should return <code>[{ \"apple\": 1, \"bat\": 2, \"cookie\": 2 }]</code>.",
          "testString": "assert.deepEqual(whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"cookie\": 2 }), [{ \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], '<code>whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"cookie\": 2 })</code> should return <code>[{ \"apple\": 1, \"bat\": 2, \"cookie\": 2 }]</code>.');"
        },
        {
          "text": "<code>whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }, { \"bat\":2 }], { \"apple\": 1, \"bat\": 2 })</code> should return <code>[{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\":2 }]</code>.",
          "testString": "assert.deepEqual(whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }, {\"bat\":2}], { \"apple\": 1, \"bat\": 2 }), [{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\":2 }], '<code>whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }, { \"bat\":2 }], { \"apple\": 1, \"bat\": 2 })</code> should return <code>[{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\":2 }]</code>.');"
        },
        {
          "text": "<code>whatIsInAName([{\"a\": 1, \"b\": 2, \"c\": 3}], {\"a\": 1, \"b\": 9999, \"c\": 3})</code> should return <code>[]</code>",
          "testString": "assert.deepEqual(whatIsInAName([{ \"a\": 1, \"b\": 2, \"c\": 3 }], { \"a\": 1, \"b\": 9999, \"c\": 3 }), [], '<code>whatIsInAName([{\"a\": 1, \"b\": 2, \"c\": 3}], {\"a\": 1, \"b\": 9999, \"c\": 3})</code> should return <code>[]</code>');"
        }
      ],
      "MDNlinks": [
        "Global Object",
        "Object.prototype.hasOwnProperty()",
        "Object.keys()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "¿Dónde estás que no te veo?",
          "description": [
            "Crea una función que busque en un vector de objetos (primer argumento) y devuelva un vector con todos los objetos que compartan el valor indicado para una propiedad dada (segundo argumento). Cada pareja de propiedad y valor debe estar presente en el objeto de la colección para ser incluido en el vector devuelto por la función",
            "Por ejemplo, si el primer argumento es <code>[{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }]</code>, y el segundo argumento es <code>{ last: \"Capulet\" }</code>, entonces tu función debe devolver el tercer objeto del vector en el primer argumento, ya que contiene la propiedad y el valor indicados en el segundo argumento.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "O Roméo! Roméo!",
          "description": [
            "Écris une fonction qui parcourt un array d'objets (premier argument) et renvoie un array de tous les objects ayant les paires de nom/valeur correspondantes à l'objet donné (second argument). Chaque paire de nom et de valeur de l'objet source doit être présente dans les objects renvoyés.",
            "Par exemple, si le premier argument est <code>[{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }]</code>, et le second argument est <code>{ last: \"Capulet\" }</code>, tu dois renvoyer le troisième objet de l'array (premier argument), parce qu'il contient le nom et sa valeur, donnés en deuxième argument.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function whatIsInAName(collection, source) {",
            "  // What's in a name?",
            "  var arr = [];",
            "  // Only change code below this line",
            "  ",
            "  ",
            "  // Only change code above this line",
            "  return arr;",
            "}",
            "",
            "whatIsInAName([{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }], { last: \"Capulet\" });"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a103376db3ba46b2d50db289",
      "title": "Spinal Tap Case",
      "description": [
        "Convert a string to spinal case. Spinal case is all-lowercase-words-joined-by-dashes.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function spinalCase(str) {\n  // \"It's such a fine line between stupid, and clever.\"\n  // --David St. Hubbins\n  str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\n  return str.toLowerCase().replace(/\\ |\\_/g, '-');\n}"
      ],
      "tests": [
        {
          "text": "<code>spinalCase(\"This Is Spinal Tap\")</code> should return <code>\"this-is-spinal-tap\"</code>.",
          "testString": "assert.deepEqual(spinalCase(\"This Is Spinal Tap\"), \"this-is-spinal-tap\", '<code>spinalCase(\"This Is Spinal Tap\")</code> should return <code>\"this-is-spinal-tap\"</code>.');"
        },
        {
          "text": "<code>spinalCase(\"thisIsSpinal<wbr>Tap\")</code> should return <code>\"this-is-spinal-tap\"</code>.",
          "testString": "assert.strictEqual(spinalCase('thisIsSpinalTap'), \"this-is-spinal-tap\", '<code>spinalCase(\"thisIsSpinal<wbr>Tap\")</code> should return <code>\"this-is-spinal-tap\"</code>.');"
        },
        {
          "text": "<code>spinalCase(\"The_Andy_<wbr>Griffith_Show\")</code> should return <code>\"the-andy-griffith-show\"</code>.",
          "testString": "assert.strictEqual(spinalCase(\"The_Andy_Griffith_Show\"), \"the-andy-griffith-show\", '<code>spinalCase(\"The_Andy_<wbr>Griffith_Show\")</code> should return <code>\"the-andy-griffith-show\"</code>.');"
        },
        {
          "text": "<code>spinalCase(\"Teletubbies say Eh-oh\")</code> should return <code>\"teletubbies-say-eh-oh\"</code>.",
          "testString": "assert.strictEqual(spinalCase(\"Teletubbies say Eh-oh\"), \"teletubbies-say-eh-oh\", '<code>spinalCase(\"Teletubbies say Eh-oh\")</code> should return <code>\"teletubbies-say-eh-oh\"</code>.');"
        },
        {
          "text": "<code>spinalCase(\"AllThe-small Things\")</code> should return <code>\"all-the-small-things\"</code>.",
          "testString": "assert.strictEqual(spinalCase(\"AllThe-small Things\"), \"all-the-small-things\", '<code>spinalCase(\"AllThe-small Things\")</code> should return <code>\"all-the-small-things\"</code>.');"
        }
      ],
      "MDNlinks": [
        "RegExp",
        "String.prototype.replace()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "separado-por-guiones",
          "description": [
            "Convierte la cadena de texto que se te pasa al formato spinal case. Spinal case es cuando escribes todas las palabras en-minúsculas-unidas-por-guiones.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Trait d'union",
          "description": [
            "Convertis la chaîne de caractères en spinal case. Spinal case correspond au bas-de-casse-séparé-par-des-tirets.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function spinalCase(str) {",
            "  // \"It's such a fine line between stupid, and clever.\"",
            "  // --David St. Hubbins",
            "  return str;",
            "}",
            "",
            "spinalCase('This Is Spinal Tap');"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "aa7697ea2477d1316795783b",
      "title": "Pig Latin",
      "description": [
        "Translate the provided string to pig latin.",
        "<a href=\"http://en.wikipedia.org/wiki/Pig_Latin\" target=\"_blank\">Pig Latin</a> takes the first consonant (or consonant cluster) of an English word, moves it to the end of the word and suffixes an \"ay\".",
        "If a word begins with a vowel you just add \"way\" to the end.",
        "Input strings are guaranteed to be English words in all lowercase.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function translatePigLatin(str) {\n  if (isVowel(str.charAt(0))) return str + \"way\";\n  var front = [];\n  str = str.split('');\n  while (str.length && !isVowel(str[0])) {\n    front.push(str.shift());\n  }\n  return [].concat(str, front).join('') + 'ay';\n}\n\nfunction isVowel(c) {\n  return ['a', 'e', 'i', 'o', 'u'].indexOf(c.toLowerCase()) !== -1;\n}"
      ],
      "tests": [
        {
          "text": "<code>translatePigLatin(\"california\")</code> should return \"aliforniacay\".",
          "testString": "assert.deepEqual(translatePigLatin(\"california\"), \"aliforniacay\", '<code>translatePigLatin(\"california\")</code> should return \"aliforniacay\".');"
        },
        {
          "text": "<code>translatePigLatin(\"paragraphs\")</code> should return \"aragraphspay\".",
          "testString": "assert.deepEqual(translatePigLatin(\"paragraphs\"), \"aragraphspay\", '<code>translatePigLatin(\"paragraphs\")</code> should return \"aragraphspay\".');"
        },
        {
          "text": "<code>translatePigLatin(\"glove\")</code> should return \"oveglay\".",
          "testString": "assert.deepEqual(translatePigLatin(\"glove\"), \"oveglay\", '<code>translatePigLatin(\"glove\")</code> should return \"oveglay\".');"
        },
        {
          "text": "<code>translatePigLatin(\"algorithm\")</code> should return \"algorithmway\".",
          "testString": "assert.deepEqual(translatePigLatin(\"algorithm\"), \"algorithmway\", '<code>translatePigLatin(\"algorithm\")</code> should return \"algorithmway\".');"
        },
        {
          "text": "<code>translatePigLatin(\"eight\")</code> should return \"eightway\".",
          "testString": "assert.deepEqual(translatePigLatin(\"eight\"), \"eightway\", '<code>translatePigLatin(\"eight\")</code> should return \"eightway\".');"
        },
        {
          "text": "Should handle words where the first vowel comes in the end of the word.",
          "testString": "assert.deepEqual(translatePigLatin(\"schwartz\"), \"artzschway\", 'Should handle words where the first vowel comes in the end of the word.');"
        },
        {
          "text": "Should handle words without vowels.",
          "testString": "assert.deepEqual(translatePigLatin(\"rhythm\"), \"rhythmay\", 'Should handle words without vowels.');"
        }
      ],
      "MDNlinks": [
        "Array.prototype.indexOf()",
        "Array.prototype.push()",
        "Array.prototype.join()",
        "String.prototype.substring()",
        "String.prototype.split()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Latín de los cerdos",
          "description": [
            "Traduce la cadena de texto que se te provee al Latín de los cerdos (Pig Latin)",
            "<a href=\"http://es.wikipedia.org/wiki/Pig_Latin\" target=\"_blank\">Pig Latin</a> toma la primera consonante (o grupo de consonantes) de una palabra en inglés, la mueve al final de la palabra y agrega un \"ay\".",
            "Si la palabra comienza con una vocal, simplemente añade \"way\" al final.",
            "Cadenas de entrada están garantizadas de ser palabras en Inglés en minúscula.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Pig latin",
          "description": [
            "Traduis la phrase donnée en pig latin (verlan anglais)",
            "Le <a href=\"http://fr.wikipedia.org/wiki/Pig_Latin\" target=\"_blank\">Pig Latin</a> prend la ou les première(s) consonne(s) d'un mot en anglais et les mets à la fin du mot accompagné par le suffixe \"ay\".",
            "Si un mot commence par une voyelle ajoute \"way\" à la fin du mot.",
            "Les chaînes de caractères entrées sont garanties d'être des mots anglais, en lettres minuscules.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function translatePigLatin(str) {",
            "  return str;",
            "}",
            "",
            "translatePigLatin(\"consonant\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a0b5010f579e69b815e7c5d6",
      "title": "Search and Replace",
      "description": [
        "Perform a search and replace on the sentence using the arguments provided and return the new sentence.",
        "First argument is the sentence to perform the search and replace on.",
        "Second argument is the word that you will be replacing (before).",
        "Third argument is what you will be replacing the second argument with (after).",
        "<strong>Note</strong><br> Preserve the case of the first character in the original word when you are replacing it. For example if you mean to replace the word \"Book\" with the word \"dog\", it should be replaced as \"Dog\"",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function myReplace(str, before, after) {\n  if (before.charAt(0) === before.charAt(0).toUpperCase()) {\n    after = after.charAt(0).toUpperCase() + after.substring(1);\n  } else {\n    after = after.charAt(0).toLowerCase() + after.substring(1);\n  }\n  return str.replace(before, after);\n}"
      ],
      "tests": [
        {
          "text": "<code>myReplace(\"Let us go to the store\", \"store\", \"mall\")</code> should return \"Let us go to the mall\".",
          "testString": "assert.deepEqual(myReplace(\"Let us go to the store\", \"store\", \"mall\"), \"Let us go to the mall\", '<code>myReplace(\"Let us go to the store\", \"store\", \"mall\")</code> should return \"Let us go to the mall\".');"
        },
        {
          "text": "<code>myReplace(\"He is Sleeping on the couch\", \"Sleeping\", \"sitting\")</code> should return \"He is Sitting on the couch\".",
          "testString": "assert.deepEqual(myReplace(\"He is Sleeping on the couch\", \"Sleeping\", \"sitting\"), \"He is Sitting on the couch\", '<code>myReplace(\"He is Sleeping on the couch\", \"Sleeping\", \"sitting\")</code> should return \"He is Sitting on the couch\".');"
        },
        {
          "text": "<code>myReplace(\"This has a spellngi error\", \"spellngi\", \"spelling\")</code> should return \"This has a spelling error\".",
          "testString": "assert.deepEqual(myReplace(\"This has a spellngi error\", \"spellngi\", \"spelling\"), \"This has a spelling error\", '<code>myReplace(\"This has a spellngi error\", \"spellngi\", \"spelling\")</code> should return \"This has a spelling error\".');"
        },
        {
          "text": "<code>myReplace(\"His name is Tom\", \"Tom\", \"john\")</code> should return \"His name is John\".",
          "testString": "assert.deepEqual(myReplace(\"His name is Tom\", \"Tom\", \"john\"), \"His name is John\", '<code>myReplace(\"His name is Tom\", \"Tom\", \"john\")</code> should return \"His name is John\".');"
        },
        {
          "text": "<code>myReplace(\"Let us get back to more Coding\", \"Coding\", \"algorithms\")</code> should return \"Let us get back to more Algorithms\".",
          "testString": "assert.deepEqual(myReplace(\"Let us get back to more Coding\", \"Coding\", \"algorithms\"), \"Let us get back to more Algorithms\", '<code>myReplace(\"Let us get back to more Coding\", \"Coding\", \"algorithms\")</code> should return \"Let us get back to more Algorithms\".');"
        }
      ],
      "MDNlinks": [
        "Array.prototype.splice()",
        "String.prototype.replace()",
        "Array.prototype.join()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Buscar y reemplazar",
          "description": [
            "Crea una función que busque un fragmento en una frase dada y lo reemplace por otro fragmento, devolviendo la nueva frase.",
            "El primer argumento es la frase en la que se ejecutará la búsqueda y el reemplazo",
            "El segundo argumento es la palabra que se va a reemplazar",
            "El tercer argumento es lo que reemplazará a la palabra indicada en el segundo argumento",
            "NOTA: Debes respetar mayúsculas y minúsculas de la palabra original cuando ejecutes el reemplazo. Por ejemplo, si quisieras reemplazar la palabra \"Libro\" con la palabra \"perro\", deberías insertar en vez la palabra \"Perro\"",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Cherche et remplace",
          "description": [
            "Crée une fonction qui cherche et remplace une partie de la phrase en utilisant les arguments et renvoie la nouvelle phrase.",
            "Le premier argument est la phrase à modifier.",
            "Le deuxième argument est le mot à remplacer (avant).",
            "Le troisième argument est le mot qui doit remplacer le deuxième argument (après).",
            "NB: Tu dois respecter les majuscules ou miniscules du mot originel que tu remplaces. Par exemple, si tu veux remplacer le mot \"Livre\" par \"chien\", tu devras le remplacer par \"Chien\"",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function myReplace(str, before, after) {",
            "  return str;",
            "}",
            "",
            "myReplace(\"A quick brown fox jumped over the lazy dog\", \"jumped\", \"leaped\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "afd15382cdfb22c9efe8b7de",
      "title": "DNA Pairing",
      "description": [
        "The DNA strand is missing the pairing element. Take each character, get its pair, and return the results as a 2d array.",
        "<a href=\"http://en.wikipedia.org/wiki/Base_pair\" target=\"_blank\">Base pairs</a> are a pair of AT and CG. Match the missing element to the provided character.",
        "Return the provided character as the first element in each array.",
        "For example, for the input GCG, return [[\"G\", \"C\"], [\"C\",\"G\"],[\"G\", \"C\"]]",
        "The character and its pair are paired up in an array, and all the arrays are grouped into one encapsulating array.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "var lookup = Object.create(null);\nlookup.A = 'T';\nlookup.T = 'A';\nlookup.C = 'G';\nlookup.G = 'C';\n\nfunction pairElement(str) {\n return str.split('').map(function(p) {return [p, lookup[p]];});\n}"
      ],
      "tests": [
        {
          "text": "<code>pairElement(\"ATCGA\")</code> should return <code>[[\"A\",\"T\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"G\",\"C\"],[\"A\",\"T\"]]</code>.",
          "testString": "assert.deepEqual(pairElement(\"ATCGA\"),[[\"A\",\"T\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"G\",\"C\"],[\"A\",\"T\"]], '<code>pairElement(\"ATCGA\")</code> should return <code>[[\"A\",\"T\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"G\",\"C\"],[\"A\",\"T\"]]</code>.');"
        },
        {
          "text": "<code>pairElement(\"TTGAG\")</code> should return <code>[[\"T\",\"A\"],[\"T\",\"A\"],[\"G\",\"C\"],[\"A\",\"T\"],[\"G\",\"C\"]]</code>.",
          "testString": "assert.deepEqual(pairElement(\"TTGAG\"),[[\"T\",\"A\"],[\"T\",\"A\"],[\"G\",\"C\"],[\"A\",\"T\"],[\"G\",\"C\"]], '<code>pairElement(\"TTGAG\")</code> should return <code>[[\"T\",\"A\"],[\"T\",\"A\"],[\"G\",\"C\"],[\"A\",\"T\"],[\"G\",\"C\"]]</code>.');"
        },
        {
          "text": "<code>pairElement(\"CTCTA\")</code> should return <code>[[\"C\",\"G\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"T\",\"A\"],[\"A\",\"T\"]]</code>.",
          "testString": "assert.deepEqual(pairElement(\"CTCTA\"),[[\"C\",\"G\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"T\",\"A\"],[\"A\",\"T\"]], '<code>pairElement(\"CTCTA\")</code> should return <code>[[\"C\",\"G\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"T\",\"A\"],[\"A\",\"T\"]]</code>.');"
        }
      ],
      "MDNlinks": [
        "Array.prototype.push()",
        "String.prototype.split()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Emparejando bases de ADN",
          "description": [
            "A la cadena de ADN que se te pasa le hace falta una hebra. Toma cada una de las letras, obtén su pareja correspondiente y devuelve los resultados en un segundo vector",
            "<a href=\"http://es.wikipedia.org/wiki/Apareamiento_de_bases\" target=\"_blank\">Parejas de bases</a> son pares de AT y CG. Encuentra el elemento que hace falta para cada una de las letras que se te presentan.",
            "Devuelve la letra que se te provee como el primer elemento en cada vector",
            "Por ejemplo, si te pasáramos la cadena GCG, tu función debería devolver el vector: [[\"G\", \"C\"], [\"C\",\"G\"],[\"G\", \"C\"]]",
            "Cada letra que se te provee y su pareja deben estar contenidos en un vector, y cada uno de estos vectores debe estar contenidos en un vector.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Coupler les bases d'ADN",
          "description": [
            "Une base d'ADN a perdu sa paire. Assemble chaque paire de caractères et renvoie les résultats dans un second tableau.",
            "Les <a href=\"https://fr.wikipedia.org/wiki/Paire_de_bases\" target=\"_blank\">paires de bases</a> sont des paires d'AT et CG. Associe l'élement manquant au caractère donné.",
            "Renvoie le caractère donné comme premier élément de chaque tableau.",
            "Par exemple, pour GCG, il faut renvoyer [[\"G\", \"C\"], [\"C\",\"G\"],[\"G\", \"C\"]]",
            "Chaque caractère et sa paire sont couplées dans un tableau, et tous les tableaux sont groupés dans un tableau.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function pairElement(str) {",
            "  return str;",
            "}",
            "",
            "pairElement(\"GCG\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "af7588ade1100bde429baf20",
      "title": "Missing letters",
      "description": [
        "Find the missing letter in the passed letter range and return it.",
        "If all letters are present in the range, return undefined.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function fearNotLetter (str) {\n  for (var i = str.charCodeAt(0); i <= str.charCodeAt(str.length - 1); i++) {\n    var letter = String.fromCharCode(i);\n    if (str.indexOf(letter) === -1) {\n      return letter;\n    }\n  }\n  \n  return undefined;\n}"
      ],
      "tests": [
        {
          "text": "<code>fearNotLetter(\"abce\")</code> should return \"d\".",
          "testString": "assert.deepEqual(fearNotLetter('abce'), 'd', '<code>fearNotLetter(\"abce\")</code> should return \"d\".');"
        },
        {
          "text": "<code>fearNotLetter(\"abcdefghjklmno\")</code> should return \"i\".",
          "testString": "assert.deepEqual(fearNotLetter('abcdefghjklmno'), 'i', '<code>fearNotLetter(\"abcdefghjklmno\")</code> should return \"i\".');"
        },
        {
          "text": "<code>fearNotLetter(\"stvwx\")</code> should return \"u\".",
          "testString": "assert.deepEqual(fearNotLetter('stvwx'), 'u', '<code>fearNotLetter(\"stvwx\")</code> should return \"u\".');"
        },
        {
          "text": "<code>fearNotLetter(\"bcdf\")</code> should return \"e\".",
          "testString": "assert.deepEqual(fearNotLetter('bcdf'), 'e', '<code>fearNotLetter(\"bcdf\")</code> should return \"e\".');"
        },
        {
          "text": "<code>fearNotLetter(\"abcdefghijklmnopqrstuvwxyz\")</code> should return undefined.",
          "testString": "assert.isUndefined(fearNotLetter('abcdefghijklmnopqrstuvwxyz'), '<code>fearNotLetter(\"abcdefghijklmnopqrstuvwxyz\")</code> should return undefined.');"
        }
      ],
      "MDNlinks": [
        "String.prototype.charCodeAt()",
        "String.fromCharCode()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Letras perdidas",
          "description": [
            "Crea una función que devuelva la letra que falta en el rango de letras que se le pasa",
            "Si todas las letras en el rango están presentes, la función debe devolver undefined.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Lettres perdues",
          "description": [
            "Crée une fonction qui renvoie la lettre manquante dans la série.",
            "Si aucune lettre n'est manquante, renvoie undefined.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function fearNotLetter(str) {",
            "  return str;",
            "}",
            "",
            "fearNotLetter(\"abce\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a105e963526e7de52b219be9",
      "title": "Sorted Union",
      "description": [
        "Write a function that takes two or more arrays and returns a new array of unique values in the order of the original provided arrays.",
        "In other words, all values present from all arrays should be included in their original order, but with no duplicates in the final array.",
        "The unique numbers should be sorted by their original order, but the final array should not be sorted in numerical order.",
        "Check the assertion tests for examples.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function uniteUnique(arr) {\n  return [].slice.call(arguments).reduce(function(a, b) {\n    return [].concat(a, b.filter(function(e) {return a.indexOf(e) === -1;}));\n  }, []);\n}"
      ],
      "tests": [
        {
          "text": "<code>uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1])</code> should return <code>[1, 3, 2, 5, 4]</code>.",
          "testString": "assert.deepEqual(uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]), [1, 3, 2, 5, 4], '<code>uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1])</code> should return <code>[1, 3, 2, 5, 4]</code>.');"
        },
        {
          "text": "<code>uniteUnique([1, 3, 2], [1, [5]], [2, [4]])</code> should return <code>[1, 3, 2, [5], [4]]</code>.",
          "testString": "assert.deepEqual(uniteUnique([1, 3, 2], [1, [5]], [2, [4]]), [1, 3, 2, [5], [4]], '<code>uniteUnique([1, 3, 2], [1, [5]], [2, [4]])</code> should return <code>[1, 3, 2, [5], [4]]</code>.');"
        },
        {
          "text": "<code>uniteUnique([1, 2, 3], [5, 2, 1])</code> should return <code>[1, 2, 3, 5]</code>.",
          "testString": "assert.deepEqual(uniteUnique([1, 2, 3], [5, 2, 1]), [1, 2, 3, 5], '<code>uniteUnique([1, 2, 3], [5, 2, 1])</code> should return <code>[1, 2, 3, 5]</code>.');"
        },
        {
          "text": "<code>uniteUnique([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8])</code> should return <code>[1, 2, 3, 5, 4, 6, 7, 8]</code>.",
          "testString": "assert.deepEqual(uniteUnique([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8]), [1, 2, 3, 5, 4, 6, 7, 8], '<code>uniteUnique([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8])</code> should return <code>[1, 2, 3, 5, 4, 6, 7, 8]</code>.');"
        }
      ],
      "MDNlinks": [
        "Arguments object",
        "Array.prototype.reduce()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Intersección ordenada",
          "description": [
            "Escribe una función que tome dos o más vectores y que devuelva un nuevo vector con los valores únicos en el orden de aparición de los vectores que se te pasaron",
            "En otra palabras, todos los valores presentes en todos los vectores deben aparecer en el vector final en su orden original, pero sin duplicados.",
            "Los valores únicos deben aparecer en el orden original, pero el vector final no necesariamente debe mostrar los elementos en orden numérico.",
            "Puedes usar de referencia las pruebas de verificación si necesitas ejemplos.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Union arrangée",
          "description": [
            "Crée une fonction qui accepte deux tableaux ou plus et renvoie un nouvel array de valeurs uniques dans l'ordre des tableaux donnés.",
            "En d'autres termes, toutes les valeurs des tableaux doivent être incluses dans l'ordre originel, sans doublon dans le tableau final.",
            "Les valeurs uniques doivent être classées dans l'ordre originel, mais le tableau final ne doit pas être classé par ordre croissant.",
            "Réfère toi aux test pour plus d'examples.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function uniteUnique(arr) {",
            "  return arr;",
            "}",
            "",
            "uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a6b0bb188d873cb2c8729495",
      "title": "Convert HTML Entities",
      "description": [
        "Convert the characters <code>&</code>, <code><</code>, <code>></code>, <code>\"</code> (double quote), and <code>'</code> (apostrophe), in a string to their corresponding HTML entities.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "var MAP = { '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&apos;'};\n\nfunction convertHTML(str) {\n  return str.replace(/[&<>\"']/g, function(c) {\n    return MAP[c];\n  });\n}"
      ],
      "tests": [
        {
          "text": "<code>convertHTML(\"Dolce & Gabbana\")</code> should return <code>Dolce &&#8203;amp; Gabbana</code>.",
          "testString": "assert.match(convertHTML(\"Dolce & Gabbana\"), /Dolce &amp; Gabbana/, '<code>convertHTML(\"Dolce & Gabbana\")</code> should return <code>Dolce &&#8203;amp; Gabbana</code>.');"
        },
        {
          "text": "<code>convertHTML(\"Hamburgers < Pizza < Tacos\")</code> should return <code>Hamburgers &&#8203;lt; Pizza &&#8203;lt; Tacos</code>.",
          "testString": "assert.match(convertHTML(\"Hamburgers < Pizza < Tacos\"), /Hamburgers &lt; Pizza &lt; Tacos/, '<code>convertHTML(\"Hamburgers < Pizza < Tacos\")</code> should return <code>Hamburgers &&#8203;lt; Pizza &&#8203;lt; Tacos</code>.');"
        },
        {
          "text": "<code>convertHTML(\"Sixty > twelve\")</code> should return <code>Sixty &&#8203;gt; twelve</code>.",
          "testString": "assert.match(convertHTML(\"Sixty > twelve\"), /Sixty &gt; twelve/, '<code>convertHTML(\"Sixty > twelve\")</code> should return <code>Sixty &&#8203;gt; twelve</code>.');"
        },
        {
          "text": "<code>convertHTML(&apos;Stuff in \"quotation marks\"&apos;)</code> should return <code>Stuff in &&#8203;quot;quotation marks&&#8203;quot;</code>.",
          "testString": "assert.match(convertHTML('Stuff in \"quotation marks\"'), /Stuff in &quot;quotation marks&quot;/, '<code>convertHTML(&apos;Stuff in \"quotation marks\"&apos;)</code> should return <code>Stuff in &&#8203;quot;quotation marks&&#8203;quot;</code>.');"
        },
        {
          "text": "<code>convertHTML(\"Schindler&apos;s List\")</code> should return <code>Schindler&&#8203;apos;s List</code>.",
          "testString": "assert.match(convertHTML(\"Schindler's List\"), /Schindler&apos;s List/, '<code>convertHTML(\"Schindler&apos;s List\")</code> should return <code>Schindler&&#8203;apos;s List</code>.');"
        },
        {
          "text": "<code>convertHTML(\"<>\")</code> should return <code>&&#8203;lt;&&#8203;gt;</code>.",
          "testString": "assert.match(convertHTML('<>'), /&lt;&gt;/, '<code>convertHTML(\"<>\")</code> should return <code>&&#8203;lt;&&#8203;gt;</code>.');"
        },
        {
          "text": "<code>convertHTML(\"abc\")</code> should return <code>abc</code>.",
          "testString": "assert.strictEqual(convertHTML('abc'), 'abc', '<code>convertHTML(\"abc\")</code> should return <code>abc</code>.');"
        }
      ],
      "MDNlinks": [
        "RegExp",
        "HTML Entities",
        "String.prototype.replace()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Convierte entidades HTML",
          "description": [
            "Convierte los caracteres <code>&</code>, <code>&lt;<code>, <code>&gt;<code>, <code>\"<code>' (comilla), y <code>'<code> (apóstrofe), contenidos en la cadena de texto que se te pasa, en sus entidades HTML correspondientes",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Convertir les entités HTML",
          "description": [
            "Convertis les caractères <code>&</code>, <code>&lt;<code>, <code>&gt;<code>, <code>\"<code>' (guillemet), y <code>'<code> (apostrophe), contenus dans la chaîne de caractères en entités HTML.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function convertHTML(str) {",
            "  // &colon;&rpar;",
            "  return str;",
            "}",
            "",
            "convertHTML(\"Dolce & Gabbana\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a5229172f011153519423690",
      "title": "Sum All Odd Fibonacci Numbers",
      "description": [
        "Given a positive integer <code>num</code>, return the sum of all odd Fibonacci numbers that are less than or equal to <code>num</code>.",
        "The first two numbers in the Fibonacci sequence are 1 and 1. Every additional number in the sequence is the sum of the two previous numbers. The first six numbers of the Fibonacci sequence are 1, 1, 2, 3, 5 and 8.",
        "For example, <code>sumFibs(10)</code> should return <code>10</code> because all odd Fibonacci numbers less than or equal to <code>10</code> are 1, 1, 3, and 5.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function sumFibs(num) {\n  var a = 1; \n  var b = 1;\n  var s = 0;\n  while (a <= num) {\n    if (a % 2 !== 0) {   \n      s += a; \n    }\n    a = [b, b=b+a][0];\n  }\n  return s;\n}"
      ],
      "tests": [
        {
          "text": "<code>sumFibs(1)</code> should return a number.",
          "testString": "assert(typeof sumFibs(1) === \"number\", '<code>sumFibs(1)</code> should return a number.');"
        },
        {
          "text": "<code>sumFibs(1000)</code> should return 1785.",
          "testString": "assert(sumFibs(1000) === 1785, '<code>sumFibs(1000)</code> should return 1785.');"
        },
        {
          "text": "<code>sumFibs(4000000)</code> should return 4613732.",
          "testString": "assert(sumFibs(4000000) === 4613732, '<code>sumFibs(4000000)</code> should return 4613732.');"
        },
        {
          "text": "<code>sumFibs(4)</code> should return 5.",
          "testString": "assert(sumFibs(4) === 5, '<code>sumFibs(4)</code> should return 5.');"
        },
        {
          "text": "<code>sumFibs(75024)</code> should return 60696.",
          "testString": "assert(sumFibs(75024) === 60696, '<code>sumFibs(75024)</code> should return 60696.');"
        },
        {
          "text": "<code>sumFibs(75025)</code> should return 135721.",
          "testString": "assert(sumFibs(75025) === 135721, '<code>sumFibs(75025)</code> should return 135721.');"
        }
      ],
      "MDNlinks": [
        "Remainder"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Suma todos los números de Fibonacci que son impares",
          "description": [
            "Crea una función que devuelva la suma de todos los números impares en la secuencia de Fibonacci hasta el número que se le pasa como argumento, incluyéndolo en caso de ser un número de la secuencia.",
            "Los primeros números de la secuencia son 1, 1, 2, 3, 5 y 8, y cada número siguiente es la suma de los dos números anteriores.",
            "Por ejemplo, si se te pasa el número 4, la función deberá devolver 5, ya que los números impares menores que 4 son 1, 1 y 3.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Additionner tous les nombre de Fibonacci impairs",
          "description": [
            "Crée une fonction qui additionne tous les nombre de Fibonacci jusqu'au nombre donné (inclus si c'est un nombre de Fibonacci).",
            "Les premiers chiffres de la séquence sont 1, 1, 2, 3, 5 y 8, et chaque nombre correspond à la somme des deux nombres précédents.",
            "Par example, pour le chiffre 4, la fonction doit retourner 5, puisque les chiffres précédent 4 sont 1, 1 et 3.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function sumFibs(num) {",
            "  return num;",
            "}",
            "",
            "sumFibs(4);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a3bfc1673c0526e06d3ac698",
      "title": "Sum All Primes",
      "description": [
        "Sum all the prime numbers up to and including the provided number.",
        "A prime number is defined as a number greater than one and having only two divisors, one and itself. For example, 2 is a prime number because it's only divisible by one and two.",
        "The provided number may not be a prime.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function eratosthenesArray(n) {\n    var primes = [];\n    if (n > 2) {\n        var half = n>>1;\n        var sieve = Array(half);\n        for (var i = 1, limit = Math.sqrt(n)>>1; i <= limit; i++) {\n            if (!sieve[i]) {\n                for (var step = 2*i+1, j = (step*step)>>1; j < half; j+=step) {\n                    sieve[j] = true;\n                }\n            }\n        }\n        primes.push(2);\n        for (var p = 1; p < half; p++) {\n            if (!sieve[p]) primes.push(2*p+1);\n        }\n    }\n    return primes;\n}\n\nfunction sumPrimes(num) {\n  return eratosthenesArray(num+1).reduce(function(a,b) {return a+b;}, 0);\n}\n\nsumPrimes(10);"
      ],
      "tests": [
        {
          "text": "<code>sumPrimes(10)</code> should return a number.",
          "testString": "assert.deepEqual(typeof sumPrimes(10), 'number', '<code>sumPrimes(10)</code> should return a number.');"
        },
        {
          "text": "<code>sumPrimes(10)</code> should return 17.",
          "testString": "assert.deepEqual(sumPrimes(10), 17, '<code>sumPrimes(10)</code> should return 17.');"
        },
        {
          "text": "<code>sumPrimes(977)</code> should return 73156.",
          "testString": "assert.deepEqual(sumPrimes(977), 73156, '<code>sumPrimes(977)</code> should return 73156.');"
        }
      ],
      "MDNlinks": [
        "For Loops",
        "Array.prototype.push()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Suma todos los números primos",
          "description": [
            "Suma todos los números primos hasta, e incluyendo, el número que se te pasa",
            "Números primos son todos aquellos que sólo son divisibles entre 1 y entre sí mismos. Por ejemplo, el número 2 es primo porque solo es divisible por 1 y por 2. Por el contrario, el número 1 no es primo, ya que sólo puede dividirse por sí mismo",
            "El número que se le provee a la función no puede ser primo",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Additionner tous les nombres primaires",
          "description": [
            "Additionne tous les nombres primaires jusqu'au nombre donné (inclus).",
            "Un nombre primaire est un nombre divisible que par 1 ou par lui-même (plus grand que 1). Par exemple, 2 est un nombre primaire puisqu'il n'est divisible que par 1 et 2. 1 n'est pas primaire puiqu'il n'est divisible que par lui-même.",
            "Le nombre donné en argument n'est pas forcément un nombre primaire.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function sumPrimes(num) {",
            "  return num;",
            "}",
            "",
            "sumPrimes(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "ae9defd7acaf69703ab432ea",
      "title": "Smallest Common Multiple",
      "description": [
        "Find the smallest common multiple of the provided parameters that can be evenly divided by both, as well as by all sequential numbers in the range between these parameters.",
        "The range will be an array of two numbers that will not necessarily be in numerical order.",
        "For example, if given 1 and 3, find the smallest common multiple of both 1 and 3 that is also evenly divisible by all numbers <em>between</em> 1 and 3. The answer here would be 6.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function gcd(a, b) {\n    while (b !== 0) {\n        a = [b, b = a % b][0];\n    }\n    return a;\n}\n\nfunction lcm(a, b) {\n    return (a * b) / gcd(a, b);\n}\n\nfunction smallestCommons(arr) {\n  arr.sort(function(a,b) {return a-b;});\n  var rng = [];\n  for (var i = arr[0]; i <= arr[1]; i++) {\n    rng.push(i);\n  }\n  return rng.reduce(lcm);\n}"
      ],
      "tests": [
        {
          "text": "<code>smallestCommons([1, 5])</code> should return a number.",
          "testString": "assert.deepEqual(typeof smallestCommons([1, 5]), 'number', '<code>smallestCommons([1, 5])</code> should return a number.');"
        },
        {
          "text": "<code>smallestCommons([1, 5])</code> should return 60.",
          "testString": "assert.deepEqual(smallestCommons([1, 5]), 60, '<code>smallestCommons([1, 5])</code> should return 60.');"
        },
        {
          "text": "<code>smallestCommons([5, 1])</code> should return 60.",
          "testString": "assert.deepEqual(smallestCommons([5, 1]), 60, '<code>smallestCommons([5, 1])</code> should return 60.');"
        },
        {
          "text": "<code>smallestCommons([2, 10])</code> should return 2520.",
          "testString": "assert.deepEqual(smallestCommons([2, 10]), 2520, '<code>smallestCommons([2, 10])</code> should return 2520.');"
        },
        {
          "text": "<code>smallestCommons([1, 13])</code> should return 360360.",
          "testString": "assert.deepEqual(smallestCommons([1, 13]), 360360, '<code>smallestCommons([1, 13])</code> should return 360360.');"
        },
        {
          "text": "<code>smallestCommons([23, 18])</code> should return 6056820.",
          "testString": "assert.deepEqual(smallestCommons([23, 18]), 6056820, '<code>smallestCommons([23, 18])</code> should return 6056820.');"
        }
      ],
      "MDNlinks": [
        "Smallest Common Multiple"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Mínimo común múltiplo",
          "description": [
            "En el ejercicio se te provee un vector con dos números. Crea una función que encuentre el número más pequeño que sea divisible entre ambos números, así como entre todos los números enteros entre ellos.",
            "Tu función debe aceptar como argumento un vector con dos números, los cuales no necesariamente estarán en orden.",
            "Por ejemplo, si se te pasan los números 1 y 3, deberás encontrar el mínimo común múltiplo de 1 y 3 que es divisible por todos los números <em>entre</em> 1 y 3.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Plus petit commun multiple",
          "description": [
            "Cherche le plus petit commun multiple qui soit divisible par les deux nombres donnés et par les nombres de la série entre ces deux nombres.",
            "La série est un tableau de deux nombres qui ne seront pas nécessairement dans l'ordre croissant.",
            "Par exemple, pour 1 et 3, il faut trouver le plus petit commun multiple de 1 et 3 mais aussi des nombres <em>entre</em> 1 et 3/",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function smallestCommons(arr) {",
            "  return arr;",
            "}",
            "",
            "",
            "smallestCommons([1,5]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a5deed1811a43193f9f1c841",
      "title": "Drop it",
      "description": [
        "Given the array <code>arr</code>, iterate through and remove each element starting from the first element (the 0 index) until the function <code>func</code> returns <code>true</code> when the iterated element is passed through it.",
        "Then return the rest of the array once the condition is satisfied, otherwise, <code>arr</code> should be returned as an empty array.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function dropElements(arr, func) {\n  // Drop them elements.\n  while (arr.length && !func(arr[0])) {\n    arr.shift();\n  }\n  return arr;\n}"
      ],
      "tests": [
        {
          "text": "<code>dropElements([1, 2, 3, 4], function(n) {return n >= 3;})</code> should return <code>[3, 4]</code>.",
          "testString": "assert.deepEqual(dropElements([1, 2, 3, 4], function(n) {return n >= 3;}), [3, 4], '<code>dropElements([1, 2, 3, 4], function(n) {return n >= 3;})</code> should return <code>[3, 4]</code>.');"
        },
        {
          "text": "<code>dropElements([0, 1, 0, 1], function(n) {return n === 1;})</code> should return <code>[1, 0, 1]</code>.",
          "testString": "assert.deepEqual(dropElements([0, 1, 0, 1], function(n) {return n === 1;}), [1, 0, 1], '<code>dropElements([0, 1, 0, 1], function(n) {return n === 1;})</code> should return <code>[1, 0, 1]</code>.');"
        },
        {
          "text": "<code>dropElements([1, 2, 3], function(n) {return n > 0;})</code> should return <code>[1, 2, 3]</code>.",
          "testString": "assert.deepEqual(dropElements([1, 2, 3], function(n) {return n > 0;}), [1, 2, 3], '<code>dropElements([1, 2, 3], function(n) {return n > 0;})</code> should return <code>[1, 2, 3]</code>.');"
        },
        {
          "text": "<code>dropElements([1, 2, 3, 4], function(n) {return n > 5;})</code> should return <code>[]</code>.",
          "testString": "assert.deepEqual(dropElements([1, 2, 3, 4], function(n) {return n > 5;}), [], '<code>dropElements([1, 2, 3, 4], function(n) {return n > 5;})</code> should return <code>[]</code>.');"
        },
        {
          "text": "<code>dropElements([1, 2, 3, 7, 4], function(n) {return n > 3;})</code> should return <code>[7, 4]</code>.",
          "testString": "assert.deepEqual(dropElements([1, 2, 3, 7, 4], function(n) {return n > 3;}), [7, 4], '<code>dropElements([1, 2, 3, 7, 4], function(n) {return n > 3;})</code> should return <code>[7, 4]</code>.');"
        },
        {
          "text": "<code>dropElements([1, 2, 3, 9, 2], function(n) {return n > 2;})</code> should return <code>[3, 9, 2]</code>.",
          "testString": "assert.deepEqual(dropElements([1, 2, 3, 9, 2], function(n) {return n > 2;}), [3, 9, 2], '<code>dropElements([1, 2, 3, 9, 2], function(n) {return n > 2;})</code> should return <code>[3, 9, 2]</code>.');"
        }
      ],
      "MDNlinks": [
        "Arguments object",
        "Array.prototype.shift()",
        "Array.prototype.slice()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "¡Fuera de aquí!",
          "description": [
            "Toma los elementos contenidos en el vector que se te provee en el primer argumento de la función y elimínalos uno por uno, hasta que la función provista en el segundo argumento devuelva true.",
            "Retorna el resto del vector, de lo contrario retorna un vector vacío.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Laisse tomber",
          "description": [
            "Écarte les éléments du tableau (premier argument), en commençant par la gauche, jusqu'à ce la fonction (second argument) renvoie true.",
            "Renvoie le reste du tableau, ou dans le cas contraire un tableau vide",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function dropElements(arr, func) {",
            "  // Drop them elements.",
            "  return arr;",
            "}",
            "",
            "dropElements([1, 2, 3], function(n) {return n < 3; });"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "ab306dbdcc907c7ddfc30830",
      "title": "Steamroller",
      "description": [
        "Flatten a nested array. You must account for varying levels of nesting.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function steamrollArray(arr) {\n  if (!Array.isArray(arr)) {\n    return [arr];\n  }\n  var out = [];\n  arr.forEach(function(e) {\n    steamrollArray(e).forEach(function(v) {\n      out.push(v);\n    });\n  });\n  return out;\n}"
      ],
      "tests": [
        {
          "text": "<code>steamrollArray([[[\"a\"]], [[\"b\"]]])</code> should return <code>[\"a\", \"b\"]</code>.",
          "testString": "assert.deepEqual(steamrollArray([[[\"a\"]], [[\"b\"]]]), [\"a\", \"b\"], '<code>steamrollArray([[[\"a\"]], [[\"b\"]]])</code> should return <code>[\"a\", \"b\"]</code>.');"
        },
        {
          "text": "<code>steamrollArray([1, [2], [3, [[4]]]])</code> should return <code>[1, 2, 3, 4]</code>.",
          "testString": "assert.deepEqual(steamrollArray([1, [2], [3, [[4]]]]), [1, 2, 3, 4], '<code>steamrollArray([1, [2], [3, [[4]]]])</code> should return <code>[1, 2, 3, 4]</code>.');"
        },
        {
          "text": "<code>steamrollArray([1, [], [3, [[4]]]])</code> should return <code>[1, 3, 4]</code>.",
          "testString": "assert.deepEqual(steamrollArray([1, [], [3, [[4]]]]), [1, 3, 4], '<code>steamrollArray([1, [], [3, [[4]]]])</code> should return <code>[1, 3, 4]</code>.');"
        },
        {
          "text": "<code>steamrollArray([1, {}, [3, [[4]]]])</code> should return <code>[1, {}, 3, 4]</code>.",
          "testString": "assert.deepEqual(steamrollArray([1, {}, [3, [[4]]]]), [1, {}, 3, 4], '<code>steamrollArray([1, {}, [3, [[4]]]])</code> should return <code>[1, {}, 3, 4]</code>.');"
        }
      ],
      "MDNlinks": [
        "Array.isArray()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Aplanadora",
          "description": [
            "Aplana el vector anidado que se te provee. Tu función debe poder aplanar vectores de cualquier forma.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Rouleau compresseur",
          "description": [
            "Aplatis le tableau donné. Ta fonction doit pour gérer différentes formes de tableaux.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function steamrollArray(arr) {",
            "  // I'm a steamroller, baby",
            "  return arr;",
            "}",
            "",
            "steamrollArray([1, [2], [3, [[4]]]]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a8d97bd4c764e91f9d2bda01",
      "title": "Binary Agents",
      "description": [
        "Return an English translated sentence of the passed binary string.",
        "The binary string will be space separated.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function binaryAgent(str) {\n  return str.split(' ').map(function(s) { return parseInt(s, 2); }).map(function(b) { return String.fromCharCode(b);}).join('');\n}"
      ],
      "tests": [
        {
          "text": "<code>binaryAgent(\"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111\")</code> should return \"Aren&#39;t bonfires fun!?\"",
          "testString": "assert.deepEqual(binaryAgent('01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111'), \"Aren't bonfires fun!?\", '<code>binaryAgent(\"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111\")</code> should return \"Aren&#39;t bonfires fun!?\"');"
        },
        {
          "text": "<code>binaryAgent(\"01001001 00100000 01101100 01101111 01110110 01100101 00100000 01000110 01110010 01100101 01100101 01000011 01101111 01100100 01100101 01000011 01100001 01101101 01110000 00100001\")</code> should return \"I love FreeCodeCamp!\"",
          "testString": "assert.deepEqual(binaryAgent('01001001 00100000 01101100 01101111 01110110 01100101 00100000 01000110 01110010 01100101 01100101 01000011 01101111 01100100 01100101 01000011 01100001 01101101 01110000 00100001'), \"I love FreeCodeCamp!\", '<code>binaryAgent(\"01001001 00100000 01101100 01101111 01110110 01100101 00100000 01000110 01110010 01100101 01100101 01000011 01101111 01100100 01100101 01000011 01100001 01101101 01110000 00100001\")</code> should return \"I love FreeCodeCamp!\"');"
        }
      ],
      "MDNlinks": [
        "String.prototype.charCodeAt()",
        "String.fromCharCode()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Mensaje secreto",
          "description": [
            "Haz que la función devuelva el mensaje en inglés escondido en el código binario de la cadena de texto que se le pasa.",
            "La cadena de texto binaria estará separada por espacios.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Agent binaire",
          "description": [
            "Traduis la chaîne binaire donnée en anglais.",
            "La chaîne binaire comporte des espaces.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function binaryAgent(str) {",
            "  return str;",
            "}",
            "",
            "binaryAgent(\"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a10d2431ad0c6a099a4b8b52",
      "title": "Everything Be True",
      "description": [
        "Check if the predicate (second argument) is <dfn>truthy</dfn> on all elements of a collection (first argument).",
        "In other words, you are given an array collection of objects. The predicate <code>pre</code> will be an object property and you need to return <code>true</code> if its value is <code>truthy</code>. Otherwise, return <code>false</code>.",
        "In JavaScript, <code>truthy</code> values are values that translate to <code>true</code> when evaluated in a Boolean context.",
        "Remember, you can access object properties through either dot notation or <code>[]</code> notation.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function truthCheck(collection, pre) {\n  // Does everyone have one of these?\n  return collection.every(function(e) { return e[pre]; });\n}"
      ],
      "tests": [
        {
          "text": "<code>truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\", \"sex\": \"male\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\")</code> should return true.",
          "testString": "assert.strictEqual(truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\", \"sex\": \"male\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\"), true, '<code>truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\", \"sex\": \"male\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\")</code> should return true.');"
        },
        {
          "text": "<code>truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\")</code> should return false.",
          "testString": "assert.strictEqual(truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\"), false, '<code>truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\")</code> should return false.');"
        },
        {
          "text": "<code>truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\", \"age\": 0}, {\"user\": \"Dipsy\", \"sex\": \"male\", \"age\": 3}, {\"user\": \"Laa-Laa\", \"sex\": \"female\", \"age\": 5}, {\"user\": \"Po\", \"sex\": \"female\", \"age\": 4}], \"age\")</code> should return false.",
          "testString": "assert.strictEqual(truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\", \"age\": 2}, {\"user\": \"Dipsy\", \"sex\": \"male\", \"age\": 0}, {\"user\": \"Laa-Laa\", \"sex\": \"female\", \"age\": 5}, {\"user\": \"Po\", \"sex\": \"female\", \"age\": 4}], \"age\"), false, '<code>truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\", \"age\": 0}, {\"user\": \"Dipsy\", \"sex\": \"male\", \"age\": 3}, {\"user\": \"Laa-Laa\", \"sex\": \"female\", \"age\": 5}, {\"user\": \"Po\", \"sex\": \"female\", \"age\": 4}], \"age\")</code> should return false.');"
        },
        {
          "text": "<code>truthCheck([{\"name\": \"Pete\", \"onBoat\": true}, {\"name\": \"Repeat\", \"onBoat\": true}, {\"name\": \"FastFoward\", \"onBoat\": null}], \"onBoat\")</code> should return false",
          "testString": "assert.strictEqual(truthCheck([{\"name\": \"Pete\", \"onBoat\": true}, {\"name\": \"Repeat\", \"onBoat\": true}, {\"name\": \"FastFoward\", \"onBoat\": null}], \"onBoat\"), false, '<code>truthCheck([{\"name\": \"Pete\", \"onBoat\": true}, {\"name\": \"Repeat\", \"onBoat\": true}, {\"name\": \"FastFoward\", \"onBoat\": null}], \"onBoat\")</code> should return false');"
        },
        {
          "text": "<code>truthCheck([{\"name\": \"Pete\", \"onBoat\": true}, {\"name\": \"Repeat\", \"onBoat\": true, \"alias\": \"Repete\"}, {\"name\": \"FastFoward\", \"onBoat\": true}], \"onBoat\")</code> should return true",
          "testString": "assert.strictEqual(truthCheck([{\"name\": \"Pete\", \"onBoat\": true}, {\"name\": \"Repeat\", \"onBoat\": true, \"alias\": \"Repete\"}, {\"name\": \"FastFoward\", \"onBoat\": true}], \"onBoat\"), true, '<code>truthCheck([{\"name\": \"Pete\", \"onBoat\": true}, {\"name\": \"Repeat\", \"onBoat\": true, \"alias\": \"Repete\"}, {\"name\": \"FastFoward\", \"onBoat\": true}], \"onBoat\")</code> should return true');"
        },
        {
          "text": "<code>truthCheck([{\"single\": \"yes\"}], \"single\")</code> should return true",
          "testString": "assert.strictEqual(truthCheck([{\"single\": \"yes\"}], \"single\"), true, '<code>truthCheck([{\"single\": \"yes\"}], \"single\")</code> should return true');"
        },
        {
          "text": "<code>truthCheck([{\"single\": \"\"}, {\"single\": \"double\"}], \"single\")</code> should return false",
          "testString": "assert.strictEqual(truthCheck([{\"single\": \"\"}, {\"single\": \"double\"}], \"single\"), false, '<code>truthCheck([{\"single\": \"\"}, {\"single\": \"double\"}], \"single\")</code> should return false');"
        },
        {
          "text": "<code>truthCheck([{\"single\": \"double\"}, {\"single\": undefined}], \"single\")</code> should return false",
          "testString": "assert.strictEqual(truthCheck([{\"single\": \"double\"}, {\"single\": undefined}], \"single\"), false, '<code>truthCheck([{\"single\": \"double\"}, {\"single\": undefined}], \"single\")</code> should return false');"
        },
        {
          "text": "<code>truthCheck([{\"single\": \"double\"}, {\"single\": NaN}], \"single\")</code> should return false",
          "testString": "assert.strictEqual(truthCheck([{\"single\": \"double\"}, {\"single\": NaN}], \"single\"), false, '<code>truthCheck([{\"single\": \"double\"}, {\"single\": NaN}], \"single\")</code> should return false');"
        }
      ],
      "isRequired": true,
      "MDNlinks": [
        "Truthy",
        "Falsy"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Que todo sea verdadero",
          "description": [
            "Verifica si la función en el segundo argumento devuelve true para todos los elementos de la colección en el primer argumento.",
            "Recuerda que puedes accesar a las propiedades de un objeto, ya sea a través de la notación por punto o de la notación por corchete usando [].",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Tout doit être vrai",
          "description": [
            "Vérifie que la fonction donnée (second argument) est vraie sur tous les éléments de la collection (premier argument).",
            "Tu peux utiliser un point ou des [] pour accéder aux propritétés de l'objet.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function truthCheck(collection, pre) {",
            "  // Is everyone being true?",
            "  return pre;",
            "}",
            "",
            "truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\", \"sex\": \"male\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a97fd23d9b809dac9921074f",
      "title": "Arguments Optional",
      "description": [
        "Create a function that sums two arguments together. If only one argument is provided, then return a function that expects one argument and returns the sum.",
        "For example, <code>addTogether(2, 3)</code> should return <code>5</code>, and <code>addTogether(2)</code> should return a function.",
        "Calling this returned function with a single argument will then return the sum:",
        "<code>var sumTwoAnd = addTogether(2);</code>",
        "<code>sumTwoAnd(3)</code> returns <code>5</code>.",
        "If either argument isn't a valid number, return undefined.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function addTogether() {\n  var a = arguments[0];\n  if (toString.call(a) !== '[object Number]') return;  \n  if (arguments.length === 1) {\n    return function(b) {\n      if (toString.call(b) !== '[object Number]') return;\n      return a + b;\n    };\n  }\n  var b = arguments[1];\n  if (toString.call(b) !== '[object Number]') return;  \n  return a + arguments[1];\n}"
      ],
      "tests": [
        {
          "text": "<code>addTogether(2, 3)</code> should return 5.",
          "testString": "assert.deepEqual(addTogether(2, 3), 5, '<code>addTogether(2, 3)</code> should return 5.');"
        },
        {
          "text": "<code>addTogether(2)(3)</code> should return 5.",
          "testString": "assert.deepEqual(addTogether(2)(3), 5, '<code>addTogether(2)(3)</code> should return 5.');"
        },
        {
          "text": "<code>addTogether(\"http://bit.ly/IqT6zt\")</code> should return undefined.",
          "testString": "assert.isUndefined(addTogether(\"http://bit.ly/IqT6zt\"), '<code>addTogether(\"http://bit.ly/IqT6zt\")</code> should return undefined.');"
        },
        {
          "text": "<code>addTogether(2, \"3\")</code> should return undefined.",
          "testString": "assert.isUndefined(addTogether(2, \"3\"), '<code>addTogether(2, \"3\")</code> should return undefined.');"
        },
        {
          "text": "<code>addTogether(2)([3])</code> should return undefined.",
          "testString": "assert.isUndefined(addTogether(2)([3]), '<code>addTogether(2)([3])</code> should return undefined.');"
        }
      ],
      "MDNlinks": [
        "Closures",
        "Arguments object"
      ],
      "isRequired": true,
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Argumentos opcionales",
          "description": [
            "Crea una función que sume dos argumentos. Si sólo se le pasa un argumento a la función, haz que devuelva otra función que acepte un argumento y que devuelva la suma correspondiente.",
            "Por ejemplo, <code>add(2, 3)</code> debe devolver <code>5</code>, y <code>add(2)</code> debe devolver una función.",
            "Al llamar esta función con un único argumento devolverá la suma:",
            "<code>var sumTwoAnd = add(2);</code>",
            "<code>sumTwoAnd(3)</code> devuelve <code>5</code>.",
            "Si alguno de los argumentos no es un número válido, haz que devuelva undefined.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "fr": {
          "title": "Arguments optionnels",
          "description": [
            "Crée une fonction qui additionne deux arguments. Si un seul argument est donné, renvoie une fonction qui attend un argument et renvoie la somme.",
            "Par exemple, <code>add(2, 3)</code>, doit renvoyer <code>5</code>, et <code>add(2)</code> doit renvoyer une fonction.",
            "Appeler cette fonction avec un seul argument renvoie la somme:",
            "<code>var sumTwoAnd = add(2);</code>",
            "<code>sumTwoAnd(3)</code> renvoie <code>5</code>.",
            "Si aucun argument n'est un nombre, renvoie undefined.",
            "N'oublie pas d'utiliser <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Lire-Chercher-Demander</a> si tu es bloqué. Essaye de trouver un partenaire. Écris ton propre code."
          ]
        }
      },
      "guideUrl": "https://guide.freecodecamp.org/certificates/arguments-optional",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function addTogether() {",
            "  return false;",
            "}",
            "",
            "addTogether(2,3);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a2f1d72d9b908d0bd72bb9f6",
      "title": "Make a Person",
      "description": [
        "Fill in the object constructor with the following methods below:",
        "<blockquote>getFirstName()\ngetLastName()\ngetFullName()\nsetFirstName(first)\nsetLastName(last)\nsetFullName(firstAndLast)</blockquote>",
        "Run the tests to see the expected output for each method.",
        "The methods that take an argument must accept only one argument and it has to be a string.",
        "These methods must be the only available means of interacting with the object.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "var Person = function(firstAndLast) {\n\n  var firstName, lastName;\n\n  function updateName(str) {    \n    firstName = str.split(\" \")[0];\n    lastName = str.split(\" \")[1];    \n  }\n\n  updateName(firstAndLast);\n\n  this.getFirstName = function(){\n    return firstName;\n  };\n  \n  this.getLastName = function(){\n    return lastName;\n  };\n  \n  this.getFullName = function(){\n    return firstName + \" \" + lastName;\n  };\n  \n  this.setFirstName = function(str){\n    firstName = str;\n  };\n  \n\n  this.setLastName = function(str){\n    lastName = str;\n  };\n  \n  this.setFullName = function(str){\n    updateName(str);\n  };\n};\n\nvar bob = new Person('Bob Ross');\nbob.getFullName();"
      ],
      "tests": [
        {
          "text": "<code>Object.keys(bob).length</code> should return 6.",
          "testString": "assert.deepEqual(Object.keys(bob).length, 6, '<code>Object.keys(bob).length</code> should return 6.');"
        },
        {
          "text": "<code>bob instanceof Person</code> should return true.",
          "testString": "assert.deepEqual(bob instanceof Person, true, '<code>bob instanceof Person</code> should return true.');"
        },
        {
          "text": "<code>bob.firstName</code> should return undefined.",
          "testString": "assert.deepEqual(bob.firstName, undefined, '<code>bob.firstName</code> should return undefined.');"
        },
        {
          "text": "<code>bob.lastName</code> should return undefined.",
          "testString": "assert.deepEqual(bob.lastName, undefined, '<code>bob.lastName</code> should return undefined.');"
        },
        {
          "text": "<code>bob.getFirstName()</code> should return \"Bob\".",
          "testString": "assert.deepEqual(bob.getFirstName(), 'Bob', '<code>bob.getFirstName()</code> should return \"Bob\".');"
        },
        {
          "text": "<code>bob.getLastName()</code> should return \"Ross\".",
          "testString": "assert.deepEqual(bob.getLastName(), 'Ross', '<code>bob.getLastName()</code> should return \"Ross\".');"
        },
        {
          "text": "<code>bob.getFullName()</code> should return \"Bob Ross\".",
          "testString": "assert.deepEqual(bob.getFullName(), 'Bob Ross', '<code>bob.getFullName()</code> should return \"Bob Ross\".');"
        },
        {
          "text": "<code>bob.getFullName()</code> should return \"Haskell Ross\" after <code>bob.setFirstName(\"Haskell\")</code>.",
          "testString": "assert.strictEqual((function () { bob.setFirstName(\"Haskell\"); return bob.getFullName(); })(), 'Haskell Ross', '<code>bob.getFullName()</code> should return \"Haskell Ross\" after <code>bob.setFirstName(\"Haskell\")</code>.');"
        },
        {
          "text": "<code>bob.getFullName()</code> should return \"Haskell Curry\" after <code>bob.setLastName(\"Curry\")</code>.",
          "testString": "assert.strictEqual((function () { var _bob=new Person('Haskell Ross'); _bob.setLastName(\"Curry\"); return _bob.getFullName(); })(), 'Haskell Curry', '<code>bob.getFullName()</code> should return \"Haskell Curry\" after <code>bob.setLastName(\"Curry\")</code>.');"
        },
        {
          "text": "<code>bob.getFullName()</code> should return \"Haskell Curry\" after <code>bob.setFullName(\"Haskell Curry\")</code>.",
          "testString": "assert.strictEqual((function () { bob.setFullName(\"Haskell Curry\"); return bob.getFullName(); })(), 'Haskell Curry', '<code>bob.getFullName()</code> should return \"Haskell Curry\" after <code>bob.setFullName(\"Haskell Curry\")</code>.');"
        },
        {
          "text": "<code>bob.getFirstName()</code> should return \"Haskell\" after <code>bob.setFullName(\"Haskell Curry\")</code>.",
          "testString": "assert.strictEqual((function () { bob.setFullName(\"Haskell Curry\"); return bob.getFirstName(); })(), 'Haskell', '<code>bob.getFirstName()</code> should return \"Haskell\" after <code>bob.setFullName(\"Haskell Curry\")</code>.');"
        },
        {
          "text": "<code>bob.getLastName()</code> should return \"Curry\" after <code>bob.setFullName(\"Haskell Curry\")</code>.",
          "testString": "assert.strictEqual((function () { bob.setFullName(\"Haskell Curry\"); return bob.getLastName(); })(), 'Curry', '<code>bob.getLastName()</code> should return \"Curry\" after <code>bob.setFullName(\"Haskell Curry\")</code>.');"
        }
      ],
      "MDNlinks": [
        "Closures",
        "Details of the Object Model"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Crea una Persona",
          "description": [
            "Completa el constructor de objetos con los métodos especificados a continuación:",
            "<blockquote>getFirstName()\ngetLastName()\ngetFullName()\nsetFirstName(first)\nsetLastName(last)\nsetFullName(firstAndLast)</blockquote>",
            "Ejecuta las pruebas para ver el resultado esperado de cada método.",
            "Las funciones que aceptan argumentos deben aceptar sólo uno, y este tiene que ser una cadena.",
            "Estos métodos deben ser el único medio para interactuar con el objeto.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leer-Buscar-Preguntar</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "it": {
          "title": "Crea una Persona",
          "description": [
            "Completa il costruttore dell'oggetto con i metodi specificati qui sotto:",
            "<blockquote>getFirstName()\ngetLastName()\ngetFullName()\nsetFirstName(first)\nsetLastName(last)\nsetFullName(firstAndLast)</blockquote>",
            "Esegui i test per vedere il risultato atteso per ogni metodo.",
            "I metodi che richiedono un argomento devono accettarne solo uno e questo deve essere una stringa.",
            "Questi metodi devono essere l'unica maniera possibile di interagire con l'oggetto.",
            "Ricorda di usare <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leggi-Cerca-Chiedi</a> se rimani bloccato. Prova a programmare in coppia. Scrivi il codice da te."
          ]
        },
        "pt-br": {
          "title": "Faça uma Pessoa",
          "description": [
            "Preencha o contrutor do objeto com seguintes métodos:",
            "<blockquote>getFirstName()\ngetLastName()\ngetFullName()\nsetFirstName(first)\nsetLastName(last)\nsetFullName(firstAndLast)</blockquote>",
            "Rode os testes para ver o resultado esperado de cada método.",
            "Os métodos que recebem um argumento deve aceitar somente um argumento e deve ser uma string.",
            "Esses métodos devem ser o único meio de interação com o objeto.",
            "Lembre-se de usar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Ler-Procurar-Perguntar</a> se você ficar preso. Tente programar em par. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var Person = function(firstAndLast) {",
            "  // Complete the method below and implement the others similarly",
            "  this.getFullName = function() {",
            "    return \"\";",
            "  };",
            "  return firstAndLast;",
            "};",
            "",
            "var bob = new Person('Bob Ross');",
            "bob.getFullName();"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "af4afb223120f7348cdfc9fd",
      "title": "Map the Debris",
      "description": [
        "Return a new array that transforms the elements' average altitude into their orbital periods (in seconds).",
        "The array will contain objects in the format <code>{name: 'name', avgAlt: avgAlt}</code>.",
        "You can read about orbital periods <a href=\"http://en.wikipedia.org/wiki/Orbital_period\" target='_blank'>on Wikipedia</a>.",
        "The values should be rounded to the nearest whole number. The body being orbited is Earth.",
        "The radius of the earth is 6367.4447 kilometers, and the GM value of earth is 398600.4418 km<sup>3</sup>s<sup>-2</sup>.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "function orbitalPeriod(arr) {\n  var GM = 398600.4418;\n  var earthRadius = 6367.4447;\n  var TAU = 2 * Math.PI; \n  return arr.map(function(obj) {\n    return {\n      name: obj.name,\n      orbitalPeriod: Math.round(TAU * Math.sqrt(Math.pow(obj.avgAlt+earthRadius, 3)/GM))\n    };\n  });\n}\n\norbitalPeriod([{name : \"sputkin\", avgAlt : 35873.5553}]);\n"
      ],
      "tests": [
        {
          "text": "<code>orbitalPeriod([{name : \"sputnik\", avgAlt : 35873.5553}])</code> should return <code>[{name: \"sputnik\", orbitalPeriod: 86400}]</code>.",
          "testString": "assert.deepEqual(orbitalPeriod([{name : \"sputnik\", avgAlt : 35873.5553}]), [{name: \"sputnik\", orbitalPeriod: 86400}], '<code>orbitalPeriod([{name : \"sputnik\", avgAlt : 35873.5553}])</code> should return <code>[{name: \"sputnik\", orbitalPeriod: 86400}]</code>.');"
        },
        {
          "text": "<code>orbitalPeriod([{name: \"iss\", avgAlt: 413.6}, {name: \"hubble\", avgAlt: 556.7}, {name: \"moon\", avgAlt: 378632.553}])</code> should return <code>[{name : \"iss\", orbitalPeriod: 5557}, {name: \"hubble\", orbitalPeriod: 5734}, {name: \"moon\", orbitalPeriod: 2377399}]</code>.",
          "testString": "assert.deepEqual(orbitalPeriod([{name: \"iss\", avgAlt: 413.6}, {name: \"hubble\", avgAlt: 556.7}, {name: \"moon\", avgAlt: 378632.553}]), [{name : \"iss\", orbitalPeriod: 5557}, {name: \"hubble\", orbitalPeriod: 5734}, {name: \"moon\", orbitalPeriod: 2377399}], '<code>orbitalPeriod([{name: \"iss\", avgAlt: 413.6}, {name: \"hubble\", avgAlt: 556.7}, {name: \"moon\", avgAlt: 378632.553}])</code> should return <code>[{name : \"iss\", orbitalPeriod: 5557}, {name: \"hubble\", orbitalPeriod: 5734}, {name: \"moon\", orbitalPeriod: 2377399}]</code>.');"
        }
      ],
      "MDNlinks": [
        "Math.pow()"
      ],
      "challengeType": 5,
      "translations": {
        "es": {
          "title": "Ubica los Escombros",
          "description": [
            "Crea una función que devuelva un nuevo arreglo que transforme la altitud promedio del elemento en su período orbital.",
            "El arreglo debe contener objetos en el formato <code>{name: 'name', avgAlt: avgAlt}</code>.",
            "Puedes leer acerca de períodos orbitales <a href=\"http://en.wikipedia.org/wiki/Orbital_period\" target='_blank'>en Wikipedia</a>.",
            "Los valores deben estar redondeados al número entero más próximo. El cuerpo orbitado es la Tierra",
            "El radio de la Tierra es 6367.4447 kilómetros, y el valor GM del planeta es de 398600.4418 km<sup>3</sup>s<sup>-2</sup>.",
            "Recuerda utilizar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> si te sientes atascado. Intenta programar en pareja. Escribe tu propio código."
          ]
        },
        "it": {
          "title": "Mappa i Detriti",
          "description": [
            "Ritorna un nuovo array che trasformi l'altitudine media degli elementi nel loro periodo orbitale.",
            "L'array conterrà oggetti in formato <code>{name: 'name', avgAlt: avgAlt}</code>.",
            "Puoi leggere riguardo i periodi orbitali <a href=\"http://en.wikipedia.org/wiki/Orbital_period\" target='_blank'>su Wikipedia</a>.",
            "I valori devono essere arrotondati al numero intero più vicino. Il corpo attorno a cui orbitano gli elementi è la Terra.",
            "Il raggio della Terra è di 6367.4447 kilometri, e il valore GM della Terra è di 398600.4418 km<sup>3</sup>s<sup>-2</sup>.",
            "Ricorda di usare <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Leggi-Cerca-Chiedi</a> se rimani bloccato. Prova a programmare in coppia. Scrivi il codice da te."
          ]
        },
        "pt-br": {
          "title": "Mapeie o Lixo espacial",
          "description": [
            "Retorne uma nova matriz que transforma a altitude média do elemento em seu período orbital.",
            "A matriz vai conter objetos no formato <code>{name: 'name', avgAlt: avgAlt}</code>.",
            "Você pode ler sobre período orbital <a href=\"https://pt.wikipedia.org/wiki/Per%C3%ADodo_orbital\" target='_blank'>na Wikipedia</a>.",
            "Os valores devem ser arredondados para número inteiro mais próximo. O corpe sendo orbitado é a Terra.",
            "O raio da terra é 6367.4447 quilômetros, e o valor GM da terra é 398600.4418 km<sup>3</sup>s<sup>-2</sup>.",
            "Lembre-se de usar <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Ler-Procurar-Perguntar</a> se você ficar preso. Tente programar em par. Escreva seu próprio código."
          ]
        }
      },
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function orbitalPeriod(arr) {",
            "  var GM = 398600.4418;",
            "  var earthRadius = 6367.4447;",
            "  return arr;",
            "}",
            "",
            "orbitalPeriod([{name : \"sputnik\", avgAlt : 35873.5553}]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9acdd08826",
      "title": "Learn How Script Tags and Document Ready Work",
      "description": [
        "Now we're ready to learn jQuery, the most popular JavaScript tool of all time.",
        "Before we can start using jQuery, we need to add some things to our HTML.",
        "First, add a <code>script</code> element at the top of your page. Be sure to close it on the following line.",
        "Your browser will run any JavaScript inside a <code>script</code> element, including jQuery.",
        "Inside your <code>script</code> element, add this code: <code>$(document).ready(function() {</code> to your <code>script</code>. Then close it on the following line (still inside your <code>script</code> element) with: <code>});</code>",
        "We'll learn more about <code>functions</code> later. The important thing to know is that code you put inside this <code>function</code> will run as soon as your browser has loaded your page.",
        "This is important because without your <code>document ready function</code>, your code may run before your HTML is rendered, which would cause bugs."
      ],
      "tests": [
        {
          "text": "Create a <code>script</code> element making sure it is valid and has a closing tag.",
          "testString": "assert(code.match(/<\\/script\\s*>/g) && code.match(/<script(\\sasync|\\sdefer)*(\\s(charset|src|type)\\s*=\\s*[\"\\']+[^\"\\']*[\"\\']+)*(\\sasync|\\sdefer)*\\s*>/g) && code.match(/<\\/script\\s*>/g).length === code.match(/<script(\\sasync|\\sdefer)*(\\s(charset|src|type)\\s*=\\s*[\"\\']+[^\"\\']*[\"\\']+)*(\\sasync|\\sdefer)*\\s*>/g).length, 'Create a <code>script</code> element making sure it is valid and has a closing tag.');"
        },
        {
          "text": "You should add <code>$&#40;document&#41;.ready<wbr>&#40;function&#40;&#41; {</code> to the beginning of your <code>script</code> element.",
          "testString": "assert(code.match(/\\$\\s*?\\(\\s*?document\\s*?\\)\\.ready\\s*?\\(\\s*?function\\s*?\\(\\s*?\\)\\s*?\\{/g), 'You should add <code>$&#40;document&#41;.ready<wbr>&#40;function&#40;&#41; {</code> to the beginning of your <code>script</code> element.');"
        },
        {
          "text": "Close your <code>$&#40;document&#41;.ready<wbr>&#40;function&#40;&#41; {</code> function with <code>}&#41;;</code>",
          "testString": "assert(code.match(/\\n*?\\s*?\\}\\s*?\\);/g), 'Close your <code>$&#40;document&#41;.ready<wbr>&#40;function&#40;&#41; {</code> function with <code>}&#41;;</code>');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Lerne, wie Script Tags und Document Ready funktionieren",
          "description": [
            "Jetzt sind wir bereit jQuery zu lernen, das populärste JavaScript-Tool aller Zeiten. Mach dir über JavaScript keine Sorgen - über dieses werden wir bald sprechen.",
            "Bevor wir jQuery nutzen können, müssen wir erst ein paar Dinge zu unserem HTML hinzufügen.",
            "Füge als erstes ein <code>script</code> Element am Beginn deiner Seite ein. Vergewissere dich, dass du das Element in der nächsten Zeile geschlossen hast.",
            "Dein Browser wird jegliches JavaScript, jQuery eingeschlossen, innerhalb eines <code>script</code> Elements ausführen.",
            "Füge innerhalb deines <code>script</code> Elements folgenden Code hinzu: <code>$(document).ready(function() {</code>. Schließe ihn danach in der nächsten Zeile (noch immer innerhalb deines <code>script</code> Elements) mit: <code>});</code>",
            "Wir werden später noch mehr über <code>Funktionen</code> lernen. Wichtig zu wissen ist, dass der Code innerhalb der <code>Funktion</code> ausgeführt wird, sobald der Browser die Seite geladen hat.",
            "Das ist wichtig, denn ohne deine <code>Document Ready Funktion</code> könnte dein Code ausgeführt werden, bevor das HTML gerendert wurde - was zu Fehlern führen kann."
          ]
        },
        "es": {
          "title": "Aprende cómo funcionan las etiquetas de programa y la función de documento listo.",
          "description": [
            "Ahora estamos listos para aprender jQuery, la herramienta de JavaScript más popular de todos los tiempos. No te preocupes por JavaScript en si --lo cubriremos pronto.",
            "Antes de que podamos comenzar a usar jQuery, tenemos que añadir algunas cosas a nuestro HTML.",
            "En primer lugar, añade un elemento de programa <code>script</code> en la parte superior de la página. Asegúrate de cerrarlo en la línea siguiente. ",
            "Tu navegador ejecutará todo JavaScript dentro de un elemento <code>script</code>, incluyendo jQuery.",
            "Dentro de tu elemento <code>script</code>, agrega este código: <code>$(document).ready(function () {</code> A continuación, ciérralo en la línea siguiente (aún dentro de tu elemento <code>script</code>) con: <code>})</code>",
            "Más adelante aprenderemos más acerca de funciones. Lo importante es saber que el código que pongas dentro de esta función (<code>function</code>) se ejecutará tan pronto como tu navegador haya cargado la página.",
            "Esto es importante porque sin tu <code>función de documento listo</code>, tu código puede ejecutarse antes de que se haya presentado el HTML, lo que podría causar errores."
          ]
        },
        "fr": {
          "title": "Apprendre comment fonctionnent les balises Script et Document Ready",
          "description": [
            "Nous sommes maintenant prêt à apprendre jQuery, l'outil JavaScript le plus populaire de tout les temps. Ne vous inquiétez pas à propos de JavaScript lui-même, nous y viendrons bientôt.",
            "Avant de pouvoir utiliser jQuery, nous avons besoin d'ajouter certaines choses à notre HTML.",
            "Premièrement, ajoutez un élément <code>script</code> en haut de votre page. Assurez-vous de le fermer à la ligne suivante.",
            "Votre navigateur exécutera JavaScript à l'intérieur de l'élement <code>script</code>, y compris jQuery.",
            "Á l'intérieur de votre élement <code>script</code>, ajoutez ce code : <code>$(document).ready(function() {</code> à votre <code>script</code>. Puis fermez-le à la ligne suivante (toujours à l'intérieur de votre élement <code>script</code> avec: <code>});</code>",
            "Nous en apprendrons plus sur les <code>functions</code> plus tard. Le plus important à savoir est que le code à l'intérieur de cette <code>function</code> sera exécuté dès que le navigateur aura chargé votre page.",
            "Ceci est important car sans votre <code>document ready function</code>, votre code pourrait être exécuté avant que votre HTML soit affiché, ce qui pourrait causer des problèmes."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9bedc08826",
      "title": "Target HTML Elements with Selectors Using jQuery",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "Now we have a <code>document ready function</code>.",
        "Now let's write our first jQuery statement. All jQuery functions start with a <code>$</code>, usually referred to as a <code>dollar sign operator</code>, or as <code>bling</code>.",
        "jQuery often selects an HTML element with a <code>selector</code>, then does something to that element.",
        "For example, let's make all of your <code>button</code> elements bounce. Just add this code inside your document ready function:",
        "<code>$(\"button\").addClass(\"animated bounce\");</code>",
        "Note that we've already included both the jQuery library and the Animate.css library in the background so that you can use them in the editor. So you are using jQuery to apply the Animate.css <code>bounce</code> class to your <code>button</code> elements."
      ],
      "tests": [
        {
          "text": "Use the jQuery <code>addClass&#40&#41</code> function to give the classes <code>animated</code> and <code>bounce</code> to your <code>button</code> elements.",
          "testString": "assert($(\"button\").hasClass(\"animated\") && $(\"button\").hasClass(\"bounce\"), 'Use the jQuery <code>addClass&#40&#41</code> function to give the classes <code>animated</code> and <code>bounce</code> to your <code>button</code> elements.');"
        },
        {
          "text": "Only use jQuery to add these colors to the element.",
          "testString": "assert(!code.match(/class.*animated/g), 'Only use jQuery to add these colors to the element.');"
        },
        {
          "text": "Your jQuery code should be within the <code>$(document).ready();</code> function.",
          "testString": "assert(code.match(/\\$\\(document\\)\\.ready\\(function.*(\\s|\\n)*.*button.*.addClass.*\\);/g), 'Your jQuery code should be within the <code>$(document).ready();</code> function.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "HTML-Elemente mit Selektoren durch jQuery auswählen",
          "description": [
            "Jetzt haben wir eine <code>Document Ready Funktion</code>.",
            "Lass uns unser erstes jQuery Statement schreiben. Alle jQuery Funktionen starten mit einem <code>$</code>, für gewöhnlich als <code>Dollar-Zeichen Operator</code> bezeichnet.",
            "jQuery wählt oft HTML-Elemente mit einem <code>Selektor</code> aus, um dann mit diesen Elementen etwas zu machen.",
            "Zum Beispiel, lasse alle deine <code>Button</code> Elemente hüpfen. Dazu musst du nur folgenden Code in deine <code>Document Ready Funktion</code> hinzufügen:",
            "<code>$(\"button\").addClass(\"animated bounce\");</code>",
            "Beachte, dass wir bereits jQuery und Animate.css im Hintergrund hinzugefügt haben, damit du diese im Editor nutzen kannst. Du nutzt also jQuery um die <code>bounce</code> Klasse von Animate.css zu deinen <code>Button</code> Elementen hinzuzufügen."
          ]
        },
        "es": {
          "title": "Elige elementos HTML usando selectores y jQuery",
          "description": [
            "Ya tenemos una <code>función de documento listo</code>.",
            "Ahora vamos a escribir nuestra primera instrucción jQuery. Todas las funciones de jQuery comienzan con un <code>$</code>, al que suele referirse como <code>operador dólar</code>, o simplemente como <code>bling</code>. ",
            "jQuery a menudo selecciona un elemento HTML con un <code>selector</code>, y luego le hace algo a ese elemento.",
            "Por ejemplo, hagamos que todos tus elementos <code>button</code> reboten. Sólo tienes que añadir este código dentro de la función de documento listo: ",
            "<code>$(\"button\").addClass(\"animated bounce\")</code>",
            "Ten en cuenta que ya hemos incluido tanto la biblioteca jQuery como la biblioteca Animate.css en segundo plano para que pueda utilizarlos en el editor. Así que estás usando jQuery para aplicar la clase <code>bounce</code> de Animate.css a tus elementos <code>button</code>."
          ]
        },
        "fr": {
          "title": "Cibler des élements HTML par sélecteurs avec jQuery",
          "description": [
            "Nous avons maintenant un <code>document ready function</code>.",
            "Nous allons à présent écrire notre première expression jQuery. Chaque fonction jQuery commence avec un <code>$</code>, habituellement nommé <code>opérateur dollar</code>, ou <code>bling</code>.",
            "jQuery sélectionne souvent un élément HTML à l'aide d'un <code>selector</code>, puis fait quelque chose à cet élement.",
            "Par exemple, faisons en sorte que tous nos <code>button</code> rebondissent. Ajoutez juste ce code à l'intérieur de votre <code>$(document).ready(function(){</code>:",
            "<code>$(\"button\").addClass(\"animated bounce\");</code>",
            "Notez que nous avons déjà inclus à la fois la librairie jQuery et la librairie Animate.css en amont donc nous pouvons les utiliser dans l'éditeur. Donc, vous utilisez jQuery pour appliquer la classe <code>bounce</code> d'Animate.css à vos éléments <code>button</code>.",
            "De plus, assurez-vous d'utiliser <code>$(\"button\").addClass(\"animated bounce\");</code> et non <code>$('button').addClass(\"animated bounce\");</code> car les apostrophes ne passeront pas nos tests."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedc08826",
      "title": "Target Elements by Class Using jQuery",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "You see how we made all of your <code>button</code> elements bounce? We selected them with <code>$(\"button\")</code>, then we added some CSS classes to them with <code>.addClass(\"animated bounce\");</code>.",
        "You just used jQuery's <code>.addClass()</code> function, which allows you to add classes to elements.",
        "First, let's target your <code>div</code> elements with the class <code>well</code> by using the <code>$(\".well\")</code> selector.",
        "Note that, just like with CSS declarations, you type a <code>.</code> before the class's name.",
        "Then use jQuery's <code>.addClass()</code> function to add the classes <code>animated</code> and <code>shake</code>.",
        "For example, you could make all the elements with the class <code>text-primary</code> shake by adding the following to your <code>document ready function</code>:",
        "<code>$(\".text-primary\").addClass(\"animated shake\");</code>"
      ],
      "tests": [
        {
          "text": "Use the jQuery <code>addClass&#40&#41</code> function to give the classes <code>animated</code> and <code>shake</code> to all your elements with the class <code>well</code>.",
          "testString": "assert($(\".well\").hasClass(\"animated\") && $(\".well\").hasClass(\"shake\"), 'Use the jQuery <code>addClass&#40&#41</code> function to give the classes <code>animated</code> and <code>shake</code> to all your elements with the class <code>well</code>.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString": "assert(!code.match(/class\\.\\*animated/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Elemente anhand von Klassen mit jQuery auswählen",
          "description": [
            "Siehst du, wie wir alle deine <code>Button</code> Elemente hüpfen haben lassen? Wir haben sie mit <code>$(\"button\")</code> ausgewählt, dann CSS-Klassen mit <code>.addClass(\"animated bounce\");</code> hinzugefügt.",
            "Du hast gerade jQuery's <code>.addClass()</code> Funktion genutzt, die dir erlaubt, Klassen zu Elemente hinzuzufügen.",
            "Wähle als erstes deine <code>div</code> Elemente mit der Klasse <code>well</code>, indem du den <code>$(\".well\")</code> Selektor nutzt.",
            "Bedenke, dass du - genauso wie bei CSS-Deklarationen - einen <code>.</code> vor den Namen der Klasse setzen musst.",
            "Dann nutze die jQuery Funktion <code>.addClass()</code> um die Klassen <code>animated</code> und <code>shake</code> hinzuzufügen.",
            "Zum Beispiel könntest du alle Elemente mit der Klasse <code>text-primary</code> schütteln lassen, indem du folgendes zu deiner <code>Document Ready Funktion</code> hinzufügst:",
            "<code>$(\".text-primary\").addClass(\"animated shake\");</code>"
          ]
        },
        "es": {
          "title": "Elige elementos por su clase usando jQuery",
          "description": [
            "¿Viste como hicimos rebotar todos tus elementos <code>button</code>? Los seleccionamos con <code>$(\"button\")</code>, y luego les añadimos algunas clases CSS con <code>.addClass(\"animated bounce\");.</code> ",
            "Acabas de usar la función <code>addClass()</code> de jQuery, que te permite añadir clases a los elementos.",
            "En primer lugar, apuntemos a tus elementos <code>div</code> que tengan la clase <code>well</code> usando el selector <code>$(\".well\")</code>.",
            "Ten en cuenta que, al igual que con las declaraciones CSS, escribes un <code>.</code> antes del nombre de la clase.",
            "A continuación, utiliza la función <code>.addClass()</code> de jQuery para agregar las clases <code>animated</code> y <code>shake</code>.",
            "Por ejemplo, podrías hacer que todos los elementos con la clase <code>text-primary</code> se sacudieran añadiendo lo siguiente a tu <code>función de documento listo</code>:",
            "<code>$(\".text-primary\").addClass(\"animated shake\");</code>"
          ]
        },
        "fr": {
          "title": "Cibler les élements par Classe avec jQuery",
          "description": [
            "Voyez comment nous avons fait rebondir tous nos éléments <code>button</code>? Nous les avons sélectionné avec <code>$(\"button\")</code>, puis nous leur avons ajouté des classes CSS avec <code>.addClass(\"animated bounce\");</code>.",
            "Vous venez d'utiliser la fonction jQuery <code>.addClass()</code>, ce qui nous permet d'ajouter des classes aux éléments.",
            "Tout d'abord, ciblons nos éléments <code>div</code> qui ont la classe <code>well</code> en utilisant le sélecteur <code>$(\".well\")</code>.",
            "Notez que, tout comme les expressions CSS, vous ajoutez un <code>.</code> avant le nom de la classe.",
            "Puis, vous utilisez la fonction jQuery <code>.addClass()</code> pour ajouter les classes <code>animated</code> et <code>shake</code>.",
            "Par exemple, vous pouvez faire en sorte que tous les éléments avec la classe <code>text-primary</code> s'agitent en ajoutant le code suivant à votre <code>document ready function</code>:",
            "<code>$(\".text-primary\").addClass(\"animated shake\");</code>"
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "    $(\"button\").addClass(\"animated bounce\");",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aeda08826",
      "title": "Target Elements by id Using jQuery",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "You can also target elements by their id attributes.",
        "First target your <code>button</code> element with the id <code>target3</code> by using the <code>$(\"#target3\")</code> selector.",
        "Note that, just like with CSS declarations, you type a <code>#</code> before the id's name.",
        "Then use jQuery's <code>.addClass()</code> function to add the classes <code>animated</code> and <code>fadeOut</code>.",
        "Here's how you'd make the <code>button</code> element with the id <code>target6</code> fade out:",
        "<code>$(\"#target6\").addClass(\"animated fadeOut\")</code>."
      ],
      "tests": [
        {
          "text": "Select the <code>button</code> element with the <code>id</code> of <code>target3</code> and use the jQuery <code>addClass&#40&#41</code> function to give it the class of <code>animated</code>.",
          "testString": "assert($(\"#target3\").hasClass(\"animated\"), 'Select the <code>button</code> element with the <code>id</code> of <code>target3</code> and use the jQuery <code>addClass&#40&#41</code> function to give it the class of <code>animated</code>.');"
        },
        {
          "text": "Target the element with the id <code>target3</code> and use the jQuery <code>addClass&#40&#41</code> function to give it the class <code>fadeOut</code>.",
          "testString": "assert(($(\"#target3\").hasClass(\"fadeOut\") || $(\"#target3\").hasClass(\"fadeout\"))  && code.match(/\\$\\(\\s*.#target3.\\s*\\)/g), 'Target the element with the id <code>target3</code> and use the jQuery <code>addClass&#40&#41</code> function to give it the class <code>fadeOut</code>.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString": "assert(!code.match(/class.*animated/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Elemente anhand der id mit jQuery auswählen",
          "description": [
            "Du kannst Elemente auch anhand deren ID-Attributs auswählen.",
            "Wähle als erstes dein <code>Button</code> Element mit der ID <code>target3</code>, indem du den <code>$(\"#target3\")</code> Selektor nutzt.",
            "Bedenke, dass du - genauso wie bei CSS-Deklarationen - eine <code>#</code> vor den Namen der Klasse setzen musst.",
            "Dann nutze die jQuery Funktion <code>.addClass()</code> um die Klassen <code>animated</code> und <code>fadeOut</code> hinzuzufügen.",
            "So könntest du das <code>Button</code> Element mit der ID <code>target6</code> ausblenden lassen:",
            "<code>$(\"#target6\").addClass(\"animated fadeOut\")</code>."
          ]
        },
        "es": {
          "title": "Elige elementos por id usando jQuery",
          "description": [
            "También puedes elegir un elemento por su atributo id.",
            "Primero selecciona tu elemento <code>button</code> con el id <code>target3</code> mediante el uso del selector <code>$(\"#target3\")</code>.",
            "Ten en cuenta que, al igual que con las declaraciones CSS, debes escribir un <code>#</code> antes de la identificación.",
            "A continuación, utiliza la función <code>.addClass()</code> de jQuery para agregar las clases <code>animated</code> y <code>fadeOut</code>.",
            "He aquí cómo haces que desaparezca el elemento <code>button</code> con la identificación <code>target6</code>:",
            "<code>$(\"#target6\").addClass(\"animated fadeOut\")</code>."
          ]
        },
        "fr": {
          "title": "Cibler les éléments par id avec jQuery",
          "description": [
            "Vous pouvez également cibler les éléments à l'aide de leurs attributs id.",
            "Premièrement, cibler votre élément <code>button</code> avec l'id <code>target3</code> en utilisant le sélecteur <code>$(\"#target\")</code>.",
            "Notez que, tout comme les expressions CSS, vous ajoutez un <code>#</code> avant le nom de l'id.",
            "Puis, utilisez la fonction jQuery <code>.addClass()</code> afin d'ajouter les classes <code>animated</code> et <code>fadeOut</code>.",
            "Voici comment vous pouvez faire en sorte que l'élément <code>button</code> avec l'id <code>target6</code> disparaisse en fondu:",
            "<code>$(\"#target6\").addClass(\"animated fadeOut\")</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "    $(\"button\").addClass(\"animated bounce\");",
            "    $(\".well\").addClass(\"animated shake\");",
            "",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aeda08726",
      "title": "Delete Your jQuery Functions",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "These animations were cool at first, but now they're getting kind of distracting.",
        "Delete all three of these jQuery functions from your <code>document ready function</code>, but leave your <code>document ready function</code> itself intact."
      ],
      "tests": [
        {
          "text": "Delete all three of your jQuery functions from your <code>document ready function</code>.",
          "testString": "assert(code.match(/\\{\\s*\\}\\);/g), 'Delete all three of your jQuery functions from your <code>document ready function</code>.');"
        },
        {
          "text": "Leave your <code>script</code> element intact.",
          "testString": "assert(code.match(/<script>/g), 'Leave your <code>script</code> element intact.');"
        },
        {
          "text": "Leave your <code>$&#40document&#41.ready&#40function&#40&#41 {</code> to the beginning of your <code>script</code> element.",
          "testString": "assert(code.match(/\\$\\(document\\)\\.ready\\(function\\(\\)\\s?\\{/g), 'Leave your <code>$&#40document&#41.ready&#40function&#40&#41 {</code> to the beginning of your <code>script</code> element.');"
        },
        {
          "text": "Leave your \"document ready function\" closing <code>&#125;&#41;</code> intact.",
          "testString": "assert(code.match(/.*\\s*\\}\\);/g), 'Leave your \"document ready function\" closing <code>&#125;&#41;</code> intact.');"
        },
        {
          "text": "Leave your <code>script</code> element closing tag intact.",
          "testString": "assert(code.match(/<\\/script>/g) && code.match(/<script/g) && code.match(/<\\/script>/g).length === code.match(/<script/g).length, 'Leave your <code>script</code> element closing tag intact.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Lösche deine jQuery Funktionen",
          "description": [
            "Anfangs waren diese Animationen noch cool, jetzt sind sie aber ein wenig störend.",
            "Lösche alle drei jQuery Funktionen deiner <code>Document Ready Funktion</code>, aber lasse die <code>Document Ready Funktion</code> selbst intakt."
          ]
        },
        "es": {
          "title": "Elimina tus funciones jQuery",
          "description": [
            "Estas animaciones eran divertidas al principio, pero ahora se están volviendo una distracción.",
            "Elimina esas tres funciones jQuery de tu <code>función de documento listo</code>, pero deja intacta la declaración de la <code>función de documento listo</code>."
          ]
        },
        "fr": {
          "title": "Effacer vos fonctions jQuery",
          "description": [
            "Ces animations sont sympathiques à première vue, mais maintenant elles deviennent plutôt distrayantes.",
            "Effacez les trois fonctions jQuery de votre <code>document ready function</code>, mais laissez votre <code>document ready function</code> lui-même intact."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "    $(\"button\").addClass(\"animated bounce\");",
            "    $(\".well\").addClass(\"animated shake\");",
            "    $(\"#target3\").addClass(\"animated fadeOut\");",
            "",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aed908626",
      "title": "Target the Same Element with Multiple jQuery Selectors",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "Now you know three ways of targeting elements: by type: <code>$(\"button\")</code>, by class: <code>$(\".btn\")</code>, and by id <code>$(\"#target1\")</code>.",
        "Although it is possible to add multiple classes in a single <code>.addClass()</code> call, let's add them to the same element in <em>three separate ways</em>.",
        "Using <code>.addClass()</code>, add only one class at a time to the same element, three different ways:",
        "Add the <code>animated</code> class to all elements with type <code>button</code>.",
        "Add the <code>shake</code> class to all the buttons with class <code>.btn</code>.",
        "Add the <code>btn-primary</code> class to the button with id <code>#target1</code>.",
        "<strong>Note</strong><br>You should only be targeting one element and adding only one class at a time. Altogether, your three individual selectors will end up adding the three classes <code>shake</code>, <code>animated</code>, and <code>btn-primary</code> to <code>#target1</code>."
      ],
      "tests": [
        {
          "text": "Use the <code>$&#40\"button\"&#41</code> selector.",
          "testString": "assert(code.match(/\\$\\s*?\\(\\s*?(?:'|\")\\s*?button\\s*?(?:'|\")/gi), 'Use the <code>$&#40\"button\"&#41</code> selector.');"
        },
        {
          "text": "Use the <code>$&#40\".btn\"&#41</code> selector.",
          "testString": "assert(code.match(/\\$\\s*?\\(\\s*?(?:'|\")\\s*?\\.btn\\s*?(?:'|\")/gi), 'Use the <code>$&#40\".btn\"&#41</code> selector.');"
        },
        {
          "text": "Use the <code>$&#40\"#target1\"&#41</code> selector.",
          "testString": "assert(code.match(/\\$\\s*?\\(\\s*?(?:'|\")\\s*?#target1\\s*?(?:'|\")/gi), 'Use the <code>$&#40\"#target1\"&#41</code> selector.');"
        },
        {
          "text": "Only add one class with each of your three selectors.",
          "testString": "assert(code.match(/addClass/g) && code.match(/addClass\\s*?\\(\\s*?('|\")\\s*?[\\w-]+\\s*?\\1\\s*?\\)/g).length > 2, 'Only add one class with each of your three selectors.');"
        },
        {
          "text": "Your <code>#target1</code> element should have the classes <code>animated</code>&#130; <code>shake</code> and <code>btn-primary</code>.",
          "testString": "assert($(\"#target1\").hasClass(\"animated\") && $(\"#target1\").hasClass(\"shake\") && $(\"#target1\").hasClass(\"btn-primary\"), 'Your <code>#target1</code> element should have the classes <code>animated</code>&#130; <code>shake</code> and <code>btn-primary</code>.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString": "assert(!code.match(/class.*animated/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Wähle das gleiche Element mit mehreren jQuery Selektoren aus",
          "description": [
            "Bis jetzt kennst du drei verschiedene Wege um Elemente auszuwählen: mit dem Element-Typ: <code>$(\"button\")</code>, mit der Element-Klasse: <code>$(\".btn\")</code>, und der Element-ID: <code>$(\"#target1\")</code>.",
            "Auch wenn es möglich ist, mehrere Klassen in einem einzigen <code>.addClass()</code> Aufruf hinzuzufügen, lass uns jetzt die Klassen in drei verschiedenen Wegen dem Element hinzufügen.",
            "Nutze jeden der oben erwähnten jQuery Selektoren und die <code>addClass()</code> Funktion:",
            "Füge die Klasse <code>animated</code> zu allen Elementen des Typs <code>button</code> hinzu.",
            "Füge die Klasse <code>shake</code> zu allen Buttons mit der Klasse <code>.btn</code> hinzu.",
            "Füge die Klasse <code>btn-primary</code> zu dem Button mit der ID <code>#target1</code> hinzu."
          ]
        },
        "es": {
          "title": "Elige un mismo elemento con múltiples selectores jQuery",
          "description": [
            "Ahora ya sabes tres formas de seleccionar elementos: por tipo <code>$(\"button\")</code>, por clase <code>$(\".btn\")</code>, y por identificación <code>$(\"#target1\")</code>. ",
            "Aunque es posible agregar varias clases en una sola llamada a <code>.addClass()</code>, vamos a añadirlas al mismo elemento de tres maneras diferentes.",
            "Usa cada uno de los selectores jQuery vistos y la función <code>addClass()</code> para:",
            "Agregar la clase <code>animated</code> a todos los elementos con tipo <code>button</code>.",
            "Agregar la clase <code>shake</code> a todos los botones con clase <code>.btn</code>.",
            "Agregar la clase <code>btn-primary</code> al botón con identificación <code>#target1</code>."
          ]
        },
        "fr": {
          "title": "Cibler le même élément avec plusieurs sélecteurs jQuery",
          "description": [
            "À présent, vous connaissez trois façons de cibler les éléments: par type: <code>$(\"button\")</code>, par classe: <code>$(\".btn\")</code>, et par id <code>$(\"#target1\")</code>.",
            "En utilisant <code>.addClass()</code>, ajoutez uniquement une classe à la fois au même élément, de trois façons différentes:",
            "Ajoutez la classe <code>animated</code> à tous les éléments de type <code>button</code>.",
            "Ajoutez la classe <code>shake</code> à tous les boutons qui ont la classe <code>.btn</code>.",
            "Ajoutez la classe <code>btn-primary</code> au bouton qui a l'id <code>#target1</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aed918626",
      "title": "Remove Classes from an Element with jQuery",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "In the same way you can add classes to an element with jQuery's <code>addClass()</code> function, you can remove them with jQuery's <code>removeClass()</code> function.",
        "Here's how you would do this for a specific button:",
        "<code>$(\"#target2\").removeClass(\"btn-default\");</code>",
        "Let's remove the <code>btn-default</code> class from all of our <code>button</code> elements."
      ],
      "tests": [
        {
          "text": "Remove the <code>btn-default</code> class from all of your <code>button</code> elements.",
          "testString": "assert($(\".btn-default\").length === 0, 'Remove the <code>btn-default</code> class from all of your <code>button</code> elements.');"
        },
        {
          "text": "Only use jQuery to remove this class from the element.",
          "testString": "assert(code.match(/btn btn-default/g), 'Only use jQuery to remove this class from the element.');"
        },
        {
          "text": "Only remove the <code>btn-default</code> class.",
          "testString": "assert(code.match(/\\.[\\v\\s]*removeClass[\\s\\v]*\\([\\s\\v]*('|\")\\s*btn-default\\s*('|\")[\\s\\v]*\\)/gm), 'Only remove the <code>btn-default</code> class.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Entferne Klassen von einem Element mit jQuery",
          "description": [
            "Genauso wie du Klassen mit der jQuery Funktion <code>addClass()</code> hinzufügen kannst, kannst du mit der jQuery Funktion <code>removeClass()</code> Klassen entfernen.",
            "So könntest du das bei einem spezifischen Button machen:",
            "<code>$(\"#target2\").removeClass(\"btn-default\");</code>",
            "Lass uns alle <code>btn-default</code> Klassen von unseren <code>Button</code> Elementen entfernen."
          ]
        },
        "es": {
          "title": "Elimina clases de un elemento con jQuery",
          "description": [
            "De la misma manera que puedes agregar clases a un elemento con la función <code>addClass()</code> de jQuery, puedes eliminarlas con la función <code>removeClass()</code>.",
            "He aquí cómo puedes hacerlo para un botón específico:",
            "<code>$(\"#target2\").removeClass(\"btn-default\");</code>",
            "Vamos a quitar la clase <code>btn-default</code> de todos nuestros elementos <code>button</code>."
          ]
        },
        "fr": {
          "title": "Supprimer des classes d'un élément avec jQuery",
          "description": [
            "De la même façon que vous pouvez ajouter des classes à un élément avec la fonction jQuery <code>addClass()</code>, vous pouvez les supprimer avec la fonction jQuery <code>removeClass()</code>.",
            "Voici comment procéder pour un bouton spécifique:",
            "<code>$(\"#target2\").removeClass(\"btn-default\");",
            "Supprimons la classe <code>btn-default</code> de tous nos éléments <code>button</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "    $(\"button\").addClass(\"animated bounce\");",
            "    $(\".well\").addClass(\"animated shake\");",
            "    $(\"#target3\").addClass(\"animated fadeOut\");",
            "",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aed908826",
      "title": "Change the CSS of an Element Using jQuery",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "We can also change the CSS of an HTML element directly with jQuery.",
        "jQuery has a function called <code>.css()</code> that allows you to change the CSS of an element.",
        "Here's how we would change its color to blue:",
        "<code>$(\"#target1\").css(\"color\", \"blue\");</code>",
        "This is slightly different from a normal CSS declaration, because the CSS property and its value are in quotes, and separated with a comma instead of a colon.",
        "Delete your jQuery selectors, leaving an empty <code>document ready function</code>.",
        "Select <code>target1</code> and change its color to red."
      ],
      "tests": [
        {
          "text": "Your <code>target1</code> element should have red text.",
          "testString": "assert($(\"#target1\").css(\"color\") === 'rgb(255, 0, 0)', 'Your <code>target1</code> element should have red text.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString": "assert(!code.match(/class.*animated/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Das CSS eines Elements mit jQuery ändern",
          "description": [
            "Wir können auch das CSS eines HTML-Elements mit jQuery verändern.",
            "jQuery hat die Funktion <code>.css()</code>, welche dir erlaubt, das CSS eines Elements zu ändern.",
            "So können wir die Farbe einer ID zu Blau ändern:",
            "<code>$(\"#target1\").css(\"color\", \"blue\");</code>",
            "Das ist ein wenig anders als eine normale CSS-Deklaration, weil die CSS-Eigenschaft und deren Wert in Anführungszeichen sind und durch ein Komma anstatt eines Doppelpunkts getrennt werden.",
            "Lösche deine jQuery Selektoren, damit eine leere <code>Document Ready Funktion</code> übrig bleibt.",
            "Wähle <code>target1</code> und ändere dessen Farbe zu Rot."
          ]
        },
        "es": {
          "title": "Cambia el CSS de un elemento usando jQuery",
          "description": [
            "También podemos cambiar el CSS de un elemento HTML directamente con jQuery.",
            "jQuery tiene una función llamada <code>.css()</code> que te permite cambiar el CSS de un elemento.",
            "Así es como cambiaríamos su color a azul:",
            "<code>$(\"#target1\").css(\"color\", \"blue\");</code>",
            "Esto es un poco diferente a una declaración normal CSS, porque la propiedad CSS y su valor están entre comillas y separadas por una coma en lugar de dos puntos.",
            "Elimina tus selectores jQuery, dejando en blanco la <code>función de documento listo</code>.",
            "Selecciona <code>target1</code> y cambia su color a rojo."
          ]
        },
        "fr": {
          "title": "Changer le CSS d'un élément en utilisant jQuery",
          "description": [
            "Nous pouvons aussi changer le CSS d'un élément HTML directement avec jQuery.",
            "jQuery dispose d'une fonction appelée <code>.css()</code> qui vous permet de changer le CSS d'un élément.",
            "Voici comment changer sa couleur en bleu:",
            "<code>$(\"#target1\").css(\"color\", \"blue\");",
            "Ceci est légèrement différent d'une expression CSS normale, car la propriété CSS et sa valeur sont entre guillemets, et separées par une virgule au lieu de deux points.",
            "Effacez vos sélecteurs jQuery, laissant votre <code>document ready function</code> vide.",
            "Sélectionnez <code>target1</code> et changez sa couleur en rouge."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "    $(\"button\").addClass(\"animated bounce\");",
            "    $(\".well\").addClass(\"animated shake\");",
            "    $(\"#target3\").addClass(\"animated fadeOut\");",
            "    $(\"button\").removeClass(\"btn-default\");",
            "",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aed808826",
      "title": "Disable an Element Using jQuery",
      "description": [
        "You can also change the non-CSS properties of HTML elements with jQuery. For example, you can disable buttons.",
        "When you disable a button, it will become grayed-out and can no longer be clicked.",
        "jQuery has a function called <code>.prop()</code> that allows you to adjust the properties of elements.",
        "Here's how you would disable all buttons:",
        "<code>$(\"button\").prop(\"disabled\", true);</code>",
        "Disable only the <code>target1</code> button."
      ],
      "tests": [
        {
          "text": "Disable your <code>target1</code> button.",
          "testString": "assert($(\"#target1\") && $(\"#target1\").prop(\"disabled\") && code.match(/[\"']disabled[\"'],( true|true)/g), 'Disable your <code>target1</code> button.');"
        },
        {
          "text": "Do not disable any other buttons.",
          "testString": "assert($(\"#target2\") && !$(\"#target2\").prop(\"disabled\"), 'Do not disable any other buttons.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString": "assert(!code.match(/disabled[^<]*>/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Elemente mit jQuery deaktivieren",
          "description": [
            "Du kannst auch die nicht-CSS Eigenschaften eines HTML-Elements mit jQuery ändern. Zum Beispiel kannst du <code>Buttons</code> deaktivieren.",
            "Wenn du einen <code>Button</code> deaktivierst, wird er grau unterlegt und kann nicht mehr geklickt werden.",
            "jQuery hat eine Funktion namens <code>.prop()</code>, die es dir erlaubt, die Eigenschaften von Elementen anzupassen.",
            "So kannst du alle <code>Buttons</code> deaktivieren:",
            "<code>$(\"button\").prop(\"disabled\", true);</code>",
            "Deaktiviere nur den <code>target1</code> Button."
          ]
        },
        "es": {
          "title": "Desactiva un elemento usando jQuery",
          "description": [
            "También puedes cambiar propiedades que no son CSS de los elementos HTML con jQuery. Por ejemplo, puedes desactivar los botones. ",
            "Al deshabilitar un botón, se volverá gris y no podrá pulsarse.",
            "jQuery tiene una función llamada <code>.prop()</code> que te permite ajustar las propiedades de los elementos.",
            "He aquí cómo puedes desactivar todos los botones:",
            "<code>$(\"button\").prop(\"disabled\", true);</code>",
            "Desactiva sólo el botón <code>target1</code>."
          ]
        },
        "fr": {
          "title": "Changer le texte à l'intérieur d'un élément en utilisant jQuery",
          "description": [
            "En utilisant jQuery, vous pouvez changer le texte entre les balises ouvrante et fermante d'un élément. Vous pouvez même changer les balises HTML.",
            "jQuery dispose d'une fonction appelée <code>.html()</code> qui vous permet d'ajouter des balises HTML et du texte à l'intérieur d'un élément. Tout le contenu de l'élément sera alors remplacé par le contenu que vous indiquerez en utilisant la fonction.",
            "Voici comment vous pourriez ré-écrire et mettre en italique le texte de notre titre:",
            "<code>$(\"h3\").html(\"&#60em&#62jQuery Playground&#60/em&#62\");",
            "jQuery dispose également d'une fonction similaire appelée <code>.text()</code> qui change uniquement le texte sans ajouter de balises. Autrement dit, cette fonction n'évaluera aucune balise HTML que vous lui donnez, mais les traitera comme du texte que vous désirez ajouter à votre élément.",
            "Changez le bouton avec l'id <code>target4</code> en mettant en italique son texte."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "    $(\"#target1\").css(\"color\", \"red\");",
            "",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "564944c91be2204b269d51e3",
      "title": "Change Text Inside an Element Using jQuery",
      "description": [
        "Using jQuery, you can change the text between the start and end tags of an element. You can even change HTML markup.",
        "jQuery has a function called <code>.html()</code> that lets you add HTML tags and text within an element. Any content previously within the element will be completely replaced with the content you provide using this function.",
        "Here's how you would rewrite and emphasize the text of our heading:",
        "<code>$(\"h3\").html(\"&#60;em&#62;jQuery Playground&#60;/em&#62;\");</code>",
        "jQuery also has a similar function called <code>.text()</code> that only alters text without adding tags. In other words, this function will not evaluate any HTML tags passed to it, but will instead treat it as the text you want to replace the existing content with.",
        "Change the button with id <code>target4</code> by emphasizing its text.",
        "Check this <a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/em\" target=\"_blank\">link</a> to know more on the difference between <code>&#60;i&#62;</code> and <code>&#60;em&#62;</code> and their uses.",
        "Note that while the <code>&#60;i&#62;</code> tag has traditionally been used to emphasize text, it has since been coopted for use as a tag for icons. The <code>&#60;em&#62;</code> tag is now widely accepted as the tag for emphasis. Either will work for this challenge."
      ],
      "releasedOn": "November 18, 2015",
      "tests": [
        {
          "text": "Emphasize the text in your <code>target4</code> button by adding HTML tags.",
          "testString": "assert.isTrue((/<em>|<i>\\s*#target4\\s*<\\/em>|<\\/i>/gi).test($(\"#target4\").html()), 'Emphasize the text in your <code>target4</code> button by adding HTML tags.');"
        },
        {
          "text": "Make sure the text is otherwise unchanged.",
          "testString": "assert($(\"#target4\") && $(\"#target4\").text().trim() === '#target4', 'Make sure the text is otherwise unchanged.');"
        },
        {
          "text": "Do not alter any other text.",
          "testString": "assert.isFalse((/<em>|<i>/gi).test($(\"h3\").html()), 'Do not alter any other text.');"
        },
        {
          "text": "Make sure you are using <code>.html()</code> and not <code>.text()</code>.",
          "testString": "assert(code.match(/\\.html\\(/g), 'Make sure you are using <code>.html()</code> and not <code>.text()</code>.');"
        },
        {
          "text": "Make sure to select <code>button id=\"target4\"</code> with jQuery.",
          "testString": "assert(code.match(/\\$\\(\\s*?(\\\"|\\')#target4(\\\"|\\')\\s*?\\)\\.html\\(/), 'Make sure to select <code>button id=\"target4\"</code> with jQuery.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Ändere den Text innerhalb eines Elements mit jQuery",
          "description": [
            "Mit jQuery kannst du den Text zwischen dem Start- und dem End-Tag eines Elements ändern. Du kannst sogar das HTML-Markup ändern.",
            "jQuery hat eine Funktion namens <code>.html()</code>, die dich HTML-Tags und Text innerhalb eines Elements hinzufügen lässt. Jeglicher Content der sich vorher innerhalb des Elements befand, wird mit jenem Content ersetzt, den du durch diese Funktion bereitstellst.",
            "So kannst du den Text unserer Überschrift überschreiben und hervorheben:",
            "<code>$(\"h3\").html(\"&#60;em&#62;jQuery Playground&#60;/em&#62;\");</code>",
            "jQuery hat auch eine weitere ähnliche Funktion namens <code>.text()</code>, welche nur den Text ändert, ohne Tags hinzuzufügen. In anderen Worten: diese Funktion evaluiert keinerlei HTML-Tags, die an sie übergeben werden, sondern behandelt diese als Text, den du mit der Funktion ersetzen willst.",
            "Ändere den Button mit der ID <code>target4</code> indem du seinen Text hervorhebst."
          ]
        },
        "es": {
          "title": "Cambia el texto de un elemento usando jQuery",
          "description": [
            "Con jQuery, puedes cambiar el texto que está entre las etiquetas de apertura y cierre de un elemento.  Incluso puedes cambiar marcado HTML.",
            "jQuery tiene una función llamada <code>.html()</code> que te permite añadir etiquetas HTML y texto dentro de un elemento.  Cualquier contenido que estuviese previamente dentro del elemento será remplazado por completo con el contenido que proveas usando esta función.",
            "He aquí como reescribes y pones en itálicas el texto de nuestro encabezado:",
            "<code>$(\"h3\").html(\"&#60;i&#62;jQuery Playground&#60;/i&#62;\");</code>",
            "jQuery también tiene una función similar llamada <code>.text()</code> que sólo altera el texto sin añadir etiquetas.",
            "Cambia el botón con identificación <code>target4</code> de forma que su texto quede en itálicas."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "    $(\"#target1\").css(\"color\", \"red\");",
            "    ",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aed708826",
      "title": "Remove an Element Using jQuery",
      "description": [
        "Now let's remove an HTML element from your page using jQuery.",
        "jQuery has a function called <code>.remove()</code> that will remove an HTML element entirely",
        "Remove element <code>target4</code> from the page by using the <code>.remove()</code> function."
      ],
      "tests": [
        {
          "text": "Use jQuery to remove your <code>target4</code> element from your page.",
          "testString": "assert($(\"#target4\").length === 0 && code.match(/\\$\\([\"']#target4[\"']\\).remove\\(\\)/g), 'Use jQuery to remove your <code>target4</code> element from your page.');"
        },
        {
          "text": "Only use jQuery to remove this element.",
          "testString": "assert(code.match(/id=\"target4/g) && !code.match(/<!--.*id=\"target4\".*-->/g) && $(\"#right-well\").length > 0, 'Only use jQuery to remove this element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Entferne ein Element mit jQuery",
          "description": [
            "Lass uns jetzt ein HTML-Element mit jQuery von deiner Seite entfernen.",
            "jQuery hat eine Funktion namens <code>.remove()</code>, die ein HTML-Element komplett entfernt.",
            "Entferne das Element <code>target4</code> von der Seite, indem du die <code>.remove()</code> Funktion nutzt."
          ]
        },
        "es": {
          "title": "Elimina un elemento usando jQuery",
          "description": [
            "Ahora quitemos un elemento HTML de tu página usando jQuery.",
            "jQuery tiene una función llamada <code>.remove()</code> que eliminará un elemento HTML por completo",
            "Elimina el elemento con identificación <code>target4</code> de la página utilizando la función <code>.remove()</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "    $(\"#target1\").css(\"color\", \"red\");",
            "    $(\"#target1\").prop(\"disabled\", true);",
            "",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aed608826",
      "title": "Use appendTo to Move Elements with jQuery",
      "description": [
        "Now let's try moving elements from one <code>div</code> to another.",
        "jQuery has a function called <code>appendTo()</code> that allows you to select HTML elements and append them to another element.",
        "For example, if we wanted to move <code>target4</code> from our right well to our left well, we would use:",
        "<code>$(\"#target4\").appendTo(\"#left-well\");</code>",
        "Move your <code>target2</code> element from your <code>left-well</code> to your <code>right-well</code>."
      ],
      "tests": [
        {
          "text": "Your <code>target2</code> element should not be inside your <code>left-well</code>.",
          "testString": "assert($(\"#left-well\").children(\"#target2\").length === 0, 'Your <code>target2</code> element should not be inside your <code>left-well</code>.');"
        },
        {
          "text": "Your <code>target2</code> element should be inside your <code>right-well</code>.",
          "testString": "assert($(\"#right-well\").children(\"#target2\").length > 0, 'Your <code>target2</code> element should be inside your <code>right-well</code>.');"
        },
        {
          "text": "Only use jQuery to move these elements.",
          "testString": "assert(!code.match(/class.*animated/g), 'Only use jQuery to move these elements.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Verwende appendTo um Elemente mit jQuery zu verschieben.",
          "description": [
            "Lass uns jetzt versuchen, ein Element von einem <code>div</code> zum Nächsten zu verschieben.",
            "jQuery hat eine Funktion namens <code>appendTo()</code>, die es dir erlaubt HTML-Elemente auszuwählen und diese zu einem anderen Element anzuhängen.",
            "Wenn wir zum Beispiel <code>target4</code> von <code>right-well</code> zu <code>left-well</code> verschieben wollen, würden wir folgenden Code nutzen:",
            "<code>$(\"#target4\").appendTo(\"#left-well\");</code>",
            "Verschiebe dein <code>target2</code> Element von <code>left-well</code> zu <code>right-well</code>."
          ]
        },
        "es": {
          "title": "Usa appendTo para mover elementos con jQuery",
          "description": [
            "Ahora intentemos mover elementos de un <code>div</code> a otro.",
            "jQuery tiene una función llamada <code>appendTo()</code> que te permite seleccionar elementos HTML y anexarlos a otro elemento.",
            "Por ejemplo, si quisiéramos mover <code>target4</code> de nuestro pozo (<em>well</em>) derecho a nuestro pozo izquierdo, usaríamos:",
            "<code>$(\"#target4\").appendTo(\"#left-well\");</code>",
            "Mueve tu elemento <code>target2</code> de tu <code>left-well</code> a tu <code>right-well</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "    $(\"#target1\").css(\"color\", \"red\");",
            "    $(\"#target1\").prop(\"disabled\", true);",
            "    $(\"#target4\").remove();",
            "",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aed508826",
      "title": "Clone an Element Using jQuery",
      "description": [
        "In addition to moving elements, you can also copy them from one place to another.",
        "jQuery has a function called <code>clone()</code> that makes a copy of an element.",
        "For example, if we wanted to copy <code>target2</code> from our <code>left-well</code> to our <code>right-well</code>, we would use:",
        "<code>$(\"#target2\").clone().appendTo(\"#right-well\");</code>",
        "Did you notice this involves sticking two jQuery functions together? This is called <code>function chaining</code> and it's a convenient way to get things done with jQuery.",
        "Clone your <code>target5</code> element and append it to your <code>left-well</code>."
      ],
      "tests": [
        {
          "text": "Your <code>target5</code> element should be inside your <code>right-well</code>.",
          "testString": "assert($(\"#right-well\").children(\"#target5\").length > 0, 'Your <code>target5</code> element should be inside your <code>right-well</code>.');"
        },
        {
          "text": "A copy of your <code>target5</code> element should also be inside your <code>left-well</code>.",
          "testString": "assert($(\"#left-well\").children(\"#target5\").length > 0, 'A copy of your <code>target5</code> element should also be inside your <code>left-well</code>.');"
        },
        {
          "text": "Only use jQuery to move these elements.",
          "testString": "assert(!code.match(/class.*animated/g), 'Only use jQuery to move these elements.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Ein Element kopieren mit jQuery",
          "description": [
            "Neben der Möglichkeit Elemente zu verschieben, können diese auch von einem Platz zum nächsten kopiert werden.",
            "jQuery hat eine Funktion namens <code>clone()</code>, die eine Kopie eines Elements anfertigt.",
            "Wenn wir zum Beispiel <code>target2</code> von <code>left-well</code> zu <code>right-well</code> kopieren wollen, würden wir folgenden Code nutzen:",
            "<code>$(\"#target2\").clone().appendTo(\"#right-well\");</code>",
            "Ist dir aufgefallen, dass wir dazu zwei jQuery Funktionen miteinander verknüpfen? Das nennt sich <code>function chaining</code> und ist eine praktische Art um mit jQuery zu Lösungen zu kommen.",
            "Kopiere dein <code>target5</code> Element und verschiebe es zu <code>left-well</code>."
          ]
        },
        "es": {
          "title": "Clona un elemento usando jQuery",
          "description": [
            "Además de mover elementos, puedes copiarlos de un sitio a otro.",
            "jQuery tiene una función llamada <code>clone()</code> que hace una copia de un elemento.",
            "Por ejemplo, si quisiéramos copiar <code>target2</code> de nuestro <code>left-well</code> a nuestro <code>right-well</code>, usaríamos:",
            "<code>$(\"#target2\").clone().appendTo(\"#right-well\");</code>",
            "¿Te diste cuenta que esto implica pegar dos funciones jQuery? Esto se conoce como <code>encadenamiento</code> y es una manera conveniente de hacer las cosas con jQuery. ",
            "Clona tu elemento <code>target5</code> y añadelo a tu <code>left-well</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "    $(\"#target1\").css(\"color\", \"red\");",
            "    $(\"#target1\").prop(\"disabled\", true);",
            "    $(\"#target4\").remove();",
            "    $(\"#target2\").appendTo(\"#right-well\");",
            "",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aed308826",
      "title": "Target the Parent of an Element Using jQuery",
      "description": [
        "Every HTML element has a <code>parent</code> element from which it <code>inherits</code> properties.",
        "For example, your <code>jQuery Playground</code> <code>h3</code> element has the parent element of <code>&#60;div class=\"container-fluid\"&#62</code>, which itself has the parent <code>body</code>.",
        "jQuery has a function called <code>parent()</code> that allows you to access the parent of whichever element you've selected.",
        "Here's an example of how you would use the <code>parent()</code> function if you wanted to give the parent element of the <code>left-well</code> element a background color of blue:",
        "<code>$(\"#left-well\").parent().css(\"background-color\", \"blue\")</code>",
        "Give the parent of the <code>#target1</code> element a background-color of red."
      ],
      "tests": [
        {
          "text": "Your <code>left-well</code> element should have a red background.",
          "testString": "assert($(\"#left-well\").css(\"background-color\") === 'red' || $(\"#left-well\").css(\"background-color\") === 'rgb(255, 0, 0)' || $(\"#left-well\").css(\"background-color\").toLowerCase() === '#ff0000' || $(\"#left-well\").css(\"background-color\").toLowerCase() === '#f00', 'Your <code>left-well</code> element should have a red background.');"
        },
        {
          "text": "You should use the <code>&#46;parent&#40;&#41;</code> function to modify this element.",
          "testString": "assert(code.match(/\\.parent\\s*\\(\\s*\\)\\s*\\.css/g), 'You should use the <code>&#46;parent&#40;&#41;</code> function to modify this element.');"
        },
        {
          "text": "The <code>&#46;parent&#40;&#41;</code> method should be called on the <code>&#35;target1</code> element.",
          "testString": "assert(code.match(/\\$\\s*?\\(\\s*?(?:'|\")\\s*?#target1\\s*?(?:'|\")\\s*?\\)\\s*?\\.parent/gi), 'The <code>&#46;parent&#40;&#41;</code> method should be called on the <code>&#35;target1</code> element.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString": "assert(code.match(/<div class=\"well\" id=\"left-well\">/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Wähle das Eltern-Element mit jQuery aus",
          "description": [
            "Jedes HTML-Element hat ein <code>Eltern-Element</code>, von dem es Eigenschaften <code>erbt</code>.",
            "Dein <code>jQuery Playground</code> <code>h3</code> Element hat zum Beispiel das Eltern-Element <code>&#60;div class=\"container-fluid\"&#62</code>, welches das <code>body</code> Element als Eltern-Element hat.",
            "jQuery hat eine Funktion namens <code>parent()</code>, die es dir erlaubt auf die Eltern-Elemente eines von dir ausgewählten Elements zuzugreifen.",
            "Hier ist ein Beispiel, wie du die <code>parent()</code> Funktion nutzen kannst, wenn du dem Eltern-Element des <code>left-well</code> Elements eine blaue Hintergrundfarbe geben willst:",
            "<code>$(\"#left-well\").parent().css(\"background-color\", \"blue\")</code>",
            "Gib dem Eltern-Element des <code>#target1</code> Elements eine rote Hintergrundfarbe."
          ]
        },
        "es": {
          "title": "Elige el padre de un elemento usando jQuery",
          "description": [
            "Cada elemento HTML tiene un elemento <code>padre</code> del cual <code>hereda</code> propiedades.",
            "Por ejemplo, tu elemento <code>h3</code> <code>jQuery Playground</code> tiene el elemento padre <code>&#60;div class=\"container-fluid\"&#62</code>, que a su vez tiene el padre <code>body</code>. ",
            "jQuery tiene una función llamada <code>parent()</code> que te permite acceder al padre de cualquier elemento que haya seleccionado.",
            "He aquí un ejemplo de cómo se utiliza la función <code>parent()</code> si quisieras darle al elemento padre del elemento <code>left-well</code> un color de fondo azul:",
            "<code>$(\"#left-well\").parent().css(\"background-color\", \"blue\")</code>",
            "Dale al padre del elemento <code>#target1</code> un color de fondo (<code>background-color</code>) rojo."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "    $(\"#target1\").css(\"color\", \"red\");",
            "    $(\"#target1\").prop(\"disabled\", true);",
            "    $(\"#target4\").remove();",
            "    $(\"#target2\").appendTo(\"#right-well\");",
            "    $(\"#target5\").clone().appendTo(\"#left-well\");",
            "",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<body>",
            "  <div class=\"container-fluid\">",
            "    <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "    <div class=\"row\">",
            "      <div class=\"col-xs-6\">",
            "        <h4>#left-well</h4>",
            "        <div class=\"well\" id=\"left-well\">",
            "          <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "          <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "          <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "        </div>",
            "      </div>",
            "      <div class=\"col-xs-6\">",
            "        <h4>#right-well</h4>",
            "        <div class=\"well\" id=\"right-well\">",
            "          <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "          <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "          <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "        </div>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aed208826",
      "title": "Target the Children of an Element Using jQuery",
      "description": [
        "When HTML elements are placed one level below another they are called <code>children</code> of that element. For example, the button elements in this challenge with the text \"#target1\", \"#target2\", and \"#target3\" are all <code>children</code> of the <code>&#60;div class=\"well\" id=\"left-well\"&#62;</code> element.",
        "jQuery has a function called <code>children()</code> that allows you to access the children of whichever element you've selected.",
        "Here's an example of how you would use the <code>children()</code> function to give the children of your <code>left-well</code> element the color <code>blue</code>:",
        "<code>$(\"#left-well\").children().css(\"color\", \"blue\")</code>",
        "<hr>",
        "Give all the children of your <code>right-well</code> element the color orange."
      ],
      "tests": [
        {
          "text": "All children of <code>#right-well</code> should have orange text.",
          "testString": "assert($(\"#right-well\").children().css(\"color\") === 'rgb(255, 165, 0)', 'All children of <code>#right-well</code> should have orange text.');"
        },
        {
          "text": "You should use the <code>children&#40&#41</code> function to modify these elements.",
          "testString": "assert(code.match(/\\.children\\(\\)\\.css/g), 'You should use the <code>children&#40&#41</code> function to modify these elements.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString": "assert(code.match(/<div class=\"well\" id=\"right-well\">/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Wähle Kinder-Elemente mit jQuery aus",
          "description": [
            "Viele HTML-Elemente haben <code>Kinder-Elemente</code>, die ihre Eigenschaften von ihren Eltern-Elementen <code>erben</code>.",
            "Zum Beispiel ist jedes HTML-Element ein Kind-Element des <code>body</code> Elements und dein <code>\"jQuery Playground\"</code> <code>h3</code> Element ist ein Kind-Element deines <code>&#60;div class=\"container-fluid\"&#62</code> Elements.",
            "jQuery hat eine Funktion namens <code>children()</code>, die es dir erlaubt, auf die Kinder-Elemente des von dir ausgewählten Elements zuzugreifen.",
            "Hier ist ein Beispiel, wie du die <code>children()</code> Funktion nutzen kannst, wenn du den Kinder-Elementen von <code>left-well</code> die Farbe Blau geben willst:",
            "<code>$(\"#left-well\").children().css(\"color\", \"blue\")</code>",
            "Gib allen Kinder-Elementen von <code>#right-well</code> die Farbe Orange."
          ]
        },
        "es": {
          "title": "Elige los hjos de un elemento usando jQuery",
          "description": [
            "Muchos elementos HTML tienen <code>hijos</code>, los cuales <code>heredan</code> sus propiedades de sus elementos padres",
            "Por ejemplo, cada elemento HTML es un hijo de tu elemento <code>body</code>, y tu elemento <code>h3</code> \"jQuery Playground\" es un hijo de tu elemento <code>&#60;div class=\"container-fluid\"&#62</code>.",
            "jQuery tiene una función llamada <code>children()</code> que te permite acceder a los hijos de cualquier elemento que hayas seleccionado.",
            "He aquí un ejemplo de cómo se utiliza la función <code>children()</code> para darle a los hijos de tu elemento <code>left-well</code> el color azul:",
            "<code>$(\"#left-well\").children().css(\"color\", \"blue\")</code>",
            "Da a todos los hijos de tu elemento <code>right-well</code> el color naranja."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "    $(\"#target1\").css(\"color\", \"red\");",
            "    $(\"#target1\").prop(\"disabled\", true);",
            "    $(\"#target4\").remove();",
            "    $(\"#target2\").appendTo(\"#right-well\");",
            "    $(\"#target5\").clone().appendTo(\"#left-well\");",
            "    $(\"#target1\").parent().css(\"background-color\", \"red\");",
            "",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aed108826",
      "title": "Target a Specific Child of an Element Using jQuery",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "You've seen why id attributes are so convenient for targeting with jQuery selectors. But you won't always have such neat ids to work with.",
        "Fortunately, jQuery has some other tricks for targeting the right elements.",
        "jQuery uses CSS Selectors to target elements. The <code>target:nth-child(n)</code> CSS selector allows you to select all the nth elements with the target class or element type.",
        "Here's how you would give the third element in each well the bounce class:",
        "<code>$(\".target:nth-child(3)\").addClass(\"animated bounce\");</code>",
        "Make the second child in each of your well elements bounce. You must select the elements' children with the <code>target</code> class."
      ],
      "tests": [
        {
          "text": "The second element in your <code>target</code> elements should bounce.",
          "testString": "assert($(\".target:nth-child(2)\").hasClass(\"animated\") && $(\".target:nth-child(2)\").hasClass(\"bounce\"), 'The second element in your <code>target</code> elements should bounce.');"
        },
        {
          "text": "Only two elements should bounce.",
          "testString": "assert($(\".animated.bounce\").length === 2, 'Only two elements should bounce.');"
        },
        {
          "text": "You should use the <code>&#58;nth-child&#40&#41</code> selector to modify these elements.",
          "testString": "assert(code.match(/\\:nth-child\\(/g), 'You should use the <code>&#58;nth-child&#40&#41</code> selector to modify these elements.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString": "assert(code.match(/\\$\\(\".target:nth-child\\(2\\)\"\\)/g) || code.match(/\\$\\('.target:nth-child\\(2\\)'\\)/g) || code.match(/\\$\\(\".target\"\\).filter\\(\":nth-child\\(2\\)\"\\)/g) || code.match(/\\$\\('.target'\\).filter\\(':nth-child\\(2\\)'\\)/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Wähle ein spezifisches Kinder-Element mit jQuery aus",
          "description": [
            "Du hast gesehen, warum ID-Attribute so praktisch sind, um Elemente mit jQuery Selektoren auszuwählen. Leider hast du aber nicht immer so praktische IDs, mit denen du arbeiten kannst.",
            "Zum Glück hat jQuery einige Tricks auf Lager, um die richtigen Elemente auszuwählen.",
            "jQuery nutzt CSS-Selektoren um Elemente auszuwählen. Der <code>target:nth-child(n)</code> CSS-Selektor erlaubt dir das n-te Element aus einer Zielklasse oder Element-Typ zu wählen.",
            "Hier siehst du, wie du dem dritten Kind-Element einer jeden Vertiefung eine <code>bounce</code> Klasse hinzufügen kannst.",
            "<code>$(\".target:nth-child(3)\").addClass(\"animated bounce\");</code>",
            "Lasse das zweite Kind-Element jeder Vertiefung hüpfen. Dazu musst das Kind-Element mit der <code>target</code> Klasse auswählen."
          ]
        },
        "es": {
          "title": "Elige un hijo específico de un elemento usando jQuery",
          "description": [
            "Seguramente habrás entendido porque los atributos id son tan convenientes para elegir con selectores jQuery. Pero no siempre contarás con estos agradables identificadores para trabajar. ",
            "Afortunadamente, jQuery tiene algunos otros trucos para elegir los elementos adecuados.",
            "jQuery usa selectores CSS para elegir elementos, El selector CSS <code>.clase:nth-child(i)</code> te permite seleccionar de los elementos con la clase dada, los que sean los i-ésimos hijos de su elemento padre. En lugar de una clase también puedes usar un elemento",
            "He aquí cómo le asignarás la clase <code>bounce</code> al tercer elemento de cada pozo:",
            "<code>$(\".target:nth-child(3)\").addClass(\"animated bounce\");</code>",
            "Haz que rebote el segundo hijo de cada uno de los elementos de tus pozos. Debes elegir los hijos de elementos con clase <code>target</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "    $(\"#target1\").css(\"color\", \"red\");",
            "    $(\"#target1\").prop(\"disabled\", true);",
            "    $(\"#target4\").remove();",
            "    $(\"#target2\").appendTo(\"#right-well\");",
            "    $(\"#target5\").clone().appendTo(\"#left-well\");",
            "    $(\"#target1\").parent().css(\"background-color\", \"red\");",
            "    $(\"#right-well\").children().css(\"color\", \"orange\");",
            "",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aed008826",
      "title": "Target Even Elements Using jQuery",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "You can also target elements based on their positions using <code>:odd</code> or <code>:even</code> selectors.",
        "Note that jQuery is zero-indexed which means the first element in a selection has a position of 0. This can be a little confusing as, counter-intuitively, <code>:odd</code> selects the second element (position 1), fourth element (position 3), and so on.",
        "Here's how you would target all the odd elements with class <code>target</code> and give them classes:",
        "<code>$(\".target:odd\").addClass(\"animated shake\");</code>",
        "Try selecting all the even <code>target</code> elements and giving them the classes of <code>animated</code> and <code>shake</code>. Remember that <strong>even</strong> refers to the position of elements with a zero-based system in mind."
      ],
      "tests": [
        {
          "text": "All of the <code>target</code> elements that jQuery considers to be even should shake.",
          "testString": "assert($('.target:even').hasClass('animated') && $('.target:even').hasClass('shake'), 'All of the <code>target</code> elements that jQuery considers to be even should shake.');"
        },
        {
          "text": "You should use the <code>&#58;even</code> selector to modify these elements.",
          "testString": "assert(code.match(/\\:even/g), 'You should use the <code>&#58;even</code> selector to modify these elements.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString": "assert(code.match(/\\$\\(\".target:even\"\\)/g) || code.match(/\\$\\('.target:even'\\)/g) || code.match(/\\$\\(\".target\"\\).filter\\(\":even\"\\)/g) || code.match(/\\$\\('.target'\\).filter\\(':even'\\)/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Wähle gerade Zahlen mit jQuery aus",
          "description": [
            "Du kannst auch alle geradzahligen Elemente auswählen.",
            "Hier siehst du, wie du ungeradzahlige Elemente mit der Klasse <code>target</code> auswählen und ihnen folgende Klassen geben kannst:",
            "<code>$(\".target:odd\").addClass(\"animated shake\");</code>",
            "Bedenke, dass jQuery null-indexiert ist; das bedeutet, dass - kontraintuitiverweise - <code>:odd</code> das zweite Element, das vierte Element und so weiter auswählt.",
            "Versuche alle geradzahligen <code>target</code> Elemente auszuwählen und ihnen die Klassen <code>animated</code> und <code>shake</code> hinzuzufügen."
          ]
        },
        "es": {
          "title": "Elige elementos con numeración par usando jQuery",
          "description": [
            "También puedes elegir todos los elementos con numeración par.",
            "He aquí cómo elegirías todos los elementos impares con clase <code>target</code> y como les agregarías unas clases:",
            "<code>$(\".target:odd\").addClass(\"animated shake\");</code>",
            "Intenta seleccionar todos los <code>target</code> elementos de número par y agrégales las clases <code>animated</code> y <code>shake</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "    $(\"#target1\").css(\"color\", \"red\");",
            "    $(\"#target1\").prop(\"disabled\", true);",
            "    $(\"#target4\").remove();",
            "    $(\"#target2\").appendTo(\"#right-well\");",
            "    $(\"#target5\").clone().appendTo(\"#left-well\");",
            "    $(\"#target1\").parent().css(\"background-color\", \"red\");",
            "    $(\"#right-well\").children().css(\"color\", \"orange\");",
            "    $(\"#left-well\").children().css(\"color\", \"green\");",
            "    $(\".target:nth-child(2)\").addClass(\"animated bounce\");",
            "",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aecb08826",
      "title": "Use jQuery to Modify the Entire Page",
      "required": [
        {
          "link": "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "We're done playing with our jQuery playground. Let's tear it down!",
        "jQuery can target the <code>body</code> element as well.",
        "Here's how we would make the entire body fade out: <code> $(\"body\").addClass(\"animated fadeOut\");</code>",
        "But let's do something more dramatic. Add the classes <code>animated</code> and <code>hinge</code> to your <code>body</code> element."
      ],
      "tests": [
        {
          "text": "Add the classes <code>animated</code> and <code>hinge</code> to your <code>body</code> element.",
          "testString": "assert($('body').hasClass('animated') && $('body').hasClass('hinge'), 'Add the classes <code>animated</code> and <code>hinge</code> to your <code>body</code> element.');"
        }
      ],
      "challengeType": 0,
      "translations": {
        "de": {
          "title": "Mit jQuery die gesamte Seite modifizieren",
          "description": [
            "Genug mit unserem jQuery Spielplatz herumgespielt. Reißen wir ihn ein!",
            "jQuery kann auch das <code>body</code> Element auswählen.",
            "Hier siehst du, wie wir den gesamten <code>body</code> Bereich ausblenden können: <code> $(\"body\").addClass(\"animated fadeOut\");</code>",
            "Aber lass uns noch etwas Dramatischeres machen. Füge die Klassen <code>animated</code> und <code>hinge</code> zu deinem <code>body</code> Element hinzu."
          ]
        },
        "es": {
          "title": "Usa jQuery para modificar la página entera",
          "description": [
            "Hemos terminado de jugar en nuestro patio de recreo jQuery. ¡Vamos a derribarlo!",
            "jQuery también puede elegir el elemento <code>body</code>.",
            "Así es como haríamos que el cuerpo entero desapareciera: <code>$(\"body\").addClass('animated fadeOut');</code>",
            "Pero vamos a hacer algo más dramático. Añade las clases <code>animated</code> y <code>hinge</code> a tu elemento <code>body</code>."
          ]
        }
      },
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<script>",
            "  $(document).ready(function() {",
            "    $(\"#target1\").css(\"color\", \"red\");",
            "    $(\"#target1\").prop(\"disabled\", true);",
            "    $(\"#target4\").remove();",
            "    $(\"#target2\").appendTo(\"#right-well\");",
            "    $(\"#target5\").clone().appendTo(\"#left-well\");",
            "    $(\"#target1\").parent().css(\"background-color\", \"red\");",
            "    $(\"#right-well\").children().css(\"color\", \"orange\");",
            "    $(\"#left-well\").children().css(\"color\", \"green\");",
            "    $(\".target:nth-child(2)\").addClass(\"animated bounce\");",
            "    $(\".target:even\").addClass(\"animated shake\");",
            "",
            "  });",
            "</script>",
            "",
            "<!-- Only change code above this line. -->",
            "",
            "<div class=\"container-fluid\">",
            "  <h3 class=\"text-primary text-center\">jQuery Playground</h3>",
            "  <div class=\"row\">",
            "    <div class=\"col-xs-6\">",
            "      <h4>#left-well</h4>",
            "      <div class=\"well\" id=\"left-well\">",
            "        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>",
            "        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>",
            "        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>",
            "      </div>",
            "    </div>",
            "    <div class=\"col-xs-6\">",
            "      <h4>#right-well</h4>",
            "      <div class=\"well\" id=\"right-well\">",
            "        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>",
            "        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>",
            "        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>",
            "      </div>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    }
  ]
}